
ATSAMR34_LORA_P2P_SIMPLE_APP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000131e4  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000131e4  000131e4  000231e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000070  20000000  000131ec  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .lpram        00000000  30000000  30000000  00030070  2**0
                  CONTENTS
  4 .bss          00001200  20000070  00013260  00030070  2**3
                  ALLOC
  5 .stack        00002000  20001270  00014460  00030070  2**0
                  ALLOC
  6 .ARM.attributes 00000028  00000000  00000000  00030070  2**0
                  CONTENTS, READONLY
  7 .comment      0000008c  00000000  00000000  00030098  2**0
                  CONTENTS, READONLY
  8 .debug_info   0006a248  00000000  00000000  00030124  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000acd0  00000000  00000000  0009a36c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001665d  00000000  00000000  000a503c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001378  00000000  00000000  000bb699  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001ca0  00000000  00000000  000bca11  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002c930  00000000  00000000  000be6b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00029696  00000000  00000000  000eafe1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000aea91  00000000  00000000  00114677  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00003d54  00000000  00000000  001c3108  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	70 32 00 20 95 8b 00 00 91 8b 00 00 91 8b 00 00     p2. ............
	...
      2c:	91 8b 00 00 00 00 00 00 00 00 00 00 91 8b 00 00     ................
      3c:	91 8b 00 00 91 8b 00 00 91 8b 00 00 91 04 00 00     ................
      4c:	09 82 00 00 91 8b 00 00 91 8b 00 00 91 8b 00 00     ................
      5c:	91 8b 00 00 5d 81 00 00 6d 81 00 00 7d 81 00 00     ....]...m...}...
      6c:	8d 81 00 00 9d 81 00 00 ad 81 00 00 91 8b 00 00     ................
      7c:	91 8b 00 00 91 8b 00 00 25 75 00 00 35 75 00 00     ........%u..5u..
      8c:	45 75 00 00 55 75 00 00 65 75 00 00 91 8b 00 00     Eu..Uu..eu......
      9c:	91 8b 00 00 91 8b 00 00 91 8b 00 00 5d 82 00 00     ............]...
      ac:	91 8b 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000070 	.word	0x20000070
      d4:	00000000 	.word	0x00000000
      d8:	000131ec 	.word	0x000131ec

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000074 	.word	0x20000074
     108:	000131ec 	.word	0x000131ec
     10c:	000131ec 	.word	0x000131ec
     110:	00000000 	.word	0x00000000

00000114 <aes_get_config_defaults>:
		struct aes_config *const config)
{

	/* Sanity check arguments */
	Assert(config);
	config->encrypt_mode = AES_ENCRYPTION;
     114:	2301      	movs	r3, #1
     116:	7003      	strb	r3, [r0, #0]
	config->key_size = AES_KEY_SIZE_128;
     118:	2300      	movs	r3, #0
     11a:	7043      	strb	r3, [r0, #1]
	config->start_mode = AES_MANUAL_START;
     11c:	7083      	strb	r3, [r0, #2]
	config->opmode= AES_ECB_MODE;
     11e:	70c3      	strb	r3, [r0, #3]
	config->cfb_size = AES_CFB_SIZE_128;
     120:	7103      	strb	r3, [r0, #4]
	config->ctype = AES_COUNTERMEASURE_TYPE_ALL;
     122:	220f      	movs	r2, #15
     124:	7142      	strb	r2, [r0, #5]
	config->enable_xor_key = false;
     126:	7183      	strb	r3, [r0, #6]
	config->enable_key_gen = false;
     128:	71c3      	strb	r3, [r0, #7]
	config->lod = false;
     12a:	7203      	strb	r3, [r0, #8]
}
     12c:	4770      	bx	lr

0000012e <aes_enable>:
 */
void aes_enable(struct aes_module *const module)
{
	Assert(module);
	Assert(module->hw);
	module->hw->CTRLA.reg |= AES_CTRLA_ENABLE;
     12e:	6802      	ldr	r2, [r0, #0]
     130:	6813      	ldr	r3, [r2, #0]
     132:	2102      	movs	r1, #2
     134:	430b      	orrs	r3, r1
     136:	6013      	str	r3, [r2, #0]

}
     138:	4770      	bx	lr

0000013a <aes_disable>:
{
	Assert(module);
	Assert(module->hw);

	/* Disbale interrupt */
	module->hw->INTENCLR.reg = AES_INTENCLR_MASK;
     13a:	2303      	movs	r3, #3
     13c:	6802      	ldr	r2, [r0, #0]
     13e:	7153      	strb	r3, [r2, #5]
	/* Clear interrupt flag */
	module->hw->INTFLAG.reg = AES_INTFLAG_MASK;
     140:	6802      	ldr	r2, [r0, #0]
     142:	71d3      	strb	r3, [r2, #7]

	module->hw->CTRLA.reg &= (~AES_CTRLA_ENABLE);
     144:	6802      	ldr	r2, [r0, #0]
     146:	6813      	ldr	r3, [r2, #0]
     148:	2102      	movs	r1, #2
     14a:	438b      	bics	r3, r1
     14c:	6013      	str	r3, [r2, #0]
}
     14e:	4770      	bx	lr

00000150 <aes_set_config>:
 */
void aes_set_config(
		struct aes_module *const module,
		Aes *const hw,
		struct aes_config *const config)
{
     150:	b570      	push	{r4, r5, r6, lr}
     152:	0004      	movs	r4, r0
     154:	000d      	movs	r5, r1
	/* Validate arguments. */
	Assert(hw);
	Assert(config);
	Assert(module);

	module->opmode = config->opmode;
     156:	78d3      	ldrb	r3, [r2, #3]
     158:	7103      	strb	r3, [r0, #4]
	module->hw = hw;
     15a:	6021      	str	r1, [r4, #0]
	module->key_size = config->key_size;
     15c:	7853      	ldrb	r3, [r2, #1]
     15e:	7143      	strb	r3, [r0, #5]
	module->cfb_size = config->cfb_size;
     160:	7913      	ldrb	r3, [r2, #4]
     162:	7183      	strb	r3, [r0, #6]

	ul_mode |= (config->encrypt_mode << AES_CTRLA_CIPHER_Pos)
     164:	7813      	ldrb	r3, [r2, #0]
     166:	029b      	lsls	r3, r3, #10
			 | (config->start_mode << AES_CTRLA_STARTMODE_Pos)
     168:	7891      	ldrb	r1, [r2, #2]
     16a:	02c9      	lsls	r1, r1, #11
     16c:	430b      	orrs	r3, r1
			 | (config->key_size << AES_CTRLA_KEYSIZE_Pos)
     16e:	7851      	ldrb	r1, [r2, #1]
     170:	0209      	lsls	r1, r1, #8
     172:	430b      	orrs	r3, r1
			 | (config->opmode << AES_CTRLA_AESMODE_Pos)
     174:	78d1      	ldrb	r1, [r2, #3]
     176:	0089      	lsls	r1, r1, #2
     178:	430b      	orrs	r3, r1
			 | (config->cfb_size << AES_CTRLA_CFBS_Pos)
     17a:	7911      	ldrb	r1, [r2, #4]
     17c:	0149      	lsls	r1, r1, #5
     17e:	430b      	orrs	r3, r1
			 | (AES_CTRLA_CTYPE(config->ctype))
			 | (config->enable_xor_key << AES_CTRLA_XORKEY_Pos)
     180:	7991      	ldrb	r1, [r2, #6]
     182:	0389      	lsls	r1, r1, #14
			 | (config->enable_key_gen << AES_CTRLA_KEYGEN_Pos)
     184:	79d0      	ldrb	r0, [r2, #7]
     186:	0340      	lsls	r0, r0, #13
			 | (config->lod << AES_CTRLA_LOD_Pos);
     188:	4301      	orrs	r1, r0
     18a:	7a10      	ldrb	r0, [r2, #8]
     18c:	0300      	lsls	r0, r0, #12
     18e:	4301      	orrs	r1, r0
			 | (AES_CTRLA_CTYPE(config->ctype))
     190:	7952      	ldrb	r2, [r2, #5]
     192:	0412      	lsls	r2, r2, #16
     194:	20f0      	movs	r0, #240	; 0xf0
     196:	0300      	lsls	r0, r0, #12
     198:	4002      	ands	r2, r0
			 | (config->lod << AES_CTRLA_LOD_Pos);
     19a:	430a      	orrs	r2, r1
     19c:	4313      	orrs	r3, r2
     19e:	001e      	movs	r6, r3
	if (hw->CTRLA.reg & AES_CTRLA_ENABLE) {
     1a0:	682b      	ldr	r3, [r5, #0]
     1a2:	079b      	lsls	r3, r3, #30
     1a4:	d401      	bmi.n	1aa <aes_set_config+0x5a>
		aes_disable(module);
		hw->CTRLA.reg = ul_mode;
		aes_enable(module);
	} else {
		hw->CTRLA.reg = ul_mode;
     1a6:	602e      	str	r6, [r5, #0]
	}
}
     1a8:	bd70      	pop	{r4, r5, r6, pc}
		aes_disable(module);
     1aa:	0020      	movs	r0, r4
     1ac:	4b03      	ldr	r3, [pc, #12]	; (1bc <aes_set_config+0x6c>)
     1ae:	4798      	blx	r3
		hw->CTRLA.reg = ul_mode;
     1b0:	602e      	str	r6, [r5, #0]
		aes_enable(module);
     1b2:	0020      	movs	r0, r4
     1b4:	4b02      	ldr	r3, [pc, #8]	; (1c0 <aes_set_config+0x70>)
     1b6:	4798      	blx	r3
     1b8:	e7f6      	b.n	1a8 <aes_set_config+0x58>
     1ba:	46c0      	nop			; (mov r8, r8)
     1bc:	0000013b 	.word	0x0000013b
     1c0:	0000012f 	.word	0x0000012f

000001c4 <aes_init>:
{
     1c4:	b570      	push	{r4, r5, r6, lr}
		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
     1c6:	4c05      	ldr	r4, [pc, #20]	; (1dc <aes_init+0x18>)
     1c8:	69e5      	ldr	r5, [r4, #28]
     1ca:	2380      	movs	r3, #128	; 0x80
     1cc:	019b      	lsls	r3, r3, #6
     1ce:	432b      	orrs	r3, r5
     1d0:	61e3      	str	r3, [r4, #28]
	hw->CTRLA.reg = AES_CTRLA_SWRST;
     1d2:	2301      	movs	r3, #1
     1d4:	600b      	str	r3, [r1, #0]
	aes_set_config(module,hw, config);
     1d6:	4b02      	ldr	r3, [pc, #8]	; (1e0 <aes_init+0x1c>)
     1d8:	4798      	blx	r3
}
     1da:	bd70      	pop	{r4, r5, r6, pc}
     1dc:	40000400 	.word	0x40000400
     1e0:	00000151 	.word	0x00000151

000001e4 <aes_write_key>:
 * \note The key size depends on the current AES configuration.
 */
void aes_write_key(
		struct aes_module *const module,
		const uint32_t *key)
{
     1e4:	b570      	push	{r4, r5, r6, lr}
	/* Validate arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(key);

	switch (module->key_size) {
     1e6:	7943      	ldrb	r3, [r0, #5]
     1e8:	2b01      	cmp	r3, #1
     1ea:	d005      	beq.n	1f8 <aes_write_key+0x14>
     1ec:	2b00      	cmp	r3, #0
     1ee:	d010      	beq.n	212 <aes_write_key+0x2e>
     1f0:	2b02      	cmp	r3, #2
     1f2:	d10d      	bne.n	210 <aes_write_key+0x2c>
	case AES_KEY_SIZE_192:
		key_length = 6;
		break;

	case AES_KEY_SIZE_256:
		key_length = 8;
     1f4:	2508      	movs	r5, #8
     1f6:	e000      	b.n	1fa <aes_write_key+0x16>
		key_length = 6;
     1f8:	2506      	movs	r5, #6
{
     1fa:	2300      	movs	r3, #0
	default:
		break;
	}

	for (i = 0; i < key_length; i++) {
		module->hw->KEYWORD[i].reg = *key;
     1fc:	c910      	ldmia	r1!, {r4}
     1fe:	1c9a      	adds	r2, r3, #2
     200:	0092      	lsls	r2, r2, #2
     202:	6806      	ldr	r6, [r0, #0]
     204:	46b4      	mov	ip, r6
     206:	4462      	add	r2, ip
     208:	6054      	str	r4, [r2, #4]
	for (i = 0; i < key_length; i++) {
     20a:	3301      	adds	r3, #1
     20c:	42ab      	cmp	r3, r5
     20e:	d3f5      	bcc.n	1fc <aes_write_key+0x18>
		key++;
	}
}
     210:	bd70      	pop	{r4, r5, r6, pc}
		key_length = 4;
     212:	2504      	movs	r5, #4
     214:	e7f1      	b.n	1fa <aes_write_key+0x16>
	...

00000218 <aes_write_input_data>:
 * \param[in] input_data_buffer Pointer to an input data buffer
 */
void aes_write_input_data(
		struct aes_module *const module,
		const uint32_t *input_data_buffer)
{
     218:	b510      	push	{r4, lr}
	/* Validate arguments. */
	Assert(module);
	Assert(module->hw);;
	Assert(input_data_buffer);

	module->hw->DATABUFPTR.reg = 0;
     21a:	2300      	movs	r3, #0
     21c:	6802      	ldr	r2, [r0, #0]
     21e:	7213      	strb	r3, [r2, #8]
	if (module->opmode == AES_CFB_MODE
		&& module->cfb_size == AES_CFB_SIZE_64){
     220:	4b0f      	ldr	r3, [pc, #60]	; (260 <aes_write_input_data+0x48>)
     222:	6842      	ldr	r2, [r0, #4]
     224:	4013      	ands	r3, r2
	if (module->opmode == AES_CFB_MODE
     226:	4a0f      	ldr	r2, [pc, #60]	; (264 <aes_write_input_data+0x4c>)
     228:	4293      	cmp	r3, r2
     22a:	d00a      	beq.n	242 <aes_write_input_data+0x2a>
		for (i = 0; i < 2; i++) {
			module->hw->INDATA.reg = *input_data_buffer;
			input_data_buffer++;
		}
	} else if (module->opmode == AES_CFB_MODE
     22c:	7903      	ldrb	r3, [r0, #4]
     22e:	2b03      	cmp	r3, #3
     230:	d00e      	beq.n	250 <aes_write_input_data+0x38>
     232:	000c      	movs	r4, r1
     234:	3410      	adds	r4, #16
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
		module->hw->INDATA.reg = *input_data_buffer;
	} else {
		for (i = 0; i < 4; i++) {
			module->hw->INDATA.reg = *input_data_buffer;
     236:	6803      	ldr	r3, [r0, #0]
     238:	c904      	ldmia	r1!, {r2}
     23a:	639a      	str	r2, [r3, #56]	; 0x38
		for (i = 0; i < 4; i++) {
     23c:	428c      	cmp	r4, r1
     23e:	d1fa      	bne.n	236 <aes_write_input_data+0x1e>
			input_data_buffer++;
		}
	}
}
     240:	bd10      	pop	{r4, pc}
			module->hw->INDATA.reg = *input_data_buffer;
     242:	6803      	ldr	r3, [r0, #0]
     244:	680a      	ldr	r2, [r1, #0]
     246:	639a      	str	r2, [r3, #56]	; 0x38
     248:	6803      	ldr	r3, [r0, #0]
     24a:	684a      	ldr	r2, [r1, #4]
     24c:	639a      	str	r2, [r3, #56]	; 0x38
     24e:	e7f7      	b.n	240 <aes_write_input_data+0x28>
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
     250:	7983      	ldrb	r3, [r0, #6]
     252:	3b02      	subs	r3, #2
     254:	2b01      	cmp	r3, #1
     256:	d8ec      	bhi.n	232 <aes_write_input_data+0x1a>
		module->hw->INDATA.reg = *input_data_buffer;
     258:	6803      	ldr	r3, [r0, #0]
     25a:	680a      	ldr	r2, [r1, #0]
     25c:	639a      	str	r2, [r3, #56]	; 0x38
     25e:	e7ef      	b.n	240 <aes_write_input_data+0x28>
     260:	00ff00ff 	.word	0x00ff00ff
     264:	00010003 	.word	0x00010003

00000268 <aes_read_output_data>:
	/* Validate arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(output_data_buffer);

	module->hw->DATABUFPTR.reg = 0;
     268:	2300      	movs	r3, #0
     26a:	6802      	ldr	r2, [r0, #0]
     26c:	7213      	strb	r3, [r2, #8]
	if (module->opmode == AES_CFB_MODE
		&& module->cfb_size == AES_CFB_SIZE_64){
     26e:	4b10      	ldr	r3, [pc, #64]	; (2b0 <aes_read_output_data+0x48>)
     270:	6842      	ldr	r2, [r0, #4]
     272:	4013      	ands	r3, r2
	if (module->opmode == AES_CFB_MODE
     274:	4a0f      	ldr	r2, [pc, #60]	; (2b4 <aes_read_output_data+0x4c>)
     276:	4293      	cmp	r3, r2
     278:	d00a      	beq.n	290 <aes_read_output_data+0x28>
		for (i = 0; i < 2; i++) {
			*output_data_buffer = module->hw->INDATA.reg;
			output_data_buffer++;
		}
	} else if (module->opmode == AES_CFB_MODE
     27a:	7903      	ldrb	r3, [r0, #4]
     27c:	2b03      	cmp	r3, #3
     27e:	d00e      	beq.n	29e <aes_read_output_data+0x36>
     280:	000a      	movs	r2, r1
     282:	3210      	adds	r2, #16
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
		*output_data_buffer = module->hw->INDATA.reg;
	} else {
		for (i = 0; i < 4; i++) {
			*output_data_buffer = module->hw->INDATA.reg;
     284:	6803      	ldr	r3, [r0, #0]
     286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
     288:	c108      	stmia	r1!, {r3}
		for (i = 0; i < 4; i++) {
     28a:	428a      	cmp	r2, r1
     28c:	d1fa      	bne.n	284 <aes_read_output_data+0x1c>
			output_data_buffer++;
		}
	}
}
     28e:	4770      	bx	lr
			*output_data_buffer = module->hw->INDATA.reg;
     290:	6803      	ldr	r3, [r0, #0]
     292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
     294:	600b      	str	r3, [r1, #0]
     296:	6803      	ldr	r3, [r0, #0]
     298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
     29a:	604b      	str	r3, [r1, #4]
     29c:	e7f7      	b.n	28e <aes_read_output_data+0x26>
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
     29e:	7983      	ldrb	r3, [r0, #6]
     2a0:	3b02      	subs	r3, #2
     2a2:	2b01      	cmp	r3, #1
     2a4:	d8ec      	bhi.n	280 <aes_read_output_data+0x18>
		*output_data_buffer = module->hw->INDATA.reg;
     2a6:	6803      	ldr	r3, [r0, #0]
     2a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
     2aa:	600b      	str	r3, [r1, #0]
     2ac:	e7ef      	b.n	28e <aes_read_output_data+0x26>
     2ae:	46c0      	nop			; (mov r8, r8)
     2b0:	00ff00ff 	.word	0x00ff00ff
     2b4:	00010003 	.word	0x00010003

000002b8 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_ENABLE;
     2b8:	4a06      	ldr	r2, [pc, #24]	; (2d4 <_extint_enable+0x1c>)
     2ba:	7813      	ldrb	r3, [r2, #0]
     2bc:	2102      	movs	r1, #2
     2be:	430b      	orrs	r3, r1
     2c0:	7013      	strb	r3, [r2, #0]
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     2c2:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     2c4:	6853      	ldr	r3, [r2, #4]
     2c6:	4219      	tst	r1, r3
     2c8:	d1fc      	bne.n	2c4 <_extint_enable+0xc>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     2ca:	6853      	ldr	r3, [r2, #4]
     2cc:	4218      	tst	r0, r3
     2ce:	d1f9      	bne.n	2c4 <_extint_enable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     2d0:	4770      	bx	lr
     2d2:	46c0      	nop			; (mov r8, r8)
     2d4:	40002400 	.word	0x40002400

000002d8 <_extint_disable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Disable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
     2d8:	4a06      	ldr	r2, [pc, #24]	; (2f4 <_extint_disable+0x1c>)
     2da:	7813      	ldrb	r3, [r2, #0]
     2dc:	2102      	movs	r1, #2
     2de:	438b      	bics	r3, r1
     2e0:	7013      	strb	r3, [r2, #0]
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     2e2:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     2e4:	6853      	ldr	r3, [r2, #4]
     2e6:	4219      	tst	r1, r3
     2e8:	d1fc      	bne.n	2e4 <_extint_disable+0xc>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     2ea:	6853      	ldr	r3, [r2, #4]
     2ec:	4218      	tst	r0, r3
     2ee:	d1f9      	bne.n	2e4 <_extint_disable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     2f0:	4770      	bx	lr
     2f2:	46c0      	nop			; (mov r8, r8)
     2f4:	40002400 	.word	0x40002400

000002f8 <_system_extint_init>:
{
     2f8:	b500      	push	{lr}
     2fa:	b083      	sub	sp, #12
			MCLK->APBAMASK.reg |= mask;
     2fc:	4a17      	ldr	r2, [pc, #92]	; (35c <_system_extint_init+0x64>)
     2fe:	6951      	ldr	r1, [r2, #20]
     300:	2380      	movs	r3, #128	; 0x80
     302:	009b      	lsls	r3, r3, #2
     304:	430b      	orrs	r3, r1
     306:	6153      	str	r3, [r2, #20]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     308:	a901      	add	r1, sp, #4
     30a:	2300      	movs	r3, #0
     30c:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     30e:	2003      	movs	r0, #3
     310:	4b13      	ldr	r3, [pc, #76]	; (360 <_system_extint_init+0x68>)
     312:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
     314:	2003      	movs	r0, #3
     316:	4b13      	ldr	r3, [pc, #76]	; (364 <_system_extint_init+0x6c>)
     318:	4798      	blx	r3
		eics[i]->CTRLA.reg |= EIC_CTRLA_SWRST;
     31a:	4a13      	ldr	r2, [pc, #76]	; (368 <_system_extint_init+0x70>)
     31c:	7813      	ldrb	r3, [r2, #0]
     31e:	2101      	movs	r1, #1
     320:	430b      	orrs	r3, r1
     322:	7013      	strb	r3, [r2, #0]
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     324:	3101      	adds	r1, #1
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     326:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     328:	6853      	ldr	r3, [r2, #4]
     32a:	4219      	tst	r1, r3
     32c:	d1fc      	bne.n	328 <_system_extint_init+0x30>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     32e:	6853      	ldr	r3, [r2, #4]
     330:	4218      	tst	r0, r3
     332:	d1f9      	bne.n	328 <_system_extint_init+0x30>
		eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_GCLK;
     334:	4a0c      	ldr	r2, [pc, #48]	; (368 <_system_extint_init+0x70>)
     336:	7813      	ldrb	r3, [r2, #0]
     338:	2110      	movs	r1, #16
     33a:	438b      	bics	r3, r1
     33c:	7013      	strb	r3, [r2, #0]
     33e:	4b0b      	ldr	r3, [pc, #44]	; (36c <_system_extint_init+0x74>)
     340:	0019      	movs	r1, r3
     342:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
     344:	2200      	movs	r2, #0
     346:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     348:	428b      	cmp	r3, r1
     34a:	d1fc      	bne.n	346 <_system_extint_init+0x4e>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     34c:	2208      	movs	r2, #8
     34e:	4b08      	ldr	r3, [pc, #32]	; (370 <_system_extint_init+0x78>)
     350:	601a      	str	r2, [r3, #0]
	_extint_enable();
     352:	4b08      	ldr	r3, [pc, #32]	; (374 <_system_extint_init+0x7c>)
     354:	4798      	blx	r3
}
     356:	b003      	add	sp, #12
     358:	bd00      	pop	{pc}
     35a:	46c0      	nop			; (mov r8, r8)
     35c:	40000400 	.word	0x40000400
     360:	00008a35 	.word	0x00008a35
     364:	000089c5 	.word	0x000089c5
     368:	40002400 	.word	0x40002400
     36c:	200005b0 	.word	0x200005b0
     370:	e000e100 	.word	0xe000e100
     374:	000002b9 	.word	0x000002b9

00000378 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     378:	2300      	movs	r3, #0
     37a:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
     37c:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     37e:	2201      	movs	r2, #1
     380:	7202      	strb	r2, [r0, #8]
	config->filter_input_signal = false;
     382:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     384:	3201      	adds	r2, #1
     386:	72c2      	strb	r2, [r0, #11]
	config->enable_async_edge_detection = false;
     388:	7243      	strb	r3, [r0, #9]
}
     38a:	4770      	bx	lr

0000038c <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     38c:	b5f0      	push	{r4, r5, r6, r7, lr}
     38e:	b083      	sub	sp, #12
     390:	0005      	movs	r5, r0
     392:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(config);
	_extint_disable();
     394:	4b1c      	ldr	r3, [pc, #112]	; (408 <extint_chan_set_config+0x7c>)
     396:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     398:	a901      	add	r1, sp, #4
     39a:	2300      	movs	r3, #0
     39c:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     39e:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));
#endif
	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     3a0:	7923      	ldrb	r3, [r4, #4]
     3a2:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     3a4:	7a23      	ldrb	r3, [r4, #8]
     3a6:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     3a8:	7820      	ldrb	r0, [r4, #0]
     3aa:	4b18      	ldr	r3, [pc, #96]	; (40c <extint_chan_set_config+0x80>)
     3ac:	4798      	blx	r3
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     3ae:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
     3b0:	2d1f      	cmp	r5, #31
     3b2:	d800      	bhi.n	3b6 <extint_chan_set_config+0x2a>
		return eics[eic_index];
     3b4:	4916      	ldr	r1, [pc, #88]	; (410 <extint_chan_set_config+0x84>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     3b6:	2207      	movs	r2, #7
     3b8:	402a      	ands	r2, r5
     3ba:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     3bc:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     3be:	7aa3      	ldrb	r3, [r4, #10]
     3c0:	2b00      	cmp	r3, #0
     3c2:	d001      	beq.n	3c8 <extint_chan_set_config+0x3c>
     3c4:	2308      	movs	r3, #8
     3c6:	431f      	orrs	r7, r3
     3c8:	08eb      	lsrs	r3, r5, #3
     3ca:	009b      	lsls	r3, r3, #2
     3cc:	18cb      	adds	r3, r1, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     3ce:	69d8      	ldr	r0, [r3, #28]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     3d0:	260f      	movs	r6, #15
     3d2:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
     3d4:	43b0      	bics	r0, r6
			(new_config << config_pos);
     3d6:	4097      	lsls	r7, r2
     3d8:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     3da:	4302      	orrs	r2, r0
		= (EIC_module->CONFIG[channel / 8].reg &
     3dc:	61da      	str	r2, [r3, #28]
#if (SAML22) || (SAML21XXXB) || (SAMC20) || (SAMR30) || (SAMR34) || (SAMR35)
	/* Config asynchronous edge detection */
	if (config->enable_async_edge_detection) {
     3de:	7a63      	ldrb	r3, [r4, #9]
     3e0:	2b00      	cmp	r3, #0
     3e2:	d10b      	bne.n	3fc <extint_chan_set_config+0x70>
		EIC_module->ASYNCH.reg |= (1UL << channel);
	} else {
		EIC_module->ASYNCH.reg &= (EIC_ASYNCH_MASK & (~(1UL << channel)));
     3e4:	698a      	ldr	r2, [r1, #24]
     3e6:	2301      	movs	r3, #1
     3e8:	40ab      	lsls	r3, r5
     3ea:	43db      	mvns	r3, r3
     3ec:	041b      	lsls	r3, r3, #16
     3ee:	0c1b      	lsrs	r3, r3, #16
     3f0:	4013      	ands	r3, r2
     3f2:	618b      	str	r3, [r1, #24]
		EIC_module->EIC_ASYNCH.reg |= (1UL << channel);
	} else {
		EIC_module->EIC_ASYNCH.reg &= (EIC_EIC_ASYNCH_MASK & (~(1UL << channel)));
	}
#endif
	_extint_enable();
     3f4:	4b07      	ldr	r3, [pc, #28]	; (414 <extint_chan_set_config+0x88>)
     3f6:	4798      	blx	r3
}
     3f8:	b003      	add	sp, #12
     3fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->ASYNCH.reg |= (1UL << channel);
     3fc:	698a      	ldr	r2, [r1, #24]
     3fe:	2301      	movs	r3, #1
     400:	40ab      	lsls	r3, r5
     402:	4313      	orrs	r3, r2
     404:	618b      	str	r3, [r1, #24]
     406:	e7f5      	b.n	3f4 <extint_chan_set_config+0x68>
     408:	000002d9 	.word	0x000002d9
     40c:	00008b31 	.word	0x00008b31
     410:	40002400 	.word	0x40002400
     414:	000002b9 	.word	0x000002b9

00000418 <rtc_count_is_syncing>:
{
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     418:	6803      	ldr	r3, [r0, #0]

	if (rtc_module->MODE0.SYNCBUSY.reg) {
     41a:	6918      	ldr	r0, [r3, #16]
     41c:	1e43      	subs	r3, r0, #1
     41e:	4198      	sbcs	r0, r3
     420:	b2c0      	uxtb	r0, r0
		return true;
	}

	return false;
}
     422:	4770      	bx	lr

00000424 <rtc_count_get_count>:
 * Returns the current count value.
 *
 * \return The current counter value as a 32-bit unsigned integer.
 */
uint32_t rtc_count_get_count(struct rtc_module *const module)
{
     424:	b570      	push	{r4, r5, r6, lr}
     426:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     428:	6806      	ldr	r6, [r0, #0]

	/* Initialize return value. */
	uint32_t ret_val;

	while (rtc_count_is_syncing(module)) {
     42a:	4d08      	ldr	r5, [pc, #32]	; (44c <rtc_count_get_count+0x28>)
     42c:	0020      	movs	r0, r4
     42e:	47a8      	blx	r5
     430:	2800      	cmp	r0, #0
     432:	d1fb      	bne.n	42c <rtc_count_get_count+0x8>
		/* Wait for synchronization */
	}

	/* Read value based on mode. */
	switch (module->mode) {
     434:	7923      	ldrb	r3, [r4, #4]
     436:	2b00      	cmp	r3, #0
     438:	d004      	beq.n	444 <rtc_count_get_count+0x20>
			break;

		default:
			Assert(false);
			/* Counter not initialized. Assume counter value 0.*/
			ret_val = 0;
     43a:	2000      	movs	r0, #0
	switch (module->mode) {
     43c:	2b01      	cmp	r3, #1
     43e:	d100      	bne.n	442 <rtc_count_get_count+0x1e>
			ret_val = rtc_module->MODE0.COUNT.reg;
     440:	69b0      	ldr	r0, [r6, #24]
			break;
	}

	return ret_val;
}
     442:	bd70      	pop	{r4, r5, r6, pc}
			ret_val = (uint32_t)rtc_module->MODE1.COUNT.reg;
     444:	8b30      	ldrh	r0, [r6, #24]
     446:	b280      	uxth	r0, r0
			break;
     448:	e7fb      	b.n	442 <rtc_count_get_count+0x1e>
     44a:	46c0      	nop			; (mov r8, r8)
     44c:	00000419 	.word	0x00000419

00000450 <rtc_count_disable_callback>:
 * \param[in]     callback_type Callback type to disable
 */
void rtc_count_disable_callback(
		struct rtc_module *const module,
		enum rtc_count_callback callback_type)
{
     450:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     452:	6802      	ldr	r2, [r0, #0]

	/* Disable interrupt */
	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW) {
     454:	290a      	cmp	r1, #10
     456:	d010      	beq.n	47a <rtc_count_disable_callback+0x2a>
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_OVF;
#ifdef FEATURE_RTC_TAMPER_DETECTION
	} else if (callback_type == RTC_COUNT_CALLBACK_TAMPER) {
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_TAMPER;
#endif
	} else if(callback_type >= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_0
     458:	2907      	cmp	r1, #7
     45a:	d911      	bls.n	480 <rtc_count_disable_callback+0x30>
			&& callback_type <= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_7){
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);;
	}else {
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_CMP(1 << (callback_type - RTC_PER_NUM));
     45c:	2380      	movs	r3, #128	; 0x80
     45e:	005b      	lsls	r3, r3, #1
     460:	000c      	movs	r4, r1
     462:	3c08      	subs	r4, #8
     464:	40a3      	lsls	r3, r4
     466:	24c0      	movs	r4, #192	; 0xc0
     468:	00a4      	lsls	r4, r4, #2
     46a:	4023      	ands	r3, r4
     46c:	8113      	strh	r3, [r2, #8]
	}

	/* Mark callback as disabled. */
	module->enabled_callback &= ~(1 << callback_type);
     46e:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
     470:	2201      	movs	r2, #1
     472:	408a      	lsls	r2, r1
     474:	4393      	bics	r3, r2
     476:	86c3      	strh	r3, [r0, #54]	; 0x36
}
     478:	bd10      	pop	{r4, pc}
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_OVF;
     47a:	4b04      	ldr	r3, [pc, #16]	; (48c <rtc_count_disable_callback+0x3c>)
     47c:	8113      	strh	r3, [r2, #8]
     47e:	e7f6      	b.n	46e <rtc_count_disable_callback+0x1e>
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);;
     480:	2401      	movs	r4, #1
     482:	408c      	lsls	r4, r1
     484:	23ff      	movs	r3, #255	; 0xff
     486:	4023      	ands	r3, r4
     488:	8113      	strh	r3, [r2, #8]
     48a:	e7f0      	b.n	46e <rtc_count_disable_callback+0x1e>
     48c:	ffff8000 	.word	0xffff8000

00000490 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
     490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     492:	46de      	mov	lr, fp
     494:	4657      	mov	r7, sl
     496:	464e      	mov	r6, r9
     498:	4645      	mov	r5, r8
     49a:	b5e0      	push	{r5, r6, r7, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
     49c:	4b2b      	ldr	r3, [pc, #172]	; (54c <RTC_Handler+0xbc>)
     49e:	681b      	ldr	r3, [r3, #0]
     4a0:	469a      	mov	sl, r3
	Rtc *const rtc_module = module->hw;
     4a2:	681e      	ldr	r6, [r3, #0]
	uint16_t callback_mask = module->enabled_callback;
     4a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
	callback_mask &= module->registered_callback;
     4a6:	4652      	mov	r2, sl
     4a8:	8e92      	ldrh	r2, [r2, #52]	; 0x34
     4aa:	401a      	ands	r2, r3
     4ac:	4690      	mov	r8, r2
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
     4ae:	89b2      	ldrh	r2, [r6, #12]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
     4b0:	8973      	ldrh	r3, [r6, #10]
     4b2:	4013      	ands	r3, r2
	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
     4b4:	b21a      	sxth	r2, r3
     4b6:	2a00      	cmp	r2, #0
     4b8:	db08      	blt.n	4cc <RTC_Handler+0x3c>
     4ba:	27ff      	movs	r7, #255	; 0xff
     4bc:	401f      	ands	r7, r3
	} else if (interrupt_status & RTC_MODE1_INTFLAG_PER(0xff)) {
     4be:	d02a      	beq.n	516 <RTC_Handler+0x86>
     4c0:	2400      	movs	r4, #0
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
     4c2:	2301      	movs	r3, #1
     4c4:	4699      	mov	r9, r3
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
     4c6:	33fe      	adds	r3, #254	; 0xfe
     4c8:	469b      	mov	fp, r3
     4ca:	e014      	b.n	4f6 <RTC_Handler+0x66>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
     4cc:	4643      	mov	r3, r8
     4ce:	055b      	lsls	r3, r3, #21
     4d0:	d407      	bmi.n	4e2 <RTC_Handler+0x52>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
     4d2:	4b1f      	ldr	r3, [pc, #124]	; (550 <RTC_Handler+0xc0>)
     4d4:	81b3      	strh	r3, [r6, #12]
	_rtc_interrupt_handler(0);
}
     4d6:	bc3c      	pop	{r2, r3, r4, r5}
     4d8:	4690      	mov	r8, r2
     4da:	4699      	mov	r9, r3
     4dc:	46a2      	mov	sl, r4
     4de:	46ab      	mov	fp, r5
     4e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
     4e2:	4653      	mov	r3, sl
     4e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
     4e6:	4798      	blx	r3
     4e8:	e7f3      	b.n	4d2 <RTC_Handler+0x42>
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
     4ea:	465b      	mov	r3, fp
     4ec:	401d      	ands	r5, r3
     4ee:	81b5      	strh	r5, [r6, #12]
     4f0:	3401      	adds	r4, #1
		for ( i = 0;i < RTC_PER_NUM;i++) {
     4f2:	2c08      	cmp	r4, #8
     4f4:	d0ef      	beq.n	4d6 <RTC_Handler+0x46>
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
     4f6:	0023      	movs	r3, r4
     4f8:	464d      	mov	r5, r9
     4fa:	40a5      	lsls	r5, r4
     4fc:	422f      	tst	r7, r5
     4fe:	d0f4      	beq.n	4ea <RTC_Handler+0x5a>
			  && (callback_mask & (1 << i))) {
     500:	4642      	mov	r2, r8
     502:	4122      	asrs	r2, r4
     504:	4649      	mov	r1, r9
     506:	4211      	tst	r1, r2
     508:	d0ef      	beq.n	4ea <RTC_Handler+0x5a>
				module->callbacks[i]();
     50a:	3302      	adds	r3, #2
     50c:	009b      	lsls	r3, r3, #2
     50e:	4652      	mov	r2, sl
     510:	589b      	ldr	r3, [r3, r2]
     512:	4798      	blx	r3
     514:	e7e9      	b.n	4ea <RTC_Handler+0x5a>
	}else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
     516:	05da      	lsls	r2, r3, #23
     518:	d50a      	bpl.n	530 <RTC_Handler+0xa0>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
     51a:	4643      	mov	r3, r8
     51c:	05db      	lsls	r3, r3, #23
     51e:	d403      	bmi.n	528 <RTC_Handler+0x98>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
     520:	2380      	movs	r3, #128	; 0x80
     522:	005b      	lsls	r3, r3, #1
     524:	81b3      	strh	r3, [r6, #12]
     526:	e7d6      	b.n	4d6 <RTC_Handler+0x46>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
     528:	4653      	mov	r3, sl
     52a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     52c:	4798      	blx	r3
     52e:	e7f7      	b.n	520 <RTC_Handler+0x90>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
     530:	059b      	lsls	r3, r3, #22
     532:	d5d0      	bpl.n	4d6 <RTC_Handler+0x46>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
     534:	4643      	mov	r3, r8
     536:	059b      	lsls	r3, r3, #22
     538:	d403      	bmi.n	542 <RTC_Handler+0xb2>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
     53a:	2380      	movs	r3, #128	; 0x80
     53c:	009b      	lsls	r3, r3, #2
     53e:	81b3      	strh	r3, [r6, #12]
}
     540:	e7c9      	b.n	4d6 <RTC_Handler+0x46>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
     542:	4653      	mov	r3, sl
     544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     546:	4798      	blx	r3
     548:	e7f7      	b.n	53a <RTC_Handler+0xaa>
     54a:	46c0      	nop			; (mov r8, r8)
     54c:	200005f0 	.word	0x200005f0
     550:	ffff8000 	.word	0xffff8000

00000554 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     554:	b5f0      	push	{r4, r5, r6, r7, lr}
     556:	46de      	mov	lr, fp
     558:	4657      	mov	r7, sl
     55a:	464e      	mov	r6, r9
     55c:	4645      	mov	r5, r8
     55e:	b5e0      	push	{r5, r6, r7, lr}
     560:	b087      	sub	sp, #28
     562:	4680      	mov	r8, r0
     564:	9104      	str	r1, [sp, #16]
     566:	0016      	movs	r6, r2
     568:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     56a:	2200      	movs	r2, #0
     56c:	2300      	movs	r3, #0
     56e:	2100      	movs	r1, #0
     570:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     572:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     574:	2001      	movs	r0, #1
     576:	0021      	movs	r1, r4
     578:	9600      	str	r6, [sp, #0]
     57a:	9701      	str	r7, [sp, #4]
     57c:	465c      	mov	r4, fp
     57e:	9403      	str	r4, [sp, #12]
     580:	4644      	mov	r4, r8
     582:	9405      	str	r4, [sp, #20]
     584:	e013      	b.n	5ae <long_division+0x5a>
     586:	2420      	movs	r4, #32
     588:	1a64      	subs	r4, r4, r1
     58a:	0005      	movs	r5, r0
     58c:	40e5      	lsrs	r5, r4
     58e:	46a8      	mov	r8, r5
     590:	e014      	b.n	5bc <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     592:	9c00      	ldr	r4, [sp, #0]
     594:	9d01      	ldr	r5, [sp, #4]
     596:	1b12      	subs	r2, r2, r4
     598:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     59a:	465c      	mov	r4, fp
     59c:	464d      	mov	r5, r9
     59e:	432c      	orrs	r4, r5
     5a0:	46a3      	mov	fp, r4
     5a2:	9c03      	ldr	r4, [sp, #12]
     5a4:	4645      	mov	r5, r8
     5a6:	432c      	orrs	r4, r5
     5a8:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     5aa:	3901      	subs	r1, #1
     5ac:	d325      	bcc.n	5fa <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     5ae:	2420      	movs	r4, #32
     5b0:	4264      	negs	r4, r4
     5b2:	190c      	adds	r4, r1, r4
     5b4:	d4e7      	bmi.n	586 <long_division+0x32>
     5b6:	0005      	movs	r5, r0
     5b8:	40a5      	lsls	r5, r4
     5ba:	46a8      	mov	r8, r5
     5bc:	0004      	movs	r4, r0
     5be:	408c      	lsls	r4, r1
     5c0:	46a1      	mov	r9, r4
		r = r << 1;
     5c2:	1892      	adds	r2, r2, r2
     5c4:	415b      	adcs	r3, r3
     5c6:	0014      	movs	r4, r2
     5c8:	001d      	movs	r5, r3
		if (n & bit_shift) {
     5ca:	9e05      	ldr	r6, [sp, #20]
     5cc:	464f      	mov	r7, r9
     5ce:	403e      	ands	r6, r7
     5d0:	46b4      	mov	ip, r6
     5d2:	9e04      	ldr	r6, [sp, #16]
     5d4:	4647      	mov	r7, r8
     5d6:	403e      	ands	r6, r7
     5d8:	46b2      	mov	sl, r6
     5da:	4666      	mov	r6, ip
     5dc:	4657      	mov	r7, sl
     5de:	433e      	orrs	r6, r7
     5e0:	d003      	beq.n	5ea <long_division+0x96>
			r |= 0x01;
     5e2:	0006      	movs	r6, r0
     5e4:	4326      	orrs	r6, r4
     5e6:	0032      	movs	r2, r6
     5e8:	002b      	movs	r3, r5
		if (r >= d) {
     5ea:	9c00      	ldr	r4, [sp, #0]
     5ec:	9d01      	ldr	r5, [sp, #4]
     5ee:	429d      	cmp	r5, r3
     5f0:	d8db      	bhi.n	5aa <long_division+0x56>
     5f2:	d1ce      	bne.n	592 <long_division+0x3e>
     5f4:	4294      	cmp	r4, r2
     5f6:	d8d8      	bhi.n	5aa <long_division+0x56>
     5f8:	e7cb      	b.n	592 <long_division+0x3e>
     5fa:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     5fc:	4658      	mov	r0, fp
     5fe:	0019      	movs	r1, r3
     600:	b007      	add	sp, #28
     602:	bc3c      	pop	{r2, r3, r4, r5}
     604:	4690      	mov	r8, r2
     606:	4699      	mov	r9, r3
     608:	46a2      	mov	sl, r4
     60a:	46ab      	mov	fp, r5
     60c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000060e <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     60e:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     610:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     612:	2340      	movs	r3, #64	; 0x40
     614:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     616:	4281      	cmp	r1, r0
     618:	d202      	bcs.n	620 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     61a:	0018      	movs	r0, r3
     61c:	bd10      	pop	{r4, pc}
		baud_calculated++;
     61e:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     620:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     622:	1c63      	adds	r3, r4, #1
     624:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     626:	4288      	cmp	r0, r1
     628:	d9f9      	bls.n	61e <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     62a:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     62c:	2cff      	cmp	r4, #255	; 0xff
     62e:	d8f4      	bhi.n	61a <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     630:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     632:	2300      	movs	r3, #0
     634:	e7f1      	b.n	61a <_sercom_get_sync_baud_val+0xc>
	...

00000638 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     638:	b5f0      	push	{r4, r5, r6, r7, lr}
     63a:	b083      	sub	sp, #12
     63c:	000f      	movs	r7, r1
     63e:	0016      	movs	r6, r2
     640:	aa08      	add	r2, sp, #32
     642:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     644:	0004      	movs	r4, r0
     646:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     648:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     64a:	42bc      	cmp	r4, r7
     64c:	d902      	bls.n	654 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     64e:	0010      	movs	r0, r2
     650:	b003      	add	sp, #12
     652:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     654:	2b00      	cmp	r3, #0
     656:	d114      	bne.n	682 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     658:	0002      	movs	r2, r0
     65a:	0008      	movs	r0, r1
     65c:	2100      	movs	r1, #0
     65e:	4c19      	ldr	r4, [pc, #100]	; (6c4 <_sercom_get_async_baud_val+0x8c>)
     660:	47a0      	blx	r4
     662:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     664:	003a      	movs	r2, r7
     666:	2300      	movs	r3, #0
     668:	2000      	movs	r0, #0
     66a:	4c17      	ldr	r4, [pc, #92]	; (6c8 <_sercom_get_async_baud_val+0x90>)
     66c:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     66e:	2200      	movs	r2, #0
     670:	2301      	movs	r3, #1
     672:	1a12      	subs	r2, r2, r0
     674:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     676:	0c12      	lsrs	r2, r2, #16
     678:	041b      	lsls	r3, r3, #16
     67a:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     67c:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     67e:	2200      	movs	r2, #0
     680:	e7e5      	b.n	64e <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     682:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     684:	2b01      	cmp	r3, #1
     686:	d1f9      	bne.n	67c <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     688:	000a      	movs	r2, r1
     68a:	2300      	movs	r3, #0
     68c:	2100      	movs	r1, #0
     68e:	4c0d      	ldr	r4, [pc, #52]	; (6c4 <_sercom_get_async_baud_val+0x8c>)
     690:	47a0      	blx	r4
     692:	0002      	movs	r2, r0
     694:	000b      	movs	r3, r1
     696:	9200      	str	r2, [sp, #0]
     698:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     69a:	0038      	movs	r0, r7
     69c:	2100      	movs	r1, #0
     69e:	4c0a      	ldr	r4, [pc, #40]	; (6c8 <_sercom_get_async_baud_val+0x90>)
     6a0:	47a0      	blx	r4
     6a2:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     6a4:	2380      	movs	r3, #128	; 0x80
     6a6:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     6a8:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     6aa:	4298      	cmp	r0, r3
     6ac:	d8cf      	bhi.n	64e <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     6ae:	0f79      	lsrs	r1, r7, #29
     6b0:	00f8      	lsls	r0, r7, #3
     6b2:	9a00      	ldr	r2, [sp, #0]
     6b4:	9b01      	ldr	r3, [sp, #4]
     6b6:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     6b8:	00ea      	lsls	r2, r5, #3
     6ba:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     6bc:	b2d2      	uxtb	r2, r2
     6be:	0352      	lsls	r2, r2, #13
     6c0:	432a      	orrs	r2, r5
     6c2:	e7db      	b.n	67c <_sercom_get_async_baud_val+0x44>
     6c4:	0000f2ad 	.word	0x0000f2ad
     6c8:	00000555 	.word	0x00000555

000006cc <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     6cc:	b510      	push	{r4, lr}
     6ce:	b082      	sub	sp, #8
     6d0:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     6d2:	4b0e      	ldr	r3, [pc, #56]	; (70c <sercom_set_gclk_generator+0x40>)
     6d4:	781b      	ldrb	r3, [r3, #0]
     6d6:	2b00      	cmp	r3, #0
     6d8:	d007      	beq.n	6ea <sercom_set_gclk_generator+0x1e>
     6da:	2900      	cmp	r1, #0
     6dc:	d105      	bne.n	6ea <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     6de:	4b0b      	ldr	r3, [pc, #44]	; (70c <sercom_set_gclk_generator+0x40>)
     6e0:	785b      	ldrb	r3, [r3, #1]
     6e2:	4283      	cmp	r3, r0
     6e4:	d010      	beq.n	708 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     6e6:	201d      	movs	r0, #29
     6e8:	e00c      	b.n	704 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     6ea:	a901      	add	r1, sp, #4
     6ec:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     6ee:	2011      	movs	r0, #17
     6f0:	4b07      	ldr	r3, [pc, #28]	; (710 <sercom_set_gclk_generator+0x44>)
     6f2:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     6f4:	2011      	movs	r0, #17
     6f6:	4b07      	ldr	r3, [pc, #28]	; (714 <sercom_set_gclk_generator+0x48>)
     6f8:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     6fa:	4b04      	ldr	r3, [pc, #16]	; (70c <sercom_set_gclk_generator+0x40>)
     6fc:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     6fe:	2201      	movs	r2, #1
     700:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     702:	2000      	movs	r0, #0
}
     704:	b002      	add	sp, #8
     706:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     708:	2000      	movs	r0, #0
     70a:	e7fb      	b.n	704 <sercom_set_gclk_generator+0x38>
     70c:	2000008c 	.word	0x2000008c
     710:	00008a35 	.word	0x00008a35
     714:	000089c5 	.word	0x000089c5

00000718 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     718:	4b3c      	ldr	r3, [pc, #240]	; (80c <_sercom_get_default_pad+0xf4>)
     71a:	4298      	cmp	r0, r3
     71c:	d032      	beq.n	784 <_sercom_get_default_pad+0x6c>
     71e:	d90a      	bls.n	736 <_sercom_get_default_pad+0x1e>
     720:	4b3b      	ldr	r3, [pc, #236]	; (810 <_sercom_get_default_pad+0xf8>)
     722:	4298      	cmp	r0, r3
     724:	d04e      	beq.n	7c4 <_sercom_get_default_pad+0xac>
     726:	4b3b      	ldr	r3, [pc, #236]	; (814 <_sercom_get_default_pad+0xfc>)
     728:	4298      	cmp	r0, r3
     72a:	d055      	beq.n	7d8 <_sercom_get_default_pad+0xc0>
     72c:	4b3a      	ldr	r3, [pc, #232]	; (818 <_sercom_get_default_pad+0x100>)
     72e:	4298      	cmp	r0, r3
     730:	d038      	beq.n	7a4 <_sercom_get_default_pad+0x8c>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     732:	2000      	movs	r0, #0
}
     734:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     736:	2384      	movs	r3, #132	; 0x84
     738:	05db      	lsls	r3, r3, #23
     73a:	4298      	cmp	r0, r3
     73c:	d00c      	beq.n	758 <_sercom_get_default_pad+0x40>
     73e:	4b37      	ldr	r3, [pc, #220]	; (81c <_sercom_get_default_pad+0x104>)
     740:	4298      	cmp	r0, r3
     742:	d1f6      	bne.n	732 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     744:	2901      	cmp	r1, #1
     746:	d017      	beq.n	778 <_sercom_get_default_pad+0x60>
     748:	2900      	cmp	r1, #0
     74a:	d057      	beq.n	7fc <_sercom_get_default_pad+0xe4>
     74c:	2902      	cmp	r1, #2
     74e:	d015      	beq.n	77c <_sercom_get_default_pad+0x64>
     750:	2903      	cmp	r1, #3
     752:	d015      	beq.n	780 <_sercom_get_default_pad+0x68>
	return 0;
     754:	2000      	movs	r0, #0
     756:	e7ed      	b.n	734 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     758:	2901      	cmp	r1, #1
     75a:	d007      	beq.n	76c <_sercom_get_default_pad+0x54>
     75c:	2900      	cmp	r1, #0
     75e:	d04b      	beq.n	7f8 <_sercom_get_default_pad+0xe0>
     760:	2902      	cmp	r1, #2
     762:	d005      	beq.n	770 <_sercom_get_default_pad+0x58>
     764:	2903      	cmp	r1, #3
     766:	d005      	beq.n	774 <_sercom_get_default_pad+0x5c>
	return 0;
     768:	2000      	movs	r0, #0
     76a:	e7e3      	b.n	734 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     76c:	482c      	ldr	r0, [pc, #176]	; (820 <_sercom_get_default_pad+0x108>)
     76e:	e7e1      	b.n	734 <_sercom_get_default_pad+0x1c>
     770:	482c      	ldr	r0, [pc, #176]	; (824 <_sercom_get_default_pad+0x10c>)
     772:	e7df      	b.n	734 <_sercom_get_default_pad+0x1c>
     774:	482c      	ldr	r0, [pc, #176]	; (828 <_sercom_get_default_pad+0x110>)
     776:	e7dd      	b.n	734 <_sercom_get_default_pad+0x1c>
     778:	482c      	ldr	r0, [pc, #176]	; (82c <_sercom_get_default_pad+0x114>)
     77a:	e7db      	b.n	734 <_sercom_get_default_pad+0x1c>
     77c:	482c      	ldr	r0, [pc, #176]	; (830 <_sercom_get_default_pad+0x118>)
     77e:	e7d9      	b.n	734 <_sercom_get_default_pad+0x1c>
     780:	482c      	ldr	r0, [pc, #176]	; (834 <_sercom_get_default_pad+0x11c>)
     782:	e7d7      	b.n	734 <_sercom_get_default_pad+0x1c>
     784:	2901      	cmp	r1, #1
     786:	d007      	beq.n	798 <_sercom_get_default_pad+0x80>
     788:	2900      	cmp	r1, #0
     78a:	d039      	beq.n	800 <_sercom_get_default_pad+0xe8>
     78c:	2902      	cmp	r1, #2
     78e:	d005      	beq.n	79c <_sercom_get_default_pad+0x84>
     790:	2903      	cmp	r1, #3
     792:	d005      	beq.n	7a0 <_sercom_get_default_pad+0x88>
	return 0;
     794:	2000      	movs	r0, #0
     796:	e7cd      	b.n	734 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     798:	4827      	ldr	r0, [pc, #156]	; (838 <_sercom_get_default_pad+0x120>)
     79a:	e7cb      	b.n	734 <_sercom_get_default_pad+0x1c>
     79c:	4827      	ldr	r0, [pc, #156]	; (83c <_sercom_get_default_pad+0x124>)
     79e:	e7c9      	b.n	734 <_sercom_get_default_pad+0x1c>
     7a0:	4827      	ldr	r0, [pc, #156]	; (840 <_sercom_get_default_pad+0x128>)
     7a2:	e7c7      	b.n	734 <_sercom_get_default_pad+0x1c>
     7a4:	2901      	cmp	r1, #1
     7a6:	d007      	beq.n	7b8 <_sercom_get_default_pad+0xa0>
     7a8:	2900      	cmp	r1, #0
     7aa:	d02b      	beq.n	804 <_sercom_get_default_pad+0xec>
     7ac:	2902      	cmp	r1, #2
     7ae:	d005      	beq.n	7bc <_sercom_get_default_pad+0xa4>
     7b0:	2903      	cmp	r1, #3
     7b2:	d005      	beq.n	7c0 <_sercom_get_default_pad+0xa8>
	return 0;
     7b4:	2000      	movs	r0, #0
     7b6:	e7bd      	b.n	734 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     7b8:	4822      	ldr	r0, [pc, #136]	; (844 <_sercom_get_default_pad+0x12c>)
     7ba:	e7bb      	b.n	734 <_sercom_get_default_pad+0x1c>
     7bc:	4822      	ldr	r0, [pc, #136]	; (848 <_sercom_get_default_pad+0x130>)
     7be:	e7b9      	b.n	734 <_sercom_get_default_pad+0x1c>
     7c0:	4822      	ldr	r0, [pc, #136]	; (84c <_sercom_get_default_pad+0x134>)
     7c2:	e7b7      	b.n	734 <_sercom_get_default_pad+0x1c>
     7c4:	2902      	cmp	r1, #2
     7c6:	d003      	beq.n	7d0 <_sercom_get_default_pad+0xb8>
     7c8:	2903      	cmp	r1, #3
     7ca:	d003      	beq.n	7d4 <_sercom_get_default_pad+0xbc>
     7cc:	2000      	movs	r0, #0
     7ce:	e7b1      	b.n	734 <_sercom_get_default_pad+0x1c>
     7d0:	481f      	ldr	r0, [pc, #124]	; (850 <_sercom_get_default_pad+0x138>)
     7d2:	e7af      	b.n	734 <_sercom_get_default_pad+0x1c>
     7d4:	481f      	ldr	r0, [pc, #124]	; (854 <_sercom_get_default_pad+0x13c>)
     7d6:	e7ad      	b.n	734 <_sercom_get_default_pad+0x1c>
     7d8:	2901      	cmp	r1, #1
     7da:	d007      	beq.n	7ec <_sercom_get_default_pad+0xd4>
     7dc:	2900      	cmp	r1, #0
     7de:	d013      	beq.n	808 <_sercom_get_default_pad+0xf0>
     7e0:	2902      	cmp	r1, #2
     7e2:	d005      	beq.n	7f0 <_sercom_get_default_pad+0xd8>
     7e4:	2903      	cmp	r1, #3
     7e6:	d005      	beq.n	7f4 <_sercom_get_default_pad+0xdc>
	return 0;
     7e8:	2000      	movs	r0, #0
     7ea:	e7a3      	b.n	734 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     7ec:	481a      	ldr	r0, [pc, #104]	; (858 <_sercom_get_default_pad+0x140>)
     7ee:	e7a1      	b.n	734 <_sercom_get_default_pad+0x1c>
     7f0:	481a      	ldr	r0, [pc, #104]	; (85c <_sercom_get_default_pad+0x144>)
     7f2:	e79f      	b.n	734 <_sercom_get_default_pad+0x1c>
     7f4:	481a      	ldr	r0, [pc, #104]	; (860 <_sercom_get_default_pad+0x148>)
     7f6:	e79d      	b.n	734 <_sercom_get_default_pad+0x1c>
     7f8:	481a      	ldr	r0, [pc, #104]	; (864 <_sercom_get_default_pad+0x14c>)
     7fa:	e79b      	b.n	734 <_sercom_get_default_pad+0x1c>
     7fc:	2003      	movs	r0, #3
     7fe:	e799      	b.n	734 <_sercom_get_default_pad+0x1c>
     800:	4819      	ldr	r0, [pc, #100]	; (868 <_sercom_get_default_pad+0x150>)
     802:	e797      	b.n	734 <_sercom_get_default_pad+0x1c>
     804:	4819      	ldr	r0, [pc, #100]	; (86c <_sercom_get_default_pad+0x154>)
     806:	e795      	b.n	734 <_sercom_get_default_pad+0x1c>
     808:	4819      	ldr	r0, [pc, #100]	; (870 <_sercom_get_default_pad+0x158>)
     80a:	e793      	b.n	734 <_sercom_get_default_pad+0x1c>
     80c:	42000800 	.word	0x42000800
     810:	42001000 	.word	0x42001000
     814:	43000400 	.word	0x43000400
     818:	42000c00 	.word	0x42000c00
     81c:	42000400 	.word	0x42000400
     820:	00050003 	.word	0x00050003
     824:	00060003 	.word	0x00060003
     828:	00070003 	.word	0x00070003
     82c:	00010003 	.word	0x00010003
     830:	001e0003 	.word	0x001e0003
     834:	001f0003 	.word	0x001f0003
     838:	00090003 	.word	0x00090003
     83c:	000a0003 	.word	0x000a0003
     840:	000b0003 	.word	0x000b0003
     844:	00110003 	.word	0x00110003
     848:	00120003 	.word	0x00120003
     84c:	00130003 	.word	0x00130003
     850:	000e0003 	.word	0x000e0003
     854:	000f0003 	.word	0x000f0003
     858:	00170003 	.word	0x00170003
     85c:	00180003 	.word	0x00180003
     860:	00190003 	.word	0x00190003
     864:	00040003 	.word	0x00040003
     868:	00080003 	.word	0x00080003
     86c:	00100003 	.word	0x00100003
     870:	00160003 	.word	0x00160003

00000874 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     874:	b530      	push	{r4, r5, lr}
     876:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     878:	4b0b      	ldr	r3, [pc, #44]	; (8a8 <_sercom_get_sercom_inst_index+0x34>)
     87a:	466a      	mov	r2, sp
     87c:	cb32      	ldmia	r3!, {r1, r4, r5}
     87e:	c232      	stmia	r2!, {r1, r4, r5}
     880:	cb32      	ldmia	r3!, {r1, r4, r5}
     882:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     884:	9b00      	ldr	r3, [sp, #0]
     886:	4283      	cmp	r3, r0
     888:	d00b      	beq.n	8a2 <_sercom_get_sercom_inst_index+0x2e>
     88a:	2301      	movs	r3, #1
     88c:	009a      	lsls	r2, r3, #2
     88e:	4669      	mov	r1, sp
     890:	5852      	ldr	r2, [r2, r1]
     892:	4282      	cmp	r2, r0
     894:	d006      	beq.n	8a4 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     896:	3301      	adds	r3, #1
     898:	2b06      	cmp	r3, #6
     89a:	d1f7      	bne.n	88c <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     89c:	2000      	movs	r0, #0
}
     89e:	b007      	add	sp, #28
     8a0:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     8a2:	2300      	movs	r3, #0
			return i;
     8a4:	b2d8      	uxtb	r0, r3
     8a6:	e7fa      	b.n	89e <_sercom_get_sercom_inst_index+0x2a>
     8a8:	00012484 	.word	0x00012484

000008ac <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
     8ac:	b530      	push	{r4, r5, lr}
     8ae:	b087      	sub	sp, #28
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
     8b0:	a901      	add	r1, sp, #4
     8b2:	4b0c      	ldr	r3, [pc, #48]	; (8e4 <_tc_get_inst_index+0x38>)
     8b4:	000a      	movs	r2, r1
     8b6:	cb32      	ldmia	r3!, {r1, r4, r5}
     8b8:	c232      	stmia	r2!, {r1, r4, r5}
     8ba:	cb12      	ldmia	r3!, {r1, r4}
     8bc:	c212      	stmia	r2!, {r1, r4}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
     8be:	9b01      	ldr	r3, [sp, #4]
     8c0:	4298      	cmp	r0, r3
     8c2:	d00b      	beq.n	8dc <_tc_get_inst_index+0x30>
     8c4:	2301      	movs	r3, #1
     8c6:	a901      	add	r1, sp, #4
     8c8:	009a      	lsls	r2, r3, #2
     8ca:	5852      	ldr	r2, [r2, r1]
     8cc:	4282      	cmp	r2, r0
     8ce:	d006      	beq.n	8de <_tc_get_inst_index+0x32>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
     8d0:	3301      	adds	r3, #1
     8d2:	2b05      	cmp	r3, #5
     8d4:	d1f8      	bne.n	8c8 <_tc_get_inst_index+0x1c>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     8d6:	2000      	movs	r0, #0
}
     8d8:	b007      	add	sp, #28
     8da:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
     8dc:	2300      	movs	r3, #0
			return i;
     8de:	b2d8      	uxtb	r0, r3
     8e0:	e7fa      	b.n	8d8 <_tc_get_inst_index+0x2c>
     8e2:	46c0      	nop			; (mov r8, r8)
     8e4:	000124c4 	.word	0x000124c4

000008e8 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
     8e8:	b5f0      	push	{r4, r5, r6, r7, lr}
     8ea:	46c6      	mov	lr, r8
     8ec:	b500      	push	{lr}
     8ee:	b08e      	sub	sp, #56	; 0x38
     8f0:	0004      	movs	r4, r0
     8f2:	000d      	movs	r5, r1
     8f4:	0016      	movs	r6, r2
	uint32_t ctrla_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
     8f6:	0008      	movs	r0, r1
     8f8:	4bae      	ldr	r3, [pc, #696]	; (bb4 <tc_init+0x2cc>)
     8fa:	4798      	blx	r3
     8fc:	4680      	mov	r8, r0
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC2,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC3,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC4};
#elif (SAML21J) || (SAMR34J) || (SAMR35J)
	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = {TC0_GCLK_ID, TC1_GCLK_ID, TC2_GCLK_ID, TC3_GCLK_ID, TC4_GCLK_ID};
     8fe:	ab0c      	add	r3, sp, #48	; 0x30
     900:	221b      	movs	r2, #27
     902:	701a      	strb	r2, [r3, #0]
     904:	705a      	strb	r2, [r3, #1]
     906:	3201      	adds	r2, #1
     908:	709a      	strb	r2, [r3, #2]
     90a:	70da      	strb	r2, [r3, #3]
     90c:	3201      	adds	r2, #1
     90e:	711a      	strb	r2, [r3, #4]
	/* Array of MCLK APB mask bit position for different TC instances */
	uint32_t inst_mclk_apbmask[] = {SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC0,
     910:	a902      	add	r1, sp, #8
     912:	4ba9      	ldr	r3, [pc, #676]	; (bb8 <tc_init+0x2d0>)
     914:	3314      	adds	r3, #20
     916:	000a      	movs	r2, r1
     918:	cb83      	ldmia	r3!, {r0, r1, r7}
     91a:	c283      	stmia	r2!, {r0, r1, r7}
     91c:	cb83      	ldmia	r3!, {r0, r1, r7}
     91e:	c283      	stmia	r2!, {r0, r1, r7}
     920:	cb83      	ldmia	r3!, {r0, r1, r7}
     922:	c283      	stmia	r2!, {r0, r1, r7}
     924:	681b      	ldr	r3, [r3, #0]
     926:	6013      	str	r3, [r2, #0]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
     928:	2300      	movs	r3, #0
     92a:	60a3      	str	r3, [r4, #8]
     92c:	60e3      	str	r3, [r4, #12]
     92e:	6123      	str	r3, [r4, #16]
     930:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
     932:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
     934:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
     936:	4643      	mov	r3, r8
     938:	009a      	lsls	r2, r3, #2
     93a:	4ba0      	ldr	r3, [pc, #640]	; (bbc <tc_init+0x2d4>)
     93c:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
     93e:	6025      	str	r5, [r4, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
     940:	2334      	movs	r3, #52	; 0x34
     942:	5cf3      	ldrb	r3, [r6, r3]
     944:	76a3      	strb	r3, [r4, #26]

	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     946:	78f3      	ldrb	r3, [r6, #3]
     948:	2b08      	cmp	r3, #8
     94a:	d008      	beq.n	95e <tc_init+0x76>
	}

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
     94c:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
     94e:	682b      	ldr	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     950:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
     952:	07db      	lsls	r3, r3, #31
     954:	d508      	bpl.n	968 <tc_init+0x80>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
     956:	b00e      	add	sp, #56	; 0x38
     958:	bc04      	pop	{r2}
     95a:	4690      	mov	r8, r2
     95c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
     95e:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     960:	4642      	mov	r2, r8
     962:	07d2      	lsls	r2, r2, #31
     964:	d4f7      	bmi.n	956 <tc_init+0x6e>
     966:	e7f1      	b.n	94c <tc_init+0x64>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
     968:	7aeb      	ldrb	r3, [r5, #11]
		return STATUS_ERR_DENIED;
     96a:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
     96c:	079b      	lsls	r3, r3, #30
     96e:	d4f2      	bmi.n	956 <tc_init+0x6e>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
     970:	682b      	ldr	r3, [r5, #0]
     972:	079b      	lsls	r3, r3, #30
     974:	d4ef      	bmi.n	956 <tc_init+0x6e>
	if (config->pwm_channel[0].enabled) {
     976:	7c33      	ldrb	r3, [r6, #16]
     978:	2b00      	cmp	r3, #0
     97a:	d112      	bne.n	9a2 <tc_init+0xba>
	if (config->pwm_channel[1].enabled) {
     97c:	7f33      	ldrb	r3, [r6, #28]
     97e:	2b00      	cmp	r3, #0
     980:	d11b      	bne.n	9ba <tc_init+0xd2>
	system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[instance*2],
     982:	4643      	mov	r3, r8
     984:	005a      	lsls	r2, r3, #1
     986:	a902      	add	r1, sp, #8
     988:	1c53      	adds	r3, r2, #1
     98a:	009b      	lsls	r3, r3, #2
     98c:	5858      	ldr	r0, [r3, r1]
     98e:	4643      	mov	r3, r8
     990:	00db      	lsls	r3, r3, #3
     992:	585b      	ldr	r3, [r3, r1]
	switch (bus) {
     994:	b2d9      	uxtb	r1, r3
     996:	2904      	cmp	r1, #4
     998:	d823      	bhi.n	9e2 <tc_init+0xfa>
     99a:	008b      	lsls	r3, r1, #2
     99c:	4988      	ldr	r1, [pc, #544]	; (bc0 <tc_init+0x2d8>)
     99e:	58cb      	ldr	r3, [r1, r3]
     9a0:	469f      	mov	pc, r3
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     9a2:	a901      	add	r1, sp, #4
     9a4:	2301      	movs	r3, #1
     9a6:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
     9a8:	2200      	movs	r2, #0
     9aa:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
     9ac:	7e32      	ldrb	r2, [r6, #24]
     9ae:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     9b0:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
     9b2:	7d30      	ldrb	r0, [r6, #20]
     9b4:	4b83      	ldr	r3, [pc, #524]	; (bc4 <tc_init+0x2dc>)
     9b6:	4798      	blx	r3
     9b8:	e7e0      	b.n	97c <tc_init+0x94>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     9ba:	a901      	add	r1, sp, #4
     9bc:	2301      	movs	r3, #1
     9be:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
     9c0:	2200      	movs	r2, #0
     9c2:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
     9c4:	3224      	adds	r2, #36	; 0x24
     9c6:	18b2      	adds	r2, r6, r2
     9c8:	7812      	ldrb	r2, [r2, #0]
     9ca:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     9cc:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
     9ce:	331f      	adds	r3, #31
     9d0:	18f3      	adds	r3, r6, r3
     9d2:	7818      	ldrb	r0, [r3, #0]
     9d4:	4b7b      	ldr	r3, [pc, #492]	; (bc4 <tc_init+0x2dc>)
     9d6:	4798      	blx	r3
     9d8:	e7d3      	b.n	982 <tc_init+0x9a>
			MCLK->APBAMASK.reg |= mask;
     9da:	497b      	ldr	r1, [pc, #492]	; (bc8 <tc_init+0x2e0>)
     9dc:	694b      	ldr	r3, [r1, #20]
     9de:	4318      	orrs	r0, r3
     9e0:	6148      	str	r0, [r1, #20]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
     9e2:	78f3      	ldrb	r3, [r6, #3]
     9e4:	2b08      	cmp	r3, #8
     9e6:	d100      	bne.n	9ea <tc_init+0x102>
     9e8:	e086      	b.n	af8 <tc_init+0x210>
	gclk_chan_config.source_generator = config->clock_source;
     9ea:	7833      	ldrb	r3, [r6, #0]
     9ec:	466a      	mov	r2, sp
     9ee:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
     9f0:	ab0c      	add	r3, sp, #48	; 0x30
     9f2:	4642      	mov	r2, r8
     9f4:	5c9f      	ldrb	r7, [r3, r2]
     9f6:	4669      	mov	r1, sp
     9f8:	0038      	movs	r0, r7
     9fa:	4b74      	ldr	r3, [pc, #464]	; (bcc <tc_init+0x2e4>)
     9fc:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
     9fe:	0038      	movs	r0, r7
     a00:	4b73      	ldr	r3, [pc, #460]	; (bd0 <tc_init+0x2e8>)
     a02:	4798      	blx	r3
			(uint32_t)config->counter_size |
     a04:	78f3      	ldrb	r3, [r6, #3]
     a06:	79f2      	ldrb	r2, [r6, #7]
     a08:	4313      	orrs	r3, r2
			(uint32_t)config->clock_prescaler;
     a0a:	88b2      	ldrh	r2, [r6, #4]
	ctrla_tmp =
     a0c:	4313      	orrs	r3, r2
		if (config->enable_capture_on_channel[i] == true) {
     a0e:	7a72      	ldrb	r2, [r6, #9]
     a10:	2a00      	cmp	r2, #0
     a12:	d002      	beq.n	a1a <tc_init+0x132>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
     a14:	2280      	movs	r2, #128	; 0x80
     a16:	0252      	lsls	r2, r2, #9
     a18:	4313      	orrs	r3, r2
		if (config->enable_capture_on_channel[i] == true) {
     a1a:	7ab2      	ldrb	r2, [r6, #10]
     a1c:	2a00      	cmp	r2, #0
     a1e:	d002      	beq.n	a26 <tc_init+0x13e>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
     a20:	2280      	movs	r2, #128	; 0x80
     a22:	0292      	lsls	r2, r2, #10
     a24:	4313      	orrs	r3, r2
		if (config->enable_capture_on_IO[i] == true) {
     a26:	7af2      	ldrb	r2, [r6, #11]
     a28:	2a00      	cmp	r2, #0
     a2a:	d002      	beq.n	a32 <tc_init+0x14a>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
     a2c:	2280      	movs	r2, #128	; 0x80
     a2e:	0352      	lsls	r2, r2, #13
     a30:	4313      	orrs	r3, r2
		if (config->enable_capture_on_IO[i] == true) {
     a32:	7b32      	ldrb	r2, [r6, #12]
     a34:	2a00      	cmp	r2, #0
     a36:	d002      	beq.n	a3e <tc_init+0x156>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
     a38:	2280      	movs	r2, #128	; 0x80
     a3a:	0392      	lsls	r2, r2, #14
     a3c:	4313      	orrs	r3, r2
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
     a3e:	7871      	ldrb	r1, [r6, #1]
     a40:	0189      	lsls	r1, r1, #6
				|(config->on_demand << TC_CTRLA_ONDEMAND_Pos);
     a42:	78b2      	ldrb	r2, [r6, #2]
     a44:	01d2      	lsls	r2, r2, #7
     a46:	4311      	orrs	r1, r2
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
     a48:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     a4a:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35)
	return (tc_module->SYNCBUSY.reg);
     a4c:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
     a4e:	2b00      	cmp	r3, #0
     a50:	d1fc      	bne.n	a4c <tc_init+0x164>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
     a52:	6029      	str	r1, [r5, #0]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     a54:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
     a56:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
     a58:	2b00      	cmp	r3, #0
     a5a:	d1fc      	bne.n	a56 <tc_init+0x16e>
	hw->COUNT8.WAVE.reg = config->wave_generation;
     a5c:	79b3      	ldrb	r3, [r6, #6]
     a5e:	732b      	strb	r3, [r5, #12]
	if (config->oneshot) {
     a60:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
     a62:	1e4b      	subs	r3, r1, #1
     a64:	4199      	sbcs	r1, r3
     a66:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
     a68:	7bb3      	ldrb	r3, [r6, #14]
     a6a:	2b00      	cmp	r3, #0
     a6c:	d001      	beq.n	a72 <tc_init+0x18a>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
     a6e:	2301      	movs	r3, #1
     a70:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     a72:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
     a74:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
     a76:	2b00      	cmp	r3, #0
     a78:	d1fc      	bne.n	a74 <tc_init+0x18c>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
     a7a:	33ff      	adds	r3, #255	; 0xff
     a7c:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
     a7e:	2900      	cmp	r1, #0
     a80:	d004      	beq.n	a8c <tc_init+0x1a4>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     a82:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
     a84:	6913      	ldr	r3, [r2, #16]
		while (tc_is_syncing(module_inst)) {
     a86:	2b00      	cmp	r3, #0
     a88:	d1fc      	bne.n	a84 <tc_init+0x19c>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
     a8a:	7169      	strb	r1, [r5, #5]
	hw->COUNT8.DRVCTRL.reg = config->waveform_invert_output;
     a8c:	7a33      	ldrb	r3, [r6, #8]
     a8e:	736b      	strb	r3, [r5, #13]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     a90:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
     a92:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
     a94:	2b00      	cmp	r3, #0
     a96:	d1fc      	bne.n	a92 <tc_init+0x1aa>
	switch (module_inst->counter_size) {
     a98:	7923      	ldrb	r3, [r4, #4]
     a9a:	2b04      	cmp	r3, #4
     a9c:	d059      	beq.n	b52 <tc_init+0x26a>
     a9e:	2b08      	cmp	r3, #8
     aa0:	d074      	beq.n	b8c <tc_init+0x2a4>
	return STATUS_ERR_INVALID_ARG;
     aa2:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
     aa4:	2b00      	cmp	r3, #0
     aa6:	d000      	beq.n	aaa <tc_init+0x1c2>
     aa8:	e755      	b.n	956 <tc_init+0x6e>
     aaa:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
     aac:	2b00      	cmp	r3, #0
     aae:	d1fc      	bne.n	aaa <tc_init+0x1c2>
				= config->counter_16_bit.value;
     ab0:	8d33      	ldrh	r3, [r6, #40]	; 0x28
     ab2:	82ab      	strh	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     ab4:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
     ab6:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
     ab8:	2b00      	cmp	r3, #0
     aba:	d1fc      	bne.n	ab6 <tc_init+0x1ce>
					config->counter_16_bit.compare_capture_channel[0];
     abc:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
     abe:	83ab      	strh	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     ac0:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
     ac2:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
     ac4:	2b00      	cmp	r3, #0
     ac6:	d1fc      	bne.n	ac2 <tc_init+0x1da>
					config->counter_16_bit.compare_capture_channel[1];
     ac8:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
     aca:	83eb      	strh	r3, [r5, #30]
			return STATUS_OK;
     acc:	2000      	movs	r0, #0
     ace:	e742      	b.n	956 <tc_init+0x6e>
			MCLK->APBBMASK.reg |= mask;
     ad0:	493d      	ldr	r1, [pc, #244]	; (bc8 <tc_init+0x2e0>)
     ad2:	698b      	ldr	r3, [r1, #24]
     ad4:	4318      	orrs	r0, r3
     ad6:	6188      	str	r0, [r1, #24]
     ad8:	e783      	b.n	9e2 <tc_init+0xfa>
			MCLK->APBCMASK.reg |= mask;
     ada:	493b      	ldr	r1, [pc, #236]	; (bc8 <tc_init+0x2e0>)
     adc:	69cb      	ldr	r3, [r1, #28]
     ade:	4318      	orrs	r0, r3
     ae0:	61c8      	str	r0, [r1, #28]
     ae2:	e77e      	b.n	9e2 <tc_init+0xfa>
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
     ae4:	4938      	ldr	r1, [pc, #224]	; (bc8 <tc_init+0x2e0>)
     ae6:	6a0b      	ldr	r3, [r1, #32]
     ae8:	4318      	orrs	r0, r3
     aea:	6208      	str	r0, [r1, #32]
     aec:	e779      	b.n	9e2 <tc_init+0xfa>
			break;
		case SYSTEM_CLOCK_APB_APBE:
			MCLK->APBEMASK.reg |= mask;
     aee:	4b36      	ldr	r3, [pc, #216]	; (bc8 <tc_init+0x2e0>)
     af0:	6a59      	ldr	r1, [r3, #36]	; 0x24
     af2:	4308      	orrs	r0, r1
     af4:	6258      	str	r0, [r3, #36]	; 0x24
     af6:	e774      	b.n	9e2 <tc_init+0xfa>
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
     af8:	4643      	mov	r3, r8
     afa:	3301      	adds	r3, #1
     afc:	2b04      	cmp	r3, #4
     afe:	dd00      	ble.n	b02 <tc_init+0x21a>
     b00:	e773      	b.n	9ea <tc_init+0x102>
		system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[(instance+1)*2],
     b02:	ab02      	add	r3, sp, #8
     b04:	1cd1      	adds	r1, r2, #3
     b06:	0089      	lsls	r1, r1, #2
     b08:	58c9      	ldr	r1, [r1, r3]
     b0a:	3202      	adds	r2, #2
     b0c:	0092      	lsls	r2, r2, #2
     b0e:	58d3      	ldr	r3, [r2, r3]
	switch (bus) {
     b10:	b2da      	uxtb	r2, r3
     b12:	2a04      	cmp	r2, #4
     b14:	d900      	bls.n	b18 <tc_init+0x230>
     b16:	e768      	b.n	9ea <tc_init+0x102>
     b18:	0093      	lsls	r3, r2, #2
     b1a:	4a2e      	ldr	r2, [pc, #184]	; (bd4 <tc_init+0x2ec>)
     b1c:	58d3      	ldr	r3, [r2, r3]
     b1e:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
     b20:	4a29      	ldr	r2, [pc, #164]	; (bc8 <tc_init+0x2e0>)
     b22:	6953      	ldr	r3, [r2, #20]
     b24:	4319      	orrs	r1, r3
     b26:	6151      	str	r1, [r2, #20]
     b28:	e75f      	b.n	9ea <tc_init+0x102>
			MCLK->APBBMASK.reg |= mask;
     b2a:	4a27      	ldr	r2, [pc, #156]	; (bc8 <tc_init+0x2e0>)
     b2c:	6993      	ldr	r3, [r2, #24]
     b2e:	4319      	orrs	r1, r3
     b30:	6191      	str	r1, [r2, #24]
     b32:	e75a      	b.n	9ea <tc_init+0x102>
			MCLK->APBCMASK.reg |= mask;
     b34:	4a24      	ldr	r2, [pc, #144]	; (bc8 <tc_init+0x2e0>)
     b36:	69d3      	ldr	r3, [r2, #28]
     b38:	4319      	orrs	r1, r3
     b3a:	61d1      	str	r1, [r2, #28]
     b3c:	e755      	b.n	9ea <tc_init+0x102>
			MCLK->APBDMASK.reg |= mask;
     b3e:	4a22      	ldr	r2, [pc, #136]	; (bc8 <tc_init+0x2e0>)
     b40:	6a13      	ldr	r3, [r2, #32]
     b42:	4319      	orrs	r1, r3
     b44:	6211      	str	r1, [r2, #32]
     b46:	e750      	b.n	9ea <tc_init+0x102>
			MCLK->APBEMASK.reg |= mask;
     b48:	4b1f      	ldr	r3, [pc, #124]	; (bc8 <tc_init+0x2e0>)
     b4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
     b4c:	4311      	orrs	r1, r2
     b4e:	6259      	str	r1, [r3, #36]	; 0x24
     b50:	e74b      	b.n	9ea <tc_init+0x102>
     b52:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
     b54:	2b00      	cmp	r3, #0
     b56:	d1fc      	bne.n	b52 <tc_init+0x26a>
					config->counter_8_bit.value;
     b58:	3328      	adds	r3, #40	; 0x28
     b5a:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
     b5c:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     b5e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
     b60:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
     b62:	2b00      	cmp	r3, #0
     b64:	d1fc      	bne.n	b60 <tc_init+0x278>
					config->counter_8_bit.period;
     b66:	3329      	adds	r3, #41	; 0x29
     b68:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
     b6a:	76eb      	strb	r3, [r5, #27]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     b6c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
     b6e:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
     b70:	2b00      	cmp	r3, #0
     b72:	d1fc      	bne.n	b6e <tc_init+0x286>
					config->counter_8_bit.compare_capture_channel[0];
     b74:	332a      	adds	r3, #42	; 0x2a
     b76:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
     b78:	772b      	strb	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     b7a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
     b7c:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
     b7e:	2b00      	cmp	r3, #0
     b80:	d1fc      	bne.n	b7c <tc_init+0x294>
					config->counter_8_bit.compare_capture_channel[1];
     b82:	332b      	adds	r3, #43	; 0x2b
     b84:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
     b86:	776b      	strb	r3, [r5, #29]
			return STATUS_OK;
     b88:	2000      	movs	r0, #0
     b8a:	e6e4      	b.n	956 <tc_init+0x6e>
     b8c:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
     b8e:	2b00      	cmp	r3, #0
     b90:	d1fc      	bne.n	b8c <tc_init+0x2a4>
				= config->counter_32_bit.value;
     b92:	6ab3      	ldr	r3, [r6, #40]	; 0x28
     b94:	616b      	str	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     b96:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
     b98:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
     b9a:	2b00      	cmp	r3, #0
     b9c:	d1fc      	bne.n	b98 <tc_init+0x2b0>
			hw->COUNT32.CC[0].reg =
     b9e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
     ba0:	61eb      	str	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     ba2:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
     ba4:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
     ba6:	2b00      	cmp	r3, #0
     ba8:	d1fc      	bne.n	ba4 <tc_init+0x2bc>
					config->counter_32_bit.compare_capture_channel[1];
     baa:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
     bac:	622b      	str	r3, [r5, #32]
			return STATUS_OK;
     bae:	2000      	movs	r0, #0
     bb0:	e6d1      	b.n	956 <tc_init+0x6e>
     bb2:	46c0      	nop			; (mov r8, r8)
     bb4:	000008ad 	.word	0x000008ad
     bb8:	000124c4 	.word	0x000124c4
     bbc:	20000d84 	.word	0x20000d84
     bc0:	0001249c 	.word	0x0001249c
     bc4:	00008b31 	.word	0x00008b31
     bc8:	40000400 	.word	0x40000400
     bcc:	00008a35 	.word	0x00008a35
     bd0:	000089c5 	.word	0x000089c5
     bd4:	000124b0 	.word	0x000124b0

00000bd8 <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     bd8:	6802      	ldr	r2, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
     bda:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
     bdc:	2b00      	cmp	r3, #0
     bde:	d1fc      	bne.n	bda <tc_get_count_value+0x2>
		/* Wait for sync */
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
     be0:	7113      	strb	r3, [r2, #4]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     be2:	6801      	ldr	r1, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
     be4:	690b      	ldr	r3, [r1, #16]

	while (tc_is_syncing(module_inst)) {
     be6:	2b00      	cmp	r3, #0
     be8:	d1fc      	bne.n	be4 <tc_get_count_value+0xc>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_READSYNC_Val);
     bea:	3380      	adds	r3, #128	; 0x80
     bec:	7153      	strb	r3, [r2, #5]

	/* Read synchronization */
	tc_sync_read_count(module_inst);
	
	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
     bee:	6802      	ldr	r2, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
     bf0:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
     bf2:	2b00      	cmp	r3, #0
     bf4:	d1fc      	bne.n	bf0 <tc_get_count_value+0x18>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
     bf6:	7903      	ldrb	r3, [r0, #4]
     bf8:	2b04      	cmp	r3, #4
     bfa:	d005      	beq.n	c08 <tc_get_count_value+0x30>
     bfc:	2b08      	cmp	r3, #8
     bfe:	d009      	beq.n	c14 <tc_get_count_value+0x3c>
		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
	}

	Assert(false);
	return 0;
     c00:	2000      	movs	r0, #0
	switch (module_inst->counter_size) {
     c02:	2b00      	cmp	r3, #0
     c04:	d003      	beq.n	c0e <tc_get_count_value+0x36>
}
     c06:	4770      	bx	lr
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
     c08:	7d10      	ldrb	r0, [r2, #20]
     c0a:	b2c0      	uxtb	r0, r0
     c0c:	e7fb      	b.n	c06 <tc_get_count_value+0x2e>
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
     c0e:	8a90      	ldrh	r0, [r2, #20]
     c10:	b280      	uxth	r0, r0
     c12:	e7f8      	b.n	c06 <tc_get_count_value+0x2e>
			return tc_module->COUNT32.COUNT.reg;
     c14:	6950      	ldr	r0, [r2, #20]
     c16:	e7f6      	b.n	c06 <tc_get_count_value+0x2e>

00000c18 <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
     c18:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(compare);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
     c1a:	6804      	ldr	r4, [r0, #0]
     c1c:	6923      	ldr	r3, [r4, #16]

	while (tc_is_syncing(module_inst)) {
     c1e:	2b00      	cmp	r3, #0
     c20:	d1fc      	bne.n	c1c <tc_set_compare_value+0x4>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
     c22:	7903      	ldrb	r3, [r0, #4]
     c24:	2b04      	cmp	r3, #4
     c26:	d006      	beq.n	c36 <tc_set_compare_value+0x1e>
     c28:	2b08      	cmp	r3, #8
     c2a:	d028      	beq.n	c7e <tc_set_compare_value+0x66>
     c2c:	2b00      	cmp	r3, #0
     c2e:	d013      	beq.n	c58 <tc_set_compare_value+0x40>
				}
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
     c30:	2317      	movs	r3, #23
}
     c32:	0018      	movs	r0, r3
     c34:	bd10      	pop	{r4, pc}
	return STATUS_ERR_INVALID_ARG;
     c36:	2317      	movs	r3, #23
			if (channel_index <
     c38:	2901      	cmp	r1, #1
     c3a:	d8fa      	bhi.n	c32 <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
     c3c:	7e83      	ldrb	r3, [r0, #26]
     c3e:	2b00      	cmp	r3, #0
     c40:	d005      	beq.n	c4e <tc_set_compare_value+0x36>
							(uint8_t)compare;
     c42:	b2d2      	uxtb	r2, r2
					tc_module->COUNT8.CCBUF[channel_index].reg =
     c44:	1861      	adds	r1, r4, r1
     c46:	3130      	adds	r1, #48	; 0x30
     c48:	700a      	strb	r2, [r1, #0]
				return STATUS_OK;
     c4a:	2300      	movs	r3, #0
     c4c:	e7f1      	b.n	c32 <tc_set_compare_value+0x1a>
							(uint8_t)compare;
     c4e:	b2d2      	uxtb	r2, r2
					tc_module->COUNT8.CC[channel_index].reg  =
     c50:	1864      	adds	r4, r4, r1
     c52:	7722      	strb	r2, [r4, #28]
				return STATUS_OK;
     c54:	2300      	movs	r3, #0
     c56:	e7ec      	b.n	c32 <tc_set_compare_value+0x1a>
	return STATUS_ERR_INVALID_ARG;
     c58:	2317      	movs	r3, #23
			if (channel_index <
     c5a:	2901      	cmp	r1, #1
     c5c:	d8e9      	bhi.n	c32 <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
     c5e:	7e83      	ldrb	r3, [r0, #26]
     c60:	2b00      	cmp	r3, #0
     c62:	d005      	beq.n	c70 <tc_set_compare_value+0x58>
							(uint16_t)compare;
     c64:	b292      	uxth	r2, r2
					tc_module->COUNT16.CCBUF[channel_index].reg =
     c66:	3118      	adds	r1, #24
     c68:	0049      	lsls	r1, r1, #1
     c6a:	530a      	strh	r2, [r1, r4]
				return STATUS_OK;
     c6c:	2300      	movs	r3, #0
     c6e:	e7e0      	b.n	c32 <tc_set_compare_value+0x1a>
							(uint16_t)compare;
     c70:	b292      	uxth	r2, r2
					tc_module->COUNT16.CC[channel_index].reg =
     c72:	310c      	adds	r1, #12
     c74:	0049      	lsls	r1, r1, #1
     c76:	1864      	adds	r4, r4, r1
     c78:	80a2      	strh	r2, [r4, #4]
				return STATUS_OK;
     c7a:	2300      	movs	r3, #0
     c7c:	e7d9      	b.n	c32 <tc_set_compare_value+0x1a>
	return STATUS_ERR_INVALID_ARG;
     c7e:	2317      	movs	r3, #23
			if (channel_index <
     c80:	2901      	cmp	r1, #1
     c82:	d8d6      	bhi.n	c32 <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
     c84:	7e83      	ldrb	r3, [r0, #26]
     c86:	2b00      	cmp	r3, #0
     c88:	d105      	bne.n	c96 <tc_set_compare_value+0x7e>
					tc_module->COUNT32.CC[channel_index].reg =
     c8a:	3106      	adds	r1, #6
     c8c:	0089      	lsls	r1, r1, #2
     c8e:	1864      	adds	r4, r4, r1
     c90:	6062      	str	r2, [r4, #4]
				return STATUS_OK;
     c92:	2300      	movs	r3, #0
     c94:	e7cd      	b.n	c32 <tc_set_compare_value+0x1a>
					tc_module->COUNT32.CCBUF[channel_index].reg =
     c96:	310c      	adds	r1, #12
     c98:	0089      	lsls	r1, r1, #2
     c9a:	510a      	str	r2, [r1, r4]
				return STATUS_OK;
     c9c:	2300      	movs	r3, #0
     c9e:	e7c8      	b.n	c32 <tc_set_compare_value+0x1a>

00000ca0 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
     ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
     ca2:	46c6      	mov	lr, r8
     ca4:	b500      	push	{lr}
     ca6:	000c      	movs	r4, r1
     ca8:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
     caa:	2800      	cmp	r0, #0
     cac:	d10f      	bne.n	cce <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
     cae:	2a00      	cmp	r2, #0
     cb0:	dd11      	ble.n	cd6 <_read+0x36>
     cb2:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
     cb4:	4e09      	ldr	r6, [pc, #36]	; (cdc <_read+0x3c>)
     cb6:	4d0a      	ldr	r5, [pc, #40]	; (ce0 <_read+0x40>)
     cb8:	6830      	ldr	r0, [r6, #0]
     cba:	0021      	movs	r1, r4
     cbc:	682b      	ldr	r3, [r5, #0]
     cbe:	4798      	blx	r3
		ptr++;
     cc0:	3401      	adds	r4, #1
	for (; len > 0; --len) {
     cc2:	42bc      	cmp	r4, r7
     cc4:	d1f8      	bne.n	cb8 <_read+0x18>
		nChars++;
	}
	return nChars;
}
     cc6:	4640      	mov	r0, r8
     cc8:	bc04      	pop	{r2}
     cca:	4690      	mov	r8, r2
     ccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
     cce:	2301      	movs	r3, #1
     cd0:	425b      	negs	r3, r3
     cd2:	4698      	mov	r8, r3
     cd4:	e7f7      	b.n	cc6 <_read+0x26>
	for (; len > 0; --len) {
     cd6:	4680      	mov	r8, r0
     cd8:	e7f5      	b.n	cc6 <_read+0x26>
     cda:	46c0      	nop			; (mov r8, r8)
     cdc:	200005fc 	.word	0x200005fc
     ce0:	200005f4 	.word	0x200005f4

00000ce4 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
     ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
     ce6:	46c6      	mov	lr, r8
     ce8:	b500      	push	{lr}
     cea:	000e      	movs	r6, r1
     cec:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
     cee:	3801      	subs	r0, #1
     cf0:	2802      	cmp	r0, #2
     cf2:	d810      	bhi.n	d16 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
     cf4:	2a00      	cmp	r2, #0
     cf6:	d011      	beq.n	d1c <_write+0x38>
     cf8:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
     cfa:	4b0c      	ldr	r3, [pc, #48]	; (d2c <_write+0x48>)
     cfc:	4698      	mov	r8, r3
     cfe:	4f0c      	ldr	r7, [pc, #48]	; (d30 <_write+0x4c>)
     d00:	4643      	mov	r3, r8
     d02:	6818      	ldr	r0, [r3, #0]
     d04:	5d31      	ldrb	r1, [r6, r4]
     d06:	683b      	ldr	r3, [r7, #0]
     d08:	4798      	blx	r3
     d0a:	2800      	cmp	r0, #0
     d0c:	db08      	blt.n	d20 <_write+0x3c>
			return -1;
		}
		++nChars;
     d0e:	3401      	adds	r4, #1
	for (; len != 0; --len) {
     d10:	42a5      	cmp	r5, r4
     d12:	d1f5      	bne.n	d00 <_write+0x1c>
     d14:	e006      	b.n	d24 <_write+0x40>
		return -1;
     d16:	2401      	movs	r4, #1
     d18:	4264      	negs	r4, r4
     d1a:	e003      	b.n	d24 <_write+0x40>
	for (; len != 0; --len) {
     d1c:	0014      	movs	r4, r2
     d1e:	e001      	b.n	d24 <_write+0x40>
			return -1;
     d20:	2401      	movs	r4, #1
     d22:	4264      	negs	r4, r4
	}
	return nChars;
}
     d24:	0020      	movs	r0, r4
     d26:	bc04      	pop	{r2}
     d28:	4690      	mov	r8, r2
     d2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d2c:	200005fc 	.word	0x200005fc
     d30:	200005f8 	.word	0x200005f8

00000d34 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
     d34:	b570      	push	{r4, r5, r6, lr}
     d36:	b082      	sub	sp, #8
     d38:	0005      	movs	r5, r0
     d3a:	000e      	movs	r6, r1
	uint16_t temp = 0;
     d3c:	2200      	movs	r2, #0
     d3e:	466b      	mov	r3, sp
     d40:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
     d42:	4c06      	ldr	r4, [pc, #24]	; (d5c <usart_serial_getchar+0x28>)
     d44:	466b      	mov	r3, sp
     d46:	1d99      	adds	r1, r3, #6
     d48:	0028      	movs	r0, r5
     d4a:	47a0      	blx	r4
     d4c:	2800      	cmp	r0, #0
     d4e:	d1f9      	bne.n	d44 <usart_serial_getchar+0x10>

	*c = temp;
     d50:	466b      	mov	r3, sp
     d52:	3306      	adds	r3, #6
     d54:	881b      	ldrh	r3, [r3, #0]
     d56:	7033      	strb	r3, [r6, #0]
}
     d58:	b002      	add	sp, #8
     d5a:	bd70      	pop	{r4, r5, r6, pc}
     d5c:	00007905 	.word	0x00007905

00000d60 <usart_serial_putchar>:
{
     d60:	b570      	push	{r4, r5, r6, lr}
     d62:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
     d64:	b28c      	uxth	r4, r1
     d66:	4e03      	ldr	r6, [pc, #12]	; (d74 <usart_serial_putchar+0x14>)
     d68:	0021      	movs	r1, r4
     d6a:	0028      	movs	r0, r5
     d6c:	47b0      	blx	r6
     d6e:	2800      	cmp	r0, #0
     d70:	d1fa      	bne.n	d68 <usart_serial_putchar+0x8>
}
     d72:	bd70      	pop	{r4, r5, r6, pc}
     d74:	000078d9 	.word	0x000078d9

00000d78 <USART_HOST_ISR_VECT>:
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
     d78:	b510      	push	{r4, lr}
     d7a:	b082      	sub	sp, #8
static inline enum status_code usart_serial_read_packet(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
	return usart_read_buffer_wait(module, rx_data, length);
     d7c:	466b      	mov	r3, sp
     d7e:	1ddc      	adds	r4, r3, #7
     d80:	2201      	movs	r2, #1
     d82:	0021      	movs	r1, r4
     d84:	480f      	ldr	r0, [pc, #60]	; (dc4 <USART_HOST_ISR_VECT+0x4c>)
     d86:	4b10      	ldr	r3, [pc, #64]	; (dc8 <USART_HOST_ISR_VECT+0x50>)
     d88:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     d8a:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     d8c:	f3bf 8f5f 	dmb	sy
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
     d90:	2200      	movs	r2, #0
     d92:	4b0e      	ldr	r3, [pc, #56]	; (dcc <USART_HOST_ISR_VECT+0x54>)
     d94:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
     d96:	4b0e      	ldr	r3, [pc, #56]	; (dd0 <USART_HOST_ISR_VECT+0x58>)
     d98:	781b      	ldrb	r3, [r3, #0]
     d9a:	7821      	ldrb	r1, [r4, #0]
     d9c:	4a0d      	ldr	r2, [pc, #52]	; (dd4 <USART_HOST_ISR_VECT+0x5c>)
     d9e:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
     da0:	2b9b      	cmp	r3, #155	; 0x9b
     da2:	d00a      	beq.n	dba <USART_HOST_ISR_VECT+0x42>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
	} else {
		serial_rx_buf_tail++;
     da4:	3301      	adds	r3, #1
     da6:	4a0a      	ldr	r2, [pc, #40]	; (dd0 <USART_HOST_ISR_VECT+0x58>)
     da8:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
     daa:	2201      	movs	r2, #1
     dac:	4b07      	ldr	r3, [pc, #28]	; (dcc <USART_HOST_ISR_VECT+0x54>)
     dae:	701a      	strb	r2, [r3, #0]
     db0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     db4:	b662      	cpsie	i
}
     db6:	b002      	add	sp, #8
     db8:	bd10      	pop	{r4, pc}
		serial_rx_buf_tail = 0x00;
     dba:	2200      	movs	r2, #0
     dbc:	4b04      	ldr	r3, [pc, #16]	; (dd0 <USART_HOST_ISR_VECT+0x58>)
     dbe:	701a      	strb	r2, [r3, #0]
     dc0:	e7f3      	b.n	daa <USART_HOST_ISR_VECT+0x32>
     dc2:	46c0      	nop			; (mov r8, r8)
     dc4:	20000090 	.word	0x20000090
     dc8:	00007975 	.word	0x00007975
     dcc:	20000008 	.word	0x20000008
     dd0:	20000161 	.word	0x20000161
     dd4:	200000c4 	.word	0x200000c4

00000dd8 <sio2host_init>:
{
     dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
     dda:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     ddc:	2380      	movs	r3, #128	; 0x80
     dde:	05db      	lsls	r3, r3, #23
     de0:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     de2:	2300      	movs	r3, #0
     de4:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
     de6:	22ff      	movs	r2, #255	; 0xff
     de8:	4669      	mov	r1, sp
     dea:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
     dec:	2200      	movs	r2, #0
     dee:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     df0:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
     df2:	2401      	movs	r4, #1
     df4:	2124      	movs	r1, #36	; 0x24
     df6:	4668      	mov	r0, sp
     df8:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
     dfa:	3101      	adds	r1, #1
     dfc:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
     dfe:	3101      	adds	r1, #1
     e00:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
     e02:	3101      	adds	r1, #1
     e04:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
     e06:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
     e08:	3105      	adds	r1, #5
     e0a:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
     e0c:	3101      	adds	r1, #1
     e0e:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     e10:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     e12:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     e14:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     e16:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     e18:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     e1a:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
     e1c:	2313      	movs	r3, #19
     e1e:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     e20:	7742      	strb	r2, [r0, #29]
	host_uart_config.mux_setting = HOST_SERCOM_MUX_SETTING;
     e22:	2380      	movs	r3, #128	; 0x80
     e24:	035b      	lsls	r3, r3, #13
     e26:	9303      	str	r3, [sp, #12]
	host_uart_config.pinmux_pad0 = HOST_SERCOM_PINMUX_PAD0;
     e28:	4b2f      	ldr	r3, [pc, #188]	; (ee8 <sio2host_init+0x110>)
     e2a:	930c      	str	r3, [sp, #48]	; 0x30
	host_uart_config.pinmux_pad1 = HOST_SERCOM_PINMUX_PAD1;
     e2c:	4b2f      	ldr	r3, [pc, #188]	; (eec <sio2host_init+0x114>)
     e2e:	930d      	str	r3, [sp, #52]	; 0x34
	host_uart_config.pinmux_pad2 = HOST_SERCOM_PINMUX_PAD2;
     e30:	2301      	movs	r3, #1
     e32:	425b      	negs	r3, r3
     e34:	930e      	str	r3, [sp, #56]	; 0x38
	host_uart_config.pinmux_pad3 = HOST_SERCOM_PINMUX_PAD3;
     e36:	930f      	str	r3, [sp, #60]	; 0x3c
	host_uart_config.baudrate    = USART_HOST_BAUDRATE;
     e38:	23e1      	movs	r3, #225	; 0xe1
     e3a:	025b      	lsls	r3, r3, #9
     e3c:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
     e3e:	4d2c      	ldr	r5, [pc, #176]	; (ef0 <sio2host_init+0x118>)
     e40:	4b2c      	ldr	r3, [pc, #176]	; (ef4 <sio2host_init+0x11c>)
     e42:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     e44:	4a2c      	ldr	r2, [pc, #176]	; (ef8 <sio2host_init+0x120>)
     e46:	4b2d      	ldr	r3, [pc, #180]	; (efc <sio2host_init+0x124>)
     e48:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     e4a:	4a2d      	ldr	r2, [pc, #180]	; (f00 <sio2host_init+0x128>)
     e4c:	4b2d      	ldr	r3, [pc, #180]	; (f04 <sio2host_init+0x12c>)
     e4e:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
     e50:	466a      	mov	r2, sp
     e52:	2184      	movs	r1, #132	; 0x84
     e54:	05c9      	lsls	r1, r1, #23
     e56:	0028      	movs	r0, r5
     e58:	4b2b      	ldr	r3, [pc, #172]	; (f08 <sio2host_init+0x130>)
     e5a:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
     e5c:	4f2b      	ldr	r7, [pc, #172]	; (f0c <sio2host_init+0x134>)
     e5e:	683b      	ldr	r3, [r7, #0]
     e60:	6898      	ldr	r0, [r3, #8]
     e62:	2100      	movs	r1, #0
     e64:	4e2a      	ldr	r6, [pc, #168]	; (f10 <sio2host_init+0x138>)
     e66:	47b0      	blx	r6
	setbuf(stdin, NULL);
     e68:	683b      	ldr	r3, [r7, #0]
     e6a:	6858      	ldr	r0, [r3, #4]
     e6c:	2100      	movs	r1, #0
     e6e:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     e70:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     e72:	0030      	movs	r0, r6
     e74:	4b27      	ldr	r3, [pc, #156]	; (f14 <sio2host_init+0x13c>)
     e76:	4798      	blx	r3
     e78:	231f      	movs	r3, #31
     e7a:	4018      	ands	r0, r3
     e7c:	4084      	lsls	r4, r0
     e7e:	4b26      	ldr	r3, [pc, #152]	; (f18 <sio2host_init+0x140>)
     e80:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
     e82:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     e84:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     e86:	2b00      	cmp	r3, #0
     e88:	d1fc      	bne.n	e84 <sio2host_init+0xac>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     e8a:	6833      	ldr	r3, [r6, #0]
     e8c:	2202      	movs	r2, #2
     e8e:	4313      	orrs	r3, r2
     e90:	6033      	str	r3, [r6, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     e92:	4b17      	ldr	r3, [pc, #92]	; (ef0 <sio2host_init+0x118>)
     e94:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
     e96:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
     e98:	2a00      	cmp	r2, #0
     e9a:	d1fc      	bne.n	e96 <sio2host_init+0xbe>
			module->receiver_enabled = true;
			break;

		case USART_TRANSCEIVER_TX:
			/* Enable TX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
     e9c:	6859      	ldr	r1, [r3, #4]
     e9e:	2280      	movs	r2, #128	; 0x80
     ea0:	0252      	lsls	r2, r2, #9
     ea2:	430a      	orrs	r2, r1
     ea4:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
     ea6:	2101      	movs	r1, #1
     ea8:	4a11      	ldr	r2, [pc, #68]	; (ef0 <sio2host_init+0x118>)
     eaa:	71d1      	strb	r1, [r2, #7]
	return (usart_hw->SYNCBUSY.reg);
     eac:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
     eae:	2a00      	cmp	r2, #0
     eb0:	d1fc      	bne.n	eac <sio2host_init+0xd4>
	return (usart_hw->SYNCBUSY.reg);
     eb2:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
     eb4:	2a00      	cmp	r2, #0
     eb6:	d1fc      	bne.n	eb2 <sio2host_init+0xda>
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
     eb8:	6859      	ldr	r1, [r3, #4]
     eba:	2280      	movs	r2, #128	; 0x80
     ebc:	0292      	lsls	r2, r2, #10
     ebe:	430a      	orrs	r2, r1
     ec0:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
     ec2:	2101      	movs	r1, #1
     ec4:	4a0a      	ldr	r2, [pc, #40]	; (ef0 <sio2host_init+0x118>)
     ec6:	7191      	strb	r1, [r2, #6]
	return (usart_hw->SYNCBUSY.reg);
     ec8:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
     eca:	2a00      	cmp	r2, #0
     ecc:	d1fc      	bne.n	ec8 <sio2host_init+0xf0>
	USART_HOST_RX_ISR_ENABLE();
     ece:	4913      	ldr	r1, [pc, #76]	; (f1c <sio2host_init+0x144>)
     ed0:	2000      	movs	r0, #0
     ed2:	4b13      	ldr	r3, [pc, #76]	; (f20 <sio2host_init+0x148>)
     ed4:	4798      	blx	r3
     ed6:	2204      	movs	r2, #4
     ed8:	2384      	movs	r3, #132	; 0x84
     eda:	05db      	lsls	r3, r3, #23
     edc:	759a      	strb	r2, [r3, #22]
     ede:	32fc      	adds	r2, #252	; 0xfc
     ee0:	4b0d      	ldr	r3, [pc, #52]	; (f18 <sio2host_init+0x140>)
     ee2:	601a      	str	r2, [r3, #0]
}
     ee4:	b011      	add	sp, #68	; 0x44
     ee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ee8:	00040003 	.word	0x00040003
     eec:	00050003 	.word	0x00050003
     ef0:	20000090 	.word	0x20000090
     ef4:	200005fc 	.word	0x200005fc
     ef8:	00000d61 	.word	0x00000d61
     efc:	200005f8 	.word	0x200005f8
     f00:	00000d35 	.word	0x00000d35
     f04:	200005f4 	.word	0x200005f4
     f08:	00007575 	.word	0x00007575
     f0c:	2000000c 	.word	0x2000000c
     f10:	000114d5 	.word	0x000114d5
     f14:	0000812d 	.word	0x0000812d
     f18:	e000e100 	.word	0xe000e100
     f1c:	00000d79 	.word	0x00000d79
     f20:	000080f1 	.word	0x000080f1

00000f24 <sio2host_rx>:
{
     f24:	b570      	push	{r4, r5, r6, lr}
     f26:	0002      	movs	r2, r0
	if(serial_rx_buf_tail >= serial_rx_buf_head)
     f28:	4b1f      	ldr	r3, [pc, #124]	; (fa8 <sio2host_rx+0x84>)
     f2a:	781c      	ldrb	r4, [r3, #0]
     f2c:	4b1f      	ldr	r3, [pc, #124]	; (fac <sio2host_rx+0x88>)
     f2e:	781b      	ldrb	r3, [r3, #0]
     f30:	429c      	cmp	r4, r3
     f32:	d31e      	bcc.n	f72 <sio2host_rx+0x4e>
		serial_rx_count = serial_rx_buf_tail - serial_rx_buf_head;
     f34:	1ae3      	subs	r3, r4, r3
     f36:	481e      	ldr	r0, [pc, #120]	; (fb0 <sio2host_rx+0x8c>)
     f38:	7003      	strb	r3, [r0, #0]
	if (0 == serial_rx_count) {
     f3a:	4b1d      	ldr	r3, [pc, #116]	; (fb0 <sio2host_rx+0x8c>)
     f3c:	7818      	ldrb	r0, [r3, #0]
     f3e:	2800      	cmp	r0, #0
     f40:	d030      	beq.n	fa4 <sio2host_rx+0x80>
	if (SERIAL_RX_BUF_SIZE_HOST <= serial_rx_count) {
     f42:	289b      	cmp	r0, #155	; 0x9b
     f44:	d91b      	bls.n	f7e <sio2host_rx+0x5a>
		serial_rx_buf_head = serial_rx_buf_tail;
     f46:	4b19      	ldr	r3, [pc, #100]	; (fac <sio2host_rx+0x88>)
     f48:	701c      	strb	r4, [r3, #0]
		serial_rx_count = SERIAL_RX_BUF_SIZE_HOST;
     f4a:	209c      	movs	r0, #156	; 0x9c
     f4c:	4b18      	ldr	r3, [pc, #96]	; (fb0 <sio2host_rx+0x8c>)
     f4e:	7018      	strb	r0, [r3, #0]
     f50:	1c08      	adds	r0, r1, #0
     f52:	299c      	cmp	r1, #156	; 0x9c
     f54:	d901      	bls.n	f5a <sio2host_rx+0x36>
     f56:	4b17      	ldr	r3, [pc, #92]	; (fb4 <sio2host_rx+0x90>)
     f58:	7818      	ldrb	r0, [r3, #0]
     f5a:	b2c0      	uxtb	r0, r0
	while (max_length > 0) {
     f5c:	2800      	cmp	r0, #0
     f5e:	d021      	beq.n	fa4 <sio2host_rx+0x80>
     f60:	4b12      	ldr	r3, [pc, #72]	; (fac <sio2host_rx+0x88>)
     f62:	781b      	ldrb	r3, [r3, #0]
     f64:	1e44      	subs	r4, r0, #1
     f66:	b2e4      	uxtb	r4, r4
     f68:	3401      	adds	r4, #1
     f6a:	1914      	adds	r4, r2, r4
		*data = serial_rx_buf[serial_rx_buf_head];
     f6c:	4d12      	ldr	r5, [pc, #72]	; (fb8 <sio2host_rx+0x94>)
			serial_rx_buf_head = 0;
     f6e:	2600      	movs	r6, #0
     f70:	e00e      	b.n	f90 <sio2host_rx+0x6c>
		serial_rx_count = serial_rx_buf_tail + (SERIAL_RX_BUF_SIZE_HOST - serial_rx_buf_head);
     f72:	0020      	movs	r0, r4
     f74:	3864      	subs	r0, #100	; 0x64
     f76:	1ac3      	subs	r3, r0, r3
     f78:	480d      	ldr	r0, [pc, #52]	; (fb0 <sio2host_rx+0x8c>)
     f7a:	7003      	strb	r3, [r0, #0]
     f7c:	e7dd      	b.n	f3a <sio2host_rx+0x16>
     f7e:	1c03      	adds	r3, r0, #0
     f80:	4288      	cmp	r0, r1
     f82:	d900      	bls.n	f86 <sio2host_rx+0x62>
     f84:	1c0b      	adds	r3, r1, #0
     f86:	b2d8      	uxtb	r0, r3
     f88:	e7e8      	b.n	f5c <sio2host_rx+0x38>
			serial_rx_buf_head = 0;
     f8a:	0033      	movs	r3, r6
	while (max_length > 0) {
     f8c:	4294      	cmp	r4, r2
     f8e:	d007      	beq.n	fa0 <sio2host_rx+0x7c>
		*data = serial_rx_buf[serial_rx_buf_head];
     f90:	5ce9      	ldrb	r1, [r5, r3]
     f92:	7011      	strb	r1, [r2, #0]
		data++;
     f94:	3201      	adds	r2, #1
		if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_head) {
     f96:	2b9b      	cmp	r3, #155	; 0x9b
     f98:	d0f7      	beq.n	f8a <sio2host_rx+0x66>
			serial_rx_buf_head++;
     f9a:	3301      	adds	r3, #1
     f9c:	b2db      	uxtb	r3, r3
     f9e:	e7f5      	b.n	f8c <sio2host_rx+0x68>
     fa0:	4a02      	ldr	r2, [pc, #8]	; (fac <sio2host_rx+0x88>)
     fa2:	7013      	strb	r3, [r2, #0]
}
     fa4:	bd70      	pop	{r4, r5, r6, pc}
     fa6:	46c0      	nop			; (mov r8, r8)
     fa8:	20000161 	.word	0x20000161
     fac:	20000160 	.word	0x20000160
     fb0:	20000162 	.word	0x20000162
     fb4:	00012500 	.word	0x00012500
     fb8:	200000c4 	.word	0x200000c4

00000fbc <sio2host_getchar_nowait>:
{
     fbc:	b500      	push	{lr}
     fbe:	b083      	sub	sp, #12
	int back = sio2host_rx(&c, 1);
     fc0:	2101      	movs	r1, #1
     fc2:	466b      	mov	r3, sp
     fc4:	1dd8      	adds	r0, r3, #7
     fc6:	4b05      	ldr	r3, [pc, #20]	; (fdc <sio2host_getchar_nowait+0x20>)
     fc8:	4798      	blx	r3
	if (back >= 1) {
     fca:	2800      	cmp	r0, #0
     fcc:	dd03      	ble.n	fd6 <sio2host_getchar_nowait+0x1a>
		return c;
     fce:	466b      	mov	r3, sp
     fd0:	79d8      	ldrb	r0, [r3, #7]
}
     fd2:	b003      	add	sp, #12
     fd4:	bd00      	pop	{pc}
		return (-1);
     fd6:	2001      	movs	r0, #1
     fd8:	4240      	negs	r0, r0
     fda:	e7fa      	b.n	fd2 <sio2host_getchar_nowait+0x16>
     fdc:	00000f25 	.word	0x00000f25

00000fe0 <nvm_read>:
 * \internal Pointer to the NVM MEMORY region start address
 */
#define NVM_MEMORY        ((volatile uint16_t *)FLASH_ADDR)
status_code_t nvm_read(mem_type_t mem, uint32_t address, void *buffer,
		uint32_t len)
{
     fe0:	b570      	push	{r4, r5, r6, lr}
		uint8_t *const buffer,
		uint32_t len)
{
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
	switch (mem) {
     fe2:	2800      	cmp	r0, #0
     fe4:	d122      	bne.n	102c <nvm_read+0x4c>
static inline bool nvm_is_ready(void)
{
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     fe6:	4814      	ldr	r0, [pc, #80]	; (1038 <nvm_read+0x58>)
     fe8:	7d04      	ldrb	r4, [r0, #20]

	case INT_FLASH:

		/* Check if the module is busy */
		if (!nvm_is_ready()) {
			return STATUS_BUSY;
     fea:	2005      	movs	r0, #5
		if (!nvm_is_ready()) {
     fec:	07e4      	lsls	r4, r4, #31
     fee:	d400      	bmi.n	ff2 <nvm_read+0x12>
}
     ff0:	bd70      	pop	{r4, r5, r6, pc}
		}

		/* Clear error flags */
		nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     ff2:	2420      	movs	r4, #32
     ff4:	34ff      	adds	r4, #255	; 0xff
     ff6:	4810      	ldr	r0, [pc, #64]	; (1038 <nvm_read+0x58>)
     ff8:	8304      	strh	r4, [r0, #24]
		uint32_t page_address = address / 2;

		/* NVM _must_ be accessed as a series of 16-bit words, perform
		 * manual copy
		 * to ensure alignment */
		for (uint16_t i = 0; i < len; i += 2) {
     ffa:	2b00      	cmp	r3, #0
     ffc:	d019      	beq.n	1032 <nvm_read+0x52>
     ffe:	2001      	movs	r0, #1
    1000:	4381      	bics	r1, r0
    1002:	2000      	movs	r0, #0
    1004:	2500      	movs	r5, #0
			buffer[i] = (data & 0xFF);

			/* If we are not at the end of a read request with an
			 * odd byte count,
			 * store the next byte of data as well */
			if (i < (len - 1)) {
    1006:	1e5e      	subs	r6, r3, #1
    1008:	e005      	b.n	1016 <nvm_read+0x36>
		for (uint16_t i = 0; i < len; i += 2) {
    100a:	3002      	adds	r0, #2
    100c:	b280      	uxth	r0, r0
    100e:	0005      	movs	r5, r0
    1010:	3102      	adds	r1, #2
    1012:	4283      	cmp	r3, r0
    1014:	d908      	bls.n	1028 <nvm_read+0x48>
			uint16_t data = NVM_MEMORY[page_address++];
    1016:	880c      	ldrh	r4, [r1, #0]
    1018:	b2a4      	uxth	r4, r4
			buffer[i] = (data & 0xFF);
    101a:	5554      	strb	r4, [r2, r5]
			if (i < (len - 1)) {
    101c:	42ae      	cmp	r6, r5
    101e:	d9f4      	bls.n	100a <nvm_read+0x2a>
				buffer[i + 1] = (data >> 8);
    1020:	1955      	adds	r5, r2, r5
    1022:	0a24      	lsrs	r4, r4, #8
    1024:	706c      	strb	r4, [r5, #1]
    1026:	e7f0      	b.n	100a <nvm_read+0x2a>

	default:
		return ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1028:	2000      	movs	r0, #0
    102a:	e7e1      	b.n	ff0 <nvm_read+0x10>
		return ERR_INVALID_ARG;
    102c:	2008      	movs	r0, #8
    102e:	4240      	negs	r0, r0
    1030:	e7de      	b.n	ff0 <nvm_read+0x10>
	return STATUS_OK;
    1032:	2000      	movs	r0, #0
    1034:	e7dc      	b.n	ff0 <nvm_read+0x10>
    1036:	46c0      	nop			; (mov r8, r8)
    1038:	41004000 	.word	0x41004000

0000103c <nvm_write>:
	return error_code;
}

status_code_t nvm_write(mem_type_t mem, uint32_t address, void *buffer,
		uint32_t len)
{
    103c:	b5f0      	push	{r4, r5, r6, r7, lr}
    103e:	46de      	mov	lr, fp
    1040:	4657      	mov	r7, sl
    1042:	464e      	mov	r6, r9
    1044:	4645      	mov	r5, r8
    1046:	b5e0      	push	{r5, r6, r7, lr}
    1048:	b0c5      	sub	sp, #276	; 0x114
	switch (mem) {
    104a:	2800      	cmp	r0, #0
    104c:	d168      	bne.n	1120 <nvm_write+0xe4>
	case INT_FLASH:

		if (STATUS_OK != nvm_memcpy(address, buffer, len, true))
    104e:	b29b      	uxth	r3, r3
    1050:	469a      	mov	sl, r3
	volatile uint8_t *dest_add = (uint8_t *)destination_address;
    1052:	4688      	mov	r8, r1
	uint32_t row_start_address
    1054:	23ff      	movs	r3, #255	; 0xff
    1056:	4399      	bics	r1, r3
    1058:	9100      	str	r1, [sp, #0]
	while (length) {
    105a:	4653      	mov	r3, sl
    105c:	2b00      	cmp	r3, #0
    105e:	d06b      	beq.n	1138 <nvm_write+0xfc>
    1060:	ab04      	add	r3, sp, #16
    1062:	1a5b      	subs	r3, r3, r1
    1064:	9302      	str	r3, [sp, #8]
				error_code = nvm_read_buffer(
    1066:	4e35      	ldr	r6, [pc, #212]	; (113c <nvm_write+0x100>)
				error_code = nvm_erase_row(row_start_address);
    1068:	4b35      	ldr	r3, [pc, #212]	; (1140 <nvm_write+0x104>)
    106a:	469b      	mov	fp, r3
    106c:	9203      	str	r2, [sp, #12]
    106e:	e03a      	b.n	10e6 <nvm_write+0xaa>
				(FLASH_PAGE_SIZE * NVMCTRL_ROW_PAGES); i++) {
    1070:	3301      	adds	r3, #1
		for (i = row_start_address;
    1072:	42bb      	cmp	r3, r7
    1074:	d20e      	bcs.n	1094 <nvm_write+0x58>
			if (length && ((uint8_t *)i == dest_add)) {
    1076:	2a00      	cmp	r2, #0
    1078:	d0fa      	beq.n	1070 <nvm_write+0x34>
    107a:	4299      	cmp	r1, r3
    107c:	d1f8      	bne.n	1070 <nvm_write+0x34>
				row_buffer[i - row_start_address] = *src_buf++;
    107e:	9d03      	ldr	r5, [sp, #12]
    1080:	7828      	ldrb	r0, [r5, #0]
    1082:	9c02      	ldr	r4, [sp, #8]
    1084:	54e0      	strb	r0, [r4, r3]
				dest_add++;
    1086:	3101      	adds	r1, #1
				length--;
    1088:	3a01      	subs	r2, #1
    108a:	b292      	uxth	r2, r2
				row_buffer[i - row_start_address] = *src_buf++;
    108c:	0028      	movs	r0, r5
    108e:	3001      	adds	r0, #1
    1090:	9003      	str	r0, [sp, #12]
    1092:	e7ed      	b.n	1070 <nvm_write+0x34>
    1094:	4692      	mov	sl, r2
    1096:	4688      	mov	r8, r1
    1098:	9c01      	ldr	r4, [sp, #4]
	cpu_irq_enter_critical();
    109a:	4b2a      	ldr	r3, [pc, #168]	; (1144 <nvm_write+0x108>)
    109c:	4798      	blx	r3
				error_code = nvm_erase_row(row_start_address);
    109e:	9800      	ldr	r0, [sp, #0]
    10a0:	47d8      	blx	fp
			} while (error_code == STATUS_BUSY);
    10a2:	2805      	cmp	r0, #5
    10a4:	d0fb      	beq.n	109e <nvm_write+0x62>
			if (error_code != STATUS_OK) {
    10a6:	2800      	cmp	r0, #0
    10a8:	d13d      	bne.n	1126 <nvm_write+0xea>
    10aa:	9d00      	ldr	r5, [sp, #0]
				error_code = nvm_write_buffer(
    10ac:	4f26      	ldr	r7, [pc, #152]	; (1148 <nvm_write+0x10c>)
    10ae:	9401      	str	r4, [sp, #4]
    10b0:	9b00      	ldr	r3, [sp, #0]
    10b2:	1aec      	subs	r4, r5, r3
    10b4:	ab04      	add	r3, sp, #16
    10b6:	469c      	mov	ip, r3
    10b8:	4464      	add	r4, ip
    10ba:	2240      	movs	r2, #64	; 0x40
    10bc:	0021      	movs	r1, r4
    10be:	0028      	movs	r0, r5
    10c0:	47b8      	blx	r7
			} while (error_code == STATUS_BUSY);
    10c2:	2805      	cmp	r0, #5
    10c4:	d0f9      	beq.n	10ba <nvm_write+0x7e>
			if (error_code != STATUS_OK) {
    10c6:	2800      	cmp	r0, #0
    10c8:	d12d      	bne.n	1126 <nvm_write+0xea>
    10ca:	3540      	adds	r5, #64	; 0x40
		for (i = 0; i < NVMCTRL_ROW_PAGES; i++) {
    10cc:	9b01      	ldr	r3, [sp, #4]
    10ce:	42ab      	cmp	r3, r5
    10d0:	d1ee      	bne.n	10b0 <nvm_write+0x74>
	cpu_irq_leave_critical();
    10d2:	4b1e      	ldr	r3, [pc, #120]	; (114c <nvm_write+0x110>)
    10d4:	4798      	blx	r3
    10d6:	9b02      	ldr	r3, [sp, #8]
    10d8:	3b01      	subs	r3, #1
    10da:	3bff      	subs	r3, #255	; 0xff
    10dc:	9302      	str	r3, [sp, #8]
    10de:	9500      	str	r5, [sp, #0]
	while (length) {
    10e0:	4653      	mov	r3, sl
    10e2:	2b00      	cmp	r3, #0
    10e4:	d028      	beq.n	1138 <nvm_write+0xfc>
    10e6:	9b00      	ldr	r3, [sp, #0]
    10e8:	1c5f      	adds	r7, r3, #1
    10ea:	37ff      	adds	r7, #255	; 0xff
{
    10ec:	001c      	movs	r4, r3
    10ee:	46b9      	mov	r9, r7
    10f0:	001f      	movs	r7, r3
    10f2:	1be5      	subs	r5, r4, r7
    10f4:	ab04      	add	r3, sp, #16
    10f6:	469c      	mov	ip, r3
    10f8:	4465      	add	r5, ip
				error_code = nvm_read_buffer(
    10fa:	2240      	movs	r2, #64	; 0x40
    10fc:	0029      	movs	r1, r5
    10fe:	0020      	movs	r0, r4
    1100:	47b0      	blx	r6
			} while (error_code == STATUS_BUSY);
    1102:	2805      	cmp	r0, #5
    1104:	d0f9      	beq.n	10fa <nvm_write+0xbe>
			if (error_code != STATUS_OK) {
    1106:	2800      	cmp	r0, #0
    1108:	d10d      	bne.n	1126 <nvm_write+0xea>
    110a:	3440      	adds	r4, #64	; 0x40
		for (i = 0; i < NVMCTRL_ROW_PAGES; i++) {
    110c:	454c      	cmp	r4, r9
    110e:	d1f0      	bne.n	10f2 <nvm_write+0xb6>
    1110:	464f      	mov	r7, r9
		for (i = row_start_address;
    1112:	9b00      	ldr	r3, [sp, #0]
    1114:	429f      	cmp	r7, r3
    1116:	d9c0      	bls.n	109a <nvm_write+0x5e>
    1118:	4652      	mov	r2, sl
    111a:	4641      	mov	r1, r8
    111c:	9401      	str	r4, [sp, #4]
    111e:	e7aa      	b.n	1076 <nvm_write+0x3a>
			return ERR_INVALID_ARG;
		}
		break;

	default:
		return ERR_INVALID_ARG;
    1120:	2008      	movs	r0, #8
    1122:	4240      	negs	r0, r0
    1124:	e001      	b.n	112a <nvm_write+0xee>
			return ERR_INVALID_ARG;
    1126:	2008      	movs	r0, #8
    1128:	4240      	negs	r0, r0
	}

	return STATUS_OK;
}
    112a:	b045      	add	sp, #276	; 0x114
    112c:	bc3c      	pop	{r2, r3, r4, r5}
    112e:	4690      	mov	r8, r2
    1130:	4699      	mov	r9, r3
    1132:	46a2      	mov	sl, r4
    1134:	46ab      	mov	fp, r5
    1136:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return STATUS_OK;
    1138:	2000      	movs	r0, #0
    113a:	e7f6      	b.n	112a <nvm_write+0xee>
    113c:	000084bd 	.word	0x000084bd
    1140:	0000853d 	.word	0x0000853d
    1144:	000085c5 	.word	0x000085c5
    1148:	000083e5 	.word	0x000083e5
    114c:	00008605 	.word	0x00008605

00001150 <tc_cca_callback>:
}

/*! \brief  hw timer compare callback
 */
static void tc_cca_callback(struct tc_module *const module_instance)
{
    1150:	b510      	push	{r4, lr}
	tmr_cca_callback();
    1152:	4b01      	ldr	r3, [pc, #4]	; (1158 <tc_cca_callback+0x8>)
    1154:	4798      	blx	r3
}
    1156:	bd10      	pop	{r4, pc}
    1158:	000092a5 	.word	0x000092a5

0000115c <tc_ovf_callback>:
{
    115c:	b510      	push	{r4, lr}
	tmr_ovf_callback();
    115e:	4b01      	ldr	r3, [pc, #4]	; (1164 <tc_ovf_callback+0x8>)
    1160:	4798      	blx	r3
}
    1162:	bd10      	pop	{r4, pc}
    1164:	0000925d 	.word	0x0000925d

00001168 <tmr_read_count>:
{
    1168:	b510      	push	{r4, lr}
	return ((uint16_t)tc_get_count_value(&module_inst));
    116a:	4802      	ldr	r0, [pc, #8]	; (1174 <tmr_read_count+0xc>)
    116c:	4b02      	ldr	r3, [pc, #8]	; (1178 <tmr_read_count+0x10>)
    116e:	4798      	blx	r3
    1170:	b280      	uxth	r0, r0
}
    1172:	bd10      	pop	{r4, pc}
    1174:	20000638 	.word	0x20000638
    1178:	00000bd9 	.word	0x00000bd9

0000117c <tmr_disable_cc_interrupt>:
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
    117c:	4b03      	ldr	r3, [pc, #12]	; (118c <tmr_disable_cc_interrupt+0x10>)
    117e:	2110      	movs	r1, #16
    1180:	681a      	ldr	r2, [r3, #0]
    1182:	7211      	strb	r1, [r2, #8]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
    1184:	7e5a      	ldrb	r2, [r3, #25]
    1186:	438a      	bics	r2, r1
    1188:	765a      	strb	r2, [r3, #25]
}
    118a:	4770      	bx	lr
    118c:	20000638 	.word	0x20000638

00001190 <tmr_enable_cc_interrupt>:
{
    1190:	b510      	push	{r4, lr}
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    1192:	4c0a      	ldr	r4, [pc, #40]	; (11bc <tmr_enable_cc_interrupt+0x2c>)
    1194:	6820      	ldr	r0, [r4, #0]
    1196:	4b0a      	ldr	r3, [pc, #40]	; (11c0 <tmr_enable_cc_interrupt+0x30>)
    1198:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    119a:	4b0a      	ldr	r3, [pc, #40]	; (11c4 <tmr_enable_cc_interrupt+0x34>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    119c:	5c1b      	ldrb	r3, [r3, r0]
    119e:	221f      	movs	r2, #31
    11a0:	401a      	ands	r2, r3
    11a2:	2301      	movs	r3, #1
    11a4:	4093      	lsls	r3, r2
    11a6:	4a08      	ldr	r2, [pc, #32]	; (11c8 <tmr_enable_cc_interrupt+0x38>)
    11a8:	6013      	str	r3, [r2, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    11aa:	7e63      	ldrb	r3, [r4, #25]
    11ac:	2210      	movs	r2, #16
    11ae:	4313      	orrs	r3, r2
    11b0:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    11b2:	6823      	ldr	r3, [r4, #0]
    11b4:	2210      	movs	r2, #16
    11b6:	725a      	strb	r2, [r3, #9]
}
    11b8:	bd10      	pop	{r4, pc}
    11ba:	46c0      	nop			; (mov r8, r8)
    11bc:	20000638 	.word	0x20000638
    11c0:	000008ad 	.word	0x000008ad
    11c4:	00012504 	.word	0x00012504
    11c8:	e000e100 	.word	0xe000e100

000011cc <tmr_write_cmpreg>:
{
    11cc:	b510      	push	{r4, lr}
    11ce:	0002      	movs	r2, r0
	tc_set_compare_value(&module_inst, TC_COMPARE_CAPTURE_CHANNEL_0,
    11d0:	2100      	movs	r1, #0
    11d2:	4802      	ldr	r0, [pc, #8]	; (11dc <tmr_write_cmpreg+0x10>)
    11d4:	4b02      	ldr	r3, [pc, #8]	; (11e0 <tmr_write_cmpreg+0x14>)
    11d6:	4798      	blx	r3
}
    11d8:	bd10      	pop	{r4, pc}
    11da:	46c0      	nop			; (mov r8, r8)
    11dc:	20000638 	.word	0x20000638
    11e0:	00000c19 	.word	0x00000c19

000011e4 <save_cpu_interrupt>:
{
    11e4:	b082      	sub	sp, #8
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    11e6:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    11ea:	425a      	negs	r2, r3
    11ec:	4153      	adcs	r3, r2
    11ee:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    11f0:	b672      	cpsid	i
    11f2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    11f6:	2200      	movs	r2, #0
    11f8:	4b02      	ldr	r3, [pc, #8]	; (1204 <save_cpu_interrupt+0x20>)
    11fa:	701a      	strb	r2, [r3, #0]
	return flags;
    11fc:	9801      	ldr	r0, [sp, #4]
	return cpu_irq_save();
    11fe:	b2c0      	uxtb	r0, r0
}
    1200:	b002      	add	sp, #8
    1202:	4770      	bx	lr
    1204:	20000008 	.word	0x20000008

00001208 <restore_cpu_interrupt>:
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    1208:	2800      	cmp	r0, #0
    120a:	d005      	beq.n	1218 <restore_cpu_interrupt+0x10>
		cpu_irq_enable();
    120c:	2201      	movs	r2, #1
    120e:	4b03      	ldr	r3, [pc, #12]	; (121c <restore_cpu_interrupt+0x14>)
    1210:	701a      	strb	r2, [r3, #0]
    1212:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1216:	b662      	cpsie	i
}
    1218:	4770      	bx	lr
    121a:	46c0      	nop			; (mov r8, r8)
    121c:	20000008 	.word	0x20000008

00001220 <tmr_init>:

/*! \brief  to initialize hw timer
 */
uint8_t tmr_init(void)
{
    1220:	b570      	push	{r4, r5, r6, lr}
	config->clock_source               = GCLK_GENERATOR_0;
    1222:	4a33      	ldr	r2, [pc, #204]	; (12f0 <tmr_init+0xd0>)
    1224:	2100      	movs	r1, #0
    1226:	2300      	movs	r3, #0
    1228:	7011      	strb	r1, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    122a:	70d1      	strb	r1, [r2, #3]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    122c:	2000      	movs	r0, #0
    122e:	8091      	strh	r1, [r2, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    1230:	7190      	strb	r0, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    1232:	71d3      	strb	r3, [r2, #7]
	config->run_in_standby             = false;
    1234:	7053      	strb	r3, [r2, #1]
	config->on_demand                  = false;
    1236:	7093      	strb	r3, [r2, #2]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    1238:	7213      	strb	r3, [r2, #8]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    123a:	7253      	strb	r3, [r2, #9]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    123c:	7293      	strb	r3, [r2, #10]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    123e:	72d3      	strb	r3, [r2, #11]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    1240:	7313      	strb	r3, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
    1242:	7393      	strb	r3, [r2, #14]
	config->oneshot                    = false;
    1244:	7353      	strb	r3, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    1246:	7413      	strb	r3, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    1248:	6151      	str	r1, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    124a:	6191      	str	r1, [r2, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    124c:	7713      	strb	r3, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    124e:	6211      	str	r1, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    1250:	6251      	str	r1, [r2, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
    1252:	8511      	strh	r1, [r2, #40]	; 0x28
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    1254:	8591      	strh	r1, [r2, #44]	; 0x2c
	config->double_buffering_enabled = false;
    1256:	2334      	movs	r3, #52	; 0x34
    1258:	54d0      	strb	r0, [r2, r3]
		timer_config.clock_source = GCLK_GENERATOR_1;
		timer_config.clock_prescaler = TC_CLOCK_PRESCALER_DIV2;
		timer_config.run_in_standby = true;
	}
	#endif
	timer_config.counter_16_bit.compare_capture_channel[0] = TIMER_PERIOD;
    125a:	3b35      	subs	r3, #53	; 0x35
    125c:	8553      	strh	r3, [r2, #42]	; 0x2a
	tc_init(&module_inst, TIMER, &timer_config);
    125e:	4c25      	ldr	r4, [pc, #148]	; (12f4 <tmr_init+0xd4>)
    1260:	4925      	ldr	r1, [pc, #148]	; (12f8 <tmr_init+0xd8>)
    1262:	0020      	movs	r0, r4
    1264:	4b25      	ldr	r3, [pc, #148]	; (12fc <tmr_init+0xdc>)
    1266:	4798      	blx	r3
	tc_register_callback(&module_inst, tc_ovf_callback,
    1268:	2200      	movs	r2, #0
    126a:	4925      	ldr	r1, [pc, #148]	; (1300 <tmr_init+0xe0>)
    126c:	0020      	movs	r0, r4
    126e:	4d25      	ldr	r5, [pc, #148]	; (1304 <tmr_init+0xe4>)
    1270:	47a8      	blx	r5
			TC_CALLBACK_OVERFLOW);
	tc_register_callback(&module_inst, tc_cca_callback,
    1272:	2202      	movs	r2, #2
    1274:	4924      	ldr	r1, [pc, #144]	; (1308 <tmr_init+0xe8>)
    1276:	0020      	movs	r0, r4
    1278:	47a8      	blx	r5
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    127a:	6820      	ldr	r0, [r4, #0]
    127c:	4b23      	ldr	r3, [pc, #140]	; (130c <tmr_init+0xec>)
    127e:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    1280:	4b23      	ldr	r3, [pc, #140]	; (1310 <tmr_init+0xf0>)
    1282:	5c1a      	ldrb	r2, [r3, r0]
    1284:	231f      	movs	r3, #31
    1286:	4013      	ands	r3, r2
    1288:	2101      	movs	r1, #1
    128a:	000a      	movs	r2, r1
    128c:	409a      	lsls	r2, r3
    128e:	4b21      	ldr	r3, [pc, #132]	; (1314 <tmr_init+0xf4>)
    1290:	601a      	str	r2, [r3, #0]
		module->enable_callback_mask |= (1 << callback_type);
    1292:	7e63      	ldrb	r3, [r4, #25]
    1294:	2201      	movs	r2, #1
    1296:	4313      	orrs	r3, r2
    1298:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    129a:	6822      	ldr	r2, [r4, #0]
    129c:	7251      	strb	r1, [r2, #9]
	return (tc_module->SYNCBUSY.reg);
    129e:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    12a0:	2b00      	cmp	r3, #0
    12a2:	d1fc      	bne.n	129e <tmr_init+0x7e>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    12a4:	6813      	ldr	r3, [r2, #0]
    12a6:	2102      	movs	r1, #2
    12a8:	430b      	orrs	r3, r1
    12aa:	6013      	str	r3, [r2, #0]
	} else {
		timer_multiplier = system_gclk_gen_get_hz(0) / (float) DEF_1MHZ;
	}

    #else
	timer_multiplier = system_gclk_gen_get_hz(0) / (float) DEF_1MHZ;	
    12ac:	2000      	movs	r0, #0
    12ae:	4b1a      	ldr	r3, [pc, #104]	; (1318 <tmr_init+0xf8>)
    12b0:	4798      	blx	r3
    12b2:	4d1a      	ldr	r5, [pc, #104]	; (131c <tmr_init+0xfc>)
    12b4:	47a8      	blx	r5
    12b6:	491a      	ldr	r1, [pc, #104]	; (1320 <tmr_init+0x100>)
    12b8:	4b1a      	ldr	r3, [pc, #104]	; (1324 <tmr_init+0x104>)
    12ba:	4798      	blx	r3
    12bc:	1c04      	adds	r4, r0, #0
	#endif
	
	if ((timer_multiplier - (uint32_t)timer_multiplier) >= 0.5f)
    12be:	4b1a      	ldr	r3, [pc, #104]	; (1328 <tmr_init+0x108>)
    12c0:	4798      	blx	r3
    12c2:	47a8      	blx	r5
    12c4:	1c01      	adds	r1, r0, #0
    12c6:	1c20      	adds	r0, r4, #0
    12c8:	4b18      	ldr	r3, [pc, #96]	; (132c <tmr_init+0x10c>)
    12ca:	4798      	blx	r3
    12cc:	21fc      	movs	r1, #252	; 0xfc
    12ce:	0589      	lsls	r1, r1, #22
    12d0:	4b17      	ldr	r3, [pc, #92]	; (1330 <tmr_init+0x110>)
    12d2:	4798      	blx	r3
    12d4:	2800      	cmp	r0, #0
    12d6:	d005      	beq.n	12e4 <tmr_init+0xc4>
	{
		timer_multiplier += 1.0f;
    12d8:	21fe      	movs	r1, #254	; 0xfe
    12da:	0589      	lsls	r1, r1, #22
    12dc:	1c20      	adds	r0, r4, #0
    12de:	4b15      	ldr	r3, [pc, #84]	; (1334 <tmr_init+0x114>)
    12e0:	4798      	blx	r3
    12e2:	1c04      	adds	r4, r0, #0
	}
	
	return (uint8_t) timer_multiplier;
    12e4:	1c20      	adds	r0, r4, #0
    12e6:	4b10      	ldr	r3, [pc, #64]	; (1328 <tmr_init+0x108>)
    12e8:	4798      	blx	r3
    12ea:	b2c0      	uxtb	r0, r0
}
    12ec:	bd70      	pop	{r4, r5, r6, pc}
    12ee:	46c0      	nop			; (mov r8, r8)
    12f0:	20000600 	.word	0x20000600
    12f4:	20000638 	.word	0x20000638
    12f8:	42002000 	.word	0x42002000
    12fc:	000008e9 	.word	0x000008e9
    1300:	0000115d 	.word	0x0000115d
    1304:	0000748d 	.word	0x0000748d
    1308:	00001151 	.word	0x00001151
    130c:	000008ad 	.word	0x000008ad
    1310:	00012504 	.word	0x00012504
    1314:	e000e100 	.word	0xe000e100
    1318:	00008959 	.word	0x00008959
    131c:	0001024d 	.word	0x0001024d
    1320:	49742400 	.word	0x49742400
    1324:	0000f815 	.word	0x0000f815
    1328:	0000f301 	.word	0x0000f301
    132c:	0000fe35 	.word	0x0000fe35
    1330:	0000f259 	.word	0x0000f259
    1334:	0000f4f1 	.word	0x0000f4f1

00001338 <Radio_WriteMode>:
\param newModulation	- Sets the modulation.
\param blocking			- Sets if its blocking call or not.
\return					- none.
*************************************************************************/
void Radio_WriteMode(RadioMode_t newMode, RadioModulation_t newModulation, uint8_t blocking)
{
    1338:	b5f0      	push	{r4, r5, r6, r7, lr}
    133a:	46d6      	mov	lr, sl
    133c:	464f      	mov	r7, r9
    133e:	b580      	push	{r7, lr}
    1340:	b083      	sub	sp, #12
    1342:	9201      	str	r2, [sp, #4]
    uint8_t opMode;
    uint8_t dioMapping;
    RadioModulation_t currentModulation;
    RadioMode_t currentMode;

    if ((MODULATION_FSK == newModulation) &&
    1344:	2900      	cmp	r1, #0
    1346:	d102      	bne.n	134e <Radio_WriteMode+0x16>
    1348:	1f83      	subs	r3, r0, #6
    134a:	2b01      	cmp	r3, #1
    134c:	d92a      	bls.n	13a4 <Radio_WriteMode+0x6c>
        // Unavailable modes for FSK. Just return.
        return;
    }

    // Sanity enforcement on parameters
    newMode &= 0x07;
    134e:	2307      	movs	r3, #7
    1350:	4699      	mov	r9, r3
    1352:	001c      	movs	r4, r3
    1354:	4004      	ands	r4, r0
    newModulation &= 0x01;
    1356:	2601      	movs	r6, #1
    1358:	400e      	ands	r6, r1

    opMode = RADIO_RegisterRead(REG_OPMODE);
    135a:	2001      	movs	r0, #1
    135c:	4b2b      	ldr	r3, [pc, #172]	; (140c <Radio_WriteMode+0xd4>)
    135e:	4798      	blx	r3
    1360:	0005      	movs	r5, r0
    1362:	0007      	movs	r7, r0

    if ((opMode & 0x80) != 0)
    1364:	b243      	sxtb	r3, r0
    1366:	469a      	mov	sl, r3
    else
    {
        currentModulation = MODULATION_FSK;
    }

    currentMode = opMode & 0x07;
    1368:	464b      	mov	r3, r9
    136a:	4003      	ands	r3, r0

    // If we need to change modulation, we need to do this in sleep mode.
    // Otherwise, we can go straight to changing the current mode to newMode.
    if (newModulation != currentModulation)
    136c:	4652      	mov	r2, sl
    136e:	0fd2      	lsrs	r2, r2, #31
    1370:	4296      	cmp	r6, r2
    1372:	d00a      	beq.n	138a <Radio_WriteMode+0x52>
    {
        // Go to sleep
        if (MODE_SLEEP != currentMode)
    1374:	2b00      	cmp	r3, #0
    1376:	d11a      	bne.n	13ae <Radio_WriteMode+0x76>
            // Clear mode bits, effectively going to sleep
            RADIO_RegisterWrite(REG_OPMODE, opMode & (~0x07));
            currentMode = MODE_SLEEP;
        }
        // Change modulation
        if (MODULATION_FSK == newModulation)
    1378:	2e00      	cmp	r6, #0
    137a:	d11e      	bne.n	13ba <Radio_WriteMode+0x82>
        {
            // Clear MSB and sleep bits to make it stay in sleep
            opMode = opMode & (~0x87);
    137c:	2778      	movs	r7, #120	; 0x78
    137e:	402f      	ands	r7, r5
        else
        {
            // LoRa mode. Set MSB and clear sleep bits to make it stay in sleep
            opMode = 0x80 | (opMode & (~0x87));
        }
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    1380:	0039      	movs	r1, r7
    1382:	2001      	movs	r0, #1
    1384:	4b22      	ldr	r3, [pc, #136]	; (1410 <Radio_WriteMode+0xd8>)
    1386:	4798      	blx	r3
    1388:	2300      	movs	r3, #0

    // From here on currentModulation is no longer current, we will use
    // newModulation instead as it reflects the chip configuration.
    // opMode reflects the actual configuration of the chip.

    if (newMode != currentMode)
    138a:	42a3      	cmp	r3, r4
    138c:	d00a      	beq.n	13a4 <Radio_WriteMode+0x6c>
    {
        // If we need to block until the mode switch is ready, configure the
        // DIO5 pin to relay this information.
        if ((MODE_SLEEP != newMode) && (1 == blocking))
    138e:	2c00      	cmp	r4, #0
    1390:	d030      	beq.n	13f4 <Radio_WriteMode+0xbc>
    1392:	9b01      	ldr	r3, [sp, #4]
    1394:	2b01      	cmp	r3, #1
    1396:	d016      	beq.n	13c6 <Radio_WriteMode+0x8e>
            }
            RADIO_RegisterWrite(REG_DIOMAPPING2, dioMapping);
        }

        // Do the actual mode switch.
        opMode &= ~0x07;                // Clear old mode bits
    1398:	21f8      	movs	r1, #248	; 0xf8
    139a:	4039      	ands	r1, r7
        opMode |= newMode;              // Set new mode bits
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    139c:	4321      	orrs	r1, r4
    139e:	2001      	movs	r0, #1
    13a0:	4b1b      	ldr	r3, [pc, #108]	; (1410 <Radio_WriteMode+0xd8>)
    13a2:	4798      	blx	r3
                SystemBlockingWaitMs(1);
            }
        }
    }
#endif
}
    13a4:	b003      	add	sp, #12
    13a6:	bc0c      	pop	{r2, r3}
    13a8:	4691      	mov	r9, r2
    13aa:	469a      	mov	sl, r3
    13ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
            RADIO_RegisterWrite(REG_OPMODE, opMode & (~0x07));
    13ae:	21f8      	movs	r1, #248	; 0xf8
    13b0:	4001      	ands	r1, r0
    13b2:	2001      	movs	r0, #1
    13b4:	4b16      	ldr	r3, [pc, #88]	; (1410 <Radio_WriteMode+0xd8>)
    13b6:	4798      	blx	r3
    13b8:	e7de      	b.n	1378 <Radio_WriteMode+0x40>
            opMode = 0x80 | (opMode & (~0x87));
    13ba:	2778      	movs	r7, #120	; 0x78
    13bc:	4653      	mov	r3, sl
    13be:	401f      	ands	r7, r3
    13c0:	2180      	movs	r1, #128	; 0x80
    13c2:	430f      	orrs	r7, r1
    13c4:	e7dc      	b.n	1380 <Radio_WriteMode+0x48>
            dioMapping = RADIO_RegisterRead(REG_DIOMAPPING2);
    13c6:	2041      	movs	r0, #65	; 0x41
    13c8:	4b10      	ldr	r3, [pc, #64]	; (140c <Radio_WriteMode+0xd4>)
    13ca:	4798      	blx	r3
            if (MODULATION_FSK == newModulation)
    13cc:	2e00      	cmp	r6, #0
    13ce:	d10e      	bne.n	13ee <Radio_WriteMode+0xb6>
                dioMapping |= 0x30;     // DIO5 = 11 means ModeReady in FSK mode
    13d0:	2130      	movs	r1, #48	; 0x30
    13d2:	4301      	orrs	r1, r0
    13d4:	b2c9      	uxtb	r1, r1
            RADIO_RegisterWrite(REG_DIOMAPPING2, dioMapping);
    13d6:	2041      	movs	r0, #65	; 0x41
    13d8:	4d0d      	ldr	r5, [pc, #52]	; (1410 <Radio_WriteMode+0xd8>)
    13da:	47a8      	blx	r5
        opMode &= ~0x07;                // Clear old mode bits
    13dc:	21f8      	movs	r1, #248	; 0xf8
    13de:	4039      	ands	r1, r7
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    13e0:	4321      	orrs	r1, r4
    13e2:	2001      	movs	r0, #1
    13e4:	47a8      	blx	r5
			   delay_ms(1);
    13e6:	2001      	movs	r0, #1
    13e8:	4b0a      	ldr	r3, [pc, #40]	; (1414 <Radio_WriteMode+0xdc>)
    13ea:	4798      	blx	r3
    13ec:	e7da      	b.n	13a4 <Radio_WriteMode+0x6c>
                dioMapping &= ~0x30;    // DIO5 = 00 means ModeReady in LoRa mode
    13ee:	21cf      	movs	r1, #207	; 0xcf
    13f0:	4001      	ands	r1, r0
    13f2:	e7f0      	b.n	13d6 <Radio_WriteMode+0x9e>
        opMode &= ~0x07;                // Clear old mode bits
    13f4:	21f8      	movs	r1, #248	; 0xf8
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    13f6:	4039      	ands	r1, r7
    13f8:	2001      	movs	r0, #1
    13fa:	4b05      	ldr	r3, [pc, #20]	; (1410 <Radio_WriteMode+0xd8>)
    13fc:	4798      	blx	r3
        if (1 == blocking)
    13fe:	9b01      	ldr	r3, [sp, #4]
    1400:	2b01      	cmp	r3, #1
    1402:	d1cf      	bne.n	13a4 <Radio_WriteMode+0x6c>
                SystemBlockingWaitMs(1);
    1404:	2001      	movs	r0, #1
    1406:	4b04      	ldr	r3, [pc, #16]	; (1418 <Radio_WriteMode+0xe0>)
    1408:	4798      	blx	r3
    140a:	e7cb      	b.n	13a4 <Radio_WriteMode+0x6c>
    140c:	00007325 	.word	0x00007325
    1410:	000072fd 	.word	0x000072fd
    1414:	00008305 	.word	0x00008305
    1418:	00007459 	.word	0x00007459

0000141c <RADIO_FHSSChangeChannel>:

\param		- none	
\return		- none.
*************************************************************************/
void RADIO_FHSSChangeChannel(void)
{
    141c:	b500      	push	{lr}
    141e:	b083      	sub	sp, #12
    uint32_t freq;
    RADIO_RegisterRead(REG_LORA_IRQFLAGS);
    1420:	2012      	movs	r0, #18
    1422:	4b0d      	ldr	r3, [pc, #52]	; (1458 <RADIO_FHSSChangeChannel+0x3c>)
    1424:	4798      	blx	r3

    if (radioConfiguration.frequencyHopPeriod)
    1426:	4b0d      	ldr	r3, [pc, #52]	; (145c <RADIO_FHSSChangeChannel+0x40>)
    1428:	8adb      	ldrh	r3, [r3, #22]
    142a:	2b00      	cmp	r3, #0
    142c:	d007      	beq.n	143e <RADIO_FHSSChangeChannel+0x22>
    {
        if ((radioConfiguration.radioCallback) &&
    142e:	4b0b      	ldr	r3, [pc, #44]	; (145c <RADIO_FHSSChangeChannel+0x40>)
    1430:	691b      	ldr	r3, [r3, #16]
    1432:	2b00      	cmp	r3, #0
    1434:	d003      	beq.n	143e <RADIO_FHSSChangeChannel+0x22>
            (1 == radioCallbackMask.BitMask.radioFhssfreqCallback))
    1436:	4a0a      	ldr	r2, [pc, #40]	; (1460 <RADIO_FHSSChangeChannel+0x44>)
    1438:	7812      	ldrb	r2, [r2, #0]
        if ((radioConfiguration.radioCallback) &&
    143a:	0692      	lsls	r2, r2, #26
    143c:	d405      	bmi.n	144a <RADIO_FHSSChangeChannel+0x2e>
            Radio_WriteFrequency(freq);
        }
    }

    // Clear FHSSChangeChannel interrupt
    RADIO_RegisterWrite(REG_LORA_IRQFLAGS, 1 << SHIFT1);
    143e:	2102      	movs	r1, #2
    1440:	2012      	movs	r0, #18
    1442:	4b08      	ldr	r3, [pc, #32]	; (1464 <RADIO_FHSSChangeChannel+0x48>)
    1444:	4798      	blx	r3
}
    1446:	b003      	add	sp, #12
    1448:	bd00      	pop	{pc}
            radioConfiguration.radioCallback(RADIO_FHSS_NEXT_FREQ_CALLBACK, (void *)&freq);
    144a:	a901      	add	r1, sp, #4
    144c:	2020      	movs	r0, #32
    144e:	4798      	blx	r3
            Radio_WriteFrequency(freq);
    1450:	9801      	ldr	r0, [sp, #4]
    1452:	4b05      	ldr	r3, [pc, #20]	; (1468 <RADIO_FHSSChangeChannel+0x4c>)
    1454:	4798      	blx	r3
    1456:	e7f2      	b.n	143e <RADIO_FHSSChangeChannel+0x22>
    1458:	00007325 	.word	0x00007325
    145c:	20000654 	.word	0x20000654
    1460:	2000126a 	.word	0x2000126a
    1464:	000072fd 	.word	0x000072fd
    1468:	0000d80d 	.word	0x0000d80d

0000146c <RADIO_ReadRandom>:

\param		- none	
\return		- returns the random number generated.
*************************************************************************/
uint16_t RADIO_ReadRandom(void)
{
    146c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
    uint16_t retVal;
    retVal = 0;
	
	// Turn on the RF switch.
	Radio_EnableRfControl(RADIO_RFCTRL_RX); 
    146e:	2000      	movs	r0, #0
    1470:	4b1a      	ldr	r3, [pc, #104]	; (14dc <RADIO_ReadRandom+0x70>)
    1472:	4798      	blx	r3
	// Enabling Radio Clock
	Radio_SetClockInput();
    1474:	4b1a      	ldr	r3, [pc, #104]	; (14e0 <RADIO_ReadRandom+0x74>)
    1476:	4798      	blx	r3
	
    // Mask all interrupts, do many measurements of RSSI
    Radio_WriteMode(MODE_SLEEP, MODULATION_LORA, 1);
    1478:	2201      	movs	r2, #1
    147a:	2101      	movs	r1, #1
    147c:	2000      	movs	r0, #0
    147e:	4c19      	ldr	r4, [pc, #100]	; (14e4 <RADIO_ReadRandom+0x78>)
    1480:	47a0      	blx	r4
    RADIO_RegisterWrite(REG_LORA_IRQFLAGSMASK, 0xFF);
    1482:	21ff      	movs	r1, #255	; 0xff
    1484:	2011      	movs	r0, #17
    1486:	4b18      	ldr	r3, [pc, #96]	; (14e8 <RADIO_ReadRandom+0x7c>)
    1488:	4798      	blx	r3
    Radio_WriteMode(MODE_RXCONT, MODULATION_LORA, 1);
    148a:	2201      	movs	r2, #1
    148c:	2101      	movs	r1, #1
    148e:	2005      	movs	r0, #5
    1490:	47a0      	blx	r4
    1492:	2410      	movs	r4, #16
    retVal = 0;
    1494:	2500      	movs	r5, #0
    for (i = 0; i < 16; i++)
    {
        SystemBlockingWaitMs(1);
    1496:	4f15      	ldr	r7, [pc, #84]	; (14ec <RADIO_ReadRandom+0x80>)
        retVal <<= SHIFT1;
        retVal |= RADIO_RegisterRead(REG_LORA_RSSIWIDEBAND) & 0x01;
    1498:	4e15      	ldr	r6, [pc, #84]	; (14f0 <RADIO_ReadRandom+0x84>)
        SystemBlockingWaitMs(1);
    149a:	2001      	movs	r0, #1
    149c:	47b8      	blx	r7
        retVal |= RADIO_RegisterRead(REG_LORA_RSSIWIDEBAND) & 0x01;
    149e:	202c      	movs	r0, #44	; 0x2c
    14a0:	47b0      	blx	r6
    14a2:	2301      	movs	r3, #1
    14a4:	4018      	ands	r0, r3
        retVal <<= SHIFT1;
    14a6:	006d      	lsls	r5, r5, #1
        retVal |= RADIO_RegisterRead(REG_LORA_RSSIWIDEBAND) & 0x01;
    14a8:	4305      	orrs	r5, r0
    14aa:	b2ad      	uxth	r5, r5
    14ac:	3c01      	subs	r4, #1
    14ae:	b2e4      	uxtb	r4, r4
    for (i = 0; i < 16; i++)
    14b0:	2c00      	cmp	r4, #0
    14b2:	d1f2      	bne.n	149a <RADIO_ReadRandom+0x2e>
    }
	
	// Turning off the RF switch now.
	Radio_DisableRfControl(RADIO_RFCTRL_RX);
    14b4:	2000      	movs	r0, #0
    14b6:	4b0f      	ldr	r3, [pc, #60]	; (14f4 <RADIO_ReadRandom+0x88>)
    14b8:	4798      	blx	r3
	
    // Return radio to sleep
    Radio_WriteMode(MODE_SLEEP, MODULATION_LORA, 1);
    14ba:	2201      	movs	r2, #1
    14bc:	2101      	movs	r1, #1
    14be:	2000      	movs	r0, #0
    14c0:	4b08      	ldr	r3, [pc, #32]	; (14e4 <RADIO_ReadRandom+0x78>)
    14c2:	4798      	blx	r3
    // Clear interrupts in case any have been generated
    RADIO_RegisterWrite(REG_LORA_IRQFLAGS, 0xFF);
    14c4:	21ff      	movs	r1, #255	; 0xff
    14c6:	2012      	movs	r0, #18
    14c8:	4c07      	ldr	r4, [pc, #28]	; (14e8 <RADIO_ReadRandom+0x7c>)
    14ca:	47a0      	blx	r4
    // Unmask all interrupts
    RADIO_RegisterWrite(REG_LORA_IRQFLAGSMASK, 0x00);
    14cc:	2100      	movs	r1, #0
    14ce:	2011      	movs	r0, #17
    14d0:	47a0      	blx	r4
	// Disabling Radio Clock save power
	Radio_ResetClockInput();
    14d2:	4b09      	ldr	r3, [pc, #36]	; (14f8 <RADIO_ReadRandom+0x8c>)
    14d4:	4798      	blx	r3
	
    return retVal;
}
    14d6:	0028      	movs	r0, r5
    14d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    14da:	46c0      	nop			; (mov r8, r8)
    14dc:	0000e0d1 	.word	0x0000e0d1
    14e0:	0000e575 	.word	0x0000e575
    14e4:	00001339 	.word	0x00001339
    14e8:	000072fd 	.word	0x000072fd
    14ec:	00007459 	.word	0x00007459
    14f0:	00007325 	.word	0x00007325
    14f4:	0000e1f9 	.word	0x0000e1f9
    14f8:	0000e6b9 	.word	0x0000e6b9

000014fc <Radio_ReadRssi>:

\param rssi	- The RSSI measured in the channel.
\return		- ERR_NONE. Other types are not used now.
*************************************************************************/
RadioError_t Radio_ReadRssi(int16_t *rssi)
{
    14fc:	b510      	push	{r4, lr}
    14fe:	0004      	movs	r4, r0
	if (MODULATION_LORA == radioConfiguration.modulation)
    1500:	2334      	movs	r3, #52	; 0x34
    1502:	4a11      	ldr	r2, [pc, #68]	; (1548 <Radio_ReadRssi+0x4c>)
    1504:	5cd3      	ldrb	r3, [r2, r3]
    1506:	2b01      	cmp	r3, #1
    1508:	d003      	beq.n	1512 <Radio_ReadRssi+0x16>
		*rssi = -(RADIO_RegisterRead(REG_FSK_RSSIVALUE) >> 1);
#endif // UT
	}
	else
	{
		return ERR_UNSUPPORTED_ATTR;
    150a:	2006      	movs	r0, #6
	else if (MODULATION_FSK == radioConfiguration.modulation)
    150c:	2b00      	cmp	r3, #0
    150e:	d012      	beq.n	1536 <Radio_ReadRssi+0x3a>
	}

	return ERR_NONE;
}
    1510:	bd10      	pop	{r4, pc}
		if (radioConfiguration.frequency >= HF_FREQ_HZ)
    1512:	4b0e      	ldr	r3, [pc, #56]	; (154c <Radio_ReadRssi+0x50>)
    1514:	6812      	ldr	r2, [r2, #0]
    1516:	429a      	cmp	r2, r3
    1518:	d906      	bls.n	1528 <Radio_ReadRssi+0x2c>
			*rssi = RSSI_HF_OFFSET + RADIO_RegisterRead(REG_LORA_RSSIVALUE);
    151a:	201b      	movs	r0, #27
    151c:	4b0c      	ldr	r3, [pc, #48]	; (1550 <Radio_ReadRssi+0x54>)
    151e:	4798      	blx	r3
    1520:	389d      	subs	r0, #157	; 0x9d
    1522:	8020      	strh	r0, [r4, #0]
	return ERR_NONE;
    1524:	2000      	movs	r0, #0
    1526:	e7f3      	b.n	1510 <Radio_ReadRssi+0x14>
			*rssi = RSSI_LF_OFFSET + RADIO_RegisterRead(REG_LORA_RSSIVALUE);
    1528:	201b      	movs	r0, #27
    152a:	4b09      	ldr	r3, [pc, #36]	; (1550 <Radio_ReadRssi+0x54>)
    152c:	4798      	blx	r3
    152e:	38a4      	subs	r0, #164	; 0xa4
    1530:	8020      	strh	r0, [r4, #0]
	return ERR_NONE;
    1532:	2000      	movs	r0, #0
    1534:	e7ec      	b.n	1510 <Radio_ReadRssi+0x14>
		*rssi = -(RADIO_RegisterRead(REG_FSK_RSSIVALUE) >> 1);
    1536:	300b      	adds	r0, #11
    1538:	4b05      	ldr	r3, [pc, #20]	; (1550 <Radio_ReadRssi+0x54>)
    153a:	4798      	blx	r3
    153c:	0840      	lsrs	r0, r0, #1
    153e:	b2c3      	uxtb	r3, r0
    1540:	425b      	negs	r3, r3
    1542:	8023      	strh	r3, [r4, #0]
	return ERR_NONE;
    1544:	2000      	movs	r0, #0
    1546:	e7e3      	b.n	1510 <Radio_ReadRssi+0x14>
    1548:	20000654 	.word	0x20000654
    154c:	3361137f 	.word	0x3361137f
    1550:	00007325 	.word	0x00007325

00001554 <Stack_Init>:
/**************************************************************************//**
\brief Initializes the system. This is the first stack function to be called
       by the application in the main() function.
******************************************************************************/
void Stack_Init(void)
{
    1554:	b510      	push	{r4, lr}
	
	/* LORAWAN_Init() should have been called form here, 
	   but parser application has a round-about way to call it now */
 
	/* Post application task to initiate the execution from there */
	SYSTEM_PostTask(APP_TASK_ID);
    1556:	2010      	movs	r0, #16
    1558:	4b01      	ldr	r3, [pc, #4]	; (1560 <Stack_Init+0xc>)
    155a:	4798      	blx	r3
}
    155c:	bd10      	pop	{r4, pc}
    155e:	46c0      	nop			; (mov r8, r8)
    1560:	000015d1 	.word	0x000015d1

00001564 <SYSTEM_RunTasks>:
/************************************************************************/
/*********************************************************************//**
\brief System tasks execution entry point
*************************************************************************/
void SYSTEM_RunTasks(void)
{
    1564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if ((1 << SYSTEM_TASK_ID_COUNT) > sysTaskFlag)
    1566:	4b16      	ldr	r3, [pc, #88]	; (15c0 <SYSTEM_RunTasks+0x5c>)
    1568:	881b      	ldrh	r3, [r3, #0]
    156a:	b29b      	uxth	r3, r3
    156c:	2b1f      	cmp	r3, #31
    156e:	d922      	bls.n	15b6 <SYSTEM_RunTasks+0x52>
    1570:	e7fe      	b.n	1570 <SYSTEM_RunTasks+0xc>
    { /* Only valid task bits are set */
        while (sysTaskFlag)
        { /* One or more task are pending to execute */
            for (uint16_t taskId = 0; taskId < SYSTEM_TASK_ID_COUNT; taskId++)
            {
                if ((1 << taskId) & sysTaskFlag)
    1572:	2500      	movs	r5, #0
                    /*
                    * Reset the task bit since it is to be executed now.
                    * It is done inside atomic section to avoid any interrupt context
                    * corrupting the bits.
                    */
                    ATOMIC_SECTION_ENTER
    1574:	4b13      	ldr	r3, [pc, #76]	; (15c4 <SYSTEM_RunTasks+0x60>)
    1576:	4798      	blx	r3
                    sysTaskFlag &= ~(1 << taskId);
    1578:	4911      	ldr	r1, [pc, #68]	; (15c0 <SYSTEM_RunTasks+0x5c>)
    157a:	880b      	ldrh	r3, [r1, #0]
    157c:	2201      	movs	r2, #1
    157e:	40aa      	lsls	r2, r5
    1580:	4393      	bics	r3, r2
    1582:	800b      	strh	r3, [r1, #0]
                    ATOMIC_SECTION_EXIT
    1584:	4b10      	ldr	r3, [pc, #64]	; (15c8 <SYSTEM_RunTasks+0x64>)
    1586:	4798      	blx	r3

                    /* Return value is not used now, can be used later */
                    taskHandlers[taskId]();
    1588:	00ad      	lsls	r5, r5, #2
    158a:	4b10      	ldr	r3, [pc, #64]	; (15cc <SYSTEM_RunTasks+0x68>)
    158c:	58eb      	ldr	r3, [r5, r3]
    158e:	4798      	blx	r3
                if ((1 << taskId) & sysTaskFlag)
    1590:	2101      	movs	r1, #1
        while (sysTaskFlag)
    1592:	883b      	ldrh	r3, [r7, #0]
    1594:	b29b      	uxth	r3, r3
    1596:	2b00      	cmp	r3, #0
    1598:	d011      	beq.n	15be <SYSTEM_RunTasks+0x5a>
                if ((1 << taskId) & sysTaskFlag)
    159a:	8823      	ldrh	r3, [r4, #0]
    159c:	420b      	tst	r3, r1
    159e:	d1e8      	bne.n	1572 <SYSTEM_RunTasks+0xe>
    15a0:	2201      	movs	r2, #1
    15a2:	8833      	ldrh	r3, [r6, #0]
    15a4:	b29b      	uxth	r3, r3
    15a6:	0015      	movs	r5, r2
    15a8:	4113      	asrs	r3, r2
    15aa:	4219      	tst	r1, r3
    15ac:	d1e2      	bne.n	1574 <SYSTEM_RunTasks+0x10>
    15ae:	3201      	adds	r2, #1
            for (uint16_t taskId = 0; taskId < SYSTEM_TASK_ID_COUNT; taskId++)
    15b0:	2a05      	cmp	r2, #5
    15b2:	d1f6      	bne.n	15a2 <SYSTEM_RunTasks+0x3e>
    15b4:	e7ed      	b.n	1592 <SYSTEM_RunTasks+0x2e>
        while (sysTaskFlag)
    15b6:	4f02      	ldr	r7, [pc, #8]	; (15c0 <SYSTEM_RunTasks+0x5c>)
                if ((1 << taskId) & sysTaskFlag)
    15b8:	003c      	movs	r4, r7
    15ba:	003e      	movs	r6, r7
    15bc:	e7e8      	b.n	1590 <SYSTEM_RunTasks+0x2c>
        * Can happen only due to corruption, so halt
        * TODO : replace this with assert implementation
        */
        while(1);
    }
}
    15be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    15c0:	20000164 	.word	0x20000164
    15c4:	00007475 	.word	0x00007475
    15c8:	00007481 	.word	0x00007481
    15cc:	0001250c 	.word	0x0001250c

000015d0 <SYSTEM_PostTask>:

\param[in] task - ID of the posted task.
*************************************************************************/

void SYSTEM_PostTask(SYSTEM_Task_t task)
{
    15d0:	b510      	push	{r4, lr}
    15d2:	0004      	movs	r4, r0
    ATOMIC_SECTION_ENTER
    15d4:	4b04      	ldr	r3, [pc, #16]	; (15e8 <SYSTEM_PostTask+0x18>)
    15d6:	4798      	blx	r3
    sysTaskFlag |= task;
    15d8:	4b04      	ldr	r3, [pc, #16]	; (15ec <SYSTEM_PostTask+0x1c>)
    15da:	8818      	ldrh	r0, [r3, #0]
    15dc:	4320      	orrs	r0, r4
    15de:	8018      	strh	r0, [r3, #0]
    ATOMIC_SECTION_EXIT
    15e0:	4b03      	ldr	r3, [pc, #12]	; (15f0 <SYSTEM_PostTask+0x20>)
    15e2:	4798      	blx	r3
}
    15e4:	bd10      	pop	{r4, pc}
    15e6:	46c0      	nop			; (mov r8, r8)
    15e8:	00007475 	.word	0x00007475
    15ec:	20000164 	.word	0x20000164
    15f0:	00007481 	.word	0x00007481

000015f4 <hwTimerExpiryCallback>:
    swtimerProcessOverflow();
}

/* ISR to handle CC0 interrupt from TC0 */
static void hwTimerExpiryCallback(void)
{
    15f4:	b510      	push	{r4, lr}
    if (0 < runningTimers)
    15f6:	4b06      	ldr	r3, [pc, #24]	; (1610 <hwTimerExpiryCallback+0x1c>)
    15f8:	781b      	ldrb	r3, [r3, #0]
    15fa:	2b00      	cmp	r3, #0
    15fc:	d100      	bne.n	1600 <hwTimerExpiryCallback+0xc>
    {
        isTimerTriggered = true;
        SYSTEM_PostTask(TIMER_TASK_ID);
    }
}
    15fe:	bd10      	pop	{r4, pc}
        isTimerTriggered = true;
    1600:	2201      	movs	r2, #1
    1602:	4b04      	ldr	r3, [pc, #16]	; (1614 <hwTimerExpiryCallback+0x20>)
    1604:	701a      	strb	r2, [r3, #0]
        SYSTEM_PostTask(TIMER_TASK_ID);
    1606:	2001      	movs	r0, #1
    1608:	4b03      	ldr	r3, [pc, #12]	; (1618 <hwTimerExpiryCallback+0x24>)
    160a:	4798      	blx	r3
}
    160c:	e7f7      	b.n	15fe <hwTimerExpiryCallback+0xa>
    160e:	46c0      	nop			; (mov r8, r8)
    1610:	20000174 	.word	0x20000174
    1614:	2000083e 	.word	0x2000083e
    1618:	000015d1 	.word	0x000015d1

0000161c <hwTimerOverflowCallback>:
{
    161c:	b510      	push	{r4, lr}
    161e:	b082      	sub	sp, #8
    uint16_t temp = sysTime;
    1620:	4924      	ldr	r1, [pc, #144]	; (16b4 <hwTimerOverflowCallback+0x98>)
    1622:	880a      	ldrh	r2, [r1, #0]
    1624:	b292      	uxth	r2, r2
    if (++sysTime < temp)
    1626:	880b      	ldrh	r3, [r1, #0]
    1628:	3301      	adds	r3, #1
    162a:	b29b      	uxth	r3, r3
    162c:	800b      	strh	r3, [r1, #0]
    162e:	429a      	cmp	r2, r3
    1630:	d903      	bls.n	163a <hwTimerOverflowCallback+0x1e>
        sysTimeOvf++;
    1632:	4a21      	ldr	r2, [pc, #132]	; (16b8 <hwTimerOverflowCallback+0x9c>)
    1634:	6813      	ldr	r3, [r2, #0]
    1636:	3301      	adds	r3, #1
    1638:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    163a:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    163e:	425a      	negs	r2, r3
    1640:	4153      	adcs	r3, r2
    1642:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    1644:	b672      	cpsid	i
    1646:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    164a:	2200      	movs	r2, #0
    164c:	4b1b      	ldr	r3, [pc, #108]	; (16bc <hwTimerOverflowCallback+0xa0>)
    164e:	701a      	strb	r2, [r3, #0]
	return flags;
    1650:	9c01      	ldr	r4, [sp, #4]
{
    uint32_t tmo32;
    uint16_t tmoHigh16, tmoLow16;
    uint8_t flags = cpu_irq_save();

    if (SWTIMER_INVALID != runningTimerQueueHead && !swTimers[runningTimerQueueHead].loaded)
    1652:	4b1b      	ldr	r3, [pc, #108]	; (16c0 <hwTimerOverflowCallback+0xa4>)
    1654:	681b      	ldr	r3, [r3, #0]
    1656:	2bff      	cmp	r3, #255	; 0xff
    1658:	d00d      	beq.n	1676 <hwTimerOverflowCallback+0x5a>
    165a:	0119      	lsls	r1, r3, #4
    165c:	4a19      	ldr	r2, [pc, #100]	; (16c4 <hwTimerOverflowCallback+0xa8>)
    165e:	1852      	adds	r2, r2, r1
    1660:	7b52      	ldrb	r2, [r2, #13]
    1662:	2a00      	cmp	r2, #0
    1664:	d107      	bne.n	1676 <hwTimerOverflowCallback+0x5a>
    {
        tmo32 = swTimers[runningTimerQueueHead].absoluteExpiryTime;
    1666:	4a17      	ldr	r2, [pc, #92]	; (16c4 <hwTimerOverflowCallback+0xa8>)
    1668:	5888      	ldr	r0, [r1, r2]
        tmoHigh16 = (uint16_t)(tmo32 >> SWTIMER_SYSTIME_SHIFTMASK);

        if (tmoHigh16 == sysTime)
    166a:	4b12      	ldr	r3, [pc, #72]	; (16b4 <hwTimerOverflowCallback+0x98>)
    166c:	881b      	ldrh	r3, [r3, #0]
    166e:	b29b      	uxth	r3, r3
    1670:	0c02      	lsrs	r2, r0, #16
    1672:	429a      	cmp	r2, r3
    1674:	d00a      	beq.n	168c <hwTimerOverflowCallback+0x70>
	if (cpu_irq_is_enabled_flags(flags))
    1676:	23ff      	movs	r3, #255	; 0xff
    1678:	4223      	tst	r3, r4
    167a:	d005      	beq.n	1688 <hwTimerOverflowCallback+0x6c>
		cpu_irq_enable();
    167c:	2201      	movs	r2, #1
    167e:	4b0f      	ldr	r3, [pc, #60]	; (16bc <hwTimerOverflowCallback+0xa0>)
    1680:	701a      	strb	r2, [r3, #0]
    1682:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1686:	b662      	cpsie	i
}
    1688:	b002      	add	sp, #8
    168a:	bd10      	pop	{r4, pc}
        {
            tmoLow16 = (uint16_t)(tmo32 & SWTIMER_HWTIME_MASK);
    168c:	b280      	uxth	r0, r0
            if (SWTIMER_MIN_TIMEOUT < tmoLow16)
    168e:	28ff      	cmp	r0, #255	; 0xff
    1690:	d909      	bls.n	16a6 <hwTimerOverflowCallback+0x8a>
            {
                common_tc_delay(tmoLow16);
    1692:	4b0d      	ldr	r3, [pc, #52]	; (16c8 <hwTimerOverflowCallback+0xac>)
    1694:	4798      	blx	r3
                swTimers[runningTimerQueueHead].loaded = true;
    1696:	4b0a      	ldr	r3, [pc, #40]	; (16c0 <hwTimerOverflowCallback+0xa4>)
    1698:	681a      	ldr	r2, [r3, #0]
    169a:	0112      	lsls	r2, r2, #4
    169c:	4b09      	ldr	r3, [pc, #36]	; (16c4 <hwTimerOverflowCallback+0xa8>)
    169e:	189b      	adds	r3, r3, r2
    16a0:	2201      	movs	r2, #1
    16a2:	735a      	strb	r2, [r3, #13]
    16a4:	e7e7      	b.n	1676 <hwTimerOverflowCallback+0x5a>
            }
            else
            {
                isTimerTriggered = true;
    16a6:	2201      	movs	r2, #1
    16a8:	4b08      	ldr	r3, [pc, #32]	; (16cc <hwTimerOverflowCallback+0xb0>)
    16aa:	701a      	strb	r2, [r3, #0]
                SYSTEM_PostTask(TIMER_TASK_ID);
    16ac:	2001      	movs	r0, #1
    16ae:	4b08      	ldr	r3, [pc, #32]	; (16d0 <hwTimerOverflowCallback+0xb4>)
    16b0:	4798      	blx	r3
    16b2:	e7e0      	b.n	1676 <hwTimerOverflowCallback+0x5a>
    16b4:	2000083c 	.word	0x2000083c
    16b8:	20000840 	.word	0x20000840
    16bc:	20000008 	.word	0x20000008
    16c0:	20000170 	.word	0x20000170
    16c4:	200006ac 	.word	0x200006ac
    16c8:	000091d1 	.word	0x000091d1
    16cc:	2000083e 	.word	0x2000083e
    16d0:	000015d1 	.word	0x000015d1

000016d4 <loadHwTimer>:
{
    16d4:	b570      	push	{r4, r5, r6, lr}
    16d6:	0004      	movs	r4, r0
    if (SWTIMER_INVALID != timerId)
    16d8:	28ff      	cmp	r0, #255	; 0xff
    16da:	d030      	beq.n	173e <loadHwTimer+0x6a>
    time |= ((uint64_t) sysTimeOvf) << 32;
    16dc:	4b19      	ldr	r3, [pc, #100]	; (1744 <loadHwTimer+0x70>)
    16de:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    16e0:	4b19      	ldr	r3, [pc, #100]	; (1748 <loadHwTimer+0x74>)
    16e2:	881d      	ldrh	r5, [r3, #0]
    16e4:	042d      	lsls	r5, r5, #16
    time |= (uint64_t) common_tc_read_count();
    16e6:	4b19      	ldr	r3, [pc, #100]	; (174c <loadHwTimer+0x78>)
    16e8:	4798      	blx	r3
        uint32_t expiryTime = swTimers[timerId].absoluteExpiryTime;
    16ea:	0123      	lsls	r3, r4, #4
    time |= (uint64_t) common_tc_read_count();
    16ec:	4328      	orrs	r0, r5
    return ((t2 - t1) < INT32_MAX);
    16ee:	4a18      	ldr	r2, [pc, #96]	; (1750 <loadHwTimer+0x7c>)
    16f0:	589b      	ldr	r3, [r3, r2]
    16f2:	1a18      	subs	r0, r3, r0
        if (swtimerCompareTime(now, expiryTime))
    16f4:	4b17      	ldr	r3, [pc, #92]	; (1754 <loadHwTimer+0x80>)
    16f6:	4298      	cmp	r0, r3
    16f8:	d81a      	bhi.n	1730 <loadHwTimer+0x5c>
            if (!swTimers[timerId].loaded)
    16fa:	0122      	lsls	r2, r4, #4
    16fc:	4b14      	ldr	r3, [pc, #80]	; (1750 <loadHwTimer+0x7c>)
    16fe:	189b      	adds	r3, r3, r2
    1700:	7b5b      	ldrb	r3, [r3, #13]
    1702:	2b00      	cmp	r3, #0
    1704:	d11d      	bne.n	1742 <loadHwTimer+0x6e>
                if (SWTIMER_MIN_TIMEOUT >= timeDiff)
    1706:	28ff      	cmp	r0, #255	; 0xff
    1708:	d90b      	bls.n	1722 <loadHwTimer+0x4e>
                else  if ((uint32_t)TIMER_PERIOD >= timeDiff)
    170a:	4b13      	ldr	r3, [pc, #76]	; (1758 <loadHwTimer+0x84>)
    170c:	4298      	cmp	r0, r3
    170e:	d818      	bhi.n	1742 <loadHwTimer+0x6e>
                    common_tc_delay((uint16_t)timeDiff);
    1710:	b280      	uxth	r0, r0
    1712:	4b12      	ldr	r3, [pc, #72]	; (175c <loadHwTimer+0x88>)
    1714:	4798      	blx	r3
                    swTimers[timerId].loaded = true;
    1716:	0124      	lsls	r4, r4, #4
    1718:	4b0d      	ldr	r3, [pc, #52]	; (1750 <loadHwTimer+0x7c>)
    171a:	191c      	adds	r4, r3, r4
    171c:	2301      	movs	r3, #1
    171e:	7363      	strb	r3, [r4, #13]
    1720:	e00f      	b.n	1742 <loadHwTimer+0x6e>
                    isTimerTriggered = true;
    1722:	2201      	movs	r2, #1
    1724:	4b0e      	ldr	r3, [pc, #56]	; (1760 <loadHwTimer+0x8c>)
    1726:	701a      	strb	r2, [r3, #0]
                    SYSTEM_PostTask(TIMER_TASK_ID);
    1728:	2001      	movs	r0, #1
    172a:	4b0e      	ldr	r3, [pc, #56]	; (1764 <loadHwTimer+0x90>)
    172c:	4798      	blx	r3
    172e:	e008      	b.n	1742 <loadHwTimer+0x6e>
            isTimerTriggered = true;
    1730:	2201      	movs	r2, #1
    1732:	4b0b      	ldr	r3, [pc, #44]	; (1760 <loadHwTimer+0x8c>)
    1734:	701a      	strb	r2, [r3, #0]
            SYSTEM_PostTask(TIMER_TASK_ID);
    1736:	2001      	movs	r0, #1
    1738:	4b0a      	ldr	r3, [pc, #40]	; (1764 <loadHwTimer+0x90>)
    173a:	4798      	blx	r3
    173c:	e001      	b.n	1742 <loadHwTimer+0x6e>
        common_tc_compare_stop();
    173e:	4b0a      	ldr	r3, [pc, #40]	; (1768 <loadHwTimer+0x94>)
    1740:	4798      	blx	r3
}
    1742:	bd70      	pop	{r4, r5, r6, pc}
    1744:	20000840 	.word	0x20000840
    1748:	2000083c 	.word	0x2000083c
    174c:	0000915d 	.word	0x0000915d
    1750:	200006ac 	.word	0x200006ac
    1754:	7ffffffe 	.word	0x7ffffffe
    1758:	0000ffff 	.word	0x0000ffff
    175c:	000091d1 	.word	0x000091d1
    1760:	2000083e 	.word	0x2000083e
    1764:	000015d1 	.word	0x000015d1
    1768:	000091a9 	.word	0x000091a9

0000176c <swtimerInternalHandler>:

/**************************************************************************//**
\brief Internal handler for the timer trigger
******************************************************************************/
static void swtimerInternalHandler(void)
{
    176c:	b510      	push	{r4, lr}
    if (isTimerTriggered)
    176e:	4b1d      	ldr	r3, [pc, #116]	; (17e4 <swtimerInternalHandler+0x78>)
    1770:	781b      	ldrb	r3, [r3, #0]
    1772:	2b00      	cmp	r3, #0
    1774:	d027      	beq.n	17c6 <swtimerInternalHandler+0x5a>
    {
        isTimerTriggered = false;
    1776:	2200      	movs	r2, #0
    1778:	4b1a      	ldr	r3, [pc, #104]	; (17e4 <swtimerInternalHandler+0x78>)
    177a:	701a      	strb	r2, [r3, #0]

        if (0 < runningTimers)
    177c:	4b1a      	ldr	r3, [pc, #104]	; (17e8 <swtimerInternalHandler+0x7c>)
    177e:	781b      	ldrb	r3, [r3, #0]
    1780:	2b00      	cmp	r3, #0
    1782:	d020      	beq.n	17c6 <swtimerInternalHandler+0x5a>
        { /* Holds the number of running timers */
            if ((expiredTimerQueueHead == SWTIMER_INVALID) && \
    1784:	4b19      	ldr	r3, [pc, #100]	; (17ec <swtimerInternalHandler+0x80>)
    1786:	681b      	ldr	r3, [r3, #0]
    1788:	2bff      	cmp	r3, #255	; 0xff
    178a:	d01d      	beq.n	17c8 <swtimerInternalHandler+0x5c>
                expiredTimerQueueHead = runningTimerQueueHead;
                expiredTimerQueueTail = runningTimerQueueHead;
            }
            else
            { /* there were already some timers expired before this one */
                swTimers[expiredTimerQueueTail].nextTimer = runningTimerQueueHead;
    178c:	4b18      	ldr	r3, [pc, #96]	; (17f0 <swtimerInternalHandler+0x84>)
    178e:	6818      	ldr	r0, [r3, #0]
    1790:	4918      	ldr	r1, [pc, #96]	; (17f4 <swtimerInternalHandler+0x88>)
    1792:	680b      	ldr	r3, [r1, #0]
    1794:	011a      	lsls	r2, r3, #4
    1796:	4b18      	ldr	r3, [pc, #96]	; (17f8 <swtimerInternalHandler+0x8c>)
    1798:	189b      	adds	r3, r3, r2
    179a:	7318      	strb	r0, [r3, #12]
                expiredTimerQueueTail = runningTimerQueueHead;
    179c:	6008      	str	r0, [r1, #0]
            }

            runningTimerQueueHead = swTimers[runningTimerQueueHead].nextTimer;
    179e:	4a16      	ldr	r2, [pc, #88]	; (17f8 <swtimerInternalHandler+0x8c>)
    17a0:	4913      	ldr	r1, [pc, #76]	; (17f0 <swtimerInternalHandler+0x84>)
    17a2:	680b      	ldr	r3, [r1, #0]
    17a4:	011b      	lsls	r3, r3, #4
    17a6:	18d3      	adds	r3, r2, r3
    17a8:	7b18      	ldrb	r0, [r3, #12]
    17aa:	6008      	str	r0, [r1, #0]

            swTimers[expiredTimerQueueTail].nextTimer = SWTIMER_INVALID;
    17ac:	4b11      	ldr	r3, [pc, #68]	; (17f4 <swtimerInternalHandler+0x88>)
    17ae:	681b      	ldr	r3, [r3, #0]
    17b0:	011b      	lsls	r3, r3, #4
    17b2:	18d2      	adds	r2, r2, r3
    17b4:	23ff      	movs	r3, #255	; 0xff
    17b6:	7313      	strb	r3, [r2, #12]

            if ((--runningTimers) > 0)
    17b8:	4a0b      	ldr	r2, [pc, #44]	; (17e8 <swtimerInternalHandler+0x7c>)
    17ba:	7813      	ldrb	r3, [r2, #0]
    17bc:	3b01      	subs	r3, #1
    17be:	b2db      	uxtb	r3, r3
    17c0:	7013      	strb	r3, [r2, #0]
    17c2:	2b00      	cmp	r3, #0
    17c4:	d10b      	bne.n	17de <swtimerInternalHandler+0x72>
            { /* keep the ball rolling! load the next head timer from the queue */
                loadHwTimer(runningTimerQueueHead);
            }
        }
    }
}
    17c6:	bd10      	pop	{r4, pc}
                (expiredTimerQueueTail == SWTIMER_INVALID))
    17c8:	4b0a      	ldr	r3, [pc, #40]	; (17f4 <swtimerInternalHandler+0x88>)
            if ((expiredTimerQueueHead == SWTIMER_INVALID) && \
    17ca:	681b      	ldr	r3, [r3, #0]
    17cc:	2bff      	cmp	r3, #255	; 0xff
    17ce:	d1dd      	bne.n	178c <swtimerInternalHandler+0x20>
                expiredTimerQueueHead = runningTimerQueueHead;
    17d0:	4b07      	ldr	r3, [pc, #28]	; (17f0 <swtimerInternalHandler+0x84>)
    17d2:	681b      	ldr	r3, [r3, #0]
    17d4:	4a05      	ldr	r2, [pc, #20]	; (17ec <swtimerInternalHandler+0x80>)
    17d6:	6013      	str	r3, [r2, #0]
                expiredTimerQueueTail = runningTimerQueueHead;
    17d8:	4a06      	ldr	r2, [pc, #24]	; (17f4 <swtimerInternalHandler+0x88>)
    17da:	6013      	str	r3, [r2, #0]
    17dc:	e7df      	b.n	179e <swtimerInternalHandler+0x32>
                loadHwTimer(runningTimerQueueHead);
    17de:	4b07      	ldr	r3, [pc, #28]	; (17fc <swtimerInternalHandler+0x90>)
    17e0:	4798      	blx	r3
}
    17e2:	e7f0      	b.n	17c6 <swtimerInternalHandler+0x5a>
    17e4:	2000083e 	.word	0x2000083e
    17e8:	20000174 	.word	0x20000174
    17ec:	20000168 	.word	0x20000168
    17f0:	20000170 	.word	0x20000170
    17f4:	2000016c 	.word	0x2000016c
    17f8:	200006ac 	.word	0x200006ac
    17fc:	000016d5 	.word	0x000016d5

00001800 <SwTimerReset>:
    /*
    * Initialize the timer resources like timer arrays queues, timer registers
    */
    uint8_t index;

    runningTimers = 0u;
    1800:	2300      	movs	r3, #0
    1802:	4a0d      	ldr	r2, [pc, #52]	; (1838 <SwTimerReset+0x38>)
    1804:	7013      	strb	r3, [r2, #0]
    isTimerTriggered = false;
    1806:	4a0d      	ldr	r2, [pc, #52]	; (183c <SwTimerReset+0x3c>)
    1808:	7013      	strb	r3, [r2, #0]

    runningTimerQueueHead = SWTIMER_INVALID;
    180a:	33ff      	adds	r3, #255	; 0xff
    180c:	4a0c      	ldr	r2, [pc, #48]	; (1840 <SwTimerReset+0x40>)
    180e:	6013      	str	r3, [r2, #0]
    expiredTimerQueueHead = SWTIMER_INVALID;
    1810:	4a0c      	ldr	r2, [pc, #48]	; (1844 <SwTimerReset+0x44>)
    1812:	6013      	str	r3, [r2, #0]
    expiredTimerQueueTail = SWTIMER_INVALID;
    1814:	4a0c      	ldr	r2, [pc, #48]	; (1848 <SwTimerReset+0x48>)
    1816:	6013      	str	r3, [r2, #0]
    1818:	4b0c      	ldr	r3, [pc, #48]	; (184c <SwTimerReset+0x4c>)
    181a:	0018      	movs	r0, r3
    181c:	3091      	adds	r0, #145	; 0x91
    181e:	30ff      	adds	r0, #255	; 0xff

    for (index = 0; index < TOTAL_NUMBER_OF_SW_TIMERS; index++)
    {
        swTimers[index].nextTimer = SWTIMER_INVALID;
    1820:	21ff      	movs	r1, #255	; 0xff
        swTimers[index].timerCb = NULL;
    1822:	2200      	movs	r2, #0
        swTimers[index].nextTimer = SWTIMER_INVALID;
    1824:	7219      	strb	r1, [r3, #8]
        swTimers[index].timerCb = NULL;
    1826:	601a      	str	r2, [r3, #0]
    1828:	3310      	adds	r3, #16
    for (index = 0; index < TOTAL_NUMBER_OF_SW_TIMERS; index++)
    182a:	4283      	cmp	r3, r0
    182c:	d1fa      	bne.n	1824 <SwTimerReset+0x24>
    }

    allocatedTimerId = 0u;
    182e:	2200      	movs	r2, #0
    1830:	4b07      	ldr	r3, [pc, #28]	; (1850 <SwTimerReset+0x50>)
    1832:	701a      	strb	r2, [r3, #0]
}
    1834:	4770      	bx	lr
    1836:	46c0      	nop			; (mov r8, r8)
    1838:	20000174 	.word	0x20000174
    183c:	2000083e 	.word	0x2000083e
    1840:	20000170 	.word	0x20000170
    1844:	20000168 	.word	0x20000168
    1848:	2000016c 	.word	0x2000016c
    184c:	200006b0 	.word	0x200006b0
    1850:	20000166 	.word	0x20000166

00001854 <SystemTimerInit>:

/**************************************************************************//**
\brief Initializes the Software Timer module
******************************************************************************/
void SystemTimerInit(void)
{
    1854:	b510      	push	{r4, lr}
    SwTimerReset();
    1856:	4b08      	ldr	r3, [pc, #32]	; (1878 <SystemTimerInit+0x24>)
    1858:	4798      	blx	r3

    /* initialize system time parameters */
    sysTimeOvf = sysTime = 0u;
    185a:	2300      	movs	r3, #0
    185c:	4a07      	ldr	r2, [pc, #28]	; (187c <SystemTimerInit+0x28>)
    185e:	8013      	strh	r3, [r2, #0]
    1860:	4a07      	ldr	r2, [pc, #28]	; (1880 <SystemTimerInit+0x2c>)
    1862:	6013      	str	r3, [r2, #0]

    common_tc_init();
    1864:	4b07      	ldr	r3, [pc, #28]	; (1884 <SystemTimerInit+0x30>)
    1866:	4798      	blx	r3
    set_common_tc_overflow_callback(hwTimerOverflowCallback);
    1868:	4807      	ldr	r0, [pc, #28]	; (1888 <SystemTimerInit+0x34>)
    186a:	4b08      	ldr	r3, [pc, #32]	; (188c <SystemTimerInit+0x38>)
    186c:	4798      	blx	r3
    set_common_tc_expiry_callback(hwTimerExpiryCallback);
    186e:	4808      	ldr	r0, [pc, #32]	; (1890 <SystemTimerInit+0x3c>)
    1870:	4b08      	ldr	r3, [pc, #32]	; (1894 <SystemTimerInit+0x40>)
    1872:	4798      	blx	r3
}
    1874:	bd10      	pop	{r4, pc}
    1876:	46c0      	nop			; (mov r8, r8)
    1878:	00001801 	.word	0x00001801
    187c:	2000083c 	.word	0x2000083c
    1880:	20000840 	.word	0x20000840
    1884:	0000923d 	.word	0x0000923d
    1888:	0000161d 	.word	0x0000161d
    188c:	000092c1 	.word	0x000092c1
    1890:	000015f5 	.word	0x000015f5
    1894:	000092cd 	.word	0x000092cd

00001898 <SwTimerGetTime>:
/**************************************************************************//**
\brief Get current system time.
\return Returns current system time in microseconds
******************************************************************************/
uint64_t SwTimerGetTime(void)
{
    1898:	b570      	push	{r4, r5, r6, lr}
    time |= ((uint64_t) sysTimeOvf) << 32;
    189a:	4b05      	ldr	r3, [pc, #20]	; (18b0 <SwTimerGetTime+0x18>)
    189c:	681c      	ldr	r4, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    189e:	4b05      	ldr	r3, [pc, #20]	; (18b4 <SwTimerGetTime+0x1c>)
    18a0:	881d      	ldrh	r5, [r3, #0]
    18a2:	042d      	lsls	r5, r5, #16
    time |= (uint64_t) common_tc_read_count();
    18a4:	4b04      	ldr	r3, [pc, #16]	; (18b8 <SwTimerGetTime+0x20>)
    18a6:	4798      	blx	r3
    18a8:	4328      	orrs	r0, r5
    return gettime();
}
    18aa:	0021      	movs	r1, r4
    18ac:	bd70      	pop	{r4, r5, r6, pc}
    18ae:	46c0      	nop			; (mov r8, r8)
    18b0:	20000840 	.word	0x20000840
    18b4:	2000083c 	.word	0x2000083c
    18b8:	0000915d 	.word	0x0000915d

000018bc <SwTimerCreate>:

\return LORAWAN_SUCCESS if new timerId is allocated
        LORAWAN_RESOURCE_UNAVAILABLE if there is no more timerId to allocate
******************************************************************************/
StackRetStatus_t SwTimerCreate(uint8_t *timerId)
{
    18bc:	b510      	push	{r4, lr}
    18be:	0004      	movs	r4, r0
    StackRetStatus_t retVal = LORAWAN_SUCCESS;

    if (allocatedTimerId < TOTAL_NUMBER_OF_SW_TIMERS)
    18c0:	4b08      	ldr	r3, [pc, #32]	; (18e4 <SwTimerCreate+0x28>)
    18c2:	781b      	ldrb	r3, [r3, #0]
        * If you reach this spot it means the TOTAL_NUMBER_OF_SW_TIMERS
        * is #defined to a lower value than the number of timers that have
        * been SwTimerCreate()
        */
        SYS_ASSERT_FATAL(ASSERT_HAL_TIMERID_EXHAUSTED);
        retVal = LORAWAN_RESOURCE_UNAVAILABLE;
    18c4:	2014      	movs	r0, #20
    if (allocatedTimerId < TOTAL_NUMBER_OF_SW_TIMERS)
    18c6:	2b18      	cmp	r3, #24
    18c8:	d900      	bls.n	18cc <SwTimerCreate+0x10>
    }

    return retVal;
}
    18ca:	bd10      	pop	{r4, pc}
        ATOMIC_SECTION_ENTER
    18cc:	4b06      	ldr	r3, [pc, #24]	; (18e8 <SwTimerCreate+0x2c>)
    18ce:	4798      	blx	r3
        *timerId = allocatedTimerId;
    18d0:	4a04      	ldr	r2, [pc, #16]	; (18e4 <SwTimerCreate+0x28>)
    18d2:	7813      	ldrb	r3, [r2, #0]
    18d4:	7023      	strb	r3, [r4, #0]
        allocatedTimerId++;
    18d6:	3301      	adds	r3, #1
    18d8:	7013      	strb	r3, [r2, #0]
        ATOMIC_SECTION_EXIT
    18da:	4b04      	ldr	r3, [pc, #16]	; (18ec <SwTimerCreate+0x30>)
    18dc:	4798      	blx	r3
    StackRetStatus_t retVal = LORAWAN_SUCCESS;
    18de:	2008      	movs	r0, #8
    18e0:	e7f3      	b.n	18ca <SwTimerCreate+0xe>
    18e2:	46c0      	nop			; (mov r8, r8)
    18e4:	20000166 	.word	0x20000166
    18e8:	00007475 	.word	0x00007475
    18ec:	00007481 	.word	0x00007481

000018f0 <SwTimerStart>:
        LORAWAN_INVALID_REQUEST if \timerId is already running
        LORAWAN_SUCCESS if \timerId is successfully queued for running
******************************************************************************/
StackRetStatus_t SwTimerStart(uint8_t timerId, uint32_t timerCount,
    SwTimeoutType_t timeoutType, void *timerCb, void *paramCb)
{
    18f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    18f2:	46d6      	mov	lr, sl
    18f4:	464f      	mov	r7, r9
    18f6:	4646      	mov	r6, r8
    18f8:	b5c0      	push	{r6, r7, lr}
    18fa:	b084      	sub	sp, #16
    18fc:	0007      	movs	r7, r0
    18fe:	000d      	movs	r5, r1
    1900:	0016      	movs	r6, r2
    1902:	001c      	movs	r4, r3
    uint32_t pointInTime;

    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId || NULL == timerCb)
    {
        SYS_ASSERT_INFO(ASSERT_HAL_TIMER_START_FAILURE);
        return LORAWAN_INVALID_PARAMETER;
    1904:	200a      	movs	r0, #10
    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId || NULL == timerCb)
    1906:	2f18      	cmp	r7, #24
    1908:	d809      	bhi.n	191e <SwTimerStart+0x2e>
    190a:	2b00      	cmp	r3, #0
    190c:	d100      	bne.n	1910 <SwTimerStart+0x20>
    190e:	e08c      	b.n	1a2a <SwTimerStart+0x13a>
    }

    if (NULL != swTimers[timerId].timerCb)
    1910:	013a      	lsls	r2, r7, #4
    1912:	4b52      	ldr	r3, [pc, #328]	; (1a5c <SwTimerStart+0x16c>)
    1914:	189b      	adds	r3, r3, r2
    1916:	685b      	ldr	r3, [r3, #4]
        /*
        * Timer is already running if the callback function of the
        * corresponding timer index in the timer array is not NULL.
        */
        SYS_ASSERT_INFO(ASSERT_HAL_TIMER_START_FAILURE);
        return LORAWAN_INVALID_REQUEST;
    1918:	300b      	adds	r0, #11
    if (NULL != swTimers[timerId].timerCb)
    191a:	2b00      	cmp	r3, #0
    191c:	d005      	beq.n	192a <SwTimerStart+0x3a>
        }
    }

    swtimerStartAbsoluteTimer(timerId, pointInTime, timerCb, paramCb);
    return LORAWAN_SUCCESS;
}
    191e:	b004      	add	sp, #16
    1920:	bc1c      	pop	{r2, r3, r4}
    1922:	4690      	mov	r8, r2
    1924:	4699      	mov	r9, r3
    1926:	46a2      	mov	sl, r4
    1928:	bdf0      	pop	{r4, r5, r6, r7, pc}
    time |= ((uint64_t) sysTimeOvf) << 32;
    192a:	4b4d      	ldr	r3, [pc, #308]	; (1a60 <SwTimerStart+0x170>)
    192c:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    192e:	4b4d      	ldr	r3, [pc, #308]	; (1a64 <SwTimerStart+0x174>)
    1930:	8818      	ldrh	r0, [r3, #0]
    1932:	0403      	lsls	r3, r0, #16
    1934:	4698      	mov	r8, r3
    time |= (uint64_t) common_tc_read_count();
    1936:	4b4c      	ldr	r3, [pc, #304]	; (1a68 <SwTimerStart+0x178>)
    1938:	4798      	blx	r3
    193a:	4643      	mov	r3, r8
    193c:	4303      	orrs	r3, r0
    switch (timeoutType)
    193e:	2e00      	cmp	r6, #0
    1940:	d003      	beq.n	194a <SwTimerStart+0x5a>
    1942:	2e01      	cmp	r6, #1
    1944:	d038      	beq.n	19b8 <SwTimerStart+0xc8>
            return LORAWAN_INVALID_PARAMETER;
    1946:	200a      	movs	r0, #10
    1948:	e7e9      	b.n	191e <SwTimerStart+0x2e>
            if ((timerCount > SWTIMER_MAX_TIMEOUT) || \
    194a:	4948      	ldr	r1, [pc, #288]	; (1a6c <SwTimerStart+0x17c>)
                return LORAWAN_INVALID_PARAMETER;
    194c:	200a      	movs	r0, #10
            if ((timerCount > SWTIMER_MAX_TIMEOUT) || \
    194e:	002a      	movs	r2, r5
    1950:	3aff      	subs	r2, #255	; 0xff
            pointInTime = ADD_TIME(timerCount, now);
    1952:	18ed      	adds	r5, r5, r3
            if ((timerCount > SWTIMER_MAX_TIMEOUT) || \
    1954:	428a      	cmp	r2, r1
    1956:	d8e2      	bhi.n	191e <SwTimerStart+0x2e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1958:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    195c:	425a      	negs	r2, r3
    195e:	4153      	adcs	r3, r2
    1960:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
    1962:	b672      	cpsid	i
    1964:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    1968:	2600      	movs	r6, #0
    196a:	4b41      	ldr	r3, [pc, #260]	; (1a70 <SwTimerStart+0x180>)
    196c:	701e      	strb	r6, [r3, #0]
	return flags;
    196e:	9b03      	ldr	r3, [sp, #12]
    1970:	4699      	mov	r9, r3
    swtimerInternalHandler();
    1972:	4b40      	ldr	r3, [pc, #256]	; (1a74 <SwTimerStart+0x184>)
    1974:	4798      	blx	r3
    swTimers[timerId].absoluteExpiryTime = pointInTime;
    1976:	4b39      	ldr	r3, [pc, #228]	; (1a5c <SwTimerStart+0x16c>)
    1978:	013a      	lsls	r2, r7, #4
    197a:	50d5      	str	r5, [r2, r3]
    swTimers[timerId].timerCb = (void (*)(void*))handlerCb;
    197c:	189b      	adds	r3, r3, r2
    197e:	605c      	str	r4, [r3, #4]
    swTimers[timerId].paramCb = parameter;
    1980:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1982:	609a      	str	r2, [r3, #8]
    swTimers[timerId].loaded = false;
    1984:	735e      	strb	r6, [r3, #13]
    runningTimers++;
    1986:	4a3c      	ldr	r2, [pc, #240]	; (1a78 <SwTimerStart+0x188>)
    1988:	7813      	ldrb	r3, [r2, #0]
    198a:	3301      	adds	r3, #1
    198c:	b2db      	uxtb	r3, r3
    198e:	7013      	strb	r3, [r2, #0]
    if (SWTIMER_INVALID == runningTimerQueueHead)
    1990:	4b3a      	ldr	r3, [pc, #232]	; (1a7c <SwTimerStart+0x18c>)
    1992:	681b      	ldr	r3, [r3, #0]
    1994:	469a      	mov	sl, r3
    1996:	2bff      	cmp	r3, #255	; 0xff
    1998:	d016      	beq.n	19c8 <SwTimerStart+0xd8>
        uint8_t currIndex = runningTimerQueueHead;
    199a:	466a      	mov	r2, sp
    199c:	7013      	strb	r3, [r2, #0]
    199e:	7812      	ldrb	r2, [r2, #0]
        for (index = 0; index < runningTimers; index++)
    19a0:	4b35      	ldr	r3, [pc, #212]	; (1a78 <SwTimerStart+0x188>)
    19a2:	781b      	ldrb	r3, [r3, #0]
    19a4:	2b00      	cmp	r3, #0
    19a6:	d042      	beq.n	1a2e <SwTimerStart+0x13e>
    19a8:	9200      	str	r2, [sp, #0]
    19aa:	2300      	movs	r3, #0
                if (swtimerCompareTime(swTimers[currIndex].absoluteExpiryTime,
    19ac:	492b      	ldr	r1, [pc, #172]	; (1a5c <SwTimerStart+0x16c>)
    19ae:	4688      	mov	r8, r1
    19b0:	4833      	ldr	r0, [pc, #204]	; (1a80 <SwTimerStart+0x190>)
                    currIndex = swTimers[currIndex].nextTimer;
    19b2:	468c      	mov	ip, r1
        for (index = 0; index < runningTimers; index++)
    19b4:	4c30      	ldr	r4, [pc, #192]	; (1a78 <SwTimerStart+0x188>)
    19b6:	e02a      	b.n	1a0e <SwTimerStart+0x11e>
            if ((timeout > SWTIMER_MAX_TIMEOUT) || \
    19b8:	0028      	movs	r0, r5
    19ba:	38ff      	subs	r0, #255	; 0xff
    19bc:	1ac3      	subs	r3, r0, r3
    19be:	4a2b      	ldr	r2, [pc, #172]	; (1a6c <SwTimerStart+0x17c>)
                return LORAWAN_INVALID_PARAMETER;
    19c0:	200a      	movs	r0, #10
            if ((timeout > SWTIMER_MAX_TIMEOUT) || \
    19c2:	4293      	cmp	r3, r2
    19c4:	d9c8      	bls.n	1958 <SwTimerStart+0x68>
    19c6:	e7aa      	b.n	191e <SwTimerStart+0x2e>
        runningTimerQueueHead = timerId;
    19c8:	4b2c      	ldr	r3, [pc, #176]	; (1a7c <SwTimerStart+0x18c>)
    19ca:	601f      	str	r7, [r3, #0]
        loadHwTimer(runningTimerQueueHead);
    19cc:	0038      	movs	r0, r7
    19ce:	4b2d      	ldr	r3, [pc, #180]	; (1a84 <SwTimerStart+0x194>)
    19d0:	4798      	blx	r3
    19d2:	e036      	b.n	1a42 <SwTimerStart+0x152>
                    swTimers[timerId].nextTimer = currIndex;
    19d4:	4b21      	ldr	r3, [pc, #132]	; (1a5c <SwTimerStart+0x16c>)
    19d6:	013c      	lsls	r4, r7, #4
    19d8:	191c      	adds	r4, r3, r4
    19da:	7322      	strb	r2, [r4, #12]
                    swTimers[currIndex].loaded = false;
    19dc:	9901      	ldr	r1, [sp, #4]
    19de:	0109      	lsls	r1, r1, #4
    19e0:	1859      	adds	r1, r3, r1
    19e2:	2300      	movs	r3, #0
    19e4:	734b      	strb	r3, [r1, #13]
                    if (runningTimerQueueHead == currIndex)
    19e6:	4592      	cmp	sl, r2
    19e8:	d005      	beq.n	19f6 <SwTimerStart+0x106>
                        swTimers[prevIndex].nextTimer = timerId;
    19ea:	9b00      	ldr	r3, [sp, #0]
    19ec:	0118      	lsls	r0, r3, #4
    19ee:	4b1b      	ldr	r3, [pc, #108]	; (1a5c <SwTimerStart+0x16c>)
    19f0:	1818      	adds	r0, r3, r0
    19f2:	7307      	strb	r7, [r0, #12]
    19f4:	e025      	b.n	1a42 <SwTimerStart+0x152>
                        runningTimerQueueHead = timerId;
    19f6:	4b21      	ldr	r3, [pc, #132]	; (1a7c <SwTimerStart+0x18c>)
    19f8:	601f      	str	r7, [r3, #0]
                        loadHwTimer(runningTimerQueueHead);
    19fa:	0038      	movs	r0, r7
    19fc:	4b21      	ldr	r3, [pc, #132]	; (1a84 <SwTimerStart+0x194>)
    19fe:	4798      	blx	r3
    1a00:	e01f      	b.n	1a42 <SwTimerStart+0x152>
        for (index = 0; index < runningTimers; index++)
    1a02:	3301      	adds	r3, #1
    1a04:	b2db      	uxtb	r3, r3
    1a06:	7821      	ldrb	r1, [r4, #0]
    1a08:	b2c9      	uxtb	r1, r1
    1a0a:	428b      	cmp	r3, r1
    1a0c:	d210      	bcs.n	1a30 <SwTimerStart+0x140>
            if (SWTIMER_INVALID != currIndex)
    1a0e:	2aff      	cmp	r2, #255	; 0xff
    1a10:	d0f7      	beq.n	1a02 <SwTimerStart+0x112>
                if (swtimerCompareTime(swTimers[currIndex].absoluteExpiryTime,
    1a12:	9201      	str	r2, [sp, #4]
    1a14:	0111      	lsls	r1, r2, #4
    return ((t2 - t1) < INT32_MAX);
    1a16:	4646      	mov	r6, r8
    1a18:	5989      	ldr	r1, [r1, r6]
    1a1a:	1a69      	subs	r1, r5, r1
                if (swtimerCompareTime(swTimers[currIndex].absoluteExpiryTime,
    1a1c:	4281      	cmp	r1, r0
    1a1e:	d8d9      	bhi.n	19d4 <SwTimerStart+0xe4>
                    currIndex = swTimers[currIndex].nextTimer;
    1a20:	0111      	lsls	r1, r2, #4
    1a22:	4461      	add	r1, ip
    1a24:	9200      	str	r2, [sp, #0]
    1a26:	7b0a      	ldrb	r2, [r1, #12]
    1a28:	e7eb      	b.n	1a02 <SwTimerStart+0x112>
        return LORAWAN_INVALID_PARAMETER;
    1a2a:	200a      	movs	r0, #10
    1a2c:	e777      	b.n	191e <SwTimerStart+0x2e>
        uint8_t prevIndex = runningTimerQueueHead;
    1a2e:	9200      	str	r2, [sp, #0]
            swTimers[prevIndex].nextTimer = timerId;
    1a30:	4b0a      	ldr	r3, [pc, #40]	; (1a5c <SwTimerStart+0x16c>)
    1a32:	9a00      	ldr	r2, [sp, #0]
    1a34:	0110      	lsls	r0, r2, #4
    1a36:	1818      	adds	r0, r3, r0
    1a38:	7307      	strb	r7, [r0, #12]
            swTimers[timerId].nextTimer = SWTIMER_INVALID;
    1a3a:	013f      	lsls	r7, r7, #4
    1a3c:	19df      	adds	r7, r3, r7
    1a3e:	23ff      	movs	r3, #255	; 0xff
    1a40:	733b      	strb	r3, [r7, #12]
	if (cpu_irq_is_enabled_flags(flags))
    1a42:	23ff      	movs	r3, #255	; 0xff
    return LORAWAN_SUCCESS;
    1a44:	2008      	movs	r0, #8
    1a46:	464a      	mov	r2, r9
    1a48:	4213      	tst	r3, r2
    1a4a:	d100      	bne.n	1a4e <SwTimerStart+0x15e>
    1a4c:	e767      	b.n	191e <SwTimerStart+0x2e>
		cpu_irq_enable();
    1a4e:	2201      	movs	r2, #1
    1a50:	4b07      	ldr	r3, [pc, #28]	; (1a70 <SwTimerStart+0x180>)
    1a52:	701a      	strb	r2, [r3, #0]
    1a54:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1a58:	b662      	cpsie	i
    1a5a:	e760      	b.n	191e <SwTimerStart+0x2e>
    1a5c:	200006ac 	.word	0x200006ac
    1a60:	20000840 	.word	0x20000840
    1a64:	2000083c 	.word	0x2000083c
    1a68:	0000915d 	.word	0x0000915d
    1a6c:	7fffff00 	.word	0x7fffff00
    1a70:	20000008 	.word	0x20000008
    1a74:	0000176d 	.word	0x0000176d
    1a78:	20000174 	.word	0x20000174
    1a7c:	20000170 	.word	0x20000170
    1a80:	7ffffffe 	.word	0x7ffffffe
    1a84:	000016d5 	.word	0x000016d5

00001a88 <SwTimerIsRunning>:
\param[in] timerId Timer ID to be checked for running
\return True if the timer is running else False
******************************************************************************/
bool SwTimerIsRunning(uint8_t timerId)
{
    if (NULL == swTimers[timerId].timerCb)
    1a88:	0103      	lsls	r3, r0, #4
    1a8a:	4803      	ldr	r0, [pc, #12]	; (1a98 <SwTimerIsRunning+0x10>)
    1a8c:	18c0      	adds	r0, r0, r3
    1a8e:	6840      	ldr	r0, [r0, #4]
    1a90:	1e43      	subs	r3, r0, #1
    1a92:	4198      	sbcs	r0, r3
    1a94:	b2c0      	uxtb	r0, r0
    {
        return false;
    }

    return true;
}
    1a96:	4770      	bx	lr
    1a98:	200006ac 	.word	0x200006ac

00001a9c <SwTimerReadValue>:
\brief Returns the remaining timeout for the given timerId
\param[in] timerId Timer ID to get the remaining time
\return Remaining time until expiry in microseconds
******************************************************************************/
uint32_t SwTimerReadValue(uint8_t timerId)
{
    1a9c:	b570      	push	{r4, r5, r6, lr}
    1a9e:	0005      	movs	r5, r0
    time |= ((uint64_t) sysTimeOvf) << 32;
    1aa0:	4b09      	ldr	r3, [pc, #36]	; (1ac8 <SwTimerReadValue+0x2c>)
    1aa2:	681c      	ldr	r4, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    1aa4:	4b09      	ldr	r3, [pc, #36]	; (1acc <SwTimerReadValue+0x30>)
    1aa6:	881e      	ldrh	r6, [r3, #0]
    1aa8:	0436      	lsls	r6, r6, #16
    time |= (uint64_t) common_tc_read_count();
    1aaa:	4b09      	ldr	r3, [pc, #36]	; (1ad0 <SwTimerReadValue+0x34>)
    1aac:	4798      	blx	r3
    1aae:	4306      	orrs	r6, r0
    uint32_t tv = 0u;
    uint64_t t1 = gettime();
    uint64_t t2 = (uint64_t)swTimers[timerId].absoluteExpiryTime;
    1ab0:	012d      	lsls	r5, r5, #4
    1ab2:	4b08      	ldr	r3, [pc, #32]	; (1ad4 <SwTimerReadValue+0x38>)
    1ab4:	58e8      	ldr	r0, [r5, r3]
    1ab6:	0002      	movs	r2, r0

    if (t2 > t1)
    1ab8:	2c00      	cmp	r4, #0
    1aba:	d102      	bne.n	1ac2 <SwTimerReadValue+0x26>
    {
        tv = (uint32_t)(t2 - t1);
    1abc:	1b80      	subs	r0, r0, r6
    if (t2 > t1)
    1abe:	42b2      	cmp	r2, r6
    1ac0:	d800      	bhi.n	1ac4 <SwTimerReadValue+0x28>
    uint32_t tv = 0u;
    1ac2:	2000      	movs	r0, #0
    }

    return tv;
}
    1ac4:	bd70      	pop	{r4, r5, r6, pc}
    1ac6:	46c0      	nop			; (mov r8, r8)
    1ac8:	20000840 	.word	0x20000840
    1acc:	2000083c 	.word	0x2000083c
    1ad0:	0000915d 	.word	0x0000915d
    1ad4:	200006ac 	.word	0x200006ac

00001ad8 <SwTimerNextExpiryDuration>:
/**************************************************************************//**
\brief Returns the duration until the next timer expiry
\return Returns the duration until the next timeout in microseconds
******************************************************************************/
uint32_t SwTimerNextExpiryDuration(void)
{
    1ad8:	b510      	push	{r4, lr}
    uint32_t duration = SWTIMER_INVALID_TIMEOUT;

    if (SWTIMER_INVALID != runningTimerQueueHead)
    1ada:	4b05      	ldr	r3, [pc, #20]	; (1af0 <SwTimerNextExpiryDuration+0x18>)
    1adc:	6818      	ldr	r0, [r3, #0]
    1ade:	28ff      	cmp	r0, #255	; 0xff
    1ae0:	d102      	bne.n	1ae8 <SwTimerNextExpiryDuration+0x10>
    uint32_t duration = SWTIMER_INVALID_TIMEOUT;
    1ae2:	2001      	movs	r0, #1
    1ae4:	4240      	negs	r0, r0
    {
        duration = SwTimerReadValue(runningTimerQueueHead);
    }

    return duration;
}
    1ae6:	bd10      	pop	{r4, pc}
        duration = SwTimerReadValue(runningTimerQueueHead);
    1ae8:	b2c0      	uxtb	r0, r0
    1aea:	4b02      	ldr	r3, [pc, #8]	; (1af4 <SwTimerNextExpiryDuration+0x1c>)
    1aec:	4798      	blx	r3
    1aee:	e7fa      	b.n	1ae6 <SwTimerNextExpiryDuration+0xe>
    1af0:	20000170 	.word	0x20000170
    1af4:	00001a9d 	.word	0x00001a9d

00001af8 <SwTimersExecute>:

/**************************************************************************//**
\brief Handles Queues and Callbacks for Expired Timers
******************************************************************************/
void SwTimersExecute(void)
{
    1af8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1afa:	46de      	mov	lr, fp
    1afc:	4657      	mov	r7, sl
    1afe:	464e      	mov	r6, r9
    1b00:	4645      	mov	r5, r8
    1b02:	b5e0      	push	{r5, r6, r7, lr}
    1b04:	b083      	sub	sp, #12
    time |= ((uint64_t) sysTimeOvf) << 32;
    1b06:	4b2f      	ldr	r3, [pc, #188]	; (1bc4 <SwTimersExecute+0xcc>)
    1b08:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    1b0a:	4b2f      	ldr	r3, [pc, #188]	; (1bc8 <SwTimersExecute+0xd0>)
    1b0c:	881b      	ldrh	r3, [r3, #0]
    time |= (uint64_t) common_tc_read_count();
    1b0e:	4b2f      	ldr	r3, [pc, #188]	; (1bcc <SwTimersExecute+0xd4>)
    1b10:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1b12:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    1b16:	4253      	negs	r3, r2
    1b18:	4153      	adcs	r3, r2
    1b1a:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    1b1c:	b672      	cpsid	i
    1b1e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    1b22:	2200      	movs	r2, #0
    1b24:	4b2a      	ldr	r3, [pc, #168]	; (1bd0 <SwTimersExecute+0xd8>)
    1b26:	701a      	strb	r2, [r3, #0]
	return flags;
    1b28:	9c00      	ldr	r4, [sp, #0]
    uint64_t now = gettime();

    uint8_t flags = cpu_irq_save();
    swtimerInternalHandler();
    1b2a:	4b2a      	ldr	r3, [pc, #168]	; (1bd4 <SwTimersExecute+0xdc>)
    1b2c:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    1b2e:	23ff      	movs	r3, #255	; 0xff
    1b30:	4223      	tst	r3, r4
    1b32:	d005      	beq.n	1b40 <SwTimersExecute+0x48>
		cpu_irq_enable();
    1b34:	2201      	movs	r2, #1
    1b36:	4b26      	ldr	r3, [pc, #152]	; (1bd0 <SwTimersExecute+0xd8>)
    1b38:	701a      	strb	r2, [r3, #0]
    1b3a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1b3e:	b662      	cpsie	i
	cpu_irq_disable();
    1b40:	4b23      	ldr	r3, [pc, #140]	; (1bd0 <SwTimersExecute+0xd8>)
    1b42:	469a      	mov	sl, r3
        /* Expired timer if any will be processed here */
        while (SWTIMER_INVALID != expiredTimerQueueHead)
        {
            flags = cpu_irq_save();

            nextExpiredTimer = swTimers[expiredTimerQueueHead].nextTimer;
    1b44:	4c24      	ldr	r4, [pc, #144]	; (1bd8 <SwTimersExecute+0xe0>)
    1b46:	4b25      	ldr	r3, [pc, #148]	; (1bdc <SwTimersExecute+0xe4>)
    1b48:	4699      	mov	r9, r3
    1b4a:	2200      	movs	r2, #0

            /*
            * The expired timer's structure elements are updated
            * and the timer is taken out of expired timer queue
            */
            swTimers[expiredTimerQueueHead].nextTimer = SWTIMER_INVALID;
    1b4c:	20ff      	movs	r0, #255	; 0xff
            */
            expiredTimerQueueHead = nextExpiredTimer;

            if (SWTIMER_INVALID == expiredTimerQueueHead)
            {
                expiredTimerQueueTail = SWTIMER_INVALID;
    1b4e:	4b24      	ldr	r3, [pc, #144]	; (1be0 <SwTimersExecute+0xe8>)
    1b50:	4698      	mov	r8, r3
		cpu_irq_enable();
    1b52:	4b1f      	ldr	r3, [pc, #124]	; (1bd0 <SwTimersExecute+0xd8>)
    1b54:	469c      	mov	ip, r3
    1b56:	e004      	b.n	1b62 <SwTimersExecute+0x6a>
    1b58:	4643      	mov	r3, r8
    1b5a:	6018      	str	r0, [r3, #0]
    1b5c:	e01e      	b.n	1b9c <SwTimersExecute+0xa4>
            }

            cpu_irq_restore(flags);

            if (NULL != callback)
    1b5e:	2e00      	cmp	r6, #0
    1b60:	d125      	bne.n	1bae <SwTimersExecute+0xb6>
        while (SWTIMER_INVALID != expiredTimerQueueHead)
    1b62:	4b1d      	ldr	r3, [pc, #116]	; (1bd8 <SwTimersExecute+0xe0>)
    1b64:	681b      	ldr	r3, [r3, #0]
    1b66:	2bff      	cmp	r3, #255	; 0xff
    1b68:	d024      	beq.n	1bb4 <SwTimersExecute+0xbc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1b6a:	f3ef 8110 	mrs	r1, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    1b6e:	424b      	negs	r3, r1
    1b70:	414b      	adcs	r3, r1
    1b72:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    1b74:	b672      	cpsid	i
    1b76:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    1b7a:	4653      	mov	r3, sl
    1b7c:	701a      	strb	r2, [r3, #0]
	return flags;
    1b7e:	9f01      	ldr	r7, [sp, #4]
            nextExpiredTimer = swTimers[expiredTimerQueueHead].nextTimer;
    1b80:	6823      	ldr	r3, [r4, #0]
    1b82:	011b      	lsls	r3, r3, #4
    1b84:	444b      	add	r3, r9
    1b86:	7b19      	ldrb	r1, [r3, #12]
            callback = (SwTimerCallbackFunc_t)swTimers[expiredTimerQueueHead].timerCb;
    1b88:	685e      	ldr	r6, [r3, #4]
            cbParam = swTimers[expiredTimerQueueHead].paramCb;
    1b8a:	689d      	ldr	r5, [r3, #8]
    1b8c:	46ab      	mov	fp, r5
            swTimers[expiredTimerQueueHead].nextTimer = SWTIMER_INVALID;
    1b8e:	7318      	strb	r0, [r3, #12]
            swTimers[expiredTimerQueueHead].timerCb = NULL;
    1b90:	605a      	str	r2, [r3, #4]
            swTimers[expiredTimerQueueHead].paramCb = NULL;
    1b92:	609a      	str	r2, [r3, #8]
            swTimers[expiredTimerQueueHead].loaded = false;
    1b94:	735a      	strb	r2, [r3, #13]
            expiredTimerQueueHead = nextExpiredTimer;
    1b96:	6021      	str	r1, [r4, #0]
            if (SWTIMER_INVALID == expiredTimerQueueHead)
    1b98:	29ff      	cmp	r1, #255	; 0xff
    1b9a:	d0dd      	beq.n	1b58 <SwTimersExecute+0x60>
	if (cpu_irq_is_enabled_flags(flags))
    1b9c:	4238      	tst	r0, r7
    1b9e:	d0de      	beq.n	1b5e <SwTimersExecute+0x66>
		cpu_irq_enable();
    1ba0:	2301      	movs	r3, #1
    1ba2:	4661      	mov	r1, ip
    1ba4:	700b      	strb	r3, [r1, #0]
    1ba6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1baa:	b662      	cpsie	i
    1bac:	e7d7      	b.n	1b5e <SwTimersExecute+0x66>
            {
                /* Callback function is called */
                callback(cbParam);
    1bae:	4658      	mov	r0, fp
    1bb0:	47b0      	blx	r6
    1bb2:	e7ca      	b.n	1b4a <SwTimersExecute+0x52>
                (void)now;
            }
        }
    }
}
    1bb4:	b003      	add	sp, #12
    1bb6:	bc3c      	pop	{r2, r3, r4, r5}
    1bb8:	4690      	mov	r8, r2
    1bba:	4699      	mov	r9, r3
    1bbc:	46a2      	mov	sl, r4
    1bbe:	46ab      	mov	fp, r5
    1bc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1bc2:	46c0      	nop			; (mov r8, r8)
    1bc4:	20000840 	.word	0x20000840
    1bc8:	2000083c 	.word	0x2000083c
    1bcc:	0000915d 	.word	0x0000915d
    1bd0:	20000008 	.word	0x20000008
    1bd4:	0000176d 	.word	0x0000176d
    1bd8:	20000168 	.word	0x20000168
    1bdc:	200006ac 	.word	0x200006ac
    1be0:	2000016c 	.word	0x2000016c

00001be4 <TIMER_TaskHandler>:
{
    1be4:	b510      	push	{r4, lr}
    SwTimersExecute();
    1be6:	4b02      	ldr	r3, [pc, #8]	; (1bf0 <TIMER_TaskHandler+0xc>)
    1be8:	4798      	blx	r3
}
    1bea:	2000      	movs	r0, #0
    1bec:	bd10      	pop	{r4, pc}
    1bee:	46c0      	nop			; (mov r8, r8)
    1bf0:	00001af9 	.word	0x00001af9

00001bf4 <SwTimerStop>:
        LORAWAN_INVALID_PARAMETER if timerId is not valid
        LORAWAN_INVALID_REQUEST if timerId was not started before
        LORAWAN_SUCCESS if it is successfully stopped
******************************************************************************/
StackRetStatus_t SwTimerStop(uint8_t timerId)
{
    1bf4:	b570      	push	{r4, r5, r6, lr}
    1bf6:	b082      	sub	sp, #8
    1bf8:	0004      	movs	r4, r0
    uint8_t prevIndex;

    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId)
    {
        SYS_ASSERT_INFO(ASSERT_HAL_TIMER_STOP_FAILURE);
        return LORAWAN_INVALID_PARAMETER;
    1bfa:	200a      	movs	r0, #10
    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId)
    1bfc:	2c18      	cmp	r4, #24
    1bfe:	d901      	bls.n	1c04 <SwTimerStop+0x10>
        return LORAWAN_SUCCESS;
    }

    SYS_ASSERT_INFO(ASSERT_HAL_TIMER_STOP_FAILURE);
    return LORAWAN_INVALID_REQUEST;
}
    1c00:	b002      	add	sp, #8
    1c02:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1c04:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    1c08:	425a      	negs	r2, r3
    1c0a:	4153      	adcs	r3, r2
    1c0c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    1c0e:	b672      	cpsid	i
    1c10:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    1c14:	2200      	movs	r2, #0
    1c16:	4b47      	ldr	r3, [pc, #284]	; (1d34 <SwTimerStop+0x140>)
    1c18:	701a      	strb	r2, [r3, #0]
	return flags;
    1c1a:	9d01      	ldr	r5, [sp, #4]
    swtimerInternalHandler();
    1c1c:	4b46      	ldr	r3, [pc, #280]	; (1d38 <SwTimerStop+0x144>)
    1c1e:	4798      	blx	r3
    if (runningTimers > 0)
    1c20:	4b46      	ldr	r3, [pc, #280]	; (1d3c <SwTimerStop+0x148>)
    1c22:	781b      	ldrb	r3, [r3, #0]
    1c24:	2b00      	cmp	r3, #0
    1c26:	d040      	beq.n	1caa <SwTimerStop+0xb6>
        uint8_t timer_count = runningTimers;
    1c28:	4b44      	ldr	r3, [pc, #272]	; (1d3c <SwTimerStop+0x148>)
    1c2a:	781b      	ldrb	r3, [r3, #0]
    1c2c:	b2db      	uxtb	r3, r3
        prevIndex = currIndex = runningTimerQueueHead;
    1c2e:	4a44      	ldr	r2, [pc, #272]	; (1d40 <SwTimerStop+0x14c>)
    1c30:	6816      	ldr	r6, [r2, #0]
    1c32:	b2f1      	uxtb	r1, r6
        while (timer_count > 0)
    1c34:	2b00      	cmp	r3, #0
    1c36:	d038      	beq.n	1caa <SwTimerStop+0xb6>
            if (timerId == currIndex)
    1c38:	428c      	cmp	r4, r1
    1c3a:	d00b      	beq.n	1c54 <SwTimerStop+0x60>
                currIndex = swTimers[currIndex].nextTimer;
    1c3c:	4841      	ldr	r0, [pc, #260]	; (1d44 <SwTimerStop+0x150>)
    1c3e:	010a      	lsls	r2, r1, #4
    1c40:	1882      	adds	r2, r0, r2
    1c42:	7b12      	ldrb	r2, [r2, #12]
            timer_count--;
    1c44:	3b01      	subs	r3, #1
    1c46:	b2db      	uxtb	r3, r3
        while (timer_count > 0)
    1c48:	2b00      	cmp	r3, #0
    1c4a:	d02e      	beq.n	1caa <SwTimerStop+0xb6>
            if (timerId == currIndex)
    1c4c:	4294      	cmp	r4, r2
    1c4e:	d001      	beq.n	1c54 <SwTimerStop+0x60>
                currIndex = swTimers[currIndex].nextTimer;
    1c50:	0011      	movs	r1, r2
    1c52:	e7f4      	b.n	1c3e <SwTimerStop+0x4a>
                if (timerId == runningTimerQueueHead)
    1c54:	42a6      	cmp	r6, r4
    1c56:	d01d      	beq.n	1c94 <SwTimerStop+0xa0>
                    swTimers[prevIndex].nextTimer = swTimers[timerId].nextTimer;
    1c58:	4b3a      	ldr	r3, [pc, #232]	; (1d44 <SwTimerStop+0x150>)
    1c5a:	0122      	lsls	r2, r4, #4
    1c5c:	189a      	adds	r2, r3, r2
    1c5e:	7b12      	ldrb	r2, [r2, #12]
    1c60:	0109      	lsls	r1, r1, #4
    1c62:	1859      	adds	r1, r3, r1
    1c64:	730a      	strb	r2, [r1, #12]
                swTimers[timerId].nextTimer  = SWTIMER_INVALID;
    1c66:	0122      	lsls	r2, r4, #4
    1c68:	4b36      	ldr	r3, [pc, #216]	; (1d44 <SwTimerStop+0x150>)
    1c6a:	189b      	adds	r3, r3, r2
    1c6c:	22ff      	movs	r2, #255	; 0xff
    1c6e:	731a      	strb	r2, [r3, #12]
            runningTimers--;
    1c70:	4a32      	ldr	r2, [pc, #200]	; (1d3c <SwTimerStop+0x148>)
    1c72:	7813      	ldrb	r3, [r2, #0]
    1c74:	3b01      	subs	r3, #1
    1c76:	b2db      	uxtb	r3, r3
    1c78:	7013      	strb	r3, [r2, #0]
        swTimers[timerId].timerCb = NULL;
    1c7a:	0124      	lsls	r4, r4, #4
    1c7c:	4b31      	ldr	r3, [pc, #196]	; (1d44 <SwTimerStop+0x150>)
    1c7e:	191c      	adds	r4, r3, r4
    1c80:	2300      	movs	r3, #0
    1c82:	6063      	str	r3, [r4, #4]
        swTimers[timerId].paramCb = NULL;
    1c84:	60a3      	str	r3, [r4, #8]
        swTimers[timerId].loaded = false;
    1c86:	7363      	strb	r3, [r4, #13]
	if (cpu_irq_is_enabled_flags(flags))
    1c88:	33ff      	adds	r3, #255	; 0xff
        return LORAWAN_SUCCESS;
    1c8a:	2008      	movs	r0, #8
    1c8c:	422b      	tst	r3, r5
    1c8e:	d0b7      	beq.n	1c00 <SwTimerStop+0xc>
    1c90:	2301      	movs	r3, #1
    1c92:	e040      	b.n	1d16 <SwTimerStop+0x122>
                    common_tc_compare_stop();
    1c94:	4b2c      	ldr	r3, [pc, #176]	; (1d48 <SwTimerStop+0x154>)
    1c96:	4798      	blx	r3
                    runningTimerQueueHead = swTimers[timerId].nextTimer;
    1c98:	0122      	lsls	r2, r4, #4
    1c9a:	4b2a      	ldr	r3, [pc, #168]	; (1d44 <SwTimerStop+0x150>)
    1c9c:	189b      	adds	r3, r3, r2
    1c9e:	7b18      	ldrb	r0, [r3, #12]
    1ca0:	4b27      	ldr	r3, [pc, #156]	; (1d40 <SwTimerStop+0x14c>)
    1ca2:	6018      	str	r0, [r3, #0]
                    loadHwTimer(runningTimerQueueHead);
    1ca4:	4b29      	ldr	r3, [pc, #164]	; (1d4c <SwTimerStop+0x158>)
    1ca6:	4798      	blx	r3
    1ca8:	e7dd      	b.n	1c66 <SwTimerStop+0x72>
        prevIndex = currIndex = expiredTimerQueueHead;
    1caa:	4b29      	ldr	r3, [pc, #164]	; (1d50 <SwTimerStop+0x15c>)
    1cac:	6818      	ldr	r0, [r3, #0]
    1cae:	b2c2      	uxtb	r2, r0
        while (SWTIMER_INVALID != currIndex)
    1cb0:	2aff      	cmp	r2, #255	; 0xff
    1cb2:	d02c      	beq.n	1d0e <SwTimerStop+0x11a>
            if (timerId == currIndex)
    1cb4:	4294      	cmp	r4, r2
    1cb6:	d009      	beq.n	1ccc <SwTimerStop+0xd8>
                currIndex = swTimers[currIndex].nextTimer;
    1cb8:	4922      	ldr	r1, [pc, #136]	; (1d44 <SwTimerStop+0x150>)
    1cba:	0113      	lsls	r3, r2, #4
    1cbc:	18cb      	adds	r3, r1, r3
    1cbe:	7b1b      	ldrb	r3, [r3, #12]
        while (SWTIMER_INVALID != currIndex)
    1cc0:	2bff      	cmp	r3, #255	; 0xff
    1cc2:	d024      	beq.n	1d0e <SwTimerStop+0x11a>
            if (timerId == currIndex)
    1cc4:	429c      	cmp	r4, r3
    1cc6:	d001      	beq.n	1ccc <SwTimerStop+0xd8>
                currIndex = swTimers[currIndex].nextTimer;
    1cc8:	001a      	movs	r2, r3
    1cca:	e7f6      	b.n	1cba <SwTimerStop+0xc6>
                if (timerId == expiredTimerQueueHead)
    1ccc:	42a0      	cmp	r0, r4
    1cce:	d00d      	beq.n	1cec <SwTimerStop+0xf8>
                    swTimers[prevIndex].nextTimer = swTimers[timerId].nextTimer;
    1cd0:	4b1c      	ldr	r3, [pc, #112]	; (1d44 <SwTimerStop+0x150>)
    1cd2:	0121      	lsls	r1, r4, #4
    1cd4:	1859      	adds	r1, r3, r1
    1cd6:	7b09      	ldrb	r1, [r1, #12]
    1cd8:	0110      	lsls	r0, r2, #4
    1cda:	181b      	adds	r3, r3, r0
    1cdc:	7319      	strb	r1, [r3, #12]
                    if (timerId == expiredTimerQueueTail)
    1cde:	4b1d      	ldr	r3, [pc, #116]	; (1d54 <SwTimerStop+0x160>)
    1ce0:	681b      	ldr	r3, [r3, #0]
    1ce2:	429c      	cmp	r4, r3
    1ce4:	d1c9      	bne.n	1c7a <SwTimerStop+0x86>
                        expiredTimerQueueTail = prevIndex;
    1ce6:	4b1b      	ldr	r3, [pc, #108]	; (1d54 <SwTimerStop+0x160>)
    1ce8:	601a      	str	r2, [r3, #0]
    1cea:	e7c6      	b.n	1c7a <SwTimerStop+0x86>
                    if (expiredTimerQueueHead == expiredTimerQueueTail)
    1cec:	4b19      	ldr	r3, [pc, #100]	; (1d54 <SwTimerStop+0x160>)
    1cee:	681b      	ldr	r3, [r3, #0]
    1cf0:	4298      	cmp	r0, r3
    1cf2:	d006      	beq.n	1d02 <SwTimerStop+0x10e>
                        expiredTimerQueueHead = swTimers[expiredTimerQueueHead].nextTimer;
    1cf4:	0100      	lsls	r0, r0, #4
    1cf6:	4b13      	ldr	r3, [pc, #76]	; (1d44 <SwTimerStop+0x150>)
    1cf8:	1818      	adds	r0, r3, r0
    1cfa:	7b02      	ldrb	r2, [r0, #12]
    1cfc:	4b14      	ldr	r3, [pc, #80]	; (1d50 <SwTimerStop+0x15c>)
    1cfe:	601a      	str	r2, [r3, #0]
    1d00:	e7bb      	b.n	1c7a <SwTimerStop+0x86>
                        expiredTimerQueueHead = expiredTimerQueueTail = SWTIMER_INVALID;
    1d02:	23ff      	movs	r3, #255	; 0xff
    1d04:	4a13      	ldr	r2, [pc, #76]	; (1d54 <SwTimerStop+0x160>)
    1d06:	6013      	str	r3, [r2, #0]
    1d08:	4a11      	ldr	r2, [pc, #68]	; (1d50 <SwTimerStop+0x15c>)
    1d0a:	6013      	str	r3, [r2, #0]
    1d0c:	e7b5      	b.n	1c7a <SwTimerStop+0x86>
    1d0e:	23ff      	movs	r3, #255	; 0xff
    1d10:	422b      	tst	r3, r5
    1d12:	d00a      	beq.n	1d2a <SwTimerStop+0x136>
    1d14:	2300      	movs	r3, #0
		cpu_irq_enable();
    1d16:	2101      	movs	r1, #1
    1d18:	4a06      	ldr	r2, [pc, #24]	; (1d34 <SwTimerStop+0x140>)
    1d1a:	7011      	strb	r1, [r2, #0]
    1d1c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1d20:	b662      	cpsie	i
    if (timerStopReqStatus)
    1d22:	2b00      	cmp	r3, #0
    1d24:	d103      	bne.n	1d2e <SwTimerStop+0x13a>
    return LORAWAN_INVALID_REQUEST;
    1d26:	2015      	movs	r0, #21
    1d28:	e76a      	b.n	1c00 <SwTimerStop+0xc>
    1d2a:	2015      	movs	r0, #21
    1d2c:	e768      	b.n	1c00 <SwTimerStop+0xc>
        return LORAWAN_SUCCESS;
    1d2e:	2008      	movs	r0, #8
    1d30:	e766      	b.n	1c00 <SwTimerStop+0xc>
    1d32:	46c0      	nop			; (mov r8, r8)
    1d34:	20000008 	.word	0x20000008
    1d38:	0000176d 	.word	0x0000176d
    1d3c:	20000174 	.word	0x20000174
    1d40:	20000170 	.word	0x20000170
    1d44:	200006ac 	.word	0x200006ac
    1d48:	000091a9 	.word	0x000091a9
    1d4c:	000016d5 	.word	0x000016d5
    1d50:	20000168 	.word	0x20000168
    1d54:	2000016c 	.word	0x2000016c

00001d58 <SwTimerRunRemainingTime>:
{
    1d58:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d5a:	b083      	sub	sp, #12
    1d5c:	0005      	movs	r5, r0
    void * timerCb = (void*)(swTimers[runningTimerQueueHead].timerCb);
    1d5e:	4b0b      	ldr	r3, [pc, #44]	; (1d8c <SwTimerRunRemainingTime+0x34>)
    1d60:	681c      	ldr	r4, [r3, #0]
    1d62:	0122      	lsls	r2, r4, #4
    1d64:	4b0a      	ldr	r3, [pc, #40]	; (1d90 <SwTimerRunRemainingTime+0x38>)
    1d66:	189b      	adds	r3, r3, r2
    1d68:	685e      	ldr	r6, [r3, #4]
    void *paramCb = swTimers[runningTimerQueueHead].paramCb;
    1d6a:	689f      	ldr	r7, [r3, #8]
    uint8_t timerId = runningTimerQueueHead;
    1d6c:	b2e4      	uxtb	r4, r4
    if (LORAWAN_SUCCESS == SwTimerStop(runningTimerQueueHead))
    1d6e:	0020      	movs	r0, r4
    1d70:	4b08      	ldr	r3, [pc, #32]	; (1d94 <SwTimerRunRemainingTime+0x3c>)
    1d72:	4798      	blx	r3
    1d74:	2808      	cmp	r0, #8
    1d76:	d001      	beq.n	1d7c <SwTimerRunRemainingTime+0x24>
}
    1d78:	b003      	add	sp, #12
    1d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        SwTimerStart(timerId, offset, SW_TIMEOUT_RELATIVE, timerCb, paramCb);
    1d7c:	9700      	str	r7, [sp, #0]
    1d7e:	0033      	movs	r3, r6
    1d80:	2200      	movs	r2, #0
    1d82:	0029      	movs	r1, r5
    1d84:	0020      	movs	r0, r4
    1d86:	4c04      	ldr	r4, [pc, #16]	; (1d98 <SwTimerRunRemainingTime+0x40>)
    1d88:	47a0      	blx	r4
}
    1d8a:	e7f5      	b.n	1d78 <SwTimerRunRemainingTime+0x20>
    1d8c:	20000170 	.word	0x20000170
    1d90:	200006ac 	.word	0x200006ac
    1d94:	00001bf5 	.word	0x00001bf5
    1d98:	000018f1 	.word	0x000018f1

00001d9c <SystemTimerSync>:
/**************************************************************************//**
\brief Resumes the software timer by offseting it with given time
\param[in] timeToSync Amount of duration to offset from known system time
******************************************************************************/
void SystemTimerSync(uint64_t timeToSync)
{
    1d9c:	b570      	push	{r4, r5, r6, lr}
    uint8_t timerId;
    uint16_t adjustOffset;

    sysTimeLastKnown += timeToSync;
    1d9e:	4b22      	ldr	r3, [pc, #136]	; (1e28 <SystemTimerSync+0x8c>)
    1da0:	681c      	ldr	r4, [r3, #0]
    1da2:	685d      	ldr	r5, [r3, #4]
    1da4:	1900      	adds	r0, r0, r4
    1da6:	4169      	adcs	r1, r5
    1da8:	6018      	str	r0, [r3, #0]
    1daa:	6059      	str	r1, [r3, #4]

    /* 1. Update system time */
    sysTimeOvf = (uint32_t) (sysTimeLastKnown >> 32);
    1dac:	4b1f      	ldr	r3, [pc, #124]	; (1e2c <SystemTimerSync+0x90>)
    1dae:	6019      	str	r1, [r3, #0]
    sysTime = (uint16_t) ((sysTimeLastKnown >> SWTIMER_SYSTIME_SHIFTMASK) & 0xffff);
    1db0:	0c02      	lsrs	r2, r0, #16
    1db2:	4b1f      	ldr	r3, [pc, #124]	; (1e30 <SystemTimerSync+0x94>)
    1db4:	801a      	strh	r2, [r3, #0]

    /* 2. Adjust expiration of running timers */
    adjustOffset = (uint16_t) sysTimeLastKnown;
    1db6:	b280      	uxth	r0, r0
    timerId = runningTimerQueueHead;
    1db8:	4b1e      	ldr	r3, [pc, #120]	; (1e34 <SystemTimerSync+0x98>)
    1dba:	781b      	ldrb	r3, [r3, #0]
    for (uint8_t index = 0; index < runningTimers; index++)
    1dbc:	4a1e      	ldr	r2, [pc, #120]	; (1e38 <SystemTimerSync+0x9c>)
    1dbe:	7812      	ldrb	r2, [r2, #0]
    1dc0:	2a00      	cmp	r2, #0
    1dc2:	d012      	beq.n	1dea <SystemTimerSync+0x4e>
    1dc4:	2200      	movs	r2, #0
    {
        if (SWTIMER_INVALID != timerId)
        {
            swTimers[timerId].absoluteExpiryTime -= adjustOffset;
    1dc6:	4c1d      	ldr	r4, [pc, #116]	; (1e3c <SystemTimerSync+0xa0>)
    for (uint8_t index = 0; index < runningTimers; index++)
    1dc8:	4d1b      	ldr	r5, [pc, #108]	; (1e38 <SystemTimerSync+0x9c>)
    1dca:	e005      	b.n	1dd8 <SystemTimerSync+0x3c>
    1dcc:	3201      	adds	r2, #1
    1dce:	b2d2      	uxtb	r2, r2
    1dd0:	7829      	ldrb	r1, [r5, #0]
    1dd2:	b2c9      	uxtb	r1, r1
    1dd4:	4291      	cmp	r1, r2
    1dd6:	d908      	bls.n	1dea <SystemTimerSync+0x4e>
        if (SWTIMER_INVALID != timerId)
    1dd8:	2bff      	cmp	r3, #255	; 0xff
    1dda:	d0f7      	beq.n	1dcc <SystemTimerSync+0x30>
            swTimers[timerId].absoluteExpiryTime -= adjustOffset;
    1ddc:	011b      	lsls	r3, r3, #4
    1dde:	5919      	ldr	r1, [r3, r4]
    1de0:	1a09      	subs	r1, r1, r0
    1de2:	5119      	str	r1, [r3, r4]
            timerId = swTimers[timerId].nextTimer;
    1de4:	18e3      	adds	r3, r4, r3
    1de6:	7b1b      	ldrb	r3, [r3, #12]
    1de8:	e7f0      	b.n	1dcc <SystemTimerSync+0x30>
        }
    }

    /* 3. Start hardware timer */
    common_tc_init();
    1dea:	4b15      	ldr	r3, [pc, #84]	; (1e40 <SystemTimerSync+0xa4>)
    1dec:	4798      	blx	r3
    set_common_tc_overflow_callback(hwTimerOverflowCallback);
    1dee:	4815      	ldr	r0, [pc, #84]	; (1e44 <SystemTimerSync+0xa8>)
    1df0:	4b15      	ldr	r3, [pc, #84]	; (1e48 <SystemTimerSync+0xac>)
    1df2:	4798      	blx	r3
    set_common_tc_expiry_callback(hwTimerExpiryCallback);
    1df4:	4815      	ldr	r0, [pc, #84]	; (1e4c <SystemTimerSync+0xb0>)
    1df6:	4b16      	ldr	r3, [pc, #88]	; (1e50 <SystemTimerSync+0xb4>)
    1df8:	4798      	blx	r3

    /* 4. Resume timer queue operations */
    if (runningTimers && (SWTIMER_INVALID != runningTimerQueueHead))
    1dfa:	4b0f      	ldr	r3, [pc, #60]	; (1e38 <SystemTimerSync+0x9c>)
    1dfc:	781b      	ldrb	r3, [r3, #0]
    1dfe:	2b00      	cmp	r3, #0
    1e00:	d009      	beq.n	1e16 <SystemTimerSync+0x7a>
    1e02:	4b0c      	ldr	r3, [pc, #48]	; (1e34 <SystemTimerSync+0x98>)
    1e04:	681b      	ldr	r3, [r3, #0]
    1e06:	2bff      	cmp	r3, #255	; 0xff
    1e08:	d005      	beq.n	1e16 <SystemTimerSync+0x7a>
    {
        uint32_t remainingTime = SwTimerNextExpiryDuration();
    1e0a:	4b12      	ldr	r3, [pc, #72]	; (1e54 <SystemTimerSync+0xb8>)
    1e0c:	4798      	blx	r3

        if (SWTIMER_MIN_TIMEOUT > remainingTime)
    1e0e:	28fe      	cmp	r0, #254	; 0xfe
    1e10:	d902      	bls.n	1e18 <SystemTimerSync+0x7c>
        else
        {
            /*
            * There is some time left in head timer, so restart it.
            */
            SwTimerRunRemainingTime(remainingTime);
    1e12:	4b11      	ldr	r3, [pc, #68]	; (1e58 <SystemTimerSync+0xbc>)
    1e14:	4798      	blx	r3
        }
    }
}
    1e16:	bd70      	pop	{r4, r5, r6, pc}
            isTimerTriggered = true;
    1e18:	2201      	movs	r2, #1
    1e1a:	4b10      	ldr	r3, [pc, #64]	; (1e5c <SystemTimerSync+0xc0>)
    1e1c:	701a      	strb	r2, [r3, #0]
            SYSTEM_PostTask(TIMER_TASK_ID);
    1e1e:	2001      	movs	r0, #1
    1e20:	4b0f      	ldr	r3, [pc, #60]	; (1e60 <SystemTimerSync+0xc4>)
    1e22:	4798      	blx	r3
    1e24:	e7f7      	b.n	1e16 <SystemTimerSync+0x7a>
    1e26:	46c0      	nop			; (mov r8, r8)
    1e28:	20000178 	.word	0x20000178
    1e2c:	20000840 	.word	0x20000840
    1e30:	2000083c 	.word	0x2000083c
    1e34:	20000170 	.word	0x20000170
    1e38:	20000174 	.word	0x20000174
    1e3c:	200006ac 	.word	0x200006ac
    1e40:	0000923d 	.word	0x0000923d
    1e44:	0000161d 	.word	0x0000161d
    1e48:	000092c1 	.word	0x000092c1
    1e4c:	000015f5 	.word	0x000015f5
    1e50:	000092cd 	.word	0x000092cd
    1e54:	00001ad9 	.word	0x00001ad9
    1e58:	00001d59 	.word	0x00001d59
    1e5c:	2000083e 	.word	0x2000083e
    1e60:	000015d1 	.word	0x000015d1

00001e64 <PDS_Store>:
\param[in] pdsFileItemIdx - The file id to register file to PDS.
\param[in] item - The item id of the item in PDS.
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t PDS_Store(PdsFileItemIdx_t pdsFileItemIdx, uint8_t item)
{
    1e64:	b510      	push	{r4, lr}
	PdsStatus_t status = PDS_OK;
#if (ENABLE_PDS == 1)
	if (false == pdsUnInitFlag)
    1e66:	4b14      	ldr	r3, [pc, #80]	; (1eb8 <PDS_Store+0x54>)
    1e68:	781a      	ldrb	r2, [r3, #0]
	PdsStatus_t status = PDS_OK;
    1e6a:	2300      	movs	r3, #0
	if (false == pdsUnInitFlag)
    1e6c:	2a00      	cmp	r2, #0
    1e6e:	d106      	bne.n	1e7e <PDS_Store+0x1a>
	{
		if ((0 != fileMarks[pdsFileItemIdx].numItems) && 				\
    1e70:	0102      	lsls	r2, r0, #4
    1e72:	4b12      	ldr	r3, [pc, #72]	; (1ebc <PDS_Store+0x58>)
    1e74:	189b      	adds	r3, r3, r2
    1e76:	791a      	ldrb	r2, [r3, #4]
				status = PDS_INVLIAD_FILE_IDX;
			}
		}
		else
		{
			status = PDS_INVLIAD_FILE_IDX;
    1e78:	2305      	movs	r3, #5
		if ((0 != fileMarks[pdsFileItemIdx].numItems) && 				\
    1e7a:	2a00      	cmp	r2, #0
    1e7c:	d101      	bne.n	1e82 <PDS_Store+0x1e>
		}
	}
#endif	
	return status; 
}
    1e7e:	0018      	movs	r0, r3
    1e80:	bd10      	pop	{r4, pc}
				(0 != fileMarks[pdsFileItemIdx].fileMarkListAddr) &&	\
    1e82:	0103      	lsls	r3, r0, #4
    1e84:	4a0d      	ldr	r2, [pc, #52]	; (1ebc <PDS_Store+0x58>)
    1e86:	589c      	ldr	r4, [r3, r2]
		if ((0 != fileMarks[pdsFileItemIdx].numItems) && 				\
    1e88:	2c00      	cmp	r4, #0
    1e8a:	d011      	beq.n	1eb0 <PDS_Store+0x4c>
				(0 != fileMarks[pdsFileItemIdx].itemListAddr)			\
    1e8c:	001a      	movs	r2, r3
    1e8e:	4b0b      	ldr	r3, [pc, #44]	; (1ebc <PDS_Store+0x58>)
    1e90:	189b      	adds	r3, r3, r2
				(0 != fileMarks[pdsFileItemIdx].fileMarkListAddr) &&	\
    1e92:	689b      	ldr	r3, [r3, #8]
    1e94:	2b00      	cmp	r3, #0
    1e96:	d00d      	beq.n	1eb4 <PDS_Store+0x50>
				status = PDS_INVLIAD_FILE_IDX;
    1e98:	2305      	movs	r3, #5
			if (PDS_MAX_FILE_IDX > pdsFileItemIdx)
    1e9a:	280b      	cmp	r0, #11
    1e9c:	d8ef      	bhi.n	1e7e <PDS_Store+0x1a>
				*((fileMarks[pdsFileItemIdx].fileMarkListAddr) + item) = PDS_OP_STORE;
    1e9e:	3b04      	subs	r3, #4
    1ea0:	5463      	strb	r3, [r4, r1]
				isFileSet[pdsFileItemIdx] = true;
    1ea2:	4a07      	ldr	r2, [pc, #28]	; (1ec0 <PDS_Store+0x5c>)
    1ea4:	5413      	strb	r3, [r2, r0]
				pdsPostTask(PDS_STORE_DELETE_TASK_ID);
    1ea6:	2001      	movs	r0, #1
    1ea8:	4b06      	ldr	r3, [pc, #24]	; (1ec4 <PDS_Store+0x60>)
    1eaa:	4798      	blx	r3
	PdsStatus_t status = PDS_OK;
    1eac:	2300      	movs	r3, #0
    1eae:	e7e6      	b.n	1e7e <PDS_Store+0x1a>
			status = PDS_INVLIAD_FILE_IDX;
    1eb0:	2305      	movs	r3, #5
    1eb2:	e7e4      	b.n	1e7e <PDS_Store+0x1a>
    1eb4:	2305      	movs	r3, #5
    1eb6:	e7e2      	b.n	1e7e <PDS_Store+0x1a>
    1eb8:	20000180 	.word	0x20000180
    1ebc:	20000850 	.word	0x20000850
    1ec0:	20000844 	.word	0x20000844
    1ec4:	00002061 	.word	0x00002061

00001ec8 <PDS_RegFile>:

\param[in] argFileId - The file id to register file to PDS.
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t PDS_RegFile(PdsFileItemIdx_t argFileId, PdsFileMarks_t argFileMarks)
{
    1ec8:	b084      	sub	sp, #16
    1eca:	b510      	push	{r4, lr}
    1ecc:	9103      	str	r1, [sp, #12]
    1ece:	9204      	str	r2, [sp, #16]
    1ed0:	9305      	str	r3, [sp, #20]
	PdsStatus_t status = PDS_OK;
#if (ENABLE_PDS == 1)
	if (false == pdsUnInitFlag)
    1ed2:	4b0b      	ldr	r3, [pc, #44]	; (1f00 <PDS_RegFile+0x38>)
    1ed4:	781a      	ldrb	r2, [r3, #0]
	PdsStatus_t status = PDS_OK;
    1ed6:	2300      	movs	r3, #0
	if (false == pdsUnInitFlag)
    1ed8:	2a00      	cmp	r2, #0
    1eda:	d102      	bne.n	1ee2 <PDS_RegFile+0x1a>
		{
			memcpy(&fileMarks[argFileId], &argFileMarks, sizeof(PdsFileMarks_t));
		}
		else
		{
			status = PDS_INVLIAD_FILE_IDX;
    1edc:	3305      	adds	r3, #5
		if (PDS_MAX_FILE_IDX > argFileId)
    1ede:	280b      	cmp	r0, #11
    1ee0:	d904      	bls.n	1eec <PDS_RegFile+0x24>
		}
	}
#endif	
	return status;
}
    1ee2:	0018      	movs	r0, r3
    1ee4:	bc10      	pop	{r4}
    1ee6:	bc08      	pop	{r3}
    1ee8:	b004      	add	sp, #16
    1eea:	4718      	bx	r3
			memcpy(&fileMarks[argFileId], &argFileMarks, sizeof(PdsFileMarks_t));
    1eec:	0100      	lsls	r0, r0, #4
    1eee:	aa03      	add	r2, sp, #12
    1ef0:	4b04      	ldr	r3, [pc, #16]	; (1f04 <PDS_RegFile+0x3c>)
    1ef2:	1818      	adds	r0, r3, r0
    1ef4:	ca1a      	ldmia	r2!, {r1, r3, r4}
    1ef6:	c01a      	stmia	r0!, {r1, r3, r4}
    1ef8:	6813      	ldr	r3, [r2, #0]
    1efa:	6003      	str	r3, [r0, #0]
	PdsStatus_t status = PDS_OK;
    1efc:	2300      	movs	r3, #0
    1efe:	e7f0      	b.n	1ee2 <PDS_RegFile+0x1a>
    1f00:	20000180 	.word	0x20000180
    1f04:	20000850 	.word	0x20000850

00001f08 <PDS_UnRegFile>:

\param[in] argFileId - The file id to register file to PDS.
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t PDS_UnRegFile(PdsFileItemIdx_t argFileId)
{
    1f08:	b510      	push	{r4, lr}
	PdsStatus_t status = PDS_OK;
#if (ENABLE_PDS == 1)
	if (false == pdsUnInitFlag)
    1f0a:	4b09      	ldr	r3, [pc, #36]	; (1f30 <PDS_UnRegFile+0x28>)
    1f0c:	781a      	ldrb	r2, [r3, #0]
	PdsStatus_t status = PDS_OK;
    1f0e:	2300      	movs	r3, #0
	if (false == pdsUnInitFlag)
    1f10:	2a00      	cmp	r2, #0
    1f12:	d102      	bne.n	1f1a <PDS_UnRegFile+0x12>
		{
			memset(&fileMarks[argFileId], 0, sizeof(PdsFileMarks_t));
		}
		else
		{
			status = PDS_INVLIAD_FILE_IDX;
    1f14:	3305      	adds	r3, #5
		if (PDS_MAX_FILE_IDX > argFileId)
    1f16:	280b      	cmp	r0, #11
    1f18:	d901      	bls.n	1f1e <PDS_UnRegFile+0x16>
		}
	}
#endif
	return status;
}
    1f1a:	0018      	movs	r0, r3
    1f1c:	bd10      	pop	{r4, pc}
			memset(&fileMarks[argFileId], 0, sizeof(PdsFileMarks_t));
    1f1e:	0100      	lsls	r0, r0, #4
    1f20:	4b04      	ldr	r3, [pc, #16]	; (1f34 <PDS_UnRegFile+0x2c>)
    1f22:	18c0      	adds	r0, r0, r3
    1f24:	3210      	adds	r2, #16
    1f26:	2100      	movs	r1, #0
    1f28:	4b03      	ldr	r3, [pc, #12]	; (1f38 <PDS_UnRegFile+0x30>)
    1f2a:	4798      	blx	r3
	PdsStatus_t status = PDS_OK;
    1f2c:	2300      	movs	r3, #0
    1f2e:	e7f4      	b.n	1f1a <PDS_UnRegFile+0x12>
    1f30:	20000180 	.word	0x20000180
    1f34:	20000850 	.word	0x20000850
    1f38:	000112e7 	.word	0x000112e7

00001f3c <pdsNvmRead>:
\param[in] 	buffer - The buffer containing data to be read.
\param[in] 	size - The size of the data in the buffer.
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t pdsNvmRead(uint16_t rowId, PdsMem_t *buffer, uint16_t size)
{
    1f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f3e:	000c      	movs	r4, r1
\param[out] uint16_t - The calculated 16 bit CRC.
******************************************************************************/
static uint32_t nvmLogicalRowToPhysicalAddr(uint16_t logicalRow)
{
	//return (NVMCTRL_RWW_EEPROM_ADDR + (NVMCTRL_ROW_SIZE * logicalRow)); // PRVN
	 return (PDS_FLASH_START_ADDRESS + (NVMCTRL_ROW_SIZE * logicalRow));
    1f40:	2380      	movs	r3, #128	; 0x80
    1f42:	01db      	lsls	r3, r3, #7
    1f44:	469c      	mov	ip, r3
    1f46:	4460      	add	r0, ip
    1f48:	0205      	lsls	r5, r0, #8
	if (EEPROM_ROW_SIZE == size)
    1f4a:	2380      	movs	r3, #128	; 0x80
    1f4c:	005b      	lsls	r3, r3, #1
    1f4e:	429a      	cmp	r2, r3
    1f50:	d00e      	beq.n	1f70 <pdsNvmRead+0x34>
		size += sizeof(PdsNvmHeader_t);
    1f52:	3204      	adds	r2, #4
    1f54:	b296      	uxth	r6, r2
			statusCode = nvm_read(INT_FLASH, addr, (uint8_t *const)buffer, size);
    1f56:	4f1e      	ldr	r7, [pc, #120]	; (1fd0 <pdsNvmRead+0x94>)
    1f58:	0033      	movs	r3, r6
    1f5a:	0022      	movs	r2, r4
    1f5c:	0029      	movs	r1, r5
    1f5e:	2000      	movs	r0, #0
    1f60:	47b8      	blx	r7
    1f62:	b2c3      	uxtb	r3, r0
		} while (statusCode == STATUS_BUSY);		
    1f64:	2b05      	cmp	r3, #5
    1f66:	d0f7      	beq.n	1f58 <pdsNvmRead+0x1c>
		return PDS_ERROR;
    1f68:	2002      	movs	r0, #2
	if (STATUS_OK != statusCode)
    1f6a:	2b00      	cmp	r3, #0
    1f6c:	d00b      	beq.n	1f86 <pdsNvmRead+0x4a>
}
    1f6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			statusCode = nvm_read(INT_FLASH, addr, (uint8_t *const)buffer, size);
    1f70:	001e      	movs	r6, r3
    1f72:	4f17      	ldr	r7, [pc, #92]	; (1fd0 <pdsNvmRead+0x94>)
    1f74:	0033      	movs	r3, r6
    1f76:	0022      	movs	r2, r4
    1f78:	0029      	movs	r1, r5
    1f7a:	2000      	movs	r0, #0
    1f7c:	47b8      	blx	r7
    1f7e:	b2c3      	uxtb	r3, r0
		} while (statusCode == STATUS_BUSY);
    1f80:	2b05      	cmp	r3, #5
    1f82:	d0f7      	beq.n	1f74 <pdsNvmRead+0x38>
    1f84:	e7f0      	b.n	1f68 <pdsNvmRead+0x2c>
	crc = buffer->NVM_Struct.pdsNvmHeader.crc;
    1f86:	7823      	ldrb	r3, [r4, #0]
    1f88:	7860      	ldrb	r0, [r4, #1]
    1f8a:	0200      	lsls	r0, r0, #8
    1f8c:	4318      	orrs	r0, r3
	if (crc != calculate_crc(buffer->NVM_Struct.pdsNvmHeader.size, (uint8_t *)&(buffer->NVM_Struct.pdsNvmData))) 
    1f8e:	78a6      	ldrb	r6, [r4, #2]
    1f90:	3404      	adds	r4, #4
  for (uint16_t i = 0; i < length; i++)
    1f92:	2e00      	cmp	r6, #0
    1f94:	d017      	beq.n	1fc6 <pdsNvmRead+0x8a>
    1f96:	0025      	movs	r5, r4
    1f98:	3e01      	subs	r6, #1
    1f9a:	b2b6      	uxth	r6, r6
    1f9c:	3601      	adds	r6, #1
    1f9e:	19a4      	adds	r4, r4, r6
    1fa0:	2600      	movs	r6, #0
  byte ^= initValue & 0xffU;
    1fa2:	782b      	ldrb	r3, [r5, #0]
    1fa4:	4073      	eors	r3, r6
    1fa6:	b2d9      	uxtb	r1, r3
  byte ^= byte << 4U;
    1fa8:	010b      	lsls	r3, r1, #4
    1faa:	404b      	eors	r3, r1
    1fac:	b2db      	uxtb	r3, r3
  return ((((uint16_t)byte << 8) | ((initValue & 0xff00U) >> 8))
    1fae:	b29a      	uxth	r2, r3
          ^ (uint8_t)(byte >> 4) ^ ((uint16_t)byte << 3));
    1fb0:	091b      	lsrs	r3, r3, #4
    1fb2:	00d1      	lsls	r1, r2, #3
    1fb4:	404b      	eors	r3, r1
  return ((((uint16_t)byte << 8) | ((initValue & 0xff00U) >> 8))
    1fb6:	0212      	lsls	r2, r2, #8
    1fb8:	0a36      	lsrs	r6, r6, #8
    1fba:	4332      	orrs	r2, r6
          ^ (uint8_t)(byte >> 4) ^ ((uint16_t)byte << 3));
    1fbc:	4053      	eors	r3, r2
    1fbe:	b29e      	uxth	r6, r3
    1fc0:	3501      	adds	r5, #1
  for (uint16_t i = 0; i < length; i++)
    1fc2:	42a5      	cmp	r5, r4
    1fc4:	d1ed      	bne.n	1fa2 <pdsNvmRead+0x66>
	if (crc != calculate_crc(buffer->NVM_Struct.pdsNvmHeader.size, (uint8_t *)&(buffer->NVM_Struct.pdsNvmData))) 
    1fc6:	1b80      	subs	r0, r0, r6
    1fc8:	1e46      	subs	r6, r0, #1
    1fca:	41b0      	sbcs	r0, r6
		return PDS_ERROR;
    1fcc:	b2c0      	uxtb	r0, r0
    1fce:	e7ce      	b.n	1f6e <pdsNvmRead+0x32>
    1fd0:	00000fe1 	.word	0x00000fe1

00001fd4 <pdsNvmWrite>:
{
    1fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1fd6:	46c6      	mov	lr, r8
    1fd8:	b500      	push	{lr}
    1fda:	4680      	mov	r8, r0
    1fdc:	000c      	movs	r4, r1
	buffer->NVM_Struct.pdsNvmHeader.version = PDS_NVM_VERSION;
    1fde:	2301      	movs	r3, #1
    1fe0:	70cb      	strb	r3, [r1, #3]
	buffer->NVM_Struct.pdsNvmHeader.size = size;
    1fe2:	708a      	strb	r2, [r1, #2]
    1fe4:	27ff      	movs	r7, #255	; 0xff
    1fe6:	4017      	ands	r7, r2
	buffer->NVM_Struct.pdsNvmHeader.crc = calculate_crc(buffer->NVM_Struct.pdsNvmHeader.size, (uint8_t *)(&(buffer->NVM_Struct.pdsNvmData)));
    1fe8:	1d0e      	adds	r6, r1, #4
  for (uint16_t i = 0; i < length; i++)
    1fea:	2f00      	cmp	r7, #0
    1fec:	d017      	beq.n	201e <STACK_SIZE+0x1e>
    1fee:	0030      	movs	r0, r6
    1ff0:	3f01      	subs	r7, #1
    1ff2:	b2bf      	uxth	r7, r7
    1ff4:	3701      	adds	r7, #1
    1ff6:	19f6      	adds	r6, r6, r7
    1ff8:	2700      	movs	r7, #0
  byte ^= initValue & 0xffU;
    1ffa:	7803      	ldrb	r3, [r0, #0]
    1ffc:	407b      	eors	r3, r7
    1ffe:	b2d9      	uxtb	r1, r3
  byte ^= byte << 4U;
    2000:	010b      	lsls	r3, r1, #4
    2002:	404b      	eors	r3, r1
    2004:	b2db      	uxtb	r3, r3
  return ((((uint16_t)byte << 8) | ((initValue & 0xff00U) >> 8))
    2006:	b299      	uxth	r1, r3
          ^ (uint8_t)(byte >> 4) ^ ((uint16_t)byte << 3));
    2008:	091b      	lsrs	r3, r3, #4
    200a:	00cd      	lsls	r5, r1, #3
    200c:	406b      	eors	r3, r5
  return ((((uint16_t)byte << 8) | ((initValue & 0xff00U) >> 8))
    200e:	0209      	lsls	r1, r1, #8
    2010:	0a3f      	lsrs	r7, r7, #8
    2012:	4339      	orrs	r1, r7
          ^ (uint8_t)(byte >> 4) ^ ((uint16_t)byte << 3));
    2014:	404b      	eors	r3, r1
    2016:	b29f      	uxth	r7, r3
    2018:	3001      	adds	r0, #1
  for (uint16_t i = 0; i < length; i++)
    201a:	42b0      	cmp	r0, r6
    201c:	d1ed      	bne.n	1ffa <pdsNvmWrite+0x26>
	buffer->NVM_Struct.pdsNvmHeader.crc = calculate_crc(buffer->NVM_Struct.pdsNvmHeader.size, (uint8_t *)(&(buffer->NVM_Struct.pdsNvmData)));
    201e:	7027      	strb	r7, [r4, #0]
    2020:	0a3f      	lsrs	r7, r7, #8
    2022:	7067      	strb	r7, [r4, #1]
	size += sizeof(PdsNvmHeader_t);
    2024:	3204      	adds	r2, #4
    2026:	b296      	uxth	r6, r2
	 return (PDS_FLASH_START_ADDRESS + (NVMCTRL_ROW_SIZE * logicalRow));
    2028:	2180      	movs	r1, #128	; 0x80
    202a:	01c9      	lsls	r1, r1, #7
    202c:	4441      	add	r1, r8
    202e:	0209      	lsls	r1, r1, #8
	statusCode = nvm_write(INT_FLASH, addr, (uint8_t *const)buffer, size);
    2030:	0033      	movs	r3, r6
    2032:	0022      	movs	r2, r4
    2034:	2000      	movs	r0, #0
    2036:	4f08      	ldr	r7, [pc, #32]	; (2058 <STACK_SIZE+0x58>)
    2038:	47b8      	blx	r7
		return PDS_ERROR;
    203a:	2302      	movs	r3, #2
	if (STATUS_OK != (status_code_genare_t) statusCode)
    203c:	2800      	cmp	r0, #0
    203e:	d003      	beq.n	2048 <STACK_SIZE+0x48>
}
    2040:	0018      	movs	r0, r3
    2042:	bc04      	pop	{r2}
    2044:	4690      	mov	r8, r2
    2046:	bdf0      	pop	{r4, r5, r6, r7, pc}
	status = pdsNvmRead(rowId, (PdsMem_t *const)buffer, size);
    2048:	0032      	movs	r2, r6
    204a:	0021      	movs	r1, r4
    204c:	4640      	mov	r0, r8
    204e:	4b03      	ldr	r3, [pc, #12]	; (205c <STACK_SIZE+0x5c>)
    2050:	4798      	blx	r3
    2052:	0003      	movs	r3, r0
	return status;
    2054:	e7f4      	b.n	2040 <STACK_SIZE+0x40>
    2056:	46c0      	nop			; (mov r8, r8)
    2058:	0000103d 	.word	0x0000103d
    205c:	00001f3d 	.word	0x00001f3d

00002060 <pdsPostTask>:
\brief Set task for PDS task manager.

\param[in] id - a single value from the type PdsTaskIds_t
******************************************************************************/
void pdsPostTask(PdsTaskIds_t id)
{
    2060:	b510      	push	{r4, lr}
    2062:	0004      	movs	r4, r0
    ATOMIC_SECTION_ENTER
    2064:	4b05      	ldr	r3, [pc, #20]	; (207c <pdsPostTask+0x1c>)
    2066:	4798      	blx	r3
    pdsTaskFlags |= id;
    2068:	4b05      	ldr	r3, [pc, #20]	; (2080 <pdsPostTask+0x20>)
    206a:	7818      	ldrb	r0, [r3, #0]
    206c:	4320      	orrs	r0, r4
    206e:	7018      	strb	r0, [r3, #0]
    ATOMIC_SECTION_EXIT
    2070:	4b04      	ldr	r3, [pc, #16]	; (2084 <pdsPostTask+0x24>)
    2072:	4798      	blx	r3

    /* Also post a PDS task to the system */
    SYSTEM_PostTask(PDS_TASK_ID);
    2074:	2008      	movs	r0, #8
    2076:	4b04      	ldr	r3, [pc, #16]	; (2088 <pdsPostTask+0x28>)
    2078:	4798      	blx	r3
}
    207a:	bd10      	pop	{r4, pc}
    207c:	00007475 	.word	0x00007475
    2080:	20000181 	.word	0x20000181
    2084:	00007481 	.word	0x00007481
    2088:	000015d1 	.word	0x000015d1

0000208c <pdsStoreDeleteHandler>:
		initiate store/delete operation.

\param[out] status - The return status of the function's operation.
******************************************************************************/
static SYSTEM_TaskStatus_t pdsStoreDeleteHandler(void)
{
    208c:	b5f0      	push	{r4, r5, r6, r7, lr}
    208e:	46de      	mov	lr, fp
    2090:	4657      	mov	r7, sl
    2092:	464e      	mov	r6, r9
    2094:	4645      	mov	r5, r8
    2096:	b5e0      	push	{r5, r6, r7, lr}
    2098:	b0c5      	sub	sp, #276	; 0x114
	PdsStatus_t status = SYSTEM_TASK_SUCCESS;

	PdsFileItemIdx_t fileId = PDS_FILE_MAC_01_IDX;
	PdsMem_t buffer;

	memset(&buffer, 0, sizeof(PdsMem_t));
    209a:	2280      	movs	r2, #128	; 0x80
    209c:	0052      	lsls	r2, r2, #1
    209e:	2100      	movs	r1, #0
    20a0:	a804      	add	r0, sp, #16
    20a2:	4b54      	ldr	r3, [pc, #336]	; (21f4 <pdsStoreDeleteHandler+0x168>)
    20a4:	4798      	blx	r3
	for (; fileId < PDS_MAX_FILE_IDX; fileId++)
	{
		if (true == isFileSet[fileId])
    20a6:	4b54      	ldr	r3, [pc, #336]	; (21f8 <pdsStoreDeleteHandler+0x16c>)
    20a8:	781b      	ldrb	r3, [r3, #0]
    20aa:	2b00      	cmp	r3, #0
    20ac:	d112      	bne.n	20d4 <pdsStoreDeleteHandler+0x48>
    20ae:	2401      	movs	r4, #1
    20b0:	4a51      	ldr	r2, [pc, #324]	; (21f8 <pdsStoreDeleteHandler+0x16c>)
    20b2:	9400      	str	r4, [sp, #0]
    20b4:	5d13      	ldrb	r3, [r2, r4]
    20b6:	2b00      	cmp	r3, #0
    20b8:	d10f      	bne.n	20da <pdsStoreDeleteHandler+0x4e>
	for (; fileId < PDS_MAX_FILE_IDX; fileId++)
    20ba:	3401      	adds	r4, #1
    20bc:	b2e4      	uxtb	r4, r4
    20be:	2c0b      	cmp	r4, #11
    20c0:	d9f7      	bls.n	20b2 <pdsStoreDeleteHandler+0x26>
	PdsStatus_t status = SYSTEM_TASK_SUCCESS;
    20c2:	2500      	movs	r5, #0
			break;
		}
	}

	return status;
}
    20c4:	0028      	movs	r0, r5
    20c6:	b045      	add	sp, #276	; 0x114
    20c8:	bc3c      	pop	{r2, r3, r4, r5}
    20ca:	4690      	mov	r8, r2
    20cc:	4699      	mov	r9, r3
    20ce:	46a2      	mov	sl, r4
    20d0:	46ab      	mov	fp, r5
    20d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (true == isFileSet[fileId])
    20d4:	2300      	movs	r3, #0
    20d6:	9300      	str	r3, [sp, #0]
	PdsFileItemIdx_t fileId = PDS_FILE_MAC_01_IDX;
    20d8:	2400      	movs	r4, #0
	uint8_t *ptr;
	ItemMap_t itemInfo;
	ItemHeader_t itemHeader;
	uint16_t size;

	memcpy((void *)&itemInfo, (void *)(fileMarks[pdsFileItemIdx].itemListAddr + (fileMarks[pdsFileItemIdx].numItems - 1)), sizeof(ItemMap_t));
    20da:	9b00      	ldr	r3, [sp, #0]
    20dc:	011a      	lsls	r2, r3, #4
    20de:	4b47      	ldr	r3, [pc, #284]	; (21fc <pdsStoreDeleteHandler+0x170>)
    20e0:	189b      	adds	r3, r3, r2
    20e2:	7919      	ldrb	r1, [r3, #4]
    20e4:	4a46      	ldr	r2, [pc, #280]	; (2200 <pdsStoreDeleteHandler+0x174>)
    20e6:	4694      	mov	ip, r2
    20e8:	4461      	add	r1, ip
    20ea:	00c9      	lsls	r1, r1, #3
    20ec:	689b      	ldr	r3, [r3, #8]
    20ee:	1859      	adds	r1, r3, r1
    20f0:	2208      	movs	r2, #8
    20f2:	a802      	add	r0, sp, #8
    20f4:	4b43      	ldr	r3, [pc, #268]	; (2204 <pdsStoreDeleteHandler+0x178>)
    20f6:	4798      	blx	r3
	size = itemInfo.itemOffset + itemInfo.size + sizeof(ItemHeader_t);
    20f8:	ab02      	add	r3, sp, #8
    20fa:	79da      	ldrb	r2, [r3, #7]
    20fc:	799b      	ldrb	r3, [r3, #6]
    20fe:	18d2      	adds	r2, r2, r3
	status = pdsWlRead(pdsFileItemIdx, (PdsMem_t *)buffer, size);
    2100:	3205      	adds	r2, #5
    2102:	a904      	add	r1, sp, #16
    2104:	0020      	movs	r0, r4
    2106:	4b40      	ldr	r3, [pc, #256]	; (2208 <pdsStoreDeleteHandler+0x17c>)
    2108:	4798      	blx	r3
    210a:	1e05      	subs	r5, r0, #0

	if ((PDS_OK != status) && (PDS_NOT_FOUND != status))
    210c:	d111      	bne.n	2132 <pdsStoreDeleteHandler+0xa6>
	}

	itemHeader.magic = PDS_MAGIC;
	itemHeader.version = PDS_FILES_VERSION;

	for (uint8_t itemIdx = 0; itemIdx < fileMarks[pdsFileItemIdx].numItems; itemIdx++)
    210e:	9b00      	ldr	r3, [sp, #0]
    2110:	011a      	lsls	r2, r3, #4
    2112:	4b3a      	ldr	r3, [pc, #232]	; (21fc <pdsStoreDeleteHandler+0x170>)
    2114:	189b      	adds	r3, r3, r2
    2116:	791b      	ldrb	r3, [r3, #4]
    2118:	2500      	movs	r5, #0
    211a:	2b00      	cmp	r3, #0
    211c:	d04a      	beq.n	21b4 <pdsStoreDeleteHandler+0x128>
	{

		memcpy((void *)&itemInfo, (fileMarks[pdsFileItemIdx].itemListAddr) + itemIdx, sizeof(ItemMap_t));
    211e:	4b37      	ldr	r3, [pc, #220]	; (21fc <pdsStoreDeleteHandler+0x170>)
    2120:	4699      	mov	r9, r3
    2122:	9b00      	ldr	r3, [sp, #0]
    2124:	011e      	lsls	r6, r3, #4
    2126:	46b3      	mov	fp, r6
    2128:	44cb      	add	fp, r9
    212a:	4b36      	ldr	r3, [pc, #216]	; (2204 <pdsStoreDeleteHandler+0x178>)
    212c:	469a      	mov	sl, r3
	for (uint8_t itemIdx = 0; itemIdx < fileMarks[pdsFileItemIdx].numItems; itemIdx++)
    212e:	465f      	mov	r7, fp
    2130:	e01b      	b.n	216a <pdsStoreDeleteHandler+0xde>
	if ((PDS_OK != status) && (PDS_NOT_FOUND != status))
    2132:	2803      	cmp	r0, #3
    2134:	d144      	bne.n	21c0 <pdsStoreDeleteHandler+0x134>
    2136:	e7ea      	b.n	210e <pdsStoreDeleteHandler+0x82>
		ptr = (uint8_t *)(&(((PdsMem_t *)(buffer))->NVM_Struct.pdsNvmData.WL_Struct.pdsWlData));
		ptr += itemInfo.itemOffset;

		if (PDS_OP_STORE == *(fileMarks[pdsFileItemIdx].fileMarkListAddr + itemIdx))
		{
			*(fileMarks[pdsFileItemIdx].fileMarkListAddr + itemIdx) = PDS_OP_NONE;
    2138:	2100      	movs	r1, #0
    213a:	7019      	strb	r1, [r3, #0]
			itemHeader.size = itemInfo.size;
    213c:	ab02      	add	r3, sp, #8
    213e:	799a      	ldrb	r2, [r3, #6]
			itemHeader.itemId = itemInfo.itemId;
    2140:	795b      	ldrb	r3, [r3, #5]
    2142:	4698      	mov	r8, r3
			itemHeader.delete = false;
			memcpy((void *)(ptr), (void *)&itemHeader, sizeof(ItemHeader_t));
    2144:	23a5      	movs	r3, #165	; 0xa5
    2146:	7003      	strb	r3, [r0, #0]
    2148:	2301      	movs	r3, #1
    214a:	7043      	strb	r3, [r0, #1]
    214c:	7082      	strb	r2, [r0, #2]
    214e:	4643      	mov	r3, r8
    2150:	70c3      	strb	r3, [r0, #3]
    2152:	7101      	strb	r1, [r0, #4]
			ptr += sizeof(ItemHeader_t);
    2154:	3005      	adds	r0, #5
			memcpy((void *)(ptr), (void *)itemInfo.ramAddress, itemInfo.size);
    2156:	9b02      	ldr	r3, [sp, #8]
    2158:	9301      	str	r3, [sp, #4]
    215a:	0019      	movs	r1, r3
    215c:	4b29      	ldr	r3, [pc, #164]	; (2204 <pdsStoreDeleteHandler+0x178>)
    215e:	4798      	blx	r3
	for (uint8_t itemIdx = 0; itemIdx < fileMarks[pdsFileItemIdx].numItems; itemIdx++)
    2160:	3501      	adds	r5, #1
    2162:	b2ed      	uxtb	r5, r5
    2164:	793b      	ldrb	r3, [r7, #4]
    2166:	42ab      	cmp	r3, r5
    2168:	d924      	bls.n	21b4 <pdsStoreDeleteHandler+0x128>
		memcpy((void *)&itemInfo, (fileMarks[pdsFileItemIdx].itemListAddr) + itemIdx, sizeof(ItemMap_t));
    216a:	00e9      	lsls	r1, r5, #3
    216c:	465b      	mov	r3, fp
    216e:	689b      	ldr	r3, [r3, #8]
    2170:	469c      	mov	ip, r3
    2172:	4461      	add	r1, ip
    2174:	2208      	movs	r2, #8
    2176:	a802      	add	r0, sp, #8
    2178:	47d0      	blx	sl
		ptr += itemInfo.itemOffset;
    217a:	ab02      	add	r3, sp, #8
    217c:	79d8      	ldrb	r0, [r3, #7]
    217e:	2315      	movs	r3, #21
    2180:	aa02      	add	r2, sp, #8
    2182:	4694      	mov	ip, r2
    2184:	4463      	add	r3, ip
    2186:	469c      	mov	ip, r3
    2188:	4460      	add	r0, ip
		if (PDS_OP_STORE == *(fileMarks[pdsFileItemIdx].fileMarkListAddr + itemIdx))
    218a:	464b      	mov	r3, r9
    218c:	58f3      	ldr	r3, [r6, r3]
    218e:	195b      	adds	r3, r3, r5
    2190:	781a      	ldrb	r2, [r3, #0]
    2192:	2a01      	cmp	r2, #1
    2194:	d0d0      	beq.n	2138 <pdsStoreDeleteHandler+0xac>
		}
		else if (PDS_OP_DELETE == *(fileMarks[pdsFileItemIdx].fileMarkListAddr + itemIdx))
    2196:	2a02      	cmp	r2, #2
    2198:	d1e2      	bne.n	2160 <pdsStoreDeleteHandler+0xd4>
		{
			*(fileMarks[pdsFileItemIdx].fileMarkListAddr + itemIdx) = PDS_OP_NONE;
    219a:	2200      	movs	r2, #0
    219c:	701a      	strb	r2, [r3, #0]
			itemHeader.size = itemInfo.size;
    219e:	ab02      	add	r3, sp, #8
    21a0:	7999      	ldrb	r1, [r3, #6]
			itemHeader.itemId = itemInfo.itemId;
    21a2:	795a      	ldrb	r2, [r3, #5]
			itemHeader.delete = true;
			memcpy((void *)(ptr), (void *)&itemHeader, sizeof(ItemHeader_t));
    21a4:	23a5      	movs	r3, #165	; 0xa5
    21a6:	7003      	strb	r3, [r0, #0]
    21a8:	3ba4      	subs	r3, #164	; 0xa4
    21aa:	7043      	strb	r3, [r0, #1]
    21ac:	7081      	strb	r1, [r0, #2]
    21ae:	70c2      	strb	r2, [r0, #3]
    21b0:	7103      	strb	r3, [r0, #4]
    21b2:	e7d5      	b.n	2160 <pdsStoreDeleteHandler+0xd4>
		}
	}

	memcpy((void *)&itemInfo, (void *)(fileMarks[pdsFileItemIdx].itemListAddr + fileMarks[pdsFileItemIdx].numItems), sizeof(ItemMap_t));
	size = itemInfo.itemOffset + itemInfo.size + sizeof(ItemHeader_t);
	status = pdsWlWrite(pdsFileItemIdx, (PdsMem_t *)buffer, PDS_WL_DATA_SIZE);
    21b4:	22f3      	movs	r2, #243	; 0xf3
    21b6:	a904      	add	r1, sp, #16
    21b8:	0020      	movs	r0, r4
    21ba:	4b14      	ldr	r3, [pc, #80]	; (220c <pdsStoreDeleteHandler+0x180>)
    21bc:	4798      	blx	r3
    21be:	0005      	movs	r5, r0
			isFileSet[fileId] = false;
    21c0:	2200      	movs	r2, #0
    21c2:	4b0d      	ldr	r3, [pc, #52]	; (21f8 <pdsStoreDeleteHandler+0x16c>)
    21c4:	9900      	ldr	r1, [sp, #0]
    21c6:	545a      	strb	r2, [r3, r1]
			fileId++;
    21c8:	3401      	adds	r4, #1
    21ca:	b2e3      	uxtb	r3, r4
	for (; fileId < PDS_MAX_FILE_IDX; fileId++)
    21cc:	2b0b      	cmp	r3, #11
    21ce:	d900      	bls.n	21d2 <pdsStoreDeleteHandler+0x146>
    21d0:	e778      	b.n	20c4 <pdsStoreDeleteHandler+0x38>
		if (isFileSet[fileId])
    21d2:	4a09      	ldr	r2, [pc, #36]	; (21f8 <pdsStoreDeleteHandler+0x16c>)
    21d4:	5cd2      	ldrb	r2, [r2, r3]
    21d6:	2a00      	cmp	r2, #0
    21d8:	d108      	bne.n	21ec <pdsStoreDeleteHandler+0x160>
    21da:	4907      	ldr	r1, [pc, #28]	; (21f8 <pdsStoreDeleteHandler+0x16c>)
	for (; fileId < PDS_MAX_FILE_IDX; fileId++)
    21dc:	3301      	adds	r3, #1
    21de:	b2db      	uxtb	r3, r3
    21e0:	2b0b      	cmp	r3, #11
    21e2:	d900      	bls.n	21e6 <pdsStoreDeleteHandler+0x15a>
    21e4:	e76e      	b.n	20c4 <pdsStoreDeleteHandler+0x38>
		if (isFileSet[fileId])
    21e6:	5cca      	ldrb	r2, [r1, r3]
    21e8:	2a00      	cmp	r2, #0
    21ea:	d0f7      	beq.n	21dc <pdsStoreDeleteHandler+0x150>
			pdsPostTask(PDS_STORE_DELETE_TASK_ID);
    21ec:	2001      	movs	r0, #1
    21ee:	4b08      	ldr	r3, [pc, #32]	; (2210 <pdsStoreDeleteHandler+0x184>)
    21f0:	4798      	blx	r3
			break;
    21f2:	e767      	b.n	20c4 <pdsStoreDeleteHandler+0x38>
    21f4:	000112e7 	.word	0x000112e7
    21f8:	20000844 	.word	0x20000844
    21fc:	20000850 	.word	0x20000850
    2200:	1fffffff 	.word	0x1fffffff
    2204:	000112d5 	.word	0x000112d5
    2208:	00002479 	.word	0x00002479
    220c:	00002389 	.word	0x00002389
    2210:	00002061 	.word	0x00002061

00002214 <PDS_TaskHandler>:
{
    2214:	b510      	push	{r4, lr}
    if (pdsTaskFlags)
    2216:	4b0e      	ldr	r3, [pc, #56]	; (2250 <PDS_TaskHandler+0x3c>)
    2218:	781b      	ldrb	r3, [r3, #0]
    221a:	2b00      	cmp	r3, #0
    221c:	d003      	beq.n	2226 <PDS_TaskHandler+0x12>
            if ((1 << taskId) & (pdsTaskFlags))
    221e:	4b0c      	ldr	r3, [pc, #48]	; (2250 <PDS_TaskHandler+0x3c>)
    2220:	781b      	ldrb	r3, [r3, #0]
    2222:	07db      	lsls	r3, r3, #31
    2224:	d401      	bmi.n	222a <PDS_TaskHandler+0x16>
}
    2226:	2000      	movs	r0, #0
    2228:	bd10      	pop	{r4, pc}
                ATOMIC_SECTION_ENTER
    222a:	4b0a      	ldr	r3, [pc, #40]	; (2254 <PDS_TaskHandler+0x40>)
    222c:	4798      	blx	r3
                pdsTaskFlags &= ~(1 << taskId);
    222e:	4c08      	ldr	r4, [pc, #32]	; (2250 <PDS_TaskHandler+0x3c>)
    2230:	7823      	ldrb	r3, [r4, #0]
    2232:	2201      	movs	r2, #1
    2234:	4393      	bics	r3, r2
    2236:	7023      	strb	r3, [r4, #0]
                ATOMIC_SECTION_EXIT
    2238:	4b07      	ldr	r3, [pc, #28]	; (2258 <PDS_TaskHandler+0x44>)
    223a:	4798      	blx	r3
                pdsTaskHandlers[taskId]();
    223c:	4b07      	ldr	r3, [pc, #28]	; (225c <PDS_TaskHandler+0x48>)
    223e:	4798      	blx	r3
				if (pdsTaskFlags)
    2240:	7823      	ldrb	r3, [r4, #0]
    2242:	2b00      	cmp	r3, #0
    2244:	d0ef      	beq.n	2226 <PDS_TaskHandler+0x12>
                    SYSTEM_PostTask(PDS_TASK_ID);
    2246:	2008      	movs	r0, #8
    2248:	4b05      	ldr	r3, [pc, #20]	; (2260 <PDS_TaskHandler+0x4c>)
    224a:	4798      	blx	r3
    224c:	e7eb      	b.n	2226 <PDS_TaskHandler+0x12>
    224e:	46c0      	nop			; (mov r8, r8)
    2250:	20000181 	.word	0x20000181
    2254:	00007475 	.word	0x00007475
    2258:	00007481 	.word	0x00007481
    225c:	0000208d 	.word	0x0000208d
    2260:	000015d1 	.word	0x000015d1

00002264 <pdsUpdateRowMap>:
		in the row map.

\param[in] - return none
******************************************************************************/
static void pdsUpdateRowMap()
{
    2264:	b5f0      	push	{r4, r5, r6, r7, lr}
    2266:	4e12      	ldr	r6, [pc, #72]	; (22b0 <pdsUpdateRowMap+0x4c>)
    2268:	0037      	movs	r7, r6
    226a:	3718      	adds	r7, #24
	uint16_t rowIdx = USHRT_MAX;
    for(uint16_t memId = 0, rowIdxLocal = 0 ; memId < PDS_MAX_FILE_IDX; memId++)
    {
		
        // make all the previous indexes of the max_counter_row_idx invalid by writing 0xFF
		if(USHRT_MAX != fileMap[memId].maxCounterRowIdx)
    226c:	4d11      	ldr	r5, [pc, #68]	; (22b4 <pdsUpdateRowMap+0x50>)
		{
			rowIdx = rowMap[fileMap[memId].maxCounterRowIdx].previousIdx;
    226e:	4b12      	ldr	r3, [pc, #72]	; (22b8 <pdsUpdateRowMap+0x54>)
    2270:	469c      	mov	ip, r3
			rowMap[fileMap[memId].maxCounterRowIdx].previousIdx = USHRT_MAX;
    2272:	2101      	movs	r1, #1
    2274:	4249      	negs	r1, r1
			while(rowIdx != USHRT_MAX)
			{
				rowIdxLocal = rowMap[rowIdx].previousIdx;
    2276:	0018      	movs	r0, r3
    2278:	e002      	b.n	2280 <pdsUpdateRowMap+0x1c>
    227a:	3602      	adds	r6, #2
    for(uint16_t memId = 0, rowIdxLocal = 0 ; memId < PDS_MAX_FILE_IDX; memId++)
    227c:	42be      	cmp	r6, r7
    227e:	d015      	beq.n	22ac <pdsUpdateRowMap+0x48>
		if(USHRT_MAX != fileMap[memId].maxCounterRowIdx)
    2280:	8833      	ldrh	r3, [r6, #0]
    2282:	42ab      	cmp	r3, r5
    2284:	d0f9      	beq.n	227a <pdsUpdateRowMap+0x16>
			rowIdx = rowMap[fileMap[memId].maxCounterRowIdx].previousIdx;
    2286:	00db      	lsls	r3, r3, #3
    2288:	4463      	add	r3, ip
    228a:	001a      	movs	r2, r3
    228c:	88db      	ldrh	r3, [r3, #6]
			rowMap[fileMap[memId].maxCounterRowIdx].previousIdx = USHRT_MAX;
    228e:	80d1      	strh	r1, [r2, #6]
			while(rowIdx != USHRT_MAX)
    2290:	42ab      	cmp	r3, r5
    2292:	d0f2      	beq.n	227a <pdsUpdateRowMap+0x16>
				rowIdxLocal = rowMap[rowIdx].previousIdx;
    2294:	001a      	movs	r2, r3
    2296:	00db      	lsls	r3, r3, #3
    2298:	18c3      	adds	r3, r0, r3
    229a:	88db      	ldrh	r3, [r3, #6]
				rowMap[rowIdx].previousIdx = USHRT_MAX;
    229c:	00d2      	lsls	r2, r2, #3
    229e:	1884      	adds	r4, r0, r2
    22a0:	80e1      	strh	r1, [r4, #6]
				rowMap[rowIdx].counter = UINT_MAX;
    22a2:	5011      	str	r1, [r2, r0]
				rowMap[rowIdx].memId = USHRT_MAX;
    22a4:	80a1      	strh	r1, [r4, #4]
			while(rowIdx != USHRT_MAX)
    22a6:	42ab      	cmp	r3, r5
    22a8:	d1f4      	bne.n	2294 <pdsUpdateRowMap+0x30>
    22aa:	e7e6      	b.n	227a <pdsUpdateRowMap+0x16>
				rowIdx = rowIdxLocal;
			}
		}
    }
}
    22ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    22ae:	46c0      	nop			; (mov r8, r8)
    22b0:	20000184 	.word	0x20000184
    22b4:	0000ffff 	.word	0x0000ffff
    22b8:	2000019c 	.word	0x2000019c

000022bc <pdsUpdateFileMap>:
\brief Updates the file map so that it points to the latest row index for a file id.

\param[out] - returns none
******************************************************************************/
static void pdsUpdateFileMap(UpdateFileMap_t *updateFileMap)
{
    22bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    22be:	46c6      	mov	lr, r8
    22c0:	b500      	push	{lr}
    22c2:	b082      	sub	sp, #8
    22c4:	4684      	mov	ip, r0
    uint16_t *presentRowIdx;
    uint16_t *previousRowIdx;
    uint16_t *lastRowIdx;
    uint16_t prevTemp;
    if(USHRT_MAX == fileMap[updateFileMap->memId].maxCounterRowIdx)
    22c6:	8881      	ldrh	r1, [r0, #4]
    22c8:	004a      	lsls	r2, r1, #1
    22ca:	4b2c      	ldr	r3, [pc, #176]	; (237c <pdsUpdateFileMap+0xc0>)
    22cc:	5ad3      	ldrh	r3, [r2, r3]
    22ce:	4a2c      	ldr	r2, [pc, #176]	; (2380 <pdsUpdateFileMap+0xc4>)
    22d0:	4293      	cmp	r3, r2
    22d2:	d02c      	beq.n	232e <pdsUpdateFileMap+0x72>
    {   
		/* If there is no entry in filemap update current rowidx as maxcounteridx*/
        fileMap[updateFileMap->memId].maxCounterRowIdx = updateFileMap->rowIdx;

    }
    else if(rowMap[fileMap[updateFileMap->memId].maxCounterRowIdx].counter < rowMap[updateFileMap->rowIdx].counter)
    22d4:	4a2b      	ldr	r2, [pc, #172]	; (2384 <pdsUpdateFileMap+0xc8>)
    22d6:	00d8      	lsls	r0, r3, #3
    22d8:	5880      	ldr	r0, [r0, r2]
    22da:	4664      	mov	r4, ip
    22dc:	88e4      	ldrh	r4, [r4, #6]
    22de:	46a0      	mov	r8, r4
    22e0:	00e4      	lsls	r4, r4, #3
    22e2:	58a6      	ldr	r6, [r4, r2]
    22e4:	42b0      	cmp	r0, r6
    22e6:	d327      	bcc.n	2338 <pdsUpdateFileMap+0x7c>
		// update the max counter rowIdx of the memId as previous_idx in the present row
        rowMap[updateFileMap->rowIdx].previousIdx = fileMap[updateFileMap->memId].maxCounterRowIdx;
        fileMap[updateFileMap->memId].maxCounterRowIdx = updateFileMap->rowIdx;

    }
	else if (rowMap[fileMap[updateFileMap->memId].maxCounterRowIdx].counter == rowMap[updateFileMap->rowIdx].counter)
    22e8:	d02f      	beq.n	234a <pdsUpdateFileMap+0x8e>

		return;
	}
    else
    {
        previousRowIdx = &rowMap[fileMap[updateFileMap->memId].maxCounterRowIdx].previousIdx;
    22ea:	4a26      	ldr	r2, [pc, #152]	; (2384 <pdsUpdateFileMap+0xc8>)
    22ec:	00dd      	lsls	r5, r3, #3
    22ee:	3506      	adds	r5, #6
    22f0:	1950      	adds	r0, r2, r5
    22f2:	9001      	str	r0, [sp, #4]
    22f4:	00db      	lsls	r3, r3, #3
    22f6:	18d3      	adds	r3, r2, r3
    22f8:	88da      	ldrh	r2, [r3, #6]
        presentRowIdx = &updateFileMap->rowIdx;
        lastRowIdx = &fileMap[updateFileMap->memId].maxCounterRowIdx;
		do
		{
			if (USHRT_MAX == *previousRowIdx)
    22fa:	4b21      	ldr	r3, [pc, #132]	; (2380 <pdsUpdateFileMap+0xc4>)
    22fc:	429a      	cmp	r2, r3
    22fe:	d028      	beq.n	2352 <pdsUpdateFileMap+0x96>
			{
				*previousRowIdx = *presentRowIdx;
				break;
			}
			if (rowMap[*previousRowIdx].counter > rowMap[*presentRowIdx].counter)
    2300:	0013      	movs	r3, r2
    2302:	00d0      	lsls	r0, r2, #3
    2304:	4c1f      	ldr	r4, [pc, #124]	; (2384 <pdsUpdateFileMap+0xc8>)
    2306:	5900      	ldr	r0, [r0, r4]
    2308:	4286      	cmp	r6, r0
    230a:	d226      	bcs.n	235a <pdsUpdateFileMap+0x9e>
			{
				lastRowIdx = previousRowIdx;
				previousRowIdx = &rowMap[*previousRowIdx].previousIdx;
    230c:	4c1d      	ldr	r4, [pc, #116]	; (2384 <pdsUpdateFileMap+0xc8>)
			if (USHRT_MAX == *previousRowIdx)
    230e:	4f1c      	ldr	r7, [pc, #112]	; (2380 <pdsUpdateFileMap+0xc4>)
			if (rowMap[*previousRowIdx].counter > rowMap[*presentRowIdx].counter)
    2310:	0020      	movs	r0, r4
				previousRowIdx = &rowMap[*previousRowIdx].previousIdx;
    2312:	00db      	lsls	r3, r3, #3
    2314:	1d99      	adds	r1, r3, #6
    2316:	1861      	adds	r1, r4, r1
    2318:	18e3      	adds	r3, r4, r3
    231a:	88da      	ldrh	r2, [r3, #6]
			if (USHRT_MAX == *previousRowIdx)
    231c:	42ba      	cmp	r2, r7
    231e:	d019      	beq.n	2354 <pdsUpdateFileMap+0x98>
			if (rowMap[*previousRowIdx].counter > rowMap[*presentRowIdx].counter)
    2320:	0013      	movs	r3, r2
    2322:	00d5      	lsls	r5, r2, #3
    2324:	582d      	ldr	r5, [r5, r0]
    2326:	42ae      	cmp	r6, r5
    2328:	d21b      	bcs.n	2362 <pdsUpdateFileMap+0xa6>
				previousRowIdx = &rowMap[*previousRowIdx].previousIdx;
    232a:	9101      	str	r1, [sp, #4]
    232c:	e7f1      	b.n	2312 <pdsUpdateFileMap+0x56>
        fileMap[updateFileMap->memId].maxCounterRowIdx = updateFileMap->rowIdx;
    232e:	88c2      	ldrh	r2, [r0, #6]
    2330:	0049      	lsls	r1, r1, #1
    2332:	4b12      	ldr	r3, [pc, #72]	; (237c <pdsUpdateFileMap+0xc0>)
    2334:	52ca      	strh	r2, [r1, r3]
    2336:	e008      	b.n	234a <pdsUpdateFileMap+0x8e>
        rowMap[updateFileMap->rowIdx].previousIdx = fileMap[updateFileMap->memId].maxCounterRowIdx;
    2338:	4a12      	ldr	r2, [pc, #72]	; (2384 <pdsUpdateFileMap+0xc8>)
    233a:	1912      	adds	r2, r2, r4
    233c:	80d3      	strh	r3, [r2, #6]
        fileMap[updateFileMap->memId].maxCounterRowIdx = updateFileMap->rowIdx;
    233e:	4663      	mov	r3, ip
    2340:	88d9      	ldrh	r1, [r3, #6]
    2342:	889b      	ldrh	r3, [r3, #4]
    2344:	005b      	lsls	r3, r3, #1
    2346:	4a0d      	ldr	r2, [pc, #52]	; (237c <pdsUpdateFileMap+0xc0>)
    2348:	5299      	strh	r1, [r3, r2]
				break;
			}
		} while(true);

    }
}
    234a:	b002      	add	sp, #8
    234c:	bc04      	pop	{r2}
    234e:	4690      	mov	r8, r2
    2350:	bdf0      	pop	{r4, r5, r6, r7, pc}
        previousRowIdx = &rowMap[fileMap[updateFileMap->memId].maxCounterRowIdx].previousIdx;
    2352:	9901      	ldr	r1, [sp, #4]
				*previousRowIdx = *presentRowIdx;
    2354:	4643      	mov	r3, r8
    2356:	800b      	strh	r3, [r1, #0]
				break;
    2358:	e7f7      	b.n	234a <pdsUpdateFileMap+0x8e>
        lastRowIdx = &fileMap[updateFileMap->memId].maxCounterRowIdx;
    235a:	0049      	lsls	r1, r1, #1
    235c:	4d07      	ldr	r5, [pc, #28]	; (237c <pdsUpdateFileMap+0xc0>)
    235e:	186b      	adds	r3, r5, r1
    2360:	9301      	str	r3, [sp, #4]
				rowMap[*lastRowIdx].previousIdx = *presentRowIdx;
    2362:	4908      	ldr	r1, [pc, #32]	; (2384 <pdsUpdateFileMap+0xc8>)
    2364:	9b01      	ldr	r3, [sp, #4]
    2366:	881b      	ldrh	r3, [r3, #0]
    2368:	00db      	lsls	r3, r3, #3
    236a:	18cb      	adds	r3, r1, r3
    236c:	4640      	mov	r0, r8
    236e:	80d8      	strh	r0, [r3, #6]
				rowMap[*presentRowIdx].previousIdx = prevTemp;
    2370:	4663      	mov	r3, ip
    2372:	88db      	ldrh	r3, [r3, #6]
    2374:	00db      	lsls	r3, r3, #3
    2376:	18c9      	adds	r1, r1, r3
    2378:	80ca      	strh	r2, [r1, #6]
				break;
    237a:	e7e6      	b.n	234a <pdsUpdateFileMap+0x8e>
    237c:	20000184 	.word	0x20000184
    2380:	0000ffff 	.word	0x0000ffff
    2384:	2000019c 	.word	0x2000019c

00002388 <pdsWlWrite>:
{
    2388:	b5f0      	push	{r4, r5, r6, r7, lr}
    238a:	46ce      	mov	lr, r9
    238c:	4647      	mov	r7, r8
    238e:	b580      	push	{r7, lr}
    2390:	b083      	sub	sp, #12
    2392:	0005      	movs	r5, r0
    2394:	000f      	movs	r7, r1
    2396:	4690      	mov	r8, r2
    2398:	4e32      	ldr	r6, [pc, #200]	; (2464 <pdsWlWrite+0xdc>)
    239a:	0033      	movs	r3, r6
******************************************************************************/
static uint16_t pdsReturnFreeRowIdx(void)
{
    uint8_t rowIdx;
    bool found = 0;
    for(rowIdx = 0; rowIdx < EEPROM_NUM_ROWS; rowIdx++)
    239c:	2400      	movs	r4, #0
    {
        if( (UINT_MAX == rowMap[rowIdx].counter) &&
    239e:	4832      	ldr	r0, [pc, #200]	; (2468 <pdsWlWrite+0xe0>)
    23a0:	e004      	b.n	23ac <pdsWlWrite+0x24>
    for(rowIdx = 0; rowIdx < EEPROM_NUM_ROWS; rowIdx++)
    23a2:	3401      	adds	r4, #1
    23a4:	b2e4      	uxtb	r4, r4
    23a6:	3308      	adds	r3, #8
    23a8:	2c10      	cmp	r4, #16
    23aa:	d055      	beq.n	2458 <pdsWlWrite+0xd0>
        if( (UINT_MAX == rowMap[rowIdx].counter) &&
    23ac:	6819      	ldr	r1, [r3, #0]
    23ae:	3101      	adds	r1, #1
    23b0:	d1f7      	bne.n	23a2 <pdsWlWrite+0x1a>
    23b2:	88d9      	ldrh	r1, [r3, #6]
    23b4:	4281      	cmp	r1, r0
    23b6:	d1f4      	bne.n	23a2 <pdsWlWrite+0x1a>
            (USHRT_MAX == rowMap[rowIdx].previousIdx) &&
    23b8:	889a      	ldrh	r2, [r3, #4]
    23ba:	4282      	cmp	r2, r0
    23bc:	d1f1      	bne.n	23a2 <pdsWlWrite+0x1a>
            {
                break;
            }
        }
    }
	return rowIdx;
    23be:	b2a3      	uxth	r3, r4
    23c0:	4699      	mov	r9, r3
	buffer->NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.counter++;
    23c2:	7a7e      	ldrb	r6, [r7, #9]
    23c4:	7abb      	ldrb	r3, [r7, #10]
    23c6:	021b      	lsls	r3, r3, #8
    23c8:	4333      	orrs	r3, r6
    23ca:	7afe      	ldrb	r6, [r7, #11]
    23cc:	0436      	lsls	r6, r6, #16
    23ce:	4333      	orrs	r3, r6
    23d0:	7b3e      	ldrb	r6, [r7, #12]
    23d2:	0636      	lsls	r6, r6, #24
    23d4:	431e      	orrs	r6, r3
    23d6:	3601      	adds	r6, #1
    23d8:	727e      	strb	r6, [r7, #9]
    23da:	0a32      	lsrs	r2, r6, #8
    23dc:	72ba      	strb	r2, [r7, #10]
    23de:	0c32      	lsrs	r2, r6, #16
    23e0:	72fa      	strb	r2, [r7, #11]
    23e2:	0e32      	lsrs	r2, r6, #24
    23e4:	733a      	strb	r2, [r7, #12]
	buffer->NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.memId = pdsFileItemIdx;
    23e6:	b2ad      	uxth	r5, r5
    23e8:	71fd      	strb	r5, [r7, #7]
    23ea:	2200      	movs	r2, #0
    23ec:	723a      	strb	r2, [r7, #8]
	buffer->NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.magicNo = PDS_MAGIC;
    23ee:	23a5      	movs	r3, #165	; 0xa5
    23f0:	713b      	strb	r3, [r7, #4]
	buffer->NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.version = PDS_WL_VERSION;
    23f2:	3ba4      	subs	r3, #164	; 0xa4
    23f4:	717b      	strb	r3, [r7, #5]
	buffer->NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.size = size;
    23f6:	4643      	mov	r3, r8
    23f8:	71bb      	strb	r3, [r7, #6]
	size += sizeof(PdsWlHeader_t);
    23fa:	4642      	mov	r2, r8
    23fc:	3209      	adds	r2, #9
	status = pdsNvmWrite(rowIdx, buffer, size);
    23fe:	b292      	uxth	r2, r2
    2400:	0039      	movs	r1, r7
    2402:	4648      	mov	r0, r9
    2404:	4b19      	ldr	r3, [pc, #100]	; (246c <pdsWlWrite+0xe4>)
    2406:	4798      	blx	r3
    2408:	1e07      	subs	r7, r0, #0
	if (PDS_OK == status)
    240a:	d014      	beq.n	2436 <pdsWlWrite+0xae>
}
    240c:	0038      	movs	r0, r7
    240e:	b003      	add	sp, #12
    2410:	bc0c      	pop	{r2, r3}
    2412:	4690      	mov	r8, r2
    2414:	4699      	mov	r9, r3
    2416:	bdf0      	pop	{r4, r5, r6, r7, pc}
        for(rowIdx = 0; rowIdx < EEPROM_NUM_ROWS; rowIdx++)
    2418:	3401      	adds	r4, #1
    241a:	b2e4      	uxtb	r4, r4
    241c:	3608      	adds	r6, #8
    241e:	2c10      	cmp	r4, #16
    2420:	d0cd      	beq.n	23be <pdsWlWrite+0x36>
            if( (UINT_MAX == rowMap[rowIdx].counter) &&
    2422:	6832      	ldr	r2, [r6, #0]
    2424:	3201      	adds	r2, #1
    2426:	d1f7      	bne.n	2418 <pdsWlWrite+0x90>
    2428:	88f2      	ldrh	r2, [r6, #6]
    242a:	428a      	cmp	r2, r1
    242c:	d1f4      	bne.n	2418 <pdsWlWrite+0x90>
                (USHRT_MAX == rowMap[rowIdx].previousIdx) &&
    242e:	88b3      	ldrh	r3, [r6, #4]
    2430:	428b      	cmp	r3, r1
    2432:	d1f1      	bne.n	2418 <pdsWlWrite+0x90>
    2434:	e7c3      	b.n	23be <pdsWlWrite+0x36>
		rowMap[rowIdx].counter = counter;
    2436:	4b0b      	ldr	r3, [pc, #44]	; (2464 <pdsWlWrite+0xdc>)
    2438:	00e4      	lsls	r4, r4, #3
    243a:	50e6      	str	r6, [r4, r3]
		rowMap[rowIdx].memId = pdsFileItemIdx;
    243c:	191c      	adds	r4, r3, r4
    243e:	80a5      	strh	r5, [r4, #4]
		rowMap[rowIdx].previousIdx = USHRT_MAX;
    2440:	2301      	movs	r3, #1
    2442:	425b      	negs	r3, r3
    2444:	80e3      	strh	r3, [r4, #6]
		updateFileMap.counter = rowMap[rowIdx].counter;
    2446:	9600      	str	r6, [sp, #0]
		updateFileMap.memId = rowMap[rowIdx].memId;
    2448:	466b      	mov	r3, sp
    244a:	809d      	strh	r5, [r3, #4]
		updateFileMap.rowIdx = rowIdx;
    244c:	464a      	mov	r2, r9
    244e:	80da      	strh	r2, [r3, #6]
		pdsUpdateFileMap(&updateFileMap);
    2450:	4668      	mov	r0, sp
    2452:	4b07      	ldr	r3, [pc, #28]	; (2470 <pdsWlWrite+0xe8>)
    2454:	4798      	blx	r3
	return status;
    2456:	e7d9      	b.n	240c <pdsWlWrite+0x84>
        pdsUpdateRowMap();
    2458:	4b06      	ldr	r3, [pc, #24]	; (2474 <pdsWlWrite+0xec>)
    245a:	4798      	blx	r3
        for(rowIdx = 0; rowIdx < EEPROM_NUM_ROWS; rowIdx++)
    245c:	2400      	movs	r4, #0
            if( (UINT_MAX == rowMap[rowIdx].counter) &&
    245e:	4902      	ldr	r1, [pc, #8]	; (2468 <pdsWlWrite+0xe0>)
    2460:	e7df      	b.n	2422 <pdsWlWrite+0x9a>
    2462:	46c0      	nop			; (mov r8, r8)
    2464:	2000019c 	.word	0x2000019c
    2468:	0000ffff 	.word	0x0000ffff
    246c:	00001fd5 	.word	0x00001fd5
    2470:	000022bd 	.word	0x000022bd
    2474:	00002265 	.word	0x00002265

00002478 <pdsWlRead>:
{
    2478:	b510      	push	{r4, lr}
	uint16_t rowIdx = fileMap[pdsFileItemIdx].maxCounterRowIdx;
    247a:	0040      	lsls	r0, r0, #1
    247c:	4b06      	ldr	r3, [pc, #24]	; (2498 <pdsWlRead+0x20>)
    247e:	5ac3      	ldrh	r3, [r0, r3]
	if (USHRT_MAX == rowIdx)
    2480:	4c06      	ldr	r4, [pc, #24]	; (249c <pdsWlRead+0x24>)
		return PDS_NOT_FOUND;
    2482:	2003      	movs	r0, #3
	if (USHRT_MAX == rowIdx)
    2484:	42a3      	cmp	r3, r4
    2486:	d100      	bne.n	248a <pdsWlRead+0x12>
}
    2488:	bd10      	pop	{r4, pc}
	size += sizeof(PdsWlHeader_t);
    248a:	3209      	adds	r2, #9
	status = pdsNvmRead(rowIdx, buffer, size);
    248c:	b292      	uxth	r2, r2
    248e:	0018      	movs	r0, r3
    2490:	4b03      	ldr	r3, [pc, #12]	; (24a0 <pdsWlRead+0x28>)
    2492:	4798      	blx	r3
	return status;
    2494:	e7f8      	b.n	2488 <pdsWlRead+0x10>
    2496:	46c0      	nop			; (mov r8, r8)
    2498:	20000184 	.word	0x20000184
    249c:	0000ffff 	.word	0x0000ffff
    24a0:	00001f3d 	.word	0x00001f3d

000024a4 <AESEncode>:
 * \brief Encrypts the given block of data
 * \param[in,out] block Block of input data to be encrypted
 * \param[in] key Cryptographic key to be used in AES encryption
 */
void AESEncode(unsigned char* block, unsigned char* masterKey)
{
    24a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    24a6:	b083      	sub	sp, #12
    24a8:	0004      	movs	r4, r0
    24aa:	000e      	movs	r6, r1
#ifndef UT	
	
	/* Configure the AES. */
	g_aes_cfg.encrypt_mode = AES_ENCRYPTION;
    24ac:	4a2b      	ldr	r2, [pc, #172]	; (255c <AESEncode+0xb8>)
    24ae:	2101      	movs	r1, #1
    24b0:	7011      	strb	r1, [r2, #0]
	g_aes_cfg.key_size = AES_KEY_SIZE_128;
    24b2:	2300      	movs	r3, #0
    24b4:	7053      	strb	r3, [r2, #1]
	g_aes_cfg.start_mode = AES_AUTO_START;
    24b6:	7091      	strb	r1, [r2, #2]
	g_aes_cfg.opmode = AES_ECB_MODE;
    24b8:	70d3      	strb	r3, [r2, #3]
	g_aes_cfg.cfb_size = AES_CFB_SIZE_128;
    24ba:	7113      	strb	r3, [r2, #4]
	g_aes_cfg.lod = false;
    24bc:	7213      	strb	r3, [r2, #8]
	aes_set_config(&aes_instance,AES, &g_aes_cfg);
    24be:	4928      	ldr	r1, [pc, #160]	; (2560 <AESEncode+0xbc>)
    24c0:	4828      	ldr	r0, [pc, #160]	; (2564 <AESEncode+0xc0>)
    24c2:	4b29      	ldr	r3, [pc, #164]	; (2568 <AESEncode+0xc4>)
    24c4:	4798      	blx	r3
    24c6:	2100      	movs	r1, #0
		uint8_t u8[4];
	}long_addr;
	uint8_t index;
	for (index = 0; index < 4; index++)
	{
		long_addr.u8[index] = *data++;
    24c8:	ad01      	add	r5, sp, #4
	
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
	{
		io_data[i] = convert_byte_array_to_32_bit(masterKey+(i*(sizeof(uint32_t))));
    24ca:	4f28      	ldr	r7, [pc, #160]	; (256c <AESEncode+0xc8>)
    24cc:	1870      	adds	r0, r6, r1
    24ce:	2300      	movs	r3, #0
    24d0:	5cc2      	ldrb	r2, [r0, r3]
    24d2:	555a      	strb	r2, [r3, r5]
    24d4:	3301      	adds	r3, #1
	for (index = 0; index < 4; index++)
    24d6:	2b04      	cmp	r3, #4
    24d8:	d1fa      	bne.n	24d0 <AESEncode+0x2c>
    24da:	9b01      	ldr	r3, [sp, #4]
    24dc:	51cb      	str	r3, [r1, r7]
    24de:	3104      	adds	r1, #4
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
    24e0:	2910      	cmp	r1, #16
    24e2:	d1f3      	bne.n	24cc <AESEncode+0x28>
	}
	
	/* Set the cryptographic key. */
	aes_write_key(&aes_instance, io_data);
    24e4:	4d1f      	ldr	r5, [pc, #124]	; (2564 <AESEncode+0xc0>)
    24e6:	4921      	ldr	r1, [pc, #132]	; (256c <AESEncode+0xc8>)
    24e8:	0028      	movs	r0, r5
    24ea:	4b21      	ldr	r3, [pc, #132]	; (2570 <AESEncode+0xcc>)
    24ec:	4798      	blx	r3
 */
static inline void aes_set_new_message(struct aes_module *const module)
{
	Assert(module);
	Assert(module->hw);
	module->hw->CTRLB.reg |= AES_CTRLB_NEWMSG;
    24ee:	682a      	ldr	r2, [r5, #0]
    24f0:	7913      	ldrb	r3, [r2, #4]
    24f2:	2102      	movs	r1, #2
    24f4:	430b      	orrs	r3, r1
    24f6:	7113      	strb	r3, [r2, #4]
    24f8:	2100      	movs	r1, #0
		long_addr.u8[index] = *data++;
    24fa:	ad01      	add	r5, sp, #4
	
	aes_set_new_message(&aes_instance);
	
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
	{
		io_data[i] = convert_byte_array_to_32_bit(block+(i*(sizeof(uint32_t))));			
    24fc:	4e1b      	ldr	r6, [pc, #108]	; (256c <AESEncode+0xc8>)
    24fe:	1860      	adds	r0, r4, r1
    2500:	2300      	movs	r3, #0
    2502:	5cc2      	ldrb	r2, [r0, r3]
    2504:	555a      	strb	r2, [r3, r5]
    2506:	3301      	adds	r3, #1
	for (index = 0; index < 4; index++)
    2508:	2b04      	cmp	r3, #4
    250a:	d1fa      	bne.n	2502 <AESEncode+0x5e>
    250c:	9b01      	ldr	r3, [sp, #4]
    250e:	518b      	str	r3, [r1, r6]
    2510:	3104      	adds	r1, #4
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
    2512:	2910      	cmp	r1, #16
    2514:	d1f3      	bne.n	24fe <AESEncode+0x5a>
	}
		
	/* Write the data to be ciphered to the input data registers. */
	aes_write_input_data(&aes_instance, io_data);
    2516:	4d13      	ldr	r5, [pc, #76]	; (2564 <AESEncode+0xc0>)
    2518:	4914      	ldr	r1, [pc, #80]	; (256c <AESEncode+0xc8>)
    251a:	0028      	movs	r0, r5
    251c:	4b15      	ldr	r3, [pc, #84]	; (2574 <AESEncode+0xd0>)
    251e:	4798      	blx	r3
 */
static inline void aes_clear_new_message(struct aes_module *const module)
{
	Assert(module);
	Assert(module->hw);
	module->hw->CTRLB.reg &= ~AES_CTRLB_NEWMSG;
    2520:	682d      	ldr	r5, [r5, #0]
    2522:	792b      	ldrb	r3, [r5, #4]
    2524:	2202      	movs	r2, #2
    2526:	4393      	bics	r3, r2
    2528:	712b      	strb	r3, [r5, #4]
	Assert(module->hw);

	uint32_t int_flags = module->hw->INTFLAG.reg;
	uint32_t status_flags = 0;

	if (int_flags & AES_INTFLAG_ENCCMP) {
    252a:	2101      	movs	r1, #1
		status_flags |= AES_ENCRYPTION_COMPLETE;
	}

	if (int_flags & AES_INTFLAG_GFMCMP) {
    252c:	2002      	movs	r0, #2
    252e:	e001      	b.n	2534 <AESEncode+0x90>
	aes_clear_new_message(&aes_instance);
	/* Wait for the end of the encryption process. */
	while (!(aes_get_status(&aes_instance) & AES_ENCRYPTION_COMPLETE)) {
    2530:	4211      	tst	r1, r2
    2532:	d107      	bne.n	2544 <AESEncode+0xa0>
	uint32_t int_flags = module->hw->INTFLAG.reg;
    2534:	79eb      	ldrb	r3, [r5, #7]
    2536:	b2db      	uxtb	r3, r3
	if (int_flags & AES_INTFLAG_ENCCMP) {
    2538:	000a      	movs	r2, r1
    253a:	401a      	ands	r2, r3
	if (int_flags & AES_INTFLAG_GFMCMP) {
    253c:	4218      	tst	r0, r3
    253e:	d0f7      	beq.n	2530 <AESEncode+0x8c>
		status_flags |= AES_GF_MULTI_COMPLETE;
    2540:	4302      	orrs	r2, r0
    2542:	e7f5      	b.n	2530 <AESEncode+0x8c>
	}
	aes_read_output_data(&aes_instance,io_data);
    2544:	4d09      	ldr	r5, [pc, #36]	; (256c <AESEncode+0xc8>)
    2546:	0029      	movs	r1, r5
    2548:	4806      	ldr	r0, [pc, #24]	; (2564 <AESEncode+0xc0>)
    254a:	4b0b      	ldr	r3, [pc, #44]	; (2578 <AESEncode+0xd4>)
    254c:	4798      	blx	r3
	
	memcpy(block,io_data,BLOCKSIZE);
    254e:	2210      	movs	r2, #16
    2550:	0029      	movs	r1, r5
    2552:	0020      	movs	r0, r4
    2554:	4b09      	ldr	r3, [pc, #36]	; (257c <AESEncode+0xd8>)
    2556:	4798      	blx	r3
#endif	
}
    2558:	b003      	add	sp, #12
    255a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    255c:	20000910 	.word	0x20000910
    2560:	42003400 	.word	0x42003400
    2564:	2000091c 	.word	0x2000091c
    2568:	00000151 	.word	0x00000151
    256c:	2000021c 	.word	0x2000021c
    2570:	000001e5 	.word	0x000001e5
    2574:	00000219 	.word	0x00000219
    2578:	00000269 	.word	0x00000269
    257c:	000112d5 	.word	0x000112d5

00002580 <AESInit>:

/**
 * \brief Initializes the AES Engine.
 */
void AESInit(void)
{
    2580:	b570      	push	{r4, r5, r6, lr}
#ifndef UT	
	//! [setup_config]
	aes_get_config_defaults(&g_aes_cfg);
    2582:	4d07      	ldr	r5, [pc, #28]	; (25a0 <AESInit+0x20>)
    2584:	0028      	movs	r0, r5
    2586:	4b07      	ldr	r3, [pc, #28]	; (25a4 <AESInit+0x24>)
    2588:	4798      	blx	r3
	//! [setup_config]

	//! [setup_config_defaults]
	aes_init(&aes_instance,AES, &g_aes_cfg);
    258a:	4c07      	ldr	r4, [pc, #28]	; (25a8 <AESInit+0x28>)
    258c:	002a      	movs	r2, r5
    258e:	4907      	ldr	r1, [pc, #28]	; (25ac <AESInit+0x2c>)
    2590:	0020      	movs	r0, r4
    2592:	4b07      	ldr	r3, [pc, #28]	; (25b0 <AESInit+0x30>)
    2594:	4798      	blx	r3
	//! [setup_config_defaults]
	//! [module_enable]
	aes_enable(&aes_instance);
    2596:	0020      	movs	r0, r4
    2598:	4b06      	ldr	r3, [pc, #24]	; (25b4 <AESInit+0x34>)
    259a:	4798      	blx	r3
#endif	
}
    259c:	bd70      	pop	{r4, r5, r6, pc}
    259e:	46c0      	nop			; (mov r8, r8)
    25a0:	20000910 	.word	0x20000910
    25a4:	00000115 	.word	0x00000115
    25a8:	2000091c 	.word	0x2000091c
    25ac:	42003400 	.word	0x42003400
    25b0:	000001c5 	.word	0x000001c5
    25b4:	0000012f 	.word	0x0000012f

000025b8 <LorawanReg_AS_Pds_Cb>:
}
#if (ENABLE_PDS == 1)
void LorawanReg_AS_Pds_Cb(void)
{
	; // nothing to do
}
    25b8:	4770      	bx	lr
	...

000025bc <LORAReg_InitAS>:
{
    25bc:	b530      	push	{r4, r5, lr}
    25be:	b087      	sub	sp, #28
	RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_AS;
    25c0:	4b7a      	ldr	r3, [pc, #488]	; (27ac <LORAReg_InitAS+0x1f0>)
    25c2:	2203      	movs	r2, #3
    25c4:	779a      	strb	r2, [r3, #30]
	RegParams.maxChannels = MAX_CHANNELS_AS;
    25c6:	2110      	movs	r1, #16
    25c8:	321f      	adds	r2, #31
    25ca:	5499      	strb	r1, [r3, r2]
	RegParams.maxSubBands = MAX_NUM_SUBBANDS_AS;
    25cc:	3a21      	subs	r2, #33	; 0x21
    25ce:	2421      	movs	r4, #33	; 0x21
    25d0:	551a      	strb	r2, [r3, r4]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_AS;
    25d2:	77da      	strb	r2, [r3, #31]
	RegParams.pChParams = &RegParams.cmnParams.paramsType2.chParams[0];
    25d4:	001a      	movs	r2, r3
    25d6:	326c      	adds	r2, #108	; 0x6c
    25d8:	711a      	strb	r2, [r3, #4]
    25da:	0a14      	lsrs	r4, r2, #8
    25dc:	715c      	strb	r4, [r3, #5]
    25de:	0c14      	lsrs	r4, r2, #16
    25e0:	719c      	strb	r4, [r3, #6]
    25e2:	0e12      	lsrs	r2, r2, #24
    25e4:	71da      	strb	r2, [r3, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType2.DRParams[0];
    25e6:	001a      	movs	r2, r3
    25e8:	322c      	adds	r2, #44	; 0x2c
    25ea:	701a      	strb	r2, [r3, #0]
    25ec:	0a14      	lsrs	r4, r2, #8
    25ee:	705c      	strb	r4, [r3, #1]
    25f0:	0c14      	lsrs	r4, r2, #16
    25f2:	709c      	strb	r4, [r3, #2]
    25f4:	0e12      	lsrs	r2, r2, #24
    25f6:	70da      	strb	r2, [r3, #3]
	RegParams.pOtherChParams = &RegParams.cmnParams.paramsType2.othChParams[0];
    25f8:	001a      	movs	r2, r3
    25fa:	328c      	adds	r2, #140	; 0x8c
    25fc:	721a      	strb	r2, [r3, #8]
    25fe:	0a14      	lsrs	r4, r2, #8
    2600:	725c      	strb	r4, [r3, #9]
    2602:	0c14      	lsrs	r4, r2, #16
    2604:	729c      	strb	r4, [r3, #10]
    2606:	0e12      	lsrs	r2, r2, #24
    2608:	72da      	strb	r2, [r3, #11]
	RegParams.pDutyCycleTimer = &RegParams.cmnParams.paramsType2.DutyCycleTimer;
    260a:	001a      	movs	r2, r3
    260c:	324d      	adds	r2, #77	; 0x4d
    260e:	32ff      	adds	r2, #255	; 0xff
    2610:	741a      	strb	r2, [r3, #16]
    2612:	0a14      	lsrs	r4, r2, #8
    2614:	745c      	strb	r4, [r3, #17]
    2616:	0c14      	lsrs	r4, r2, #16
    2618:	749c      	strb	r4, [r3, #18]
    261a:	0e12      	lsrs	r2, r2, #24
    261c:	74da      	strb	r2, [r3, #19]
	RegParams.pSubBandParams = &RegParams.cmnParams.paramsType2.SubBands[0];
    261e:	001a      	movs	r2, r3
    2620:	32ad      	adds	r2, #173	; 0xad
    2622:	32ff      	adds	r2, #255	; 0xff
    2624:	731a      	strb	r2, [r3, #12]
    2626:	0a14      	lsrs	r4, r2, #8
    2628:	735c      	strb	r4, [r3, #13]
    262a:	0c14      	lsrs	r4, r2, #16
    262c:	739c      	strb	r4, [r3, #14]
    262e:	0e12      	lsrs	r2, r2, #24
    2630:	73da      	strb	r2, [r3, #15]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_AS;
    2632:	2202      	movs	r2, #2
    2634:	769a      	strb	r2, [r3, #26]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_AS;
    2636:	76da      	strb	r2, [r3, #27]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_AS;	
    2638:	2400      	movs	r4, #0
    263a:	751c      	strb	r4, [r3, #20]
    263c:	3c16      	subs	r4, #22
    263e:	755c      	strb	r4, [r3, #21]
    2640:	341c      	adds	r4, #28
    2642:	759c      	strb	r4, [r3, #22]
    2644:	3431      	adds	r4, #49	; 0x31
    2646:	75dc      	strb	r4, [r3, #23]
	RegParams.MinNewChIndex = NEW_CHANNEL_INDEX_AS;
    2648:	765a      	strb	r2, [r3, #25]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_AS;
    264a:	3c25      	subs	r4, #37	; 0x25
    264c:	761c      	strb	r4, [r3, #24]
	RegParams.minDataRate = MAC_DATARATE_MIN_AS;
    264e:	3c0b      	subs	r4, #11
    2650:	771c      	strb	r4, [r3, #28]
	RegParams.maxDataRate = MAC_DATARATE_MAX_AS;
    2652:	2500      	movs	r5, #0
    2654:	775d      	strb	r5, [r3, #29]
	RegParams.Rx1DrOffset = 7;
    2656:	3524      	adds	r5, #36	; 0x24
    2658:	555c      	strb	r4, [r3, r5]
	RegParams.maxTxPwrIndx = MAX_TX_PWR_INDEX_AS;
    265a:	3501      	adds	r5, #1
    265c:	555c      	strb	r4, [r3, r5]
	RegParams.maxTxPwr = 16;
    265e:	3419      	adds	r4, #25
    2660:	5519      	strb	r1, [r3, r4]
	RegParams.cmnParams.paramsType2.minNonDefChId = 2;
    2662:	21aa      	movs	r1, #170	; 0xaa
    2664:	31ff      	adds	r1, #255	; 0xff
    2666:	545a      	strb	r2, [r3, r1]
	RegParams.pDutyCycleTimer->timerId = regTimerId[0];
    2668:	4a51      	ldr	r2, [pc, #324]	; (27b0 <LORAReg_InitAS+0x1f4>)
    266a:	7811      	ldrb	r1, [r2, #0]
    266c:	22a8      	movs	r2, #168	; 0xa8
    266e:	0052      	lsls	r2, r2, #1
    2670:	5499      	strb	r1, [r3, r2]
	RegParams.band = ismBand;
    2672:	3a2b      	subs	r2, #43	; 0x2b
    2674:	3aff      	subs	r2, #255	; 0xff
    2676:	5498      	strb	r0, [r3, r2]
	if(ismBand >= ISM_BRN923 && ismBand <= ISM_VTM923)
    2678:	3806      	subs	r0, #6
		result =  LORAWAN_INVALID_PARAMETER;
    267a:	3c16      	subs	r4, #22
	if(ismBand >= ISM_BRN923 && ismBand <= ISM_VTM923)
    267c:	2808      	cmp	r0, #8
    267e:	d91c      	bls.n	26ba <LORAReg_InitAS+0xfe>
	if(!initialized)
    2680:	4b4c      	ldr	r3, [pc, #304]	; (27b4 <LORAReg_InitAS+0x1f8>)
    2682:	781b      	ldrb	r3, [r3, #0]
    2684:	2b00      	cmp	r3, #0
    2686:	d102      	bne.n	268e <LORAReg_InitAS+0xd2>
		initialized = true;
    2688:	2201      	movs	r2, #1
    268a:	4b4a      	ldr	r3, [pc, #296]	; (27b4 <LORAReg_InitAS+0x1f8>)
    268c:	701a      	strb	r2, [r3, #0]
    LORAREG_InitGetAttrFnPtrsAS();	
    268e:	4b4a      	ldr	r3, [pc, #296]	; (27b8 <LORAReg_InitAS+0x1fc>)
    2690:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsAS();
    2692:	4b4a      	ldr	r3, [pc, #296]	; (27bc <LORAReg_InitAS+0x200>)
    2694:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsAS();
    2696:	4b4a      	ldr	r3, [pc, #296]	; (27c0 <LORAReg_InitAS+0x204>)
    2698:	4798      	blx	r3
	PDS_STORE(RegParams.regParamItems.band_item_id);
    269a:	4b44      	ldr	r3, [pc, #272]	; (27ac <LORAReg_InitAS+0x1f0>)
    269c:	22fe      	movs	r2, #254	; 0xfe
    269e:	32ff      	adds	r2, #255	; 0xff
    26a0:	5c9a      	ldrb	r2, [r3, r2]
    26a2:	21ff      	movs	r1, #255	; 0xff
    26a4:	0049      	lsls	r1, r1, #1
    26a6:	5c58      	ldrb	r0, [r3, r1]
    26a8:	0200      	lsls	r0, r0, #8
    26aa:	4310      	orrs	r0, r2
    26ac:	b2c1      	uxtb	r1, r0
    26ae:	0a00      	lsrs	r0, r0, #8
    26b0:	4b44      	ldr	r3, [pc, #272]	; (27c4 <LORAReg_InitAS+0x208>)
    26b2:	4798      	blx	r3
}
    26b4:	0020      	movs	r0, r4
    26b6:	b007      	add	sp, #28
    26b8:	bd30      	pop	{r4, r5, pc}
	memcpy (RegParams.pChParams, DefaultChannels923, sizeof(DefaultChannels923));
    26ba:	001c      	movs	r4, r3
    26bc:	0018      	movs	r0, r3
    26be:	306c      	adds	r0, #108	; 0x6c
    26c0:	3a22      	subs	r2, #34	; 0x22
    26c2:	4941      	ldr	r1, [pc, #260]	; (27c8 <LORAReg_InitAS+0x20c>)
    26c4:	4d41      	ldr	r5, [pc, #260]	; (27cc <LORAReg_InitAS+0x210>)
    26c6:	47a8      	blx	r5
	memcpy (RegParams.pOtherChParams, AdvChannels923, sizeof(AdvChannels923));
    26c8:	0020      	movs	r0, r4
    26ca:	308c      	adds	r0, #140	; 0x8c
    26cc:	2218      	movs	r2, #24
    26ce:	4940      	ldr	r1, [pc, #256]	; (27d0 <LORAReg_InitAS+0x214>)
    26d0:	47a8      	blx	r5
	memcpy (RegParams.pSubBandParams, SubBandParams923, sizeof(SubBandParams923) );
    26d2:	0020      	movs	r0, r4
    26d4:	30ad      	adds	r0, #173	; 0xad
    26d6:	30ff      	adds	r0, #255	; 0xff
    26d8:	220c      	movs	r2, #12
    26da:	493e      	ldr	r1, [pc, #248]	; (27d4 <LORAReg_InitAS+0x218>)
    26dc:	47a8      	blx	r5
	memcpy(RegParams.cmnParams.paramsType2.subBandDutyCycle,SubBandDutyCycle923,sizeof(SubBandDutyCycle923));
    26de:	0020      	movs	r0, r4
    26e0:	3097      	adds	r0, #151	; 0x97
    26e2:	30ff      	adds	r0, #255	; 0xff
    26e4:	2202      	movs	r2, #2
    26e6:	493c      	ldr	r1, [pc, #240]	; (27d8 <LORAReg_InitAS+0x21c>)
    26e8:	47a8      	blx	r5
    26ea:	2302      	movs	r3, #2
		RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    26ec:	482f      	ldr	r0, [pc, #188]	; (27ac <LORAReg_InitAS+0x1f0>)
    26ee:	25ff      	movs	r5, #255	; 0xff
	for (i = 2; i < RegParams.maxChannels; i++)
    26f0:	2422      	movs	r4, #34	; 0x22
		RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    26f2:	7902      	ldrb	r2, [r0, #4]
    26f4:	7941      	ldrb	r1, [r0, #5]
    26f6:	0209      	lsls	r1, r1, #8
    26f8:	4311      	orrs	r1, r2
    26fa:	7982      	ldrb	r2, [r0, #6]
    26fc:	0412      	lsls	r2, r2, #16
    26fe:	4311      	orrs	r1, r2
    2700:	79c2      	ldrb	r2, [r0, #7]
    2702:	0612      	lsls	r2, r2, #24
    2704:	430a      	orrs	r2, r1
    2706:	0059      	lsls	r1, r3, #1
    2708:	188a      	adds	r2, r1, r2
    270a:	7055      	strb	r5, [r2, #1]
	for (i = 2; i < RegParams.maxChannels; i++)
    270c:	3301      	adds	r3, #1
    270e:	b2db      	uxtb	r3, r3
    2710:	5702      	ldrsb	r2, [r0, r4]
    2712:	4293      	cmp	r3, r2
    2714:	dbed      	blt.n	26f2 <LORAReg_InitAS+0x136>
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = DEFAULT_EIRP_AS;
    2716:	4c25      	ldr	r4, [pc, #148]	; (27ac <LORAReg_InitAS+0x1f0>)
    2718:	2210      	movs	r2, #16
    271a:	23d5      	movs	r3, #213	; 0xd5
    271c:	005b      	lsls	r3, r3, #1
    271e:	54e2      	strb	r2, [r4, r3]
		memcpy (RegParams.pDrParams, DefaultDrParamsAS, sizeof(DefaultDrParamsAS) );
    2720:	7820      	ldrb	r0, [r4, #0]
    2722:	7863      	ldrb	r3, [r4, #1]
    2724:	021b      	lsls	r3, r3, #8
    2726:	4303      	orrs	r3, r0
    2728:	78a0      	ldrb	r0, [r4, #2]
    272a:	0400      	lsls	r0, r0, #16
    272c:	4303      	orrs	r3, r0
    272e:	78e0      	ldrb	r0, [r4, #3]
    2730:	0600      	lsls	r0, r0, #24
    2732:	4318      	orrs	r0, r3
    2734:	3230      	adds	r2, #48	; 0x30
    2736:	4929      	ldr	r1, [pc, #164]	; (27dc <LORAReg_InitAS+0x220>)
    2738:	4b24      	ldr	r3, [pc, #144]	; (27cc <LORAReg_InitAS+0x210>)
    273a:	4798      	blx	r3
		RegParams.regParamItems.fileid = PDS_FILE_REG_AS_05_IDX;
    273c:	2304      	movs	r3, #4
    273e:	2104      	movs	r1, #4
    2740:	22fa      	movs	r2, #250	; 0xfa
    2742:	0052      	lsls	r2, r2, #1
    2744:	54a1      	strb	r1, [r4, r2]
		RegParams.regParamItems.alt_ch_item_id = 0;
    2746:	2100      	movs	r1, #0
    2748:	22f6      	movs	r2, #246	; 0xf6
    274a:	32ff      	adds	r2, #255	; 0xff
    274c:	54a1      	strb	r1, [r4, r2]
    274e:	0022      	movs	r2, r4
    2750:	32f6      	adds	r2, #246	; 0xf6
    2752:	32ff      	adds	r2, #255	; 0xff
    2754:	7051      	strb	r1, [r2, #1]
		RegParams.regParamItems.ch_param_1_item_id = PDS_REG_AS_CH_PARAM_1;
    2756:	22f8      	movs	r2, #248	; 0xf8
    2758:	32ff      	adds	r2, #255	; 0xff
    275a:	54a1      	strb	r1, [r4, r2]
    275c:	0022      	movs	r2, r4
    275e:	32f8      	adds	r2, #248	; 0xf8
    2760:	32ff      	adds	r2, #255	; 0xff
    2762:	7053      	strb	r3, [r2, #1]
		RegParams.regParamItems.ch_param_2_item_id = PDS_REG_AS_CH_PARAM_2;
    2764:	3101      	adds	r1, #1
    2766:	22fa      	movs	r2, #250	; 0xfa
    2768:	32ff      	adds	r2, #255	; 0xff
    276a:	54a1      	strb	r1, [r4, r2]
    276c:	0022      	movs	r2, r4
    276e:	32fa      	adds	r2, #250	; 0xfa
    2770:	32ff      	adds	r2, #255	; 0xff
    2772:	7053      	strb	r3, [r2, #1]
		RegParams.regParamItems.sb_dc_prescalr_item_id = 0;
    2774:	2100      	movs	r1, #0
    2776:	22fc      	movs	r2, #252	; 0xfc
    2778:	32ff      	adds	r2, #255	; 0xff
    277a:	54a1      	strb	r1, [r4, r2]
    277c:	0022      	movs	r2, r4
    277e:	32fc      	adds	r2, #252	; 0xfc
    2780:	32ff      	adds	r2, #255	; 0xff
    2782:	7051      	strb	r1, [r2, #1]
		RegParams.regParamItems.band_item_id = PDS_REG_AS_BAND;
    2784:	3102      	adds	r1, #2
    2786:	22fe      	movs	r2, #254	; 0xfe
    2788:	32ff      	adds	r2, #255	; 0xff
    278a:	54a1      	strb	r1, [r4, r2]
    278c:	18a4      	adds	r4, r4, r2
    278e:	7063      	strb	r3, [r4, #1]
		filemarks.fileMarkListAddr = aRegAsPdsOps;
    2790:	ab02      	add	r3, sp, #8
		filemarks.numItems =  (uint8_t)(PDS_REG_AS_MAX_VALUE & 0x00FF);
    2792:	3afb      	subs	r2, #251	; 0xfb
    2794:	3aff      	subs	r2, #255	; 0xff
    2796:	711a      	strb	r2, [r3, #4]
		filemarks.fIDcb = LorawanReg_AS_Pds_Cb;
    2798:	4a11      	ldr	r2, [pc, #68]	; (27e0 <LORAReg_InitAS+0x224>)
		PDS_RegFile(PDS_FILE_REG_AS_05_IDX,filemarks);
    279a:	9200      	str	r2, [sp, #0]
    279c:	4911      	ldr	r1, [pc, #68]	; (27e4 <LORAReg_InitAS+0x228>)
    279e:	9a03      	ldr	r2, [sp, #12]
    27a0:	4b11      	ldr	r3, [pc, #68]	; (27e8 <LORAReg_InitAS+0x22c>)
    27a2:	2004      	movs	r0, #4
    27a4:	4c11      	ldr	r4, [pc, #68]	; (27ec <LORAReg_InitAS+0x230>)
    27a6:	47a0      	blx	r4
	StackRetStatus_t result = LORAWAN_SUCCESS;
    27a8:	2408      	movs	r4, #8
    27aa:	e769      	b.n	2680 <LORAReg_InitAS+0xc4>
    27ac:	20000b48 	.word	0x20000b48
    27b0:	20000b44 	.word	0x20000b44
    27b4:	2000022c 	.word	0x2000022c
    27b8:	000062d9 	.word	0x000062d9
    27bc:	000069c5 	.word	0x000069c5
    27c0:	00006c3d 	.word	0x00006c3d
    27c4:	00001e65 	.word	0x00001e65
    27c8:	00012538 	.word	0x00012538
    27cc:	000112d5 	.word	0x000112d5
    27d0:	00012520 	.word	0x00012520
    27d4:	00012580 	.word	0x00012580
    27d8:	0001257c 	.word	0x0001257c
    27dc:	0001253c 	.word	0x0001253c
    27e0:	000025b9 	.word	0x000025b9
    27e4:	20000924 	.word	0x20000924
    27e8:	0001258c 	.word	0x0001258c
    27ec:	00001ec9 	.word	0x00001ec9

000027f0 <LorawanReg_AU_Pds_Cb>:
}
#if (ENABLE_PDS == 1)
void LorawanReg_AU_Pds_Cb(void)
{
	
}
    27f0:	4770      	bx	lr
	...

000027f4 <LORAReg_InitAU>:
{
    27f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    27f6:	46de      	mov	lr, fp
    27f8:	4657      	mov	r7, sl
    27fa:	464e      	mov	r6, r9
    27fc:	4645      	mov	r5, r8
    27fe:	b5e0      	push	{r5, r6, r7, lr}
    2800:	b087      	sub	sp, #28
    RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_AU;
    2802:	4c69      	ldr	r4, [pc, #420]	; (29a8 <LORAReg_InitAU+0x1b4>)
    2804:	2303      	movs	r3, #3
    2806:	77a3      	strb	r3, [r4, #30]
	RegParams.maxChannels = MAX_CHANNELS_AU;
    2808:	2248      	movs	r2, #72	; 0x48
    280a:	331f      	adds	r3, #31
    280c:	54e2      	strb	r2, [r4, r3]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_AU;
    280e:	3b1b      	subs	r3, #27
    2810:	77e3      	strb	r3, [r4, #31]
	RegParams.pChParams = &RegParams.cmnParams.paramsType1.chParams[0];
    2812:	0023      	movs	r3, r4
    2814:	339c      	adds	r3, #156	; 0x9c
    2816:	2200      	movs	r2, #0
    2818:	4690      	mov	r8, r2
    281a:	7123      	strb	r3, [r4, #4]
    281c:	0a1a      	lsrs	r2, r3, #8
    281e:	7162      	strb	r2, [r4, #5]
    2820:	0c1a      	lsrs	r2, r3, #16
    2822:	71a2      	strb	r2, [r4, #6]
    2824:	0e1a      	lsrs	r2, r3, #24
    2826:	71e2      	strb	r2, [r4, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType1.DRParams[0];
    2828:	0026      	movs	r6, r4
    282a:	362c      	adds	r6, #44	; 0x2c
    282c:	7026      	strb	r6, [r4, #0]
    282e:	0a32      	lsrs	r2, r6, #8
    2830:	7062      	strb	r2, [r4, #1]
    2832:	0c32      	lsrs	r2, r6, #16
    2834:	70a2      	strb	r2, [r4, #2]
    2836:	0e32      	lsrs	r2, r6, #24
    2838:	70e2      	strb	r2, [r4, #3]
	RegParams.MinNewChIndex = 0xFF;
    283a:	22ff      	movs	r2, #255	; 0xff
    283c:	7662      	strb	r2, [r4, #25]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_AU;
    283e:	2508      	movs	r5, #8
    2840:	2708      	movs	r7, #8
    2842:	76a5      	strb	r5, [r4, #26]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_AU;
    2844:	76e5      	strb	r5, [r4, #27]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_AU;
    2846:	3a60      	subs	r2, #96	; 0x60
    2848:	3aff      	subs	r2, #255	; 0xff
    284a:	4692      	mov	sl, r2
    284c:	7522      	strb	r2, [r4, #20]
    284e:	2270      	movs	r2, #112	; 0x70
    2850:	7562      	strb	r2, [r4, #21]
    2852:	75a7      	strb	r7, [r4, #22]
    2854:	3a39      	subs	r2, #57	; 0x39
    2856:	75e2      	strb	r2, [r4, #23]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_AU;
    2858:	3a1f      	subs	r2, #31
    285a:	7622      	strb	r2, [r4, #24]
	RegParams.minDataRate = MAC_DATARATE_MIN_AU;
    285c:	3a12      	subs	r2, #18
    285e:	4693      	mov	fp, r2
    2860:	7722      	strb	r2, [r4, #28]
	RegParams.maxDataRate = MAC_DATARATE_MAX_AU;
    2862:	4641      	mov	r1, r8
    2864:	7761      	strb	r1, [r4, #29]
	RegParams.cmnParams.paramsType1.Max_125khzChan = MAX_CHANNELS_BANDWIDTH_125_AU;
    2866:	2140      	movs	r1, #64	; 0x40
    2868:	4689      	mov	r9, r1
    286a:	31fc      	adds	r1, #252	; 0xfc
    286c:	464a      	mov	r2, r9
    286e:	5462      	strb	r2, [r4, r1]
	RegParams.cmnParams.paramsType1.Max_500khzChan = MAX_CHANNELS_BANDWIDTH_500_AU;
    2870:	223e      	movs	r2, #62	; 0x3e
    2872:	32ff      	adds	r2, #255	; 0xff
    2874:	54a5      	strb	r5, [r4, r2]
	RegParams.cmnParams.paramsType1.minTxDR = DR0;
    2876:	3a05      	subs	r2, #5
    2878:	4641      	mov	r1, r8
    287a:	54a1      	strb	r1, [r4, r2]
	RegParams.cmnParams.paramsType1.maxTxDR = DR6;
    287c:	223a      	movs	r2, #58	; 0x3a
    287e:	32ff      	adds	r2, #255	; 0xff
    2880:	4659      	mov	r1, fp
    2882:	54a1      	strb	r1, [r4, r2]
	RegParams.cmnParams.paramsType1.minRxDR = DR8;
    2884:	3201      	adds	r2, #1
    2886:	54a5      	strb	r5, [r4, r2]
	RegParams.cmnParams.paramsType1.maxRxDR = DR13;
    2888:	3a2e      	subs	r2, #46	; 0x2e
    288a:	3aff      	subs	r2, #255	; 0xff
    288c:	4694      	mov	ip, r2
    288e:	223c      	movs	r2, #60	; 0x3c
    2890:	32ff      	adds	r2, #255	; 0xff
    2892:	4661      	mov	r1, ip
    2894:	54a1      	strb	r1, [r4, r2]
	RegParams.cmnParams.paramsType1.RxParamWindowOffset1 = 8;
    2896:	3203      	adds	r2, #3
    2898:	54a5      	strb	r5, [r4, r2]
	RegParams.cmnParams.paramsType1.UpStreamCh0Freq = UPSTREAM_CH0_AU;
    289a:	2200      	movs	r2, #0
    289c:	4694      	mov	ip, r2
    289e:	322d      	adds	r2, #45	; 0x2d
    28a0:	32ff      	adds	r2, #255	; 0xff
    28a2:	4661      	mov	r1, ip
    28a4:	54a1      	strb	r1, [r4, r2]
    28a6:	0022      	movs	r2, r4
    28a8:	322d      	adds	r2, #45	; 0x2d
    28aa:	32ff      	adds	r2, #255	; 0xff
    28ac:	2128      	movs	r1, #40	; 0x28
    28ae:	4249      	negs	r1, r1
    28b0:	7051      	strb	r1, [r2, #1]
    28b2:	2174      	movs	r1, #116	; 0x74
    28b4:	4249      	negs	r1, r1
    28b6:	7091      	strb	r1, [r2, #2]
    28b8:	2136      	movs	r1, #54	; 0x36
    28ba:	70d1      	strb	r1, [r2, #3]
	RegParams.cmnParams.paramsType1.UpStreamCh64Freq = UPSTREAM_CH64_AU;
    28bc:	2260      	movs	r2, #96	; 0x60
    28be:	4694      	mov	ip, r2
    28c0:	32d0      	adds	r2, #208	; 0xd0
    28c2:	4661      	mov	r1, ip
    28c4:	54a1      	strb	r1, [r4, r2]
    28c6:	0022      	movs	r2, r4
    28c8:	3231      	adds	r2, #49	; 0x31
    28ca:	32ff      	adds	r2, #255	; 0xff
    28cc:	217a      	movs	r1, #122	; 0x7a
    28ce:	4249      	negs	r1, r1
    28d0:	7051      	strb	r1, [r2, #1]
    28d2:	2169      	movs	r1, #105	; 0x69
    28d4:	4249      	negs	r1, r1
    28d6:	7091      	strb	r1, [r2, #2]
    28d8:	2136      	movs	r1, #54	; 0x36
    28da:	70d1      	strb	r1, [r2, #3]
	RegParams.cmnParams.paramsType1.DownStreamCh0Freq = DOWNSTREAM_CH0_AU;
    28dc:	229a      	movs	r2, #154	; 0x9a
    28de:	0052      	lsls	r2, r2, #1
    28e0:	4651      	mov	r1, sl
    28e2:	54a1      	strb	r1, [r4, r2]
    28e4:	0022      	movs	r2, r4
    28e6:	3235      	adds	r2, #53	; 0x35
    28e8:	32ff      	adds	r2, #255	; 0xff
    28ea:	2170      	movs	r1, #112	; 0x70
    28ec:	7051      	strb	r1, [r2, #1]
    28ee:	7097      	strb	r7, [r2, #2]
    28f0:	2137      	movs	r1, #55	; 0x37
    28f2:	70d1      	strb	r1, [r2, #3]
	RegParams.Rx1DrOffset = 5;
    28f4:	2105      	movs	r1, #5
    28f6:	2224      	movs	r2, #36	; 0x24
    28f8:	54a1      	strb	r1, [r4, r2]
	RegParams.maxTxPwrIndx = 10;
    28fa:	3105      	adds	r1, #5
    28fc:	3201      	adds	r2, #1
    28fe:	54a1      	strb	r1, [r4, r2]
	RegParams.maxTxPwr = 30;
    2900:	3114      	adds	r1, #20
    2902:	3a05      	subs	r2, #5
    2904:	54a1      	strb	r1, [r4, r2]
	RegParams.band = ismBand;
    2906:	3206      	adds	r2, #6
    2908:	54a0      	strb	r0, [r4, r2]
	memcpy (RegParams.pChParams, DefaultChannels915AU, sizeof(DefaultChannels915AU) );
    290a:	326a      	adds	r2, #106	; 0x6a
    290c:	4927      	ldr	r1, [pc, #156]	; (29ac <LORAReg_InitAU+0x1b8>)
    290e:	0018      	movs	r0, r3
    2910:	4b27      	ldr	r3, [pc, #156]	; (29b0 <LORAReg_InitAU+0x1bc>)
    2912:	4699      	mov	r9, r3
    2914:	4798      	blx	r3
	memcpy (RegParams.pDrParams, DefaultDrParamsAU, sizeof(DefaultDrParamsAU) );
    2916:	2270      	movs	r2, #112	; 0x70
    2918:	4926      	ldr	r1, [pc, #152]	; (29b4 <LORAReg_InitAU+0x1c0>)
    291a:	0030      	movs	r0, r6
    291c:	47c8      	blx	r9
	RegParams.cmnParams.paramsType1.alternativeChannel = 0;
    291e:	2340      	movs	r3, #64	; 0x40
    2920:	33ff      	adds	r3, #255	; 0xff
    2922:	4642      	mov	r2, r8
    2924:	54e2      	strb	r2, [r4, r3]
	RegParams.regParamItems.fileid = PDS_FILE_REG_AU_09_IDX;
    2926:	33b5      	adds	r3, #181	; 0xb5
    2928:	54e5      	strb	r5, [r4, r3]
	RegParams.regParamItems.alt_ch_item_id = PDS_REG_AU_ALT_CH;
    292a:	2200      	movs	r2, #0
    292c:	23f6      	movs	r3, #246	; 0xf6
    292e:	33ff      	adds	r3, #255	; 0xff
    2930:	54e2      	strb	r2, [r4, r3]
    2932:	0023      	movs	r3, r4
    2934:	33f6      	adds	r3, #246	; 0xf6
    2936:	33ff      	adds	r3, #255	; 0xff
    2938:	705f      	strb	r7, [r3, #1]
	RegParams.regParamItems.ch_param_1_item_id = PDS_REG_AU_CH_PARAM;
    293a:	3201      	adds	r2, #1
    293c:	23f8      	movs	r3, #248	; 0xf8
    293e:	33ff      	adds	r3, #255	; 0xff
    2940:	54e2      	strb	r2, [r4, r3]
    2942:	0023      	movs	r3, r4
    2944:	33f8      	adds	r3, #248	; 0xf8
    2946:	33ff      	adds	r3, #255	; 0xff
    2948:	705f      	strb	r7, [r3, #1]
	RegParams.regParamItems.ch_param_2_item_id = 0;
    294a:	2200      	movs	r2, #0
    294c:	23fa      	movs	r3, #250	; 0xfa
    294e:	33ff      	adds	r3, #255	; 0xff
    2950:	54e2      	strb	r2, [r4, r3]
    2952:	0023      	movs	r3, r4
    2954:	33fa      	adds	r3, #250	; 0xfa
    2956:	33ff      	adds	r3, #255	; 0xff
    2958:	705a      	strb	r2, [r3, #1]
	RegParams.regParamItems.sb_dc_prescalr_item_id = 0;
    295a:	23fc      	movs	r3, #252	; 0xfc
    295c:	33ff      	adds	r3, #255	; 0xff
    295e:	54e2      	strb	r2, [r4, r3]
    2960:	0023      	movs	r3, r4
    2962:	33fc      	adds	r3, #252	; 0xfc
    2964:	33ff      	adds	r3, #255	; 0xff
    2966:	705a      	strb	r2, [r3, #1]
	RegParams.regParamItems.band_item_id = 0;
    2968:	23fe      	movs	r3, #254	; 0xfe
    296a:	33ff      	adds	r3, #255	; 0xff
    296c:	54e2      	strb	r2, [r4, r3]
    296e:	18e4      	adds	r4, r4, r3
    2970:	2300      	movs	r3, #0
    2972:	7063      	strb	r3, [r4, #1]
	filemarks.fileMarkListAddr = aRegAuPdsOps;
    2974:	ab02      	add	r3, sp, #8
	filemarks.numItems =  (uint8_t)(PDS_REG_AU_MAX_VALUE & 0x00FF);
    2976:	3202      	adds	r2, #2
    2978:	711a      	strb	r2, [r3, #4]
	filemarks.fIDcb = LorawanReg_AU_Pds_Cb;
    297a:	4a0f      	ldr	r2, [pc, #60]	; (29b8 <LORAReg_InitAU+0x1c4>)
	PDS_RegFile(PDS_FILE_REG_AU_09_IDX,filemarks);
    297c:	9200      	str	r2, [sp, #0]
    297e:	490f      	ldr	r1, [pc, #60]	; (29bc <LORAReg_InitAU+0x1c8>)
    2980:	9a03      	ldr	r2, [sp, #12]
    2982:	4b0f      	ldr	r3, [pc, #60]	; (29c0 <LORAReg_InitAU+0x1cc>)
    2984:	2008      	movs	r0, #8
    2986:	4c0f      	ldr	r4, [pc, #60]	; (29c4 <LORAReg_InitAU+0x1d0>)
    2988:	47a0      	blx	r4
    LORAREG_InitGetAttrFnPtrsAU();
    298a:	4b0f      	ldr	r3, [pc, #60]	; (29c8 <LORAReg_InitAU+0x1d4>)
    298c:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsAU();
    298e:	4b0f      	ldr	r3, [pc, #60]	; (29cc <LORAReg_InitAU+0x1d8>)
    2990:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsAU();
    2992:	4b0f      	ldr	r3, [pc, #60]	; (29d0 <LORAReg_InitAU+0x1dc>)
    2994:	4798      	blx	r3
}
    2996:	2008      	movs	r0, #8
    2998:	b007      	add	sp, #28
    299a:	bc3c      	pop	{r2, r3, r4, r5}
    299c:	4690      	mov	r8, r2
    299e:	4699      	mov	r9, r3
    29a0:	46a2      	mov	sl, r4
    29a2:	46ab      	mov	fp, r5
    29a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    29a6:	46c0      	nop			; (mov r8, r8)
    29a8:	20000b48 	.word	0x20000b48
    29ac:	000125a4 	.word	0x000125a4
    29b0:	000112d5 	.word	0x000112d5
    29b4:	00012634 	.word	0x00012634
    29b8:	000027f1 	.word	0x000027f1
    29bc:	20000928 	.word	0x20000928
    29c0:	000126a4 	.word	0x000126a4
    29c4:	00001ec9 	.word	0x00001ec9
    29c8:	00006415 	.word	0x00006415
    29cc:	00006a31 	.word	0x00006a31
    29d0:	00006c89 	.word	0x00006c89

000029d4 <LorawanReg_EU868_Pds_Cb>:

#if (ENABLE_PDS == 1)
void LorawanReg_EU868_Pds_Cb(void)
{
	
}
    29d4:	4770      	bx	lr
	...

000029d8 <LORAReg_InitEU>:
{
    29d8:	b570      	push	{r4, r5, r6, lr}
    29da:	b08a      	sub	sp, #40	; 0x28
	RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_EU;
    29dc:	4b91      	ldr	r3, [pc, #580]	; (2c24 <LORAReg_InitEU+0x24c>)
    29de:	2103      	movs	r1, #3
    29e0:	7799      	strb	r1, [r3, #30]
	RegParams.maxChannels = MAX_CHANNELS_T2;
    29e2:	2410      	movs	r4, #16
    29e4:	2222      	movs	r2, #34	; 0x22
    29e6:	549c      	strb	r4, [r3, r2]
	RegParams.maxSubBands = MAX_NUM_SUBBANDS_EU;
    29e8:	2506      	movs	r5, #6
    29ea:	3a01      	subs	r2, #1
    29ec:	549d      	strb	r5, [r3, r2]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_EU;
    29ee:	3a20      	subs	r2, #32
    29f0:	77da      	strb	r2, [r3, #31]
	RegParams.pChParams = &RegParams.cmnParams.paramsType2.chParams[0];
    29f2:	001a      	movs	r2, r3
    29f4:	326c      	adds	r2, #108	; 0x6c
    29f6:	711a      	strb	r2, [r3, #4]
    29f8:	0a15      	lsrs	r5, r2, #8
    29fa:	715d      	strb	r5, [r3, #5]
    29fc:	0c15      	lsrs	r5, r2, #16
    29fe:	719d      	strb	r5, [r3, #6]
    2a00:	0e12      	lsrs	r2, r2, #24
    2a02:	71da      	strb	r2, [r3, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType2.DRParams[0];
    2a04:	001a      	movs	r2, r3
    2a06:	322c      	adds	r2, #44	; 0x2c
    2a08:	701a      	strb	r2, [r3, #0]
    2a0a:	0a15      	lsrs	r5, r2, #8
    2a0c:	705d      	strb	r5, [r3, #1]
    2a0e:	0c15      	lsrs	r5, r2, #16
    2a10:	709d      	strb	r5, [r3, #2]
    2a12:	0e12      	lsrs	r2, r2, #24
    2a14:	70da      	strb	r2, [r3, #3]
	RegParams.pSubBandParams = &RegParams.cmnParams.paramsType2.SubBands[0];
    2a16:	001a      	movs	r2, r3
    2a18:	32ad      	adds	r2, #173	; 0xad
    2a1a:	32ff      	adds	r2, #255	; 0xff
    2a1c:	731a      	strb	r2, [r3, #12]
    2a1e:	0a15      	lsrs	r5, r2, #8
    2a20:	735d      	strb	r5, [r3, #13]
    2a22:	0c15      	lsrs	r5, r2, #16
    2a24:	739d      	strb	r5, [r3, #14]
    2a26:	0e12      	lsrs	r2, r2, #24
    2a28:	73da      	strb	r2, [r3, #15]
	RegParams.pOtherChParams = &RegParams.cmnParams.paramsType2.othChParams[0];
    2a2a:	001a      	movs	r2, r3
    2a2c:	328c      	adds	r2, #140	; 0x8c
    2a2e:	721a      	strb	r2, [r3, #8]
    2a30:	0a15      	lsrs	r5, r2, #8
    2a32:	725d      	strb	r5, [r3, #9]
    2a34:	0c15      	lsrs	r5, r2, #16
    2a36:	729d      	strb	r5, [r3, #10]
    2a38:	0e12      	lsrs	r2, r2, #24
    2a3a:	72da      	strb	r2, [r3, #11]
	RegParams.pDutyCycleTimer = &RegParams.cmnParams.paramsType2.DutyCycleTimer;
    2a3c:	001a      	movs	r2, r3
    2a3e:	324d      	adds	r2, #77	; 0x4d
    2a40:	32ff      	adds	r2, #255	; 0xff
    2a42:	741a      	strb	r2, [r3, #16]
    2a44:	0a15      	lsrs	r5, r2, #8
    2a46:	745d      	strb	r5, [r3, #17]
    2a48:	0c15      	lsrs	r5, r2, #16
    2a4a:	749d      	strb	r5, [r3, #18]
    2a4c:	0e12      	lsrs	r2, r2, #24
    2a4e:	74da      	strb	r2, [r3, #19]
	RegParams.MinNewChIndex = 3;
    2a50:	7659      	strb	r1, [r3, #25]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_EU;
    2a52:	2202      	movs	r2, #2
    2a54:	761a      	strb	r2, [r3, #24]
	RegParams.minDataRate = MAC_DATARATE_MIN_EU;
    2a56:	3205      	adds	r2, #5
    2a58:	771a      	strb	r2, [r3, #28]
	RegParams.maxDataRate = MAC_DATARATE_MAX_EU;
    2a5a:	2500      	movs	r5, #0
    2a5c:	775d      	strb	r5, [r3, #29]
	RegParams.Rx1DrOffset = 5;
    2a5e:	2605      	movs	r6, #5
    2a60:	3524      	adds	r5, #36	; 0x24
    2a62:	555e      	strb	r6, [r3, r5]
	RegParams.maxTxPwrIndx = 7;
    2a64:	3501      	adds	r5, #1
    2a66:	555a      	strb	r2, [r3, r5]
	RegParams.cmnParams.paramsType2.minNonDefChId = 3;
    2a68:	22aa      	movs	r2, #170	; 0xaa
    2a6a:	32ff      	adds	r2, #255	; 0xff
    2a6c:	5499      	strb	r1, [r3, r2]
	RegParams.maxTxPwr = 16;
    2a6e:	3a8a      	subs	r2, #138	; 0x8a
    2a70:	3aff      	subs	r2, #255	; 0xff
    2a72:	549c      	strb	r4, [r3, r2]
	RegParams.pDutyCycleTimer->timerId = regTimerId[0];
    2a74:	4a6c      	ldr	r2, [pc, #432]	; (2c28 <LORAReg_InitEU+0x250>)
    2a76:	7811      	ldrb	r1, [r2, #0]
    2a78:	22a8      	movs	r2, #168	; 0xa8
    2a7a:	0052      	lsls	r2, r2, #1
    2a7c:	5499      	strb	r1, [r3, r2]
	RegParams.band = ismBand;
    2a7e:	3a2b      	subs	r2, #43	; 0x2b
    2a80:	3aff      	subs	r2, #255	; 0xff
    2a82:	5498      	strb	r0, [r3, r2]
	if(ismBand == ISM_EU868)
    2a84:	2800      	cmp	r0, #0
    2a86:	d006      	beq.n	2a96 <LORAReg_InitEU+0xbe>
		return UNSUPPORTED_BAND;
    2a88:	23c8      	movs	r3, #200	; 0xc8
	else if(ismBand == ISM_EU433)
    2a8a:	2801      	cmp	r0, #1
    2a8c:	d100      	bne.n	2a90 <LORAReg_InitEU+0xb8>
    2a8e:	e092      	b.n	2bb6 <LORAReg_InitEU+0x1de>
}
    2a90:	0018      	movs	r0, r3
    2a92:	b00a      	add	sp, #40	; 0x28
    2a94:	bd70      	pop	{r4, r5, r6, pc}
    memcpy (RegParams.pChParams, DefaultChannels868, sizeof(DefaultChannels868) );
    2a96:	001c      	movs	r4, r3
    2a98:	0018      	movs	r0, r3
    2a9a:	306c      	adds	r0, #108	; 0x6c
    2a9c:	3a20      	subs	r2, #32
    2a9e:	4963      	ldr	r1, [pc, #396]	; (2c2c <LORAReg_InitEU+0x254>)
    2aa0:	4d63      	ldr	r5, [pc, #396]	; (2c30 <LORAReg_InitEU+0x258>)
    2aa2:	47a8      	blx	r5
    memcpy (RegParams.pOtherChParams, AdvChannels868, sizeof(AdvChannels868) );	
    2aa4:	0020      	movs	r0, r4
    2aa6:	308c      	adds	r0, #140	; 0x8c
    2aa8:	2224      	movs	r2, #36	; 0x24
    2aaa:	4962      	ldr	r1, [pc, #392]	; (2c34 <LORAReg_InitEU+0x25c>)
    2aac:	47a8      	blx	r5
	memcpy (RegParams.pSubBandParams, SubBandParams868, sizeof(SubBandParams868) );
    2aae:	0020      	movs	r0, r4
    2ab0:	30ad      	adds	r0, #173	; 0xad
    2ab2:	30ff      	adds	r0, #255	; 0xff
    2ab4:	2248      	movs	r2, #72	; 0x48
    2ab6:	4960      	ldr	r1, [pc, #384]	; (2c38 <LORAReg_InitEU+0x260>)
    2ab8:	47a8      	blx	r5
	memcpy(RegParams.cmnParams.paramsType2.subBandDutyCycle,SubBandDutyCycle868,sizeof(SubBandDutyCycle868));
    2aba:	0020      	movs	r0, r4
    2abc:	3097      	adds	r0, #151	; 0x97
    2abe:	30ff      	adds	r0, #255	; 0xff
    2ac0:	220c      	movs	r2, #12
    2ac2:	495e      	ldr	r1, [pc, #376]	; (2c3c <LORAReg_InitEU+0x264>)
    2ac4:	47a8      	blx	r5
    2ac6:	2303      	movs	r3, #3
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;		
    2ac8:	4856      	ldr	r0, [pc, #344]	; (2c24 <LORAReg_InitEU+0x24c>)
    2aca:	25ff      	movs	r5, #255	; 0xff
    for (i = 3; i < RegParams.maxChannels; i++)
    2acc:	2422      	movs	r4, #34	; 0x22
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;		
    2ace:	7902      	ldrb	r2, [r0, #4]
    2ad0:	7941      	ldrb	r1, [r0, #5]
    2ad2:	0209      	lsls	r1, r1, #8
    2ad4:	4311      	orrs	r1, r2
    2ad6:	7982      	ldrb	r2, [r0, #6]
    2ad8:	0412      	lsls	r2, r2, #16
    2ada:	4311      	orrs	r1, r2
    2adc:	79c2      	ldrb	r2, [r0, #7]
    2ade:	0612      	lsls	r2, r2, #24
    2ae0:	430a      	orrs	r2, r1
    2ae2:	0059      	lsls	r1, r3, #1
    2ae4:	188a      	adds	r2, r1, r2
    2ae6:	7055      	strb	r5, [r2, #1]
    for (i = 3; i < RegParams.maxChannels; i++)
    2ae8:	3301      	adds	r3, #1
    2aea:	b2db      	uxtb	r3, r3
    2aec:	5702      	ldrsb	r2, [r0, r4]
    2aee:	4293      	cmp	r3, r2
    2af0:	dbed      	blt.n	2ace <LORAReg_InitEU+0xf6>
		RegParams.DefRx1DataRate = MAC_868_RX1_WINDOW_DATARATE;
    2af2:	4b4c      	ldr	r3, [pc, #304]	; (2c24 <LORAReg_InitEU+0x24c>)
    2af4:	2200      	movs	r2, #0
    2af6:	769a      	strb	r2, [r3, #26]
		RegParams.DefRx2DataRate = MAC_868_RX2_WINDOW_DATARATE;
    2af8:	76da      	strb	r2, [r3, #27]
		RegParams.DefRx2Freq = MAC_868_RX2_WINDOW_FREQ;
    2afa:	3208      	adds	r2, #8
    2afc:	751a      	strb	r2, [r3, #20]
    2afe:	3a22      	subs	r2, #34	; 0x22
    2b00:	755a      	strb	r2, [r3, #21]
    2b02:	3a13      	subs	r2, #19
    2b04:	759a      	strb	r2, [r3, #22]
    2b06:	3260      	adds	r2, #96	; 0x60
    2b08:	75da      	strb	r2, [r3, #23]
		RegParams.regParamItems.fileid = PDS_FILE_REG_EU868_04_IDX;
    2b0a:	2203      	movs	r2, #3
    2b0c:	2003      	movs	r0, #3
    2b0e:	21fa      	movs	r1, #250	; 0xfa
    2b10:	0049      	lsls	r1, r1, #1
    2b12:	5458      	strb	r0, [r3, r1]
		RegParams.regParamItems.alt_ch_item_id = 0;
    2b14:	2000      	movs	r0, #0
    2b16:	21f6      	movs	r1, #246	; 0xf6
    2b18:	31ff      	adds	r1, #255	; 0xff
    2b1a:	5458      	strb	r0, [r3, r1]
    2b1c:	0019      	movs	r1, r3
    2b1e:	31f6      	adds	r1, #246	; 0xf6
    2b20:	31ff      	adds	r1, #255	; 0xff
    2b22:	7048      	strb	r0, [r1, #1]
		RegParams.regParamItems.ch_param_1_item_id = PDS_REG_EU868_CH_PARAM_1;
    2b24:	21f8      	movs	r1, #248	; 0xf8
    2b26:	31ff      	adds	r1, #255	; 0xff
    2b28:	5458      	strb	r0, [r3, r1]
    2b2a:	0019      	movs	r1, r3
    2b2c:	31f8      	adds	r1, #248	; 0xf8
    2b2e:	31ff      	adds	r1, #255	; 0xff
    2b30:	704a      	strb	r2, [r1, #1]
		RegParams.regParamItems.ch_param_2_item_id = PDS_REG_EU868_CH_PARAM_2;
    2b32:	21fa      	movs	r1, #250	; 0xfa
    2b34:	31ff      	adds	r1, #255	; 0xff
    2b36:	5458      	strb	r0, [r3, r1]
    2b38:	0019      	movs	r1, r3
    2b3a:	31fa      	adds	r1, #250	; 0xfa
    2b3c:	31ff      	adds	r1, #255	; 0xff
    2b3e:	300b      	adds	r0, #11
    2b40:	7048      	strb	r0, [r1, #1]
		RegParams.regParamItems.sb_dc_prescalr_item_id = PDS_REG_EU868_SB_DUTY_PRESCLAR;
    2b42:	380a      	subs	r0, #10
    2b44:	21fc      	movs	r1, #252	; 0xfc
    2b46:	31ff      	adds	r1, #255	; 0xff
    2b48:	5458      	strb	r0, [r3, r1]
    2b4a:	0019      	movs	r1, r3
    2b4c:	31fc      	adds	r1, #252	; 0xfc
    2b4e:	31ff      	adds	r1, #255	; 0xff
    2b50:	704a      	strb	r2, [r1, #1]
		RegParams.regParamItems.band_item_id = 0;
    2b52:	2100      	movs	r1, #0
    2b54:	22fe      	movs	r2, #254	; 0xfe
    2b56:	32ff      	adds	r2, #255	; 0xff
    2b58:	5499      	strb	r1, [r3, r2]
    2b5a:	189b      	adds	r3, r3, r2
    2b5c:	2200      	movs	r2, #0
    2b5e:	705a      	strb	r2, [r3, #1]
		filemarks_fid1.fileMarkListAddr = aRegEu868Fid1PdsOps;
    2b60:	ab02      	add	r3, sp, #8
		filemarks_fid1.numItems =  (uint8_t)(PDS_REG_EU868_FID1_MAX_VALUE & 0x00FF);
    2b62:	3202      	adds	r2, #2
    2b64:	711a      	strb	r2, [r3, #4]
		filemarks_fid1.fIDcb = LorawanReg_EU868_Pds_Cb;
    2b66:	4d36      	ldr	r5, [pc, #216]	; (2c40 <LORAReg_InitEU+0x268>)
		PDS_RegFile(PDS_FILE_REG_EU868_04_IDX,filemarks_fid1);
    2b68:	9500      	str	r5, [sp, #0]
    2b6a:	4936      	ldr	r1, [pc, #216]	; (2c44 <LORAReg_InitEU+0x26c>)
    2b6c:	9a03      	ldr	r2, [sp, #12]
    2b6e:	4b36      	ldr	r3, [pc, #216]	; (2c48 <LORAReg_InitEU+0x270>)
    2b70:	3002      	adds	r0, #2
    2b72:	4c36      	ldr	r4, [pc, #216]	; (2c4c <LORAReg_InitEU+0x274>)
    2b74:	47a0      	blx	r4
		filemarks_fid2.fileMarkListAddr = aRegEu868Fid2PdsOps;
    2b76:	ab06      	add	r3, sp, #24
		filemarks_fid2.numItems =  (uint8_t)(PDS_REG_EU868_FID2_MAX_VALUE & 0x00FF);
    2b78:	2201      	movs	r2, #1
    2b7a:	711a      	strb	r2, [r3, #4]
		PDS_RegFile(PDS_FILE_REG_EU868_12_IDX,filemarks_fid2);
    2b7c:	9500      	str	r5, [sp, #0]
    2b7e:	4934      	ldr	r1, [pc, #208]	; (2c50 <LORAReg_InitEU+0x278>)
    2b80:	9a07      	ldr	r2, [sp, #28]
    2b82:	4b34      	ldr	r3, [pc, #208]	; (2c54 <LORAReg_InitEU+0x27c>)
    2b84:	200b      	movs	r0, #11
    2b86:	47a0      	blx	r4
	memcpy (RegParams.pDrParams, DefaultDrparamsEU, sizeof(DefaultDrparamsEU) );
    2b88:	4a26      	ldr	r2, [pc, #152]	; (2c24 <LORAReg_InitEU+0x24c>)
    2b8a:	7810      	ldrb	r0, [r2, #0]
    2b8c:	7853      	ldrb	r3, [r2, #1]
    2b8e:	021b      	lsls	r3, r3, #8
    2b90:	4303      	orrs	r3, r0
    2b92:	7890      	ldrb	r0, [r2, #2]
    2b94:	0400      	lsls	r0, r0, #16
    2b96:	4303      	orrs	r3, r0
    2b98:	78d0      	ldrb	r0, [r2, #3]
    2b9a:	0600      	lsls	r0, r0, #24
    2b9c:	4318      	orrs	r0, r3
    2b9e:	2240      	movs	r2, #64	; 0x40
    2ba0:	492d      	ldr	r1, [pc, #180]	; (2c58 <LORAReg_InitEU+0x280>)
    2ba2:	4b23      	ldr	r3, [pc, #140]	; (2c30 <LORAReg_InitEU+0x258>)
    2ba4:	4798      	blx	r3
    LORAREG_InitGetAttrFnPtrsEU();
    2ba6:	4b2d      	ldr	r3, [pc, #180]	; (2c5c <LORAReg_InitEU+0x284>)
    2ba8:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsEU();
    2baa:	4b2d      	ldr	r3, [pc, #180]	; (2c60 <LORAReg_InitEU+0x288>)
    2bac:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsEU();
    2bae:	4b2d      	ldr	r3, [pc, #180]	; (2c64 <LORAReg_InitEU+0x28c>)
    2bb0:	4798      	blx	r3
	return status;
    2bb2:	2308      	movs	r3, #8
    2bb4:	e76c      	b.n	2a90 <LORAReg_InitEU+0xb8>
    memcpy (RegParams.pChParams, DefaultChannels433, sizeof(DefaultChannels433) );
    2bb6:	4c1b      	ldr	r4, [pc, #108]	; (2c24 <LORAReg_InitEU+0x24c>)
    2bb8:	0020      	movs	r0, r4
    2bba:	306c      	adds	r0, #108	; 0x6c
    2bbc:	2206      	movs	r2, #6
    2bbe:	492a      	ldr	r1, [pc, #168]	; (2c68 <LORAReg_InitEU+0x290>)
    2bc0:	4d1b      	ldr	r5, [pc, #108]	; (2c30 <LORAReg_InitEU+0x258>)
    2bc2:	47a8      	blx	r5
    memcpy (RegParams.pOtherChParams, AdvChannels433, sizeof(AdvChannels433) );
    2bc4:	0020      	movs	r0, r4
    2bc6:	308c      	adds	r0, #140	; 0x8c
    2bc8:	2224      	movs	r2, #36	; 0x24
    2bca:	4928      	ldr	r1, [pc, #160]	; (2c6c <LORAReg_InitEU+0x294>)
    2bcc:	47a8      	blx	r5
	memcpy (RegParams.pSubBandParams, SubBandParams433, sizeof(SubBandParams433) );	
    2bce:	0020      	movs	r0, r4
    2bd0:	30ad      	adds	r0, #173	; 0xad
    2bd2:	30ff      	adds	r0, #255	; 0xff
    2bd4:	220c      	movs	r2, #12
    2bd6:	4926      	ldr	r1, [pc, #152]	; (2c70 <LORAReg_InitEU+0x298>)
    2bd8:	47a8      	blx	r5
    2bda:	2303      	movs	r3, #3
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    2bdc:	4811      	ldr	r0, [pc, #68]	; (2c24 <LORAReg_InitEU+0x24c>)
    2bde:	25ff      	movs	r5, #255	; 0xff
    for (i = 3; i < RegParams.maxChannels; i++)
    2be0:	2422      	movs	r4, #34	; 0x22
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    2be2:	7902      	ldrb	r2, [r0, #4]
    2be4:	7941      	ldrb	r1, [r0, #5]
    2be6:	0209      	lsls	r1, r1, #8
    2be8:	4311      	orrs	r1, r2
    2bea:	7982      	ldrb	r2, [r0, #6]
    2bec:	0412      	lsls	r2, r2, #16
    2bee:	4311      	orrs	r1, r2
    2bf0:	79c2      	ldrb	r2, [r0, #7]
    2bf2:	0612      	lsls	r2, r2, #24
    2bf4:	430a      	orrs	r2, r1
    2bf6:	0059      	lsls	r1, r3, #1
    2bf8:	188a      	adds	r2, r1, r2
    2bfa:	7055      	strb	r5, [r2, #1]
    for (i = 3; i < RegParams.maxChannels; i++)
    2bfc:	3301      	adds	r3, #1
    2bfe:	b2db      	uxtb	r3, r3
    2c00:	5702      	ldrsb	r2, [r0, r4]
    2c02:	4293      	cmp	r3, r2
    2c04:	dbed      	blt.n	2be2 <LORAReg_InitEU+0x20a>
		RegParams.DefRx1DataRate = MAC_433_RX1_WINDOW_DATARATE;
    2c06:	4b07      	ldr	r3, [pc, #28]	; (2c24 <LORAReg_InitEU+0x24c>)
    2c08:	2205      	movs	r2, #5
    2c0a:	769a      	strb	r2, [r3, #26]
		RegParams.DefRx2DataRate = MAC_433_RX2_WINDOW_DATARATE;
    2c0c:	2200      	movs	r2, #0
    2c0e:	76da      	strb	r2, [r3, #27]
		RegParams.DefRx2Freq = MAC_433_RX2_WINDOW_FREQ;
    2c10:	3a70      	subs	r2, #112	; 0x70
    2c12:	751a      	strb	r2, [r3, #20]
    2c14:	3241      	adds	r2, #65	; 0x41
    2c16:	755a      	strb	r2, [r3, #21]
    2c18:	3a02      	subs	r2, #2
    2c1a:	759a      	strb	r2, [r3, #22]
    2c1c:	324a      	adds	r2, #74	; 0x4a
    2c1e:	75da      	strb	r2, [r3, #23]
    2c20:	e7b2      	b.n	2b88 <LORAReg_InitEU+0x1b0>
    2c22:	46c0      	nop			; (mov r8, r8)
    2c24:	20000b48 	.word	0x20000b48
    2c28:	20000b44 	.word	0x20000b44
    2c2c:	00012704 	.word	0x00012704
    2c30:	000112d5 	.word	0x000112d5
    2c34:	000126d8 	.word	0x000126d8
    2c38:	00012764 	.word	0x00012764
    2c3c:	0001274c 	.word	0x0001274c
    2c40:	000029d5 	.word	0x000029d5
    2c44:	2000092c 	.word	0x2000092c
    2c48:	000127ac 	.word	0x000127ac
    2c4c:	00001ec9 	.word	0x00001ec9
    2c50:	20000930 	.word	0x20000930
    2c54:	000127bc 	.word	0x000127bc
    2c58:	0001270c 	.word	0x0001270c
    2c5c:	0000619d 	.word	0x0000619d
    2c60:	0000695d 	.word	0x0000695d
    2c64:	00006bf9 	.word	0x00006bf9
    2c68:	000126fc 	.word	0x000126fc
    2c6c:	000126b4 	.word	0x000126b4
    2c70:	00012758 	.word	0x00012758

00002c74 <LorawanReg_IND_Pds_Cb>:
#if (ENABLE_PDS == 1)
/* PDS Callback function */
void LorawanReg_IND_Pds_Cb(void)
{
	
}
    2c74:	4770      	bx	lr
	...

00002c78 <LORAReg_InitIN>:
{
    2c78:	b570      	push	{r4, r5, r6, lr}
    2c7a:	b086      	sub	sp, #24
	RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_IN;
    2c7c:	4b60      	ldr	r3, [pc, #384]	; (2e00 <LORAReg_InitIN+0x188>)
    2c7e:	2103      	movs	r1, #3
    2c80:	7799      	strb	r1, [r3, #30]
	RegParams.maxChannels = MAX_CHANNELS_IN;
    2c82:	2510      	movs	r5, #16
    2c84:	2222      	movs	r2, #34	; 0x22
    2c86:	549d      	strb	r5, [r3, r2]
	RegParams.maxSubBands = MAX_NUM_SUBBANDS_IN;
    2c88:	3a21      	subs	r2, #33	; 0x21
    2c8a:	2421      	movs	r4, #33	; 0x21
    2c8c:	551a      	strb	r2, [r3, r4]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_IN;
    2c8e:	77da      	strb	r2, [r3, #31]
	RegParams.pChParams = &RegParams.cmnParams.paramsType2.chParams[0];
    2c90:	001a      	movs	r2, r3
    2c92:	326c      	adds	r2, #108	; 0x6c
    2c94:	2400      	movs	r4, #0
    2c96:	711a      	strb	r2, [r3, #4]
    2c98:	0a16      	lsrs	r6, r2, #8
    2c9a:	715e      	strb	r6, [r3, #5]
    2c9c:	0c16      	lsrs	r6, r2, #16
    2c9e:	719e      	strb	r6, [r3, #6]
    2ca0:	0e12      	lsrs	r2, r2, #24
    2ca2:	71da      	strb	r2, [r3, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType2.DRParams[0];
    2ca4:	001a      	movs	r2, r3
    2ca6:	322c      	adds	r2, #44	; 0x2c
    2ca8:	701a      	strb	r2, [r3, #0]
    2caa:	0a16      	lsrs	r6, r2, #8
    2cac:	705e      	strb	r6, [r3, #1]
    2cae:	0c16      	lsrs	r6, r2, #16
    2cb0:	709e      	strb	r6, [r3, #2]
    2cb2:	0e12      	lsrs	r2, r2, #24
    2cb4:	70da      	strb	r2, [r3, #3]
	RegParams.pOtherChParams = &RegParams.cmnParams.paramsType2.othChParams[0];
    2cb6:	001a      	movs	r2, r3
    2cb8:	328c      	adds	r2, #140	; 0x8c
    2cba:	721a      	strb	r2, [r3, #8]
    2cbc:	0a16      	lsrs	r6, r2, #8
    2cbe:	725e      	strb	r6, [r3, #9]
    2cc0:	0c16      	lsrs	r6, r2, #16
    2cc2:	729e      	strb	r6, [r3, #10]
    2cc4:	0e12      	lsrs	r2, r2, #24
    2cc6:	72da      	strb	r2, [r3, #11]
	RegParams.pDutyCycleTimer = &RegParams.cmnParams.paramsType2.DutyCycleTimer;
    2cc8:	001a      	movs	r2, r3
    2cca:	324d      	adds	r2, #77	; 0x4d
    2ccc:	32ff      	adds	r2, #255	; 0xff
    2cce:	741a      	strb	r2, [r3, #16]
    2cd0:	0a16      	lsrs	r6, r2, #8
    2cd2:	745e      	strb	r6, [r3, #17]
    2cd4:	0c16      	lsrs	r6, r2, #16
    2cd6:	749e      	strb	r6, [r3, #18]
    2cd8:	0e12      	lsrs	r2, r2, #24
    2cda:	74da      	strb	r2, [r3, #19]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_IN;
    2cdc:	769c      	strb	r4, [r3, #26]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_IN;
    2cde:	2202      	movs	r2, #2
    2ce0:	76da      	strb	r2, [r3, #27]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_IN;	
    2ce2:	3a12      	subs	r2, #18
    2ce4:	751a      	strb	r2, [r3, #20]
    2ce6:	3a70      	subs	r2, #112	; 0x70
    2ce8:	755a      	strb	r2, [r3, #21]
    2cea:	3226      	adds	r2, #38	; 0x26
    2cec:	759a      	strb	r2, [r3, #22]
    2cee:	328d      	adds	r2, #141	; 0x8d
    2cf0:	75da      	strb	r2, [r3, #23]
	RegParams.MinNewChIndex = MIN_CHANNEL_INDEX_IN;
    2cf2:	7659      	strb	r1, [r3, #25]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_IN;
    2cf4:	761d      	strb	r5, [r3, #24]
	RegParams.minDataRate = MAC_DATARATE_MIN_IN;
    2cf6:	3a2c      	subs	r2, #44	; 0x2c
    2cf8:	771a      	strb	r2, [r3, #28]
	RegParams.maxDataRate = MAC_DATARATE_MAX_IN;
    2cfa:	775c      	strb	r4, [r3, #29]
	RegParams.cmnParams.paramsType2.minNonDefChId = 3;
    2cfc:	24aa      	movs	r4, #170	; 0xaa
    2cfe:	34ff      	adds	r4, #255	; 0xff
    2d00:	5519      	strb	r1, [r3, r4]
	RegParams.Rx1DrOffset = 7;
    2d02:	3121      	adds	r1, #33	; 0x21
    2d04:	545a      	strb	r2, [r3, r1]
	RegParams.maxTxPwrIndx = 10;
    2d06:	391a      	subs	r1, #26
    2d08:	321e      	adds	r2, #30
    2d0a:	5499      	strb	r1, [r3, r2]
	RegParams.maxTxPwr = 30;
    2d0c:	3114      	adds	r1, #20
    2d0e:	3a05      	subs	r2, #5
    2d10:	5499      	strb	r1, [r3, r2]
	RegParams.band = ismBand;
    2d12:	3206      	adds	r2, #6
    2d14:	5498      	strb	r0, [r3, r2]
		result = LORAWAN_INVALID_PARAMETER;
    2d16:	3ca0      	subs	r4, #160	; 0xa0
    2d18:	3cff      	subs	r4, #255	; 0xff
	if(ismBand == ISM_IND865)
    2d1a:	280f      	cmp	r0, #15
    2d1c:	d008      	beq.n	2d30 <LORAReg_InitIN+0xb8>
    LORAREG_InitGetAttrFnPtrsIN();
    2d1e:	4b39      	ldr	r3, [pc, #228]	; (2e04 <LORAReg_InitIN+0x18c>)
    2d20:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsIN();
    2d22:	4b39      	ldr	r3, [pc, #228]	; (2e08 <LORAReg_InitIN+0x190>)
    2d24:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsIN();
    2d26:	4b39      	ldr	r3, [pc, #228]	; (2e0c <LORAReg_InitIN+0x194>)
    2d28:	4798      	blx	r3
}
    2d2a:	0020      	movs	r0, r4
    2d2c:	b006      	add	sp, #24
    2d2e:	bd70      	pop	{r4, r5, r6, pc}
    memcpy (RegParams.pChParams, DefaultChannels865, sizeof(DefaultChannels865) );
    2d30:	001c      	movs	r4, r3
    2d32:	0018      	movs	r0, r3
    2d34:	306c      	adds	r0, #108	; 0x6c
    2d36:	3a20      	subs	r2, #32
    2d38:	4935      	ldr	r1, [pc, #212]	; (2e10 <LORAReg_InitIN+0x198>)
    2d3a:	4d36      	ldr	r5, [pc, #216]	; (2e14 <LORAReg_InitIN+0x19c>)
    2d3c:	47a8      	blx	r5
	memcpy (RegParams.pOtherChParams, AdvChannels865, sizeof(AdvChannels865) );
    2d3e:	0020      	movs	r0, r4
    2d40:	308c      	adds	r0, #140	; 0x8c
    2d42:	2224      	movs	r2, #36	; 0x24
    2d44:	4934      	ldr	r1, [pc, #208]	; (2e18 <LORAReg_InitIN+0x1a0>)
    2d46:	47a8      	blx	r5
    2d48:	2006      	movs	r0, #6
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    2d4a:	492d      	ldr	r1, [pc, #180]	; (2e00 <LORAReg_InitIN+0x188>)
    2d4c:	24ff      	movs	r4, #255	; 0xff
    2d4e:	790b      	ldrb	r3, [r1, #4]
    2d50:	794a      	ldrb	r2, [r1, #5]
    2d52:	0212      	lsls	r2, r2, #8
    2d54:	431a      	orrs	r2, r3
    2d56:	798b      	ldrb	r3, [r1, #6]
    2d58:	041b      	lsls	r3, r3, #16
    2d5a:	431a      	orrs	r2, r3
    2d5c:	79cb      	ldrb	r3, [r1, #7]
    2d5e:	061b      	lsls	r3, r3, #24
    2d60:	4313      	orrs	r3, r2
    2d62:	181b      	adds	r3, r3, r0
    2d64:	705c      	strb	r4, [r3, #1]
    2d66:	3002      	adds	r0, #2
    for (i = MIN_CHANNEL_INDEX_IN; i < MAX_CHANNELS_IN; i++)
    2d68:	2820      	cmp	r0, #32
    2d6a:	d1f0      	bne.n	2d4e <LORAReg_InitIN+0xd6>
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = MAX_EIRP_IN;
    2d6c:	4c24      	ldr	r4, [pc, #144]	; (2e00 <LORAReg_InitIN+0x188>)
    2d6e:	221e      	movs	r2, #30
    2d70:	23d5      	movs	r3, #213	; 0xd5
    2d72:	005b      	lsls	r3, r3, #1
    2d74:	54e2      	strb	r2, [r4, r3]
		memcpy (RegParams.pDrParams, DefaultDrParamsIN, sizeof(DefaultDrParamsIN) );
    2d76:	7820      	ldrb	r0, [r4, #0]
    2d78:	7863      	ldrb	r3, [r4, #1]
    2d7a:	021b      	lsls	r3, r3, #8
    2d7c:	4303      	orrs	r3, r0
    2d7e:	78a0      	ldrb	r0, [r4, #2]
    2d80:	0400      	lsls	r0, r0, #16
    2d82:	4303      	orrs	r3, r0
    2d84:	78e0      	ldrb	r0, [r4, #3]
    2d86:	0600      	lsls	r0, r0, #24
    2d88:	4318      	orrs	r0, r3
    2d8a:	3222      	adds	r2, #34	; 0x22
    2d8c:	4923      	ldr	r1, [pc, #140]	; (2e1c <LORAReg_InitIN+0x1a4>)
    2d8e:	4b21      	ldr	r3, [pc, #132]	; (2e14 <LORAReg_InitIN+0x19c>)
    2d90:	4798      	blx	r3
		RegParams.regParamItems.fileid = PDS_FILE_REG_IND_07_IDX;
    2d92:	2306      	movs	r3, #6
    2d94:	2106      	movs	r1, #6
    2d96:	22fa      	movs	r2, #250	; 0xfa
    2d98:	0052      	lsls	r2, r2, #1
    2d9a:	54a1      	strb	r1, [r4, r2]
		RegParams.regParamItems.alt_ch_item_id = 0;
    2d9c:	2100      	movs	r1, #0
    2d9e:	22f6      	movs	r2, #246	; 0xf6
    2da0:	32ff      	adds	r2, #255	; 0xff
    2da2:	54a1      	strb	r1, [r4, r2]
    2da4:	0022      	movs	r2, r4
    2da6:	32f6      	adds	r2, #246	; 0xf6
    2da8:	32ff      	adds	r2, #255	; 0xff
    2daa:	7051      	strb	r1, [r2, #1]
		RegParams.regParamItems.ch_param_1_item_id = PDS_REG_IND_CH_PARAM_1;
    2dac:	22f8      	movs	r2, #248	; 0xf8
    2dae:	32ff      	adds	r2, #255	; 0xff
    2db0:	54a1      	strb	r1, [r4, r2]
    2db2:	0022      	movs	r2, r4
    2db4:	32f8      	adds	r2, #248	; 0xf8
    2db6:	32ff      	adds	r2, #255	; 0xff
    2db8:	7053      	strb	r3, [r2, #1]
		RegParams.regParamItems.ch_param_2_item_id = PDS_REG_IND_CH_PARAM_2;
    2dba:	3101      	adds	r1, #1
    2dbc:	22fa      	movs	r2, #250	; 0xfa
    2dbe:	32ff      	adds	r2, #255	; 0xff
    2dc0:	54a1      	strb	r1, [r4, r2]
    2dc2:	0022      	movs	r2, r4
    2dc4:	32fa      	adds	r2, #250	; 0xfa
    2dc6:	32ff      	adds	r2, #255	; 0xff
    2dc8:	7053      	strb	r3, [r2, #1]
		RegParams.regParamItems.sb_dc_prescalr_item_id = 0;
    2dca:	2200      	movs	r2, #0
    2dcc:	23fc      	movs	r3, #252	; 0xfc
    2dce:	33ff      	adds	r3, #255	; 0xff
    2dd0:	54e2      	strb	r2, [r4, r3]
    2dd2:	0023      	movs	r3, r4
    2dd4:	33fc      	adds	r3, #252	; 0xfc
    2dd6:	33ff      	adds	r3, #255	; 0xff
    2dd8:	705a      	strb	r2, [r3, #1]
		RegParams.regParamItems.band_item_id = 0;
    2dda:	23fe      	movs	r3, #254	; 0xfe
    2ddc:	33ff      	adds	r3, #255	; 0xff
    2dde:	54e2      	strb	r2, [r4, r3]
    2de0:	18e4      	adds	r4, r4, r3
    2de2:	2300      	movs	r3, #0
    2de4:	7063      	strb	r3, [r4, #1]
		filemarks.fileMarkListAddr = aRegIndPdsOps;
    2de6:	ab02      	add	r3, sp, #8
		filemarks.numItems =  (uint8_t)(PDS_REG_IND_MAX_VALUE & 0x00FF);
    2de8:	3202      	adds	r2, #2
    2dea:	711a      	strb	r2, [r3, #4]
		filemarks.fIDcb = LorawanReg_IND_Pds_Cb;
    2dec:	4a0c      	ldr	r2, [pc, #48]	; (2e20 <LORAReg_InitIN+0x1a8>)
		PDS_RegFile(PDS_FILE_REG_IND_07_IDX,filemarks);
    2dee:	9200      	str	r2, [sp, #0]
    2df0:	490c      	ldr	r1, [pc, #48]	; (2e24 <LORAReg_InitIN+0x1ac>)
    2df2:	9a03      	ldr	r2, [sp, #12]
    2df4:	4b0c      	ldr	r3, [pc, #48]	; (2e28 <LORAReg_InitIN+0x1b0>)
    2df6:	2006      	movs	r0, #6
    2df8:	4c0c      	ldr	r4, [pc, #48]	; (2e2c <LORAReg_InitIN+0x1b4>)
    2dfa:	47a0      	blx	r4
	StackRetStatus_t result = LORAWAN_SUCCESS;
    2dfc:	2408      	movs	r4, #8
    2dfe:	e78e      	b.n	2d1e <LORAReg_InitIN+0xa6>
    2e00:	20000b48 	.word	0x20000b48
    2e04:	00006545 	.word	0x00006545
    2e08:	00006a9d 	.word	0x00006a9d
    2e0c:	00006ca9 	.word	0x00006ca9
    2e10:	000127e8 	.word	0x000127e8
    2e14:	000112d5 	.word	0x000112d5
    2e18:	000127c4 	.word	0x000127c4
    2e1c:	000127f0 	.word	0x000127f0
    2e20:	00002c75 	.word	0x00002c75
    2e24:	20000934 	.word	0x20000934
    2e28:	00012830 	.word	0x00012830
    2e2c:	00001ec9 	.word	0x00001ec9

00002e30 <LorawanReg_JPN_Pds_Cb>:
#if (ENABLE_PDS == 1)
/* PDS Callback function */
void LorawanReg_JPN_Pds_Cb(void)
{

}
    2e30:	4770      	bx	lr
	...

00002e34 <LORAReg_InitJP>:
{
    2e34:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e36:	b087      	sub	sp, #28
	RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_JP;
    2e38:	4b7d      	ldr	r3, [pc, #500]	; (3030 <LORAReg_InitJP+0x1fc>)
    2e3a:	2203      	movs	r2, #3
    2e3c:	779a      	strb	r2, [r3, #30]
	RegParams.maxChannels = MAX_CHANNELS_JP;
    2e3e:	2110      	movs	r1, #16
    2e40:	321f      	adds	r2, #31
    2e42:	5499      	strb	r1, [r3, r2]
	RegParams.maxSubBands = MAX_NUM_SUBBANDS_JP;
    2e44:	3a21      	subs	r2, #33	; 0x21
    2e46:	2421      	movs	r4, #33	; 0x21
    2e48:	551a      	strb	r2, [r3, r4]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_JP;
    2e4a:	77da      	strb	r2, [r3, #31]
	RegParams.pChParams = &RegParams.cmnParams.paramsType2.chParams[0];
    2e4c:	001a      	movs	r2, r3
    2e4e:	326c      	adds	r2, #108	; 0x6c
    2e50:	711a      	strb	r2, [r3, #4]
    2e52:	0a14      	lsrs	r4, r2, #8
    2e54:	715c      	strb	r4, [r3, #5]
    2e56:	0c14      	lsrs	r4, r2, #16
    2e58:	719c      	strb	r4, [r3, #6]
    2e5a:	0e12      	lsrs	r2, r2, #24
    2e5c:	71da      	strb	r2, [r3, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType2.DRParams[0];
    2e5e:	001a      	movs	r2, r3
    2e60:	322c      	adds	r2, #44	; 0x2c
    2e62:	701a      	strb	r2, [r3, #0]
    2e64:	0a14      	lsrs	r4, r2, #8
    2e66:	705c      	strb	r4, [r3, #1]
    2e68:	0c14      	lsrs	r4, r2, #16
    2e6a:	709c      	strb	r4, [r3, #2]
    2e6c:	0e12      	lsrs	r2, r2, #24
    2e6e:	70da      	strb	r2, [r3, #3]
	RegParams.pSubBandParams = &RegParams.cmnParams.paramsType2.SubBands[0];
    2e70:	001a      	movs	r2, r3
    2e72:	32ad      	adds	r2, #173	; 0xad
    2e74:	32ff      	adds	r2, #255	; 0xff
    2e76:	731a      	strb	r2, [r3, #12]
    2e78:	0a14      	lsrs	r4, r2, #8
    2e7a:	735c      	strb	r4, [r3, #13]
    2e7c:	0c14      	lsrs	r4, r2, #16
    2e7e:	739c      	strb	r4, [r3, #14]
    2e80:	0e12      	lsrs	r2, r2, #24
    2e82:	73da      	strb	r2, [r3, #15]
	RegParams.pOtherChParams = &RegParams.cmnParams.paramsType2.othChParams[0];
    2e84:	001a      	movs	r2, r3
    2e86:	328c      	adds	r2, #140	; 0x8c
    2e88:	721a      	strb	r2, [r3, #8]
    2e8a:	0a14      	lsrs	r4, r2, #8
    2e8c:	725c      	strb	r4, [r3, #9]
    2e8e:	0c14      	lsrs	r4, r2, #16
    2e90:	729c      	strb	r4, [r3, #10]
    2e92:	0e12      	lsrs	r2, r2, #24
    2e94:	72da      	strb	r2, [r3, #11]
	RegParams.pDutyCycleTimer = &RegParams.cmnParams.paramsType2.DutyCycleTimer;
    2e96:	001a      	movs	r2, r3
    2e98:	324d      	adds	r2, #77	; 0x4d
    2e9a:	32ff      	adds	r2, #255	; 0xff
    2e9c:	741a      	strb	r2, [r3, #16]
    2e9e:	0a14      	lsrs	r4, r2, #8
    2ea0:	745c      	strb	r4, [r3, #17]
    2ea2:	0c14      	lsrs	r4, r2, #16
    2ea4:	749c      	strb	r4, [r3, #18]
    2ea6:	0e12      	lsrs	r2, r2, #24
    2ea8:	74da      	strb	r2, [r3, #19]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_JP;
    2eaa:	2202      	movs	r2, #2
    2eac:	769a      	strb	r2, [r3, #26]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_JP;
    2eae:	76da      	strb	r2, [r3, #27]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_JP;	
    2eb0:	2400      	movs	r4, #0
    2eb2:	751c      	strb	r4, [r3, #20]
    2eb4:	3c16      	subs	r4, #22
    2eb6:	755c      	strb	r4, [r3, #21]
    2eb8:	341c      	adds	r4, #28
    2eba:	759c      	strb	r4, [r3, #22]
    2ebc:	3431      	adds	r4, #49	; 0x31
    2ebe:	75dc      	strb	r4, [r3, #23]
	RegParams.MinNewChIndex = MIN_CHANNEL_INDEX_JP;
    2ec0:	765a      	strb	r2, [r3, #25]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_JP;
    2ec2:	3c23      	subs	r4, #35	; 0x23
    2ec4:	761c      	strb	r4, [r3, #24]
	RegParams.minDataRate = MAC_DATARATE_MIN_JP;
    2ec6:	3c0d      	subs	r4, #13
    2ec8:	771c      	strb	r4, [r3, #28]
	RegParams.maxDataRate = MAC_DATARATE_MAX_JP;
    2eca:	2500      	movs	r5, #0
    2ecc:	775d      	strb	r5, [r3, #29]
	RegParams.cmnParams.paramsType2.LBTScanPeriod = LBT_SCAN_PERIOD_JP;
    2ece:	260a      	movs	r6, #10
    2ed0:	35a7      	adds	r5, #167	; 0xa7
    2ed2:	35ff      	adds	r5, #255	; 0xff
    2ed4:	555e      	strb	r6, [r3, r5]
	RegParams.cmnParams.paramsType2.LBTSignalThreshold = LBT_SIGNAL_THRESHOLD_JP;
    2ed6:	36a6      	adds	r6, #166	; 0xa6
    2ed8:	25a8      	movs	r5, #168	; 0xa8
    2eda:	35ff      	adds	r5, #255	; 0xff
    2edc:	555e      	strb	r6, [r3, r5]
	RegParams.cmnParams.paramsType2.LBT_RSSISamplesCount = LBT_RSSI_SAMPLES_COUNT_JP;
    2ede:	3eab      	subs	r6, #171	; 0xab
    2ee0:	3501      	adds	r5, #1
    2ee2:	555e      	strb	r6, [r3, r5]
	RegParams.cmnParams.paramsType2.minNonDefChId = 2;
    2ee4:	25aa      	movs	r5, #170	; 0xaa
    2ee6:	35ff      	adds	r5, #255	; 0xff
    2ee8:	555a      	strb	r2, [r3, r5]
	RegParams.Rx1DrOffset = 7;
    2eea:	3222      	adds	r2, #34	; 0x22
    2eec:	549c      	strb	r4, [r3, r2]
	RegParams.maxTxPwrIndx = 7;
    2eee:	3201      	adds	r2, #1
    2ef0:	549c      	strb	r4, [r3, r2]
	RegParams.maxTxPwr = 16;
    2ef2:	3a05      	subs	r2, #5
    2ef4:	5499      	strb	r1, [r3, r2]
	RegParams.cmnParams.paramsType2.LBTTimer.timerId = regTimerId[0];
    2ef6:	4a4f      	ldr	r2, [pc, #316]	; (3034 <LORAReg_InitJP+0x200>)
    2ef8:	7814      	ldrb	r4, [r2, #0]
    2efa:	2196      	movs	r1, #150	; 0x96
    2efc:	31ff      	adds	r1, #255	; 0xff
    2efe:	545c      	strb	r4, [r3, r1]
	RegParams.pDutyCycleTimer->timerId = regTimerId[1];
    2f00:	7851      	ldrb	r1, [r2, #1]
    2f02:	22a8      	movs	r2, #168	; 0xa8
    2f04:	0052      	lsls	r2, r2, #1
    2f06:	5499      	strb	r1, [r3, r2]
	RegParams.band = ismBand;
    2f08:	3a2b      	subs	r2, #43	; 0x2b
    2f0a:	3aff      	subs	r2, #255	; 0xff
    2f0c:	5498      	strb	r0, [r3, r2]
		result = LORAWAN_INVALID_PARAMETER;
    2f0e:	240a      	movs	r4, #10
	if(ismBand == ISM_JPN923)
    2f10:	2805      	cmp	r0, #5
    2f12:	d008      	beq.n	2f26 <LORAReg_InitJP+0xf2>
    LORAREG_InitGetAttrFnPtrsJP();
    2f14:	4b48      	ldr	r3, [pc, #288]	; (3038 <LORAReg_InitJP+0x204>)
    2f16:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsJP();
    2f18:	4b48      	ldr	r3, [pc, #288]	; (303c <LORAReg_InitJP+0x208>)
    2f1a:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsJP();
    2f1c:	4b48      	ldr	r3, [pc, #288]	; (3040 <LORAReg_InitJP+0x20c>)
    2f1e:	4798      	blx	r3
}
    2f20:	0020      	movs	r0, r4
    2f22:	b007      	add	sp, #28
    2f24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    memcpy (RegParams.pChParams, DefaultChannels923JP, sizeof(DefaultChannels923JP) );
    2f26:	001c      	movs	r4, r3
    2f28:	0018      	movs	r0, r3
    2f2a:	306c      	adds	r0, #108	; 0x6c
    2f2c:	3a22      	subs	r2, #34	; 0x22
    2f2e:	4945      	ldr	r1, [pc, #276]	; (3044 <LORAReg_InitJP+0x210>)
    2f30:	4d45      	ldr	r5, [pc, #276]	; (3048 <LORAReg_InitJP+0x214>)
    2f32:	47a8      	blx	r5
	memcpy (RegParams.pOtherChParams, AdvChannels923JP, sizeof(AdvChannels923JP) );
    2f34:	0020      	movs	r0, r4
    2f36:	308c      	adds	r0, #140	; 0x8c
    2f38:	2218      	movs	r2, #24
    2f3a:	4944      	ldr	r1, [pc, #272]	; (304c <LORAReg_InitJP+0x218>)
    2f3c:	47a8      	blx	r5
	memcpy (RegParams.pSubBandParams, SubBandParamsJP923, sizeof(SubBandParamsJP923) );
    2f3e:	0020      	movs	r0, r4
    2f40:	30ad      	adds	r0, #173	; 0xad
    2f42:	30ff      	adds	r0, #255	; 0xff
    2f44:	220c      	movs	r2, #12
    2f46:	4942      	ldr	r1, [pc, #264]	; (3050 <LORAReg_InitJP+0x21c>)
    2f48:	47a8      	blx	r5
	memcpy (RegParams.cmnParams.paramsType2.subBandDutyCycle,SubBandDutyCycleJP923,sizeof(SubBandDutyCycleJP923));
    2f4a:	0020      	movs	r0, r4
    2f4c:	3097      	adds	r0, #151	; 0x97
    2f4e:	30ff      	adds	r0, #255	; 0xff
    2f50:	2202      	movs	r2, #2
    2f52:	4940      	ldr	r1, [pc, #256]	; (3054 <LORAReg_InitJP+0x220>)
    2f54:	47a8      	blx	r5
    2f56:	2302      	movs	r3, #2
    2f58:	2202      	movs	r2, #2
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    2f5a:	4935      	ldr	r1, [pc, #212]	; (3030 <LORAReg_InitJP+0x1fc>)
    2f5c:	27ff      	movs	r7, #255	; 0xff
		RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    2f5e:	2500      	movs	r5, #0
    for (i = 2; i < RegParams.maxChannels; i++)
    2f60:	361d      	adds	r6, #29
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    2f62:	7908      	ldrb	r0, [r1, #4]
    2f64:	794c      	ldrb	r4, [r1, #5]
    2f66:	0224      	lsls	r4, r4, #8
    2f68:	4304      	orrs	r4, r0
    2f6a:	7988      	ldrb	r0, [r1, #6]
    2f6c:	0400      	lsls	r0, r0, #16
    2f6e:	4304      	orrs	r4, r0
    2f70:	79c8      	ldrb	r0, [r1, #7]
    2f72:	0600      	lsls	r0, r0, #24
    2f74:	4320      	orrs	r0, r4
    2f76:	0054      	lsls	r4, r2, #1
    2f78:	1820      	adds	r0, r4, r0
    2f7a:	7047      	strb	r7, [r0, #1]
		RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    2f7c:	3352      	adds	r3, #82	; 0x52
    2f7e:	009b      	lsls	r3, r3, #2
    2f80:	18cb      	adds	r3, r1, r3
    2f82:	725d      	strb	r5, [r3, #9]
    2f84:	729d      	strb	r5, [r3, #10]
    2f86:	72dd      	strb	r5, [r3, #11]
    2f88:	731d      	strb	r5, [r3, #12]
    for (i = 2; i < RegParams.maxChannels; i++)
    2f8a:	3201      	adds	r2, #1
    2f8c:	b2d2      	uxtb	r2, r2
    2f8e:	0013      	movs	r3, r2
    2f90:	5788      	ldrsb	r0, [r1, r6]
    2f92:	4282      	cmp	r2, r0
    2f94:	dbe5      	blt.n	2f62 <LORAReg_InitJP+0x12e>
	RegParams.lastUsedChannelIndex = UINT8_MAX;
    2f96:	4c26      	ldr	r4, [pc, #152]	; (3030 <LORAReg_InitJP+0x1fc>)
    2f98:	22ff      	movs	r2, #255	; 0xff
    2f9a:	2327      	movs	r3, #39	; 0x27
    2f9c:	54e2      	strb	r2, [r4, r3]
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = DEFAULT_EIRP_JP;//MAX_EIRP_JP;
    2f9e:	3aef      	subs	r2, #239	; 0xef
    2fa0:	3384      	adds	r3, #132	; 0x84
    2fa2:	33ff      	adds	r3, #255	; 0xff
    2fa4:	54e2      	strb	r2, [r4, r3]
		memcpy (RegParams.pDrParams, DefaultDrParamsJP, sizeof(DefaultDrParamsJP) );
    2fa6:	7820      	ldrb	r0, [r4, #0]
    2fa8:	7863      	ldrb	r3, [r4, #1]
    2faa:	021b      	lsls	r3, r3, #8
    2fac:	4303      	orrs	r3, r0
    2fae:	78a0      	ldrb	r0, [r4, #2]
    2fb0:	0400      	lsls	r0, r0, #16
    2fb2:	4303      	orrs	r3, r0
    2fb4:	78e0      	ldrb	r0, [r4, #3]
    2fb6:	0600      	lsls	r0, r0, #24
    2fb8:	4318      	orrs	r0, r3
    2fba:	3230      	adds	r2, #48	; 0x30
    2fbc:	4926      	ldr	r1, [pc, #152]	; (3058 <LORAReg_InitJP+0x224>)
    2fbe:	4b22      	ldr	r3, [pc, #136]	; (3048 <LORAReg_InitJP+0x214>)
    2fc0:	4798      	blx	r3
		RegParams.regParamItems.fileid = PDS_FILE_REG_JPN_08_IDX;
    2fc2:	2307      	movs	r3, #7
    2fc4:	2107      	movs	r1, #7
    2fc6:	22fa      	movs	r2, #250	; 0xfa
    2fc8:	0052      	lsls	r2, r2, #1
    2fca:	54a1      	strb	r1, [r4, r2]
		RegParams.regParamItems.alt_ch_item_id = 0;
    2fcc:	2100      	movs	r1, #0
    2fce:	22f6      	movs	r2, #246	; 0xf6
    2fd0:	32ff      	adds	r2, #255	; 0xff
    2fd2:	54a1      	strb	r1, [r4, r2]
    2fd4:	0022      	movs	r2, r4
    2fd6:	32f6      	adds	r2, #246	; 0xf6
    2fd8:	32ff      	adds	r2, #255	; 0xff
    2fda:	7051      	strb	r1, [r2, #1]
		RegParams.regParamItems.ch_param_1_item_id = PDS_REG_JPN_CH_PARAM_1;
    2fdc:	22f8      	movs	r2, #248	; 0xf8
    2fde:	32ff      	adds	r2, #255	; 0xff
    2fe0:	54a1      	strb	r1, [r4, r2]
    2fe2:	0022      	movs	r2, r4
    2fe4:	32f8      	adds	r2, #248	; 0xf8
    2fe6:	32ff      	adds	r2, #255	; 0xff
    2fe8:	7053      	strb	r3, [r2, #1]
		RegParams.regParamItems.ch_param_2_item_id = PDS_REG_JPN_CH_PARAM_2;
    2fea:	3101      	adds	r1, #1
    2fec:	22fa      	movs	r2, #250	; 0xfa
    2fee:	32ff      	adds	r2, #255	; 0xff
    2ff0:	54a1      	strb	r1, [r4, r2]
    2ff2:	0022      	movs	r2, r4
    2ff4:	32fa      	adds	r2, #250	; 0xfa
    2ff6:	32ff      	adds	r2, #255	; 0xff
    2ff8:	7053      	strb	r3, [r2, #1]
		RegParams.regParamItems.sb_dc_prescalr_item_id = 0;
    2ffa:	2200      	movs	r2, #0
    2ffc:	23fc      	movs	r3, #252	; 0xfc
    2ffe:	33ff      	adds	r3, #255	; 0xff
    3000:	54e2      	strb	r2, [r4, r3]
    3002:	0023      	movs	r3, r4
    3004:	33fc      	adds	r3, #252	; 0xfc
    3006:	33ff      	adds	r3, #255	; 0xff
    3008:	705a      	strb	r2, [r3, #1]
		RegParams.regParamItems.band_item_id = 0;
    300a:	23fe      	movs	r3, #254	; 0xfe
    300c:	33ff      	adds	r3, #255	; 0xff
    300e:	54e2      	strb	r2, [r4, r3]
    3010:	18e4      	adds	r4, r4, r3
    3012:	2300      	movs	r3, #0
    3014:	7063      	strb	r3, [r4, #1]
		filemarks.fileMarkListAddr = aRegJpnFid1PdsOps;
    3016:	ab02      	add	r3, sp, #8
		filemarks.numItems =  (uint8_t)(PDS_REG_JPN_FID1_MAX_VALUE & 0x00FF);
    3018:	3202      	adds	r2, #2
    301a:	711a      	strb	r2, [r3, #4]
		filemarks.fIDcb = LorawanReg_JPN_Pds_Cb;
    301c:	4a0f      	ldr	r2, [pc, #60]	; (305c <LORAReg_InitJP+0x228>)
		PDS_RegFile(PDS_FILE_REG_JPN_08_IDX,filemarks);
    301e:	9200      	str	r2, [sp, #0]
    3020:	490f      	ldr	r1, [pc, #60]	; (3060 <LORAReg_InitJP+0x22c>)
    3022:	9a03      	ldr	r2, [sp, #12]
    3024:	4b0f      	ldr	r3, [pc, #60]	; (3064 <LORAReg_InitJP+0x230>)
    3026:	2007      	movs	r0, #7
    3028:	4c0f      	ldr	r4, [pc, #60]	; (3068 <LORAReg_InitJP+0x234>)
    302a:	47a0      	blx	r4
	StackRetStatus_t result = LORAWAN_SUCCESS;
    302c:	2408      	movs	r4, #8
    302e:	e771      	b.n	2f14 <LORAReg_InitJP+0xe0>
    3030:	20000b48 	.word	0x20000b48
    3034:	20000b44 	.word	0x20000b44
    3038:	00006671 	.word	0x00006671
    303c:	00006b05 	.word	0x00006b05
    3040:	00006ce5 	.word	0x00006ce5
    3044:	00012858 	.word	0x00012858
    3048:	000112d5 	.word	0x000112d5
    304c:	00012840 	.word	0x00012840
    3050:	000128a0 	.word	0x000128a0
    3054:	0001289c 	.word	0x0001289c
    3058:	0001285c 	.word	0x0001285c
    305c:	00002e31 	.word	0x00002e31
    3060:	20000938 	.word	0x20000938
    3064:	000128ac 	.word	0x000128ac
    3068:	00001ec9 	.word	0x00001ec9

0000306c <LorawanReg_KR_Pds_Cb>:
#if (ENABLE_PDS == 1)
/* PDS Callback */
void LorawanReg_KR_Pds_Cb(void)
{

}
    306c:	4770      	bx	lr
	...

00003070 <LORAReg_InitKR>:
{
    3070:	b5f0      	push	{r4, r5, r6, r7, lr}
    3072:	46d6      	mov	lr, sl
    3074:	464f      	mov	r7, r9
    3076:	4646      	mov	r6, r8
    3078:	b5c0      	push	{r6, r7, lr}
    307a:	b086      	sub	sp, #24
	RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_KR;
    307c:	4b93      	ldr	r3, [pc, #588]	; (32cc <LORAReg_InitKR+0x25c>)
    307e:	2103      	movs	r1, #3
    3080:	7799      	strb	r1, [r3, #30]
	RegParams.maxChannels = MAX_CHANNELS_KR;
    3082:	2410      	movs	r4, #16
    3084:	2222      	movs	r2, #34	; 0x22
    3086:	549c      	strb	r4, [r3, r2]
	RegParams.maxSubBands = MAX_NUM_SUBBANDS_KR;
    3088:	3a21      	subs	r2, #33	; 0x21
    308a:	3411      	adds	r4, #17
    308c:	551a      	strb	r2, [r3, r4]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_KR;
    308e:	77da      	strb	r2, [r3, #31]
	RegParams.pChParams = &RegParams.cmnParams.paramsType2.chParams[0];
    3090:	001a      	movs	r2, r3
    3092:	326c      	adds	r2, #108	; 0x6c
    3094:	2400      	movs	r4, #0
    3096:	711a      	strb	r2, [r3, #4]
    3098:	0a15      	lsrs	r5, r2, #8
    309a:	715d      	strb	r5, [r3, #5]
    309c:	0c15      	lsrs	r5, r2, #16
    309e:	719d      	strb	r5, [r3, #6]
    30a0:	0e12      	lsrs	r2, r2, #24
    30a2:	71da      	strb	r2, [r3, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType2.DRParams[0];
    30a4:	001a      	movs	r2, r3
    30a6:	322c      	adds	r2, #44	; 0x2c
    30a8:	701a      	strb	r2, [r3, #0]
    30aa:	0a15      	lsrs	r5, r2, #8
    30ac:	705d      	strb	r5, [r3, #1]
    30ae:	0c15      	lsrs	r5, r2, #16
    30b0:	709d      	strb	r5, [r3, #2]
    30b2:	0e12      	lsrs	r2, r2, #24
    30b4:	70da      	strb	r2, [r3, #3]
	RegParams.pOtherChParams = &RegParams.cmnParams.paramsType2.othChParams[0];
    30b6:	001a      	movs	r2, r3
    30b8:	328c      	adds	r2, #140	; 0x8c
    30ba:	721a      	strb	r2, [r3, #8]
    30bc:	0a15      	lsrs	r5, r2, #8
    30be:	725d      	strb	r5, [r3, #9]
    30c0:	0c15      	lsrs	r5, r2, #16
    30c2:	729d      	strb	r5, [r3, #10]
    30c4:	0e12      	lsrs	r2, r2, #24
    30c6:	72da      	strb	r2, [r3, #11]
	RegParams.pDutyCycleTimer = &RegParams.cmnParams.paramsType2.DutyCycleTimer;
    30c8:	001a      	movs	r2, r3
    30ca:	324d      	adds	r2, #77	; 0x4d
    30cc:	32ff      	adds	r2, #255	; 0xff
    30ce:	741a      	strb	r2, [r3, #16]
    30d0:	0a15      	lsrs	r5, r2, #8
    30d2:	745d      	strb	r5, [r3, #17]
    30d4:	0c15      	lsrs	r5, r2, #16
    30d6:	749d      	strb	r5, [r3, #18]
    30d8:	0e12      	lsrs	r2, r2, #24
    30da:	74da      	strb	r2, [r3, #19]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_KR;
    30dc:	769c      	strb	r4, [r3, #26]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_KR;
    30de:	76dc      	strb	r4, [r3, #27]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_KR;	
    30e0:	2220      	movs	r2, #32
    30e2:	4252      	negs	r2, r2
    30e4:	751a      	strb	r2, [r3, #20]
    30e6:	3233      	adds	r2, #51	; 0x33
    30e8:	755a      	strb	r2, [r3, #21]
    30ea:	3a20      	subs	r2, #32
    30ec:	759a      	strb	r2, [r3, #22]
    30ee:	3243      	adds	r2, #67	; 0x43
    30f0:	75da      	strb	r2, [r3, #23]
	RegParams.MinNewChIndex = MIN_CHANNEL_INDEX_KR;
    30f2:	7659      	strb	r1, [r3, #25]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_KR;
    30f4:	3a22      	subs	r2, #34	; 0x22
    30f6:	761a      	strb	r2, [r3, #24]
	RegParams.minDataRate = MAC_DATARATE_MIN_KR;
    30f8:	3a0f      	subs	r2, #15
    30fa:	771a      	strb	r2, [r3, #28]
	RegParams.maxDataRate = MAC_DATARATE_MAX_KR;
    30fc:	775c      	strb	r4, [r3, #29]
	RegParams.cmnParams.paramsType2.LBTScanPeriod = LBT_SCAN_PERIOD_KR;
    30fe:	340a      	adds	r4, #10
    3100:	25d3      	movs	r5, #211	; 0xd3
    3102:	006d      	lsls	r5, r5, #1
    3104:	555c      	strb	r4, [r3, r5]
	RegParams.cmnParams.paramsType2.LBTSignalThreshold = LBT_SIGNAL_THRESHOLD_KR;
    3106:	26bf      	movs	r6, #191	; 0xbf
    3108:	25a8      	movs	r5, #168	; 0xa8
    310a:	35ff      	adds	r5, #255	; 0xff
    310c:	555e      	strb	r6, [r3, r5]
	RegParams.cmnParams.paramsType2.LBT_RSSISamplesCount = LBT_RSSI_SAMPLES_COUNT_KR;
    310e:	3501      	adds	r5, #1
    3110:	555c      	strb	r4, [r3, r5]
	RegParams.cmnParams.paramsType2.minNonDefChId = 3;
    3112:	24aa      	movs	r4, #170	; 0xaa
    3114:	34ff      	adds	r4, #255	; 0xff
    3116:	5519      	strb	r1, [r3, r4]
	RegParams.Rx1DrOffset = 5;
    3118:	3121      	adds	r1, #33	; 0x21
    311a:	545a      	strb	r2, [r3, r1]
	RegParams.maxTxPwrIndx = 7;
    311c:	391d      	subs	r1, #29
    311e:	3220      	adds	r2, #32
    3120:	5499      	strb	r1, [r3, r2]
	RegParams.maxTxPwr = 14;
    3122:	3107      	adds	r1, #7
    3124:	3a05      	subs	r2, #5
    3126:	5499      	strb	r1, [r3, r2]
	RegParams.cmnParams.paramsType2.LBTTimer.timerId = regTimerId[0];
    3128:	4a69      	ldr	r2, [pc, #420]	; (32d0 <LORAReg_InitKR+0x260>)
    312a:	7811      	ldrb	r1, [r2, #0]
    312c:	2296      	movs	r2, #150	; 0x96
    312e:	32ff      	adds	r2, #255	; 0xff
    3130:	5499      	strb	r1, [r3, r2]
	RegParams.band = ismBand;
    3132:	3a70      	subs	r2, #112	; 0x70
    3134:	3aff      	subs	r2, #255	; 0xff
    3136:	5498      	strb	r0, [r3, r2]
		result = UNSUPPORTED_BAND;
    3138:	3ce1      	subs	r4, #225	; 0xe1
	if(ismBand == ISM_KR920)
    313a:	2804      	cmp	r0, #4
    313c:	d00c      	beq.n	3158 <LORAReg_InitKR+0xe8>
    LORAREG_InitGetAttrFnPtrsKR();
    313e:	4b65      	ldr	r3, [pc, #404]	; (32d4 <LORAReg_InitKR+0x264>)
    3140:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsKR();
    3142:	4b65      	ldr	r3, [pc, #404]	; (32d8 <LORAReg_InitKR+0x268>)
    3144:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsKR();
    3146:	4b65      	ldr	r3, [pc, #404]	; (32dc <LORAReg_InitKR+0x26c>)
    3148:	4798      	blx	r3
}
    314a:	0020      	movs	r0, r4
    314c:	b006      	add	sp, #24
    314e:	bc1c      	pop	{r2, r3, r4}
    3150:	4690      	mov	r8, r2
    3152:	4699      	mov	r9, r3
    3154:	46a2      	mov	sl, r4
    3156:	bdf0      	pop	{r4, r5, r6, r7, pc}
    memcpy (RegParams.pChParams, DefaultChannels920KR, sizeof(DefaultChannels920KR) );
    3158:	001c      	movs	r4, r3
    315a:	0018      	movs	r0, r3
    315c:	306c      	adds	r0, #108	; 0x6c
    315e:	3a20      	subs	r2, #32
    3160:	495f      	ldr	r1, [pc, #380]	; (32e0 <LORAReg_InitKR+0x270>)
    3162:	4d60      	ldr	r5, [pc, #384]	; (32e4 <LORAReg_InitKR+0x274>)
    3164:	47a8      	blx	r5
	memcpy (RegParams.pOtherChParams, AdvChannels920KR, sizeof(AdvChannels920KR) );
    3166:	0020      	movs	r0, r4
    3168:	308c      	adds	r0, #140	; 0x8c
    316a:	2224      	movs	r2, #36	; 0x24
    316c:	495e      	ldr	r1, [pc, #376]	; (32e8 <LORAReg_InitKR+0x278>)
    316e:	47a8      	blx	r5
    3170:	2103      	movs	r1, #3
    3172:	2003      	movs	r0, #3
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    3174:	4b55      	ldr	r3, [pc, #340]	; (32cc <LORAReg_InitKR+0x25c>)
    3176:	3640      	adds	r6, #64	; 0x40
		RegParams.pChParams[i].status = DISABLED;
    3178:	2500      	movs	r5, #0
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = UINT8_MAX;
    317a:	22d5      	movs	r2, #213	; 0xd5
    317c:	0052      	lsls	r2, r2, #1
    317e:	4690      	mov	r8, r2
    3180:	46b4      	mov	ip, r6
    for (i = 3; i < RegParams.maxChannels; i++)
    3182:	3a89      	subs	r2, #137	; 0x89
    3184:	3aff      	subs	r2, #255	; 0xff
    3186:	4692      	mov	sl, r2
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    3188:	0042      	lsls	r2, r0, #1
    318a:	791c      	ldrb	r4, [r3, #4]
    318c:	46a1      	mov	r9, r4
    318e:	795c      	ldrb	r4, [r3, #5]
    3190:	0224      	lsls	r4, r4, #8
    3192:	464f      	mov	r7, r9
    3194:	4327      	orrs	r7, r4
    3196:	799c      	ldrb	r4, [r3, #6]
    3198:	0424      	lsls	r4, r4, #16
    319a:	4327      	orrs	r7, r4
    319c:	79dc      	ldrb	r4, [r3, #7]
    319e:	0624      	lsls	r4, r4, #24
    31a0:	433c      	orrs	r4, r7
    31a2:	18a4      	adds	r4, r4, r2
    31a4:	7066      	strb	r6, [r4, #1]
		RegParams.pChParams[i].status = DISABLED;
    31a6:	791c      	ldrb	r4, [r3, #4]
    31a8:	46a1      	mov	r9, r4
    31aa:	795c      	ldrb	r4, [r3, #5]
    31ac:	0224      	lsls	r4, r4, #8
    31ae:	464f      	mov	r7, r9
    31b0:	4327      	orrs	r7, r4
    31b2:	799c      	ldrb	r4, [r3, #6]
    31b4:	0424      	lsls	r4, r4, #16
    31b6:	4327      	orrs	r7, r4
    31b8:	79dc      	ldrb	r4, [r3, #7]
    31ba:	0624      	lsls	r4, r4, #24
    31bc:	433c      	orrs	r4, r7
    31be:	54a5      	strb	r5, [r4, r2]
		RegParams.pOtherChParams[i].joinRequestChannel = DISABLED;
    31c0:	7a1c      	ldrb	r4, [r3, #8]
    31c2:	46a1      	mov	r9, r4
    31c4:	7a5c      	ldrb	r4, [r3, #9]
    31c6:	0224      	lsls	r4, r4, #8
    31c8:	464f      	mov	r7, r9
    31ca:	4327      	orrs	r7, r4
    31cc:	7a9c      	ldrb	r4, [r3, #10]
    31ce:	0424      	lsls	r4, r4, #16
    31d0:	4327      	orrs	r7, r4
    31d2:	7adc      	ldrb	r4, [r3, #11]
    31d4:	0624      	lsls	r4, r4, #24
    31d6:	433c      	orrs	r4, r7
    31d8:	1812      	adds	r2, r2, r0
    31da:	0092      	lsls	r2, r2, #2
    31dc:	1912      	adds	r2, r2, r4
    31de:	7255      	strb	r5, [r2, #9]
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = UINT8_MAX;
    31e0:	4642      	mov	r2, r8
    31e2:	4664      	mov	r4, ip
    31e4:	549c      	strb	r4, [r3, r2]
		RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    31e6:	3152      	adds	r1, #82	; 0x52
    31e8:	0089      	lsls	r1, r1, #2
    31ea:	1859      	adds	r1, r3, r1
    31ec:	724d      	strb	r5, [r1, #9]
    31ee:	728d      	strb	r5, [r1, #10]
    31f0:	72cd      	strb	r5, [r1, #11]
    31f2:	730d      	strb	r5, [r1, #12]
    for (i = 3; i < RegParams.maxChannels; i++)
    31f4:	3001      	adds	r0, #1
    31f6:	b2c0      	uxtb	r0, r0
    31f8:	0001      	movs	r1, r0
    31fa:	4652      	mov	r2, sl
    31fc:	569a      	ldrsb	r2, [r3, r2]
    31fe:	4290      	cmp	r0, r2
    3200:	dbc2      	blt.n	3188 <LORAReg_InitKR+0x118>
	RegParams.lastUsedChannelIndex = UINT8_MAX;
    3202:	4c32      	ldr	r4, [pc, #200]	; (32cc <LORAReg_InitKR+0x25c>)
    3204:	22ff      	movs	r2, #255	; 0xff
    3206:	2327      	movs	r3, #39	; 0x27
    3208:	54e2      	strb	r2, [r4, r3]
		memcpy (RegParams.pDrParams, DefaultDrParamsKR, sizeof(DefaultDrParamsKR) );
    320a:	7820      	ldrb	r0, [r4, #0]
    320c:	7863      	ldrb	r3, [r4, #1]
    320e:	021b      	lsls	r3, r3, #8
    3210:	4303      	orrs	r3, r0
    3212:	78a0      	ldrb	r0, [r4, #2]
    3214:	0400      	lsls	r0, r0, #16
    3216:	4303      	orrs	r3, r0
    3218:	78e0      	ldrb	r0, [r4, #3]
    321a:	0600      	lsls	r0, r0, #24
    321c:	4318      	orrs	r0, r3
    321e:	3acf      	subs	r2, #207	; 0xcf
    3220:	4932      	ldr	r1, [pc, #200]	; (32ec <LORAReg_InitKR+0x27c>)
    3222:	4b30      	ldr	r3, [pc, #192]	; (32e4 <LORAReg_InitKR+0x274>)
    3224:	4798      	blx	r3
		for(int8_t dataRate = 0; dataRate < RegParams.maxDataRate; dataRate++)
    3226:	7f63      	ldrb	r3, [r4, #29]
    3228:	2b00      	cmp	r3, #0
    322a:	dd17      	ble.n	325c <LORAReg_InitKR+0x1ec>
			RegParams.pDrParams[dataRate].modulation = MODULATION_LORA;
    322c:	4a27      	ldr	r2, [pc, #156]	; (32cc <LORAReg_InitKR+0x25c>)
    322e:	7811      	ldrb	r1, [r2, #0]
    3230:	7853      	ldrb	r3, [r2, #1]
    3232:	021b      	lsls	r3, r3, #8
    3234:	430b      	orrs	r3, r1
    3236:	7891      	ldrb	r1, [r2, #2]
    3238:	0409      	lsls	r1, r1, #16
    323a:	430b      	orrs	r3, r1
    323c:	78d1      	ldrb	r1, [r2, #3]
    323e:	0609      	lsls	r1, r1, #24
    3240:	4319      	orrs	r1, r3
    3242:	2300      	movs	r3, #0
    3244:	2501      	movs	r5, #1
			RegParams.pDrParams[dataRate].bandwidth = BW_125KHZ;
    3246:	2407      	movs	r4, #7
		for(int8_t dataRate = 0; dataRate < RegParams.maxDataRate; dataRate++)
    3248:	0010      	movs	r0, r2
			RegParams.pDrParams[dataRate].modulation = MODULATION_LORA;
    324a:	00da      	lsls	r2, r3, #3
    324c:	188a      	adds	r2, r1, r2
    324e:	71d5      	strb	r5, [r2, #7]
			RegParams.pDrParams[dataRate].bandwidth = BW_125KHZ;
    3250:	7194      	strb	r4, [r2, #6]
    3252:	3301      	adds	r3, #1
    3254:	b25b      	sxtb	r3, r3
		for(int8_t dataRate = 0; dataRate < RegParams.maxDataRate; dataRate++)
    3256:	7f42      	ldrb	r2, [r0, #29]
    3258:	4293      	cmp	r3, r2
    325a:	dbf6      	blt.n	324a <LORAReg_InitKR+0x1da>
		RegParams.regParamItems.fileid = PDS_FILE_REG_KR_06_IDX;
    325c:	4b1b      	ldr	r3, [pc, #108]	; (32cc <LORAReg_InitKR+0x25c>)
    325e:	2205      	movs	r2, #5
    3260:	2005      	movs	r0, #5
    3262:	21fa      	movs	r1, #250	; 0xfa
    3264:	0049      	lsls	r1, r1, #1
    3266:	5458      	strb	r0, [r3, r1]
		RegParams.regParamItems.alt_ch_item_id = 0;
    3268:	2000      	movs	r0, #0
    326a:	21f6      	movs	r1, #246	; 0xf6
    326c:	31ff      	adds	r1, #255	; 0xff
    326e:	5458      	strb	r0, [r3, r1]
    3270:	0019      	movs	r1, r3
    3272:	31f6      	adds	r1, #246	; 0xf6
    3274:	31ff      	adds	r1, #255	; 0xff
    3276:	7048      	strb	r0, [r1, #1]
		RegParams.regParamItems.ch_param_1_item_id = PDS_REG_KR_CH_PARAM_1;
    3278:	21f8      	movs	r1, #248	; 0xf8
    327a:	31ff      	adds	r1, #255	; 0xff
    327c:	5458      	strb	r0, [r3, r1]
    327e:	0019      	movs	r1, r3
    3280:	31f8      	adds	r1, #248	; 0xf8
    3282:	31ff      	adds	r1, #255	; 0xff
    3284:	704a      	strb	r2, [r1, #1]
		RegParams.regParamItems.ch_param_2_item_id = PDS_REG_KR_CH_PARAM_2;
    3286:	3001      	adds	r0, #1
    3288:	21fa      	movs	r1, #250	; 0xfa
    328a:	31ff      	adds	r1, #255	; 0xff
    328c:	5458      	strb	r0, [r3, r1]
    328e:	0019      	movs	r1, r3
    3290:	31fa      	adds	r1, #250	; 0xfa
    3292:	31ff      	adds	r1, #255	; 0xff
    3294:	704a      	strb	r2, [r1, #1]
		RegParams.regParamItems.sb_dc_prescalr_item_id = 0;
    3296:	2100      	movs	r1, #0
    3298:	22fc      	movs	r2, #252	; 0xfc
    329a:	32ff      	adds	r2, #255	; 0xff
    329c:	5499      	strb	r1, [r3, r2]
    329e:	001a      	movs	r2, r3
    32a0:	32fc      	adds	r2, #252	; 0xfc
    32a2:	32ff      	adds	r2, #255	; 0xff
    32a4:	7051      	strb	r1, [r2, #1]
		RegParams.regParamItems.band_item_id = 0;
    32a6:	22fe      	movs	r2, #254	; 0xfe
    32a8:	32ff      	adds	r2, #255	; 0xff
    32aa:	5499      	strb	r1, [r3, r2]
    32ac:	189b      	adds	r3, r3, r2
    32ae:	2200      	movs	r2, #0
    32b0:	705a      	strb	r2, [r3, #1]
		filemarks.fileMarkListAddr = aRegKrFid1PdsOps;
    32b2:	ab02      	add	r3, sp, #8
		filemarks.numItems =  (uint8_t)(PDS_REG_KR_FID1_MAX_VALUE & 0x00FF);
    32b4:	3202      	adds	r2, #2
    32b6:	711a      	strb	r2, [r3, #4]
		filemarks.fIDcb = LorawanReg_KR_Pds_Cb;
    32b8:	4a0d      	ldr	r2, [pc, #52]	; (32f0 <LORAReg_InitKR+0x280>)
		PDS_RegFile(PDS_FILE_REG_KR_06_IDX,filemarks);
    32ba:	9200      	str	r2, [sp, #0]
    32bc:	490d      	ldr	r1, [pc, #52]	; (32f4 <LORAReg_InitKR+0x284>)
    32be:	9a03      	ldr	r2, [sp, #12]
    32c0:	4b0d      	ldr	r3, [pc, #52]	; (32f8 <LORAReg_InitKR+0x288>)
    32c2:	3004      	adds	r0, #4
    32c4:	4c0d      	ldr	r4, [pc, #52]	; (32fc <LORAReg_InitKR+0x28c>)
    32c6:	47a0      	blx	r4
	StackRetStatus_t result = LORAWAN_SUCCESS;
    32c8:	2408      	movs	r4, #8
    32ca:	e738      	b.n	313e <LORAReg_InitKR+0xce>
    32cc:	20000b48 	.word	0x20000b48
    32d0:	20000b44 	.word	0x20000b44
    32d4:	000067b1 	.word	0x000067b1
    32d8:	00006b71 	.word	0x00006b71
    32dc:	00006d31 	.word	0x00006d31
    32e0:	000128e0 	.word	0x000128e0
    32e4:	000112d5 	.word	0x000112d5
    32e8:	000128bc 	.word	0x000128bc
    32ec:	000128e8 	.word	0x000128e8
    32f0:	0000306d 	.word	0x0000306d
    32f4:	2000093c 	.word	0x2000093c
    32f8:	00012918 	.word	0x00012918
    32fc:	00001ec9 	.word	0x00001ec9

00003300 <LorawanReg_NA_Pds_Cb>:

#if (ENABLE_PDS == 1)
void LorawanReg_NA_Pds_Cb(void)
{
	
}
    3300:	4770      	bx	lr
	...

00003304 <LORAReg_InitNA>:
{
    3304:	b5f0      	push	{r4, r5, r6, r7, lr}
    3306:	46de      	mov	lr, fp
    3308:	4657      	mov	r7, sl
    330a:	464e      	mov	r6, r9
    330c:	4645      	mov	r5, r8
    330e:	b5e0      	push	{r5, r6, r7, lr}
    3310:	b089      	sub	sp, #36	; 0x24
    3312:	9003      	str	r0, [sp, #12]
    RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_NA;
    3314:	4c68      	ldr	r4, [pc, #416]	; (34b8 <LORAReg_InitNA+0x1b4>)
    3316:	2602      	movs	r6, #2
    3318:	2302      	movs	r3, #2
    331a:	4698      	mov	r8, r3
    331c:	77a6      	strb	r6, [r4, #30]
	RegParams.maxChannels = MAX_CHANNELS_T1;
    331e:	2248      	movs	r2, #72	; 0x48
    3320:	2322      	movs	r3, #34	; 0x22
    3322:	54e2      	strb	r2, [r4, r3]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_NA;
    3324:	3b1b      	subs	r3, #27
    3326:	77e3      	strb	r3, [r4, #31]
	RegParams.maxTxPwr = MAX_TX_PWR_NA;
    3328:	3a2a      	subs	r2, #42	; 0x2a
    332a:	3319      	adds	r3, #25
    332c:	54e2      	strb	r2, [r4, r3]
	RegParams.pChParams = &RegParams.cmnParams.paramsType1.chParams[0];
    332e:	0023      	movs	r3, r4
    3330:	339c      	adds	r3, #156	; 0x9c
    3332:	2700      	movs	r7, #0
    3334:	7123      	strb	r3, [r4, #4]
    3336:	0a1a      	lsrs	r2, r3, #8
    3338:	7162      	strb	r2, [r4, #5]
    333a:	0c1a      	lsrs	r2, r3, #16
    333c:	71a2      	strb	r2, [r4, #6]
    333e:	0e1a      	lsrs	r2, r3, #24
    3340:	71e2      	strb	r2, [r4, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType1.DRParams[0];
    3342:	0025      	movs	r5, r4
    3344:	352c      	adds	r5, #44	; 0x2c
    3346:	7025      	strb	r5, [r4, #0]
    3348:	0a2a      	lsrs	r2, r5, #8
    334a:	7062      	strb	r2, [r4, #1]
    334c:	0c2a      	lsrs	r2, r5, #16
    334e:	70a2      	strb	r2, [r4, #2]
    3350:	0e2a      	lsrs	r2, r5, #24
    3352:	70e2      	strb	r2, [r4, #3]
	RegParams.MinNewChIndex = 0xFF;
    3354:	22ff      	movs	r2, #255	; 0xff
    3356:	7662      	strb	r2, [r4, #25]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_NA;
    3358:	3af5      	subs	r2, #245	; 0xf5
    335a:	76a2      	strb	r2, [r4, #26]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_NA;
    335c:	2008      	movs	r0, #8
    335e:	2208      	movs	r2, #8
    3360:	76e2      	strb	r2, [r4, #27]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_NA;
    3362:	2260      	movs	r2, #96	; 0x60
    3364:	4252      	negs	r2, r2
    3366:	4694      	mov	ip, r2
    3368:	7522      	strb	r2, [r4, #20]
    336a:	2270      	movs	r2, #112	; 0x70
    336c:	7562      	strb	r2, [r4, #21]
    336e:	75a0      	strb	r0, [r4, #22]
    3370:	2237      	movs	r2, #55	; 0x37
    3372:	75e2      	strb	r2, [r4, #23]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_NA;
    3374:	2218      	movs	r2, #24
    3376:	7622      	strb	r2, [r4, #24]
	RegParams.minDataRate = MAC_DATARATE_MIN_NA;
    3378:	2204      	movs	r2, #4
    337a:	4691      	mov	r9, r2
    337c:	7722      	strb	r2, [r4, #28]
	RegParams.maxDataRate = MAC_DATARATE_MAX_NA;
    337e:	7767      	strb	r7, [r4, #29]
	RegParams.cmnParams.paramsType1.Max_125khzChan = MAX_CHANNELS_BANDWIDTH_125_NA;
    3380:	2240      	movs	r2, #64	; 0x40
    3382:	4692      	mov	sl, r2
    3384:	32fc      	adds	r2, #252	; 0xfc
    3386:	4651      	mov	r1, sl
    3388:	54a1      	strb	r1, [r4, r2]
	RegParams.cmnParams.paramsType1.Max_500khzChan = MAX_CHANNELS_BANDWIDTH_500_NA;
    338a:	223e      	movs	r2, #62	; 0x3e
    338c:	32ff      	adds	r2, #255	; 0xff
    338e:	2108      	movs	r1, #8
    3390:	54a1      	strb	r1, [r4, r2]
	RegParams.cmnParams.paramsType1.minTxDR = DR0;
    3392:	3a05      	subs	r2, #5
    3394:	54a7      	strb	r7, [r4, r2]
	RegParams.cmnParams.paramsType1.maxTxDR = DR4;
    3396:	223a      	movs	r2, #58	; 0x3a
    3398:	32ff      	adds	r2, #255	; 0xff
    339a:	4649      	mov	r1, r9
    339c:	54a1      	strb	r1, [r4, r2]
	RegParams.cmnParams.paramsType1.minRxDR = DR8;
    339e:	3201      	adds	r2, #1
    33a0:	2108      	movs	r1, #8
    33a2:	54a1      	strb	r1, [r4, r2]
	RegParams.cmnParams.paramsType1.maxRxDR = DR13;
    33a4:	3a2e      	subs	r2, #46	; 0x2e
    33a6:	3aff      	subs	r2, #255	; 0xff
    33a8:	213c      	movs	r1, #60	; 0x3c
    33aa:	31ff      	adds	r1, #255	; 0xff
    33ac:	5462      	strb	r2, [r4, r1]
	RegParams.cmnParams.paramsType1.RxParamWindowOffset1 = 10;
    33ae:	3103      	adds	r1, #3
    33b0:	220a      	movs	r2, #10
    33b2:	5462      	strb	r2, [r4, r1]
	RegParams.cmnParams.paramsType1.UpStreamCh0Freq = UPSTREAM_CH0_NA;
    33b4:	2260      	movs	r2, #96	; 0x60
    33b6:	3912      	subs	r1, #18
    33b8:	5462      	strb	r2, [r4, r1]
    33ba:	0021      	movs	r1, r4
    33bc:	312d      	adds	r1, #45	; 0x2d
    33be:	31ff      	adds	r1, #255	; 0xff
    33c0:	2201      	movs	r2, #1
    33c2:	704a      	strb	r2, [r1, #1]
    33c4:	2238      	movs	r2, #56	; 0x38
    33c6:	4252      	negs	r2, r2
    33c8:	708a      	strb	r2, [r1, #2]
    33ca:	2235      	movs	r2, #53	; 0x35
    33cc:	70ca      	strb	r2, [r1, #3]
	RegParams.cmnParams.paramsType1.UpStreamCh64Freq = UPSTREAM_CH64_NA;
    33ce:	2240      	movs	r2, #64	; 0x40
    33d0:	4252      	negs	r2, r2
    33d2:	2198      	movs	r1, #152	; 0x98
    33d4:	0049      	lsls	r1, r1, #1
    33d6:	5462      	strb	r2, [r4, r1]
    33d8:	0021      	movs	r1, r4
    33da:	3131      	adds	r1, #49	; 0x31
    33dc:	31ff      	adds	r1, #255	; 0xff
    33de:	2251      	movs	r2, #81	; 0x51
    33e0:	4252      	negs	r2, r2
    33e2:	704a      	strb	r2, [r1, #1]
    33e4:	222e      	movs	r2, #46	; 0x2e
    33e6:	4252      	negs	r2, r2
    33e8:	708a      	strb	r2, [r1, #2]
    33ea:	2235      	movs	r2, #53	; 0x35
    33ec:	70ca      	strb	r2, [r1, #3]
	RegParams.cmnParams.paramsType1.DownStreamCh0Freq = DOWNSTREAM_CH0_NA;
    33ee:	219a      	movs	r1, #154	; 0x9a
    33f0:	0049      	lsls	r1, r1, #1
    33f2:	4662      	mov	r2, ip
    33f4:	5462      	strb	r2, [r4, r1]
    33f6:	0021      	movs	r1, r4
    33f8:	3135      	adds	r1, #53	; 0x35
    33fa:	31ff      	adds	r1, #255	; 0xff
    33fc:	2270      	movs	r2, #112	; 0x70
    33fe:	704a      	strb	r2, [r1, #1]
    3400:	7088      	strb	r0, [r1, #2]
    3402:	2037      	movs	r0, #55	; 0x37
    3404:	70c8      	strb	r0, [r1, #3]
	RegParams.Rx1DrOffset = 3;
    3406:	2003      	movs	r0, #3
    3408:	2124      	movs	r1, #36	; 0x24
    340a:	5460      	strb	r0, [r4, r1]
	RegParams.maxTxPwrIndx = 10;
    340c:	3101      	adds	r1, #1
    340e:	220a      	movs	r2, #10
    3410:	5462      	strb	r2, [r4, r1]
	RegParams.band = ismBand;
    3412:	2226      	movs	r2, #38	; 0x26
    3414:	4669      	mov	r1, sp
    3416:	7b09      	ldrb	r1, [r1, #12]
    3418:	54a1      	strb	r1, [r4, r2]
	memcpy (RegParams.pChParams, DefaultChannels915, sizeof(DefaultChannels915) );
    341a:	326a      	adds	r2, #106	; 0x6a
    341c:	4927      	ldr	r1, [pc, #156]	; (34bc <LORAReg_InitNA+0x1b8>)
    341e:	0018      	movs	r0, r3
    3420:	4b27      	ldr	r3, [pc, #156]	; (34c0 <LORAReg_InitNA+0x1bc>)
    3422:	4699      	mov	r9, r3
    3424:	4798      	blx	r3
	memcpy (RegParams.pDrParams, DefaultDrParamsNA, sizeof(DefaultDrParamsNA) );
    3426:	2270      	movs	r2, #112	; 0x70
    3428:	4926      	ldr	r1, [pc, #152]	; (34c4 <LORAReg_InitNA+0x1c0>)
    342a:	0028      	movs	r0, r5
    342c:	47c8      	blx	r9
	RegParams.cmnParams.paramsType1.alternativeChannel = 0;
    342e:	2340      	movs	r3, #64	; 0x40
    3430:	33ff      	adds	r3, #255	; 0xff
    3432:	54e7      	strb	r7, [r4, r3]
	RegParams.regParamItems.fileid = PDS_FILE_REG_NA_03_IDX;
    3434:	33b5      	adds	r3, #181	; 0xb5
    3436:	54e6      	strb	r6, [r4, r3]
	RegParams.regParamItems.alt_ch_item_id = PDS_REG_NA_ALT_CH;
    3438:	2200      	movs	r2, #0
    343a:	23f6      	movs	r3, #246	; 0xf6
    343c:	33ff      	adds	r3, #255	; 0xff
    343e:	54e2      	strb	r2, [r4, r3]
    3440:	0023      	movs	r3, r4
    3442:	33f6      	adds	r3, #246	; 0xf6
    3444:	33ff      	adds	r3, #255	; 0xff
    3446:	4642      	mov	r2, r8
    3448:	705a      	strb	r2, [r3, #1]
	RegParams.regParamItems.ch_param_1_item_id = PDS_REG_NA_CH_PARAM;
    344a:	23f8      	movs	r3, #248	; 0xf8
    344c:	33ff      	adds	r3, #255	; 0xff
    344e:	2201      	movs	r2, #1
    3450:	54e2      	strb	r2, [r4, r3]
    3452:	0023      	movs	r3, r4
    3454:	33f8      	adds	r3, #248	; 0xf8
    3456:	33ff      	adds	r3, #255	; 0xff
    3458:	4642      	mov	r2, r8
    345a:	705a      	strb	r2, [r3, #1]
	RegParams.regParamItems.ch_param_2_item_id = 0;
    345c:	2200      	movs	r2, #0
    345e:	23fa      	movs	r3, #250	; 0xfa
    3460:	33ff      	adds	r3, #255	; 0xff
    3462:	54e2      	strb	r2, [r4, r3]
    3464:	0023      	movs	r3, r4
    3466:	33fa      	adds	r3, #250	; 0xfa
    3468:	33ff      	adds	r3, #255	; 0xff
    346a:	705a      	strb	r2, [r3, #1]
	RegParams.regParamItems.sb_dc_prescalr_item_id = 0;
    346c:	23fc      	movs	r3, #252	; 0xfc
    346e:	33ff      	adds	r3, #255	; 0xff
    3470:	54e2      	strb	r2, [r4, r3]
    3472:	0023      	movs	r3, r4
    3474:	33fc      	adds	r3, #252	; 0xfc
    3476:	33ff      	adds	r3, #255	; 0xff
    3478:	705a      	strb	r2, [r3, #1]
	RegParams.regParamItems.band_item_id = 0;
    347a:	23fe      	movs	r3, #254	; 0xfe
    347c:	33ff      	adds	r3, #255	; 0xff
    347e:	54e2      	strb	r2, [r4, r3]
    3480:	18e4      	adds	r4, r4, r3
    3482:	2300      	movs	r3, #0
    3484:	7063      	strb	r3, [r4, #1]
	filemarks.fileMarkListAddr = aRegNaPdsOps;
    3486:	ab04      	add	r3, sp, #16
	filemarks.numItems =  (uint8_t)(PDS_REG_NA_MAX_VALUE & 0x00FF);
    3488:	711e      	strb	r6, [r3, #4]
	filemarks.fIDcb = LorawanReg_NA_Pds_Cb;
    348a:	4a0f      	ldr	r2, [pc, #60]	; (34c8 <LORAReg_InitNA+0x1c4>)
	PDS_RegFile(PDS_FILE_REG_NA_03_IDX,filemarks);
    348c:	9200      	str	r2, [sp, #0]
    348e:	490f      	ldr	r1, [pc, #60]	; (34cc <LORAReg_InitNA+0x1c8>)
    3490:	9a05      	ldr	r2, [sp, #20]
    3492:	4b0f      	ldr	r3, [pc, #60]	; (34d0 <LORAReg_InitNA+0x1cc>)
    3494:	2002      	movs	r0, #2
    3496:	4c0f      	ldr	r4, [pc, #60]	; (34d4 <LORAReg_InitNA+0x1d0>)
    3498:	47a0      	blx	r4
    LORAREG_InitGetAttrFnPtrsNA();
    349a:	4b0f      	ldr	r3, [pc, #60]	; (34d8 <LORAReg_InitNA+0x1d4>)
    349c:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsNA();
    349e:	4b0f      	ldr	r3, [pc, #60]	; (34dc <LORAReg_InitNA+0x1d8>)
    34a0:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsNA();
    34a2:	4b0f      	ldr	r3, [pc, #60]	; (34e0 <LORAReg_InitNA+0x1dc>)
    34a4:	4798      	blx	r3
}
    34a6:	2008      	movs	r0, #8
    34a8:	b009      	add	sp, #36	; 0x24
    34aa:	bc3c      	pop	{r2, r3, r4, r5}
    34ac:	4690      	mov	r8, r2
    34ae:	4699      	mov	r9, r3
    34b0:	46a2      	mov	sl, r4
    34b2:	46ab      	mov	fp, r5
    34b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    34b6:	46c0      	nop			; (mov r8, r8)
    34b8:	20000b48 	.word	0x20000b48
    34bc:	00012928 	.word	0x00012928
    34c0:	000112d5 	.word	0x000112d5
    34c4:	000129b8 	.word	0x000129b8
    34c8:	00003301 	.word	0x00003301
    34cc:	20000940 	.word	0x20000940
    34d0:	00012a28 	.word	0x00012a28
    34d4:	00001ec9 	.word	0x00001ec9
    34d8:	00006069 	.word	0x00006069
    34dc:	000068f1 	.word	0x000068f1
    34e0:	00006bd9 	.word	0x00006bd9

000034e4 <InValidGetAttr>:
/****************************** FUNCTIONS *************************************/

StackRetStatus_t InValidGetAttr(LorawanRegionalAttributes_t attr, void * attrInput, void * attrOutput)
{
	return LORAWAN_INVALID_REQUEST;
}
    34e4:	2015      	movs	r0, #21
    34e6:	4770      	bx	lr

000034e8 <InValidAttr>:

StackRetStatus_t InValidAttr(LorawanRegionalAttributes_t attr, void * attrInput)
{
	return LORAWAN_INVALID_REQUEST;
}
    34e8:	2015      	movs	r0, #21
    34ea:	4770      	bx	lr

000034ec <LORAREG_GetAttr_MaxChannel>:
#endif


static StackRetStatus_t LORAREG_GetAttr_MaxChannel(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.maxChannels;
    34ec:	2322      	movs	r3, #34	; 0x22
    34ee:	4902      	ldr	r1, [pc, #8]	; (34f8 <LORAREG_GetAttr_MaxChannel+0xc>)
    34f0:	5ccb      	ldrb	r3, [r1, r3]
    34f2:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    34f4:	2008      	movs	r0, #8
    34f6:	4770      	bx	lr
    34f8:	20000b48 	.word	0x20000b48

000034fc <LORAREG_GetAttr_MinNewChIndex>:


static StackRetStatus_t LORAREG_GetAttr_MinNewChIndex(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	*(uint8_t *)attrOutput = (uint8_t)RegParams.MinNewChIndex;
    34fc:	4b04      	ldr	r3, [pc, #16]	; (3510 <LORAREG_GetAttr_MinNewChIndex+0x14>)
    34fe:	7e59      	ldrb	r1, [r3, #25]
    3500:	7011      	strb	r1, [r2, #0]
	if(RegParams.MinNewChIndex == 0xFF)
    3502:	7e5b      	ldrb	r3, [r3, #25]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    3504:	2008      	movs	r0, #8
	if(RegParams.MinNewChIndex == 0xFF)
    3506:	2bff      	cmp	r3, #255	; 0xff
    3508:	d000      	beq.n	350c <LORAREG_GetAttr_MinNewChIndex+0x10>
	{
		result = LORAWAN_INVALID_PARAMETER;
	}
	
	return result;
}
    350a:	4770      	bx	lr
		result = LORAWAN_INVALID_PARAMETER;
    350c:	3002      	adds	r0, #2
    350e:	e7fc      	b.n	350a <LORAREG_GetAttr_MinNewChIndex+0xe>
    3510:	20000b48 	.word	0x20000b48

00003514 <LORAREG_GetAttr_DefRx1DataRate>:
}
#endif

static StackRetStatus_t LORAREG_GetAttr_DefRx1DataRate(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.DefRx1DataRate;
    3514:	4b02      	ldr	r3, [pc, #8]	; (3520 <LORAREG_GetAttr_DefRx1DataRate+0xc>)
    3516:	7e9b      	ldrb	r3, [r3, #26]
    3518:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    351a:	2008      	movs	r0, #8
    351c:	4770      	bx	lr
    351e:	46c0      	nop			; (mov r8, r8)
    3520:	20000b48 	.word	0x20000b48

00003524 <LORAREG_GetAttr_DefRx2DataRate>:

static StackRetStatus_t LORAREG_GetAttr_DefRx2DataRate(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.DefRx2DataRate;
    3524:	4b02      	ldr	r3, [pc, #8]	; (3530 <LORAREG_GetAttr_DefRx2DataRate+0xc>)
    3526:	7edb      	ldrb	r3, [r3, #27]
    3528:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    352a:	2008      	movs	r0, #8
    352c:	4770      	bx	lr
    352e:	46c0      	nop			; (mov r8, r8)
    3530:	20000b48 	.word	0x20000b48

00003534 <LORAREG_GetAttr_RegFeatures>:
	return LORAWAN_SUCCESS;
}

static StackRetStatus_t LORAREG_GetAttr_RegFeatures(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint32_t *)attrOutput = RegParams.FeaturesSupport;
    3534:	4b02      	ldr	r3, [pc, #8]	; (3540 <LORAREG_GetAttr_RegFeatures+0xc>)
    3536:	7e1b      	ldrb	r3, [r3, #24]
    3538:	6013      	str	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    353a:	2008      	movs	r0, #8
    353c:	4770      	bx	lr
    353e:	46c0      	nop			; (mov r8, r8)
    3540:	20000b48 	.word	0x20000b48

00003544 <LORAREG_GetAttr_DataRange>:

static StackRetStatus_t LORAREG_GetAttr_DataRange(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
    3544:	b530      	push	{r4, r5, lr}
    3546:	b083      	sub	sp, #12
    3548:	0015      	movs	r5, r2
	StackRetStatus_t result = LORAWAN_SUCCESS;
	uint8_t  channelId;
	ValChId_t valChid;
	valChid.channelIndex = *(uint8_t *)attrInput;
    354a:	780c      	ldrb	r4, [r1, #0]
    354c:	a901      	add	r1, sp, #4
    354e:	700c      	strb	r4, [r1, #0]
	valChid.allowedForDefaultChannels = ALL_CHANNELS;
    3550:	2301      	movs	r3, #1
    3552:	704b      	strb	r3, [r1, #1]
	channelId = *(uint8_t *)attrInput;
	if (pValidateAttr[CHANNEL_ID](CHANNEL_ID, &valChid) == LORAWAN_SUCCESS)
    3554:	4b0d      	ldr	r3, [pc, #52]	; (358c <LORAREG_GetAttr_DataRange+0x48>)
    3556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    3558:	2015      	movs	r0, #21
    355a:	4798      	blx	r3
    355c:	2808      	cmp	r0, #8
    355e:	d004      	beq.n	356a <LORAREG_GetAttr_DataRange+0x26>
	{
	    *(uint8_t *)attrOutput = RegParams.pChParams[channelId].dataRange.value;
	}
	else
	{
		*(uint8_t *)attrOutput = 0xFF;
    3560:	23ff      	movs	r3, #255	; 0xff
    3562:	702b      	strb	r3, [r5, #0]
	    result = LORAWAN_INVALID_PARAMETER;
    3564:	200a      	movs	r0, #10
	}
	return result;
}
    3566:	b003      	add	sp, #12
    3568:	bd30      	pop	{r4, r5, pc}
	    *(uint8_t *)attrOutput = RegParams.pChParams[channelId].dataRange.value;
    356a:	4909      	ldr	r1, [pc, #36]	; (3590 <LORAREG_GetAttr_DataRange+0x4c>)
    356c:	790b      	ldrb	r3, [r1, #4]
    356e:	794a      	ldrb	r2, [r1, #5]
    3570:	0212      	lsls	r2, r2, #8
    3572:	4313      	orrs	r3, r2
    3574:	798a      	ldrb	r2, [r1, #6]
    3576:	0412      	lsls	r2, r2, #16
    3578:	431a      	orrs	r2, r3
    357a:	79cb      	ldrb	r3, [r1, #7]
    357c:	061b      	lsls	r3, r3, #24
    357e:	431a      	orrs	r2, r3
    3580:	0063      	lsls	r3, r4, #1
    3582:	189b      	adds	r3, r3, r2
    3584:	785b      	ldrb	r3, [r3, #1]
    3586:	702b      	strb	r3, [r5, #0]
    3588:	e7ed      	b.n	3566 <LORAREG_GetAttr_DataRange+0x22>
    358a:	46c0      	nop			; (mov r8, r8)
    358c:	200003e8 	.word	0x200003e8
    3590:	20000b48 	.word	0x20000b48

00003594 <LORAREG_GetAttr_ChIdStatus>:
}
#endif


static StackRetStatus_t LORAREG_GetAttr_ChIdStatus(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
    3594:	b530      	push	{r4, r5, lr}
    3596:	b083      	sub	sp, #12
    3598:	0015      	movs	r5, r2
	StackRetStatus_t result = LORAWAN_SUCCESS;
	ValChId_t val_chid;
	uint8_t  channelId;
	channelId = *(uint8_t *)attrInput;
    359a:	780c      	ldrb	r4, [r1, #0]
	val_chid.channelIndex = *(uint8_t *)attrInput;
    359c:	a901      	add	r1, sp, #4
    359e:	700c      	strb	r4, [r1, #0]
	val_chid.allowedForDefaultChannels = ALL_CHANNELS;
    35a0:	2301      	movs	r3, #1
    35a2:	704b      	strb	r3, [r1, #1]
	
	if (pValidateAttr[CHANNEL_ID](CHANNEL_ID, &val_chid) == LORAWAN_SUCCESS)
    35a4:	4b0c      	ldr	r3, [pc, #48]	; (35d8 <LORAREG_GetAttr_ChIdStatus+0x44>)
    35a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    35a8:	2015      	movs	r0, #21
    35aa:	4798      	blx	r3
    35ac:	2808      	cmp	r0, #8
    35ae:	d004      	beq.n	35ba <LORAREG_GetAttr_ChIdStatus+0x26>
	{
		*(uint8_t *)attrOutput = RegParams.pChParams[channelId].status;
	}
	else
	{
		*(uint8_t *)attrOutput = DISABLED;
    35b0:	2300      	movs	r3, #0
    35b2:	702b      	strb	r3, [r5, #0]
		result = LORAWAN_INVALID_PARAMETER;
    35b4:	200a      	movs	r0, #10
	}
	return result;
}
    35b6:	b003      	add	sp, #12
    35b8:	bd30      	pop	{r4, r5, pc}
		*(uint8_t *)attrOutput = RegParams.pChParams[channelId].status;
    35ba:	4908      	ldr	r1, [pc, #32]	; (35dc <LORAREG_GetAttr_ChIdStatus+0x48>)
    35bc:	790a      	ldrb	r2, [r1, #4]
    35be:	794b      	ldrb	r3, [r1, #5]
    35c0:	021b      	lsls	r3, r3, #8
    35c2:	4313      	orrs	r3, r2
    35c4:	798a      	ldrb	r2, [r1, #6]
    35c6:	0412      	lsls	r2, r2, #16
    35c8:	4313      	orrs	r3, r2
    35ca:	79ca      	ldrb	r2, [r1, #7]
    35cc:	0612      	lsls	r2, r2, #24
    35ce:	431a      	orrs	r2, r3
    35d0:	0064      	lsls	r4, r4, #1
    35d2:	5ca3      	ldrb	r3, [r4, r2]
    35d4:	702b      	strb	r3, [r5, #0]
    35d6:	e7ee      	b.n	35b6 <LORAREG_GetAttr_ChIdStatus+0x22>
    35d8:	200003e8 	.word	0x200003e8
    35dc:	20000b48 	.word	0x20000b48

000035e0 <LORAREG_GetAttr_DutyCycleT1>:

#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t LORAREG_GetAttr_DutyCycleT1(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = UINT16_MAX;
    35e0:	2301      	movs	r3, #1
    35e2:	425b      	negs	r3, r3
    35e4:	8013      	strh	r3, [r2, #0]
	return LORAWAN_INVALID_PARAMETER;
}
    35e6:	200a      	movs	r0, #10
    35e8:	4770      	bx	lr

000035ea <LORAREG_GetAttr_MinDutyCycleTimer>:
#endif

#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t LORAREG_GetAttr_MinDutyCycleTimer(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint32_t *)attrOutput = UINT32_MAX;
    35ea:	2301      	movs	r3, #1
    35ec:	425b      	negs	r3, r3
    35ee:	6013      	str	r3, [r2, #0]
	return LORAWAN_INVALID_PARAMETER;
}
    35f0:	200a      	movs	r0, #10
    35f2:	4770      	bx	lr

000035f4 <LORAREG_GetAttr_MacRecvDelay1>:
#endif

static StackRetStatus_t LORAREG_GetAttr_MacRecvDelay1(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = RECEIVE_DELAY1;
    35f4:	23fa      	movs	r3, #250	; 0xfa
    35f6:	009b      	lsls	r3, r3, #2
    35f8:	8013      	strh	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    35fa:	2008      	movs	r0, #8
    35fc:	4770      	bx	lr

000035fe <LORAREG_GetAttr_MacRecvDelay2>:

static StackRetStatus_t LORAREG_GetAttr_MacRecvDelay2(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = RECEIVE_DELAY2;
    35fe:	23fa      	movs	r3, #250	; 0xfa
    3600:	00db      	lsls	r3, r3, #3
    3602:	8013      	strh	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    3604:	2008      	movs	r0, #8
    3606:	4770      	bx	lr

00003608 <LORAREG_GetAttr_MacJoinAcptDelay1>:

static StackRetStatus_t LORAREG_GetAttr_MacJoinAcptDelay1(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = JOIN_ACCEPT_DELAY1;
    3608:	4b01      	ldr	r3, [pc, #4]	; (3610 <LORAREG_GetAttr_MacJoinAcptDelay1+0x8>)
    360a:	8013      	strh	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    360c:	2008      	movs	r0, #8
    360e:	4770      	bx	lr
    3610:	00001388 	.word	0x00001388

00003614 <LORAREG_GetAttr_MacJoinAcptDelay2>:

static StackRetStatus_t LORAREG_GetAttr_MacJoinAcptDelay2(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = JOIN_ACCEPT_DELAY2;
    3614:	4b01      	ldr	r3, [pc, #4]	; (361c <LORAREG_GetAttr_MacJoinAcptDelay2+0x8>)
    3616:	8013      	strh	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    3618:	2008      	movs	r0, #8
    361a:	4770      	bx	lr
    361c:	00001770 	.word	0x00001770

00003620 <LORAREG_GetAttr_MacAckTimeout>:

static StackRetStatus_t LORAREG_GetAttr_MacAckTimeout(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = ACK_TIMEOUT;
    3620:	23fa      	movs	r3, #250	; 0xfa
    3622:	00db      	lsls	r3, r3, #3
    3624:	8013      	strh	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    3626:	2008      	movs	r0, #8
    3628:	4770      	bx	lr

0000362a <LORAREG_GetAttr_MacAdrAckDelay>:

static StackRetStatus_t LORAREG_GetAttr_MacAdrAckDelay(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = ADR_ACK_DELAY;
    362a:	2320      	movs	r3, #32
    362c:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    362e:	2008      	movs	r0, #8
    3630:	4770      	bx	lr

00003632 <LORAREG_GetAttr_MacAdrAckLimit>:

static StackRetStatus_t LORAREG_GetAttr_MacAdrAckLimit(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = ADR_ACK_LIMIT;
    3632:	2340      	movs	r3, #64	; 0x40
    3634:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    3636:	2008      	movs	r0, #8
    3638:	4770      	bx	lr

0000363a <LORAREG_GetAttr_MacMaxFcntGap>:

static StackRetStatus_t LORAREG_GetAttr_MacMaxFcntGap(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = MAX_FCNT_GAP;
    363a:	2380      	movs	r3, #128	; 0x80
    363c:	01db      	lsls	r3, r3, #7
    363e:	8013      	strh	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    3640:	2008      	movs	r0, #8
    3642:	4770      	bx	lr

00003644 <LORAREG_GetAttr_RegDefTxPwr>:

static StackRetStatus_t LORAREG_GetAttr_RegDefTxPwr(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.MacTxPower;
    3644:	4b02      	ldr	r3, [pc, #8]	; (3650 <LORAREG_GetAttr_RegDefTxPwr+0xc>)
    3646:	7fdb      	ldrb	r3, [r3, #31]
    3648:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    364a:	2008      	movs	r0, #8
    364c:	4770      	bx	lr
    364e:	46c0      	nop			; (mov r8, r8)
    3650:	20000b48 	.word	0x20000b48

00003654 <LORAREG_GetAttr_RegDefTxDR>:

static StackRetStatus_t LORAREG_GetAttr_RegDefTxDR(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.TxCurDataRate;
    3654:	4b02      	ldr	r3, [pc, #8]	; (3660 <LORAREG_GetAttr_RegDefTxDR+0xc>)
    3656:	7f9b      	ldrb	r3, [r3, #30]
    3658:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    365a:	2008      	movs	r0, #8
    365c:	4770      	bx	lr
    365e:	46c0      	nop			; (mov r8, r8)
    3660:	20000b48 	.word	0x20000b48

00003664 <LORAREG_GetAttr_CurChIndx>:

static StackRetStatus_t LORAREG_GetAttr_CurChIndx(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.lastUsedChannelIndex;
    3664:	2327      	movs	r3, #39	; 0x27
    3666:	4902      	ldr	r1, [pc, #8]	; (3670 <LORAREG_GetAttr_CurChIndx+0xc>)
    3668:	5ccb      	ldrb	r3, [r1, r3]
    366a:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    366c:	2008      	movs	r0, #8
    366e:	4770      	bx	lr
    3670:	20000b48 	.word	0x20000b48

00003674 <LORAREG_GetAttr_DefLBTParams>:
static StackRetStatus_t LORAREG_GetAttr_DefLBTParams(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	LorawanLBTParams_t* lorawanLBTParams;
	lorawanLBTParams = (LorawanLBTParams_t *)attrOutput;
			
	lorawanLBTParams->lbtNumOfSamples	= RegParams.cmnParams.paramsType2.LBT_RSSISamplesCount;
    3674:	4b09      	ldr	r3, [pc, #36]	; (369c <LORAREG_GetAttr_DefLBTParams+0x28>)
    3676:	21d4      	movs	r1, #212	; 0xd4
    3678:	0049      	lsls	r1, r1, #1
    367a:	5c59      	ldrb	r1, [r3, r1]
    367c:	7191      	strb	r1, [r2, #6]
	lorawanLBTParams->lbtScanPeriod		= RegParams.cmnParams.paramsType2.LBTScanPeriod;
    367e:	21d3      	movs	r1, #211	; 0xd3
    3680:	0049      	lsls	r1, r1, #1
    3682:	5c59      	ldrb	r1, [r3, r1]
    3684:	8011      	strh	r1, [r2, #0]
	lorawanLBTParams->lbtThreshold		= RegParams.cmnParams.paramsType2.LBTSignalThreshold;
    3686:	21a8      	movs	r1, #168	; 0xa8
    3688:	31ff      	adds	r1, #255	; 0xff
    368a:	565b      	ldrsb	r3, [r3, r1]
    368c:	8053      	strh	r3, [r2, #2]
	lorawanLBTParams->lbtTransmitOn		= LBT_ENABLE;
    368e:	2301      	movs	r3, #1
    3690:	71d3      	strb	r3, [r2, #7]
	lorawanLBTParams->maxRetryChannels	= LBT_MAX_RETRY_CHANNELS;
    3692:	3304      	adds	r3, #4
    3694:	8093      	strh	r3, [r2, #4]
	return 0;
}
    3696:	2000      	movs	r0, #0
    3698:	4770      	bx	lr
    369a:	46c0      	nop			; (mov r8, r8)
    369c:	20000b48 	.word	0x20000b48

000036a0 <LORAREG_GetAttr_FreqT1>:
{
    36a0:	b530      	push	{r4, r5, lr}
	channelId = *(uint8_t *)attrInput;
    36a2:	780b      	ldrb	r3, [r1, #0]
	if(channelId > RegParams.maxChannels)
    36a4:	2122      	movs	r1, #34	; 0x22
    36a6:	4820      	ldr	r0, [pc, #128]	; (3728 <LORAREG_GetAttr_FreqT1+0x88>)
    36a8:	5641      	ldrsb	r1, [r0, r1]
		return LORAWAN_INVALID_PARAMETER;
    36aa:	200a      	movs	r0, #10
	if(channelId > RegParams.maxChannels)
    36ac:	428b      	cmp	r3, r1
    36ae:	dc3a      	bgt.n	3726 <LORAREG_GetAttr_FreqT1+0x86>
	if (channelId < RegParams.cmnParams.paramsType1.Max_125khzChan)
    36b0:	3033      	adds	r0, #51	; 0x33
    36b2:	30ff      	adds	r0, #255	; 0xff
    36b4:	4c1c      	ldr	r4, [pc, #112]	; (3728 <LORAREG_GetAttr_FreqT1+0x88>)
    36b6:	5c24      	ldrb	r4, [r4, r0]
    36b8:	42a3      	cmp	r3, r4
    36ba:	d31c      	bcc.n	36f6 <LORAREG_GetAttr_FreqT1+0x56>
		result = LORAWAN_INVALID_PARAMETER;
    36bc:	200a      	movs	r0, #10
	else if ( (channelId < RegParams.maxChannels) && (channelId >= RegParams.cmnParams.paramsType1.Max_125khzChan) )
    36be:	428b      	cmp	r3, r1
    36c0:	da31      	bge.n	3726 <LORAREG_GetAttr_FreqT1+0x86>
static uint32_t GenerateFrequency2 (uint8_t channelIndex)
{
    uint32_t channelFrequency;

    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh64Freq + 
	                   FREQ_1600KHZ * (channelIndex - RegParams.cmnParams.paramsType1.Max_125khzChan);
    36c2:	1b1b      	subs	r3, r3, r4
    36c4:	4919      	ldr	r1, [pc, #100]	; (372c <LORAREG_GetAttr_FreqT1+0x8c>)
    36c6:	434b      	muls	r3, r1
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh64Freq + 
    36c8:	4c17      	ldr	r4, [pc, #92]	; (3728 <LORAREG_GetAttr_FreqT1+0x88>)
    36ca:	2198      	movs	r1, #152	; 0x98
    36cc:	0049      	lsls	r1, r1, #1
    36ce:	5c61      	ldrb	r1, [r4, r1]
    36d0:	2032      	movs	r0, #50	; 0x32
    36d2:	30ff      	adds	r0, #255	; 0xff
    36d4:	5c20      	ldrb	r0, [r4, r0]
    36d6:	0200      	lsls	r0, r0, #8
    36d8:	4301      	orrs	r1, r0
    36da:	2099      	movs	r0, #153	; 0x99
    36dc:	0040      	lsls	r0, r0, #1
    36de:	5c20      	ldrb	r0, [r4, r0]
    36e0:	0400      	lsls	r0, r0, #16
    36e2:	4308      	orrs	r0, r1
    36e4:	2134      	movs	r1, #52	; 0x34
    36e6:	31ff      	adds	r1, #255	; 0xff
    36e8:	5c61      	ldrb	r1, [r4, r1]
    36ea:	0609      	lsls	r1, r1, #24
    36ec:	4301      	orrs	r1, r0
    36ee:	1859      	adds	r1, r3, r1
		*(uint32_t *)attrOutput = GenerateFrequency2 (channelId);
    36f0:	6011      	str	r1, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    36f2:	2008      	movs	r0, #8
		*(uint32_t *)attrOutput = GenerateFrequency2 (channelId);
    36f4:	e017      	b.n	3726 <LORAREG_GetAttr_FreqT1+0x86>
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh0Freq + FREQ_200KHZ * channelIndex;
    36f6:	4c0c      	ldr	r4, [pc, #48]	; (3728 <LORAREG_GetAttr_FreqT1+0x88>)
    36f8:	2196      	movs	r1, #150	; 0x96
    36fa:	0049      	lsls	r1, r1, #1
    36fc:	5c61      	ldrb	r1, [r4, r1]
    36fe:	202e      	movs	r0, #46	; 0x2e
    3700:	30ff      	adds	r0, #255	; 0xff
    3702:	5c20      	ldrb	r0, [r4, r0]
    3704:	0200      	lsls	r0, r0, #8
    3706:	4308      	orrs	r0, r1
    3708:	2197      	movs	r1, #151	; 0x97
    370a:	0049      	lsls	r1, r1, #1
    370c:	5c61      	ldrb	r1, [r4, r1]
    370e:	0409      	lsls	r1, r1, #16
    3710:	4308      	orrs	r0, r1
    3712:	2130      	movs	r1, #48	; 0x30
    3714:	31ff      	adds	r1, #255	; 0xff
    3716:	5c61      	ldrb	r1, [r4, r1]
    3718:	0609      	lsls	r1, r1, #24
    371a:	4301      	orrs	r1, r0
    371c:	4804      	ldr	r0, [pc, #16]	; (3730 <LORAREG_GetAttr_FreqT1+0x90>)
    371e:	4343      	muls	r3, r0
    3720:	18cb      	adds	r3, r1, r3
		*(uint32_t *)attrOutput = GenerateFrequency1 (channelId);
    3722:	6013      	str	r3, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    3724:	2008      	movs	r0, #8
}
    3726:	bd30      	pop	{r4, r5, pc}
    3728:	20000b48 	.word	0x20000b48
    372c:	00186a00 	.word	0x00186a00
    3730:	00030d40 	.word	0x00030d40

00003734 <ValidateDataRateTxT1>:
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t dataRate = *(uint8_t *)attrInput;

	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    3734:	780a      	ldrb	r2, [r1, #0]
    3736:	233a      	movs	r3, #58	; 0x3a
    3738:	33ff      	adds	r3, #255	; 0xff
    373a:	4903      	ldr	r1, [pc, #12]	; (3748 <ValidateDataRateTxT1+0x14>)
    373c:	5ccb      	ldrb	r3, [r1, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    373e:	2008      	movs	r0, #8
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    3740:	429a      	cmp	r2, r3
    3742:	d900      	bls.n	3746 <ValidateDataRateTxT1+0x12>
	{
		result = LORAWAN_INVALID_PARAMETER;
    3744:	3002      	adds	r0, #2
	}
	
	return result;
}
    3746:	4770      	bx	lr
    3748:	20000b48 	.word	0x20000b48

0000374c <ValidateDataRateTxT2>:
#if (AS_BAND == 1 || JPN_BAND == 1)
static StackRetStatus_t ValidateDataRateTxT2(LorawanRegionalAttributes_t attr, void *attrInput)
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t dataRate = *(uint8_t *)attrInput;
    374c:	780b      	ldrb	r3, [r1, #0]
	
	if(dataRate > RegParams.minDataRate ||
    374e:	4a08      	ldr	r2, [pc, #32]	; (3770 <ValidateDataRateTxT2+0x24>)
    3750:	7f12      	ldrb	r2, [r2, #28]
	(RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
	{
		result = LORAWAN_INVALID_PARAMETER;
    3752:	200a      	movs	r0, #10
	if(dataRate > RegParams.minDataRate ||
    3754:	429a      	cmp	r2, r3
    3756:	d30a      	bcc.n	376e <ValidateDataRateTxT2+0x22>
	(RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
    3758:	22ac      	movs	r2, #172	; 0xac
    375a:	32ff      	adds	r2, #255	; 0xff
    375c:	4904      	ldr	r1, [pc, #16]	; (3770 <ValidateDataRateTxT2+0x24>)
    375e:	5c8a      	ldrb	r2, [r1, r2]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    3760:	3802      	subs	r0, #2
	if(dataRate > RegParams.minDataRate ||
    3762:	07d2      	lsls	r2, r2, #31
    3764:	d503      	bpl.n	376e <ValidateDataRateTxT2+0x22>
	(RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
    3766:	7e8a      	ldrb	r2, [r1, #26]
    3768:	429a      	cmp	r2, r3
    376a:	d900      	bls.n	376e <ValidateDataRateTxT2+0x22>
		result = LORAWAN_INVALID_PARAMETER;
    376c:	3002      	adds	r0, #2
	}
	
	return result;
}
    376e:	4770      	bx	lr
    3770:	20000b48 	.word	0x20000b48

00003774 <ValidateDataRateRxT1>:
#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t ValidateDataRateRxT1 (LorawanRegionalAttributes_t attr, void *attrInput)
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t dataRate = *(uint8_t *)attrInput;
    3774:	780b      	ldrb	r3, [r1, #0]

	if((dataRate > RegParams.cmnParams.paramsType1.maxRxDR) || (dataRate < RegParams.cmnParams.paramsType1.minRxDR) )
    3776:	223c      	movs	r2, #60	; 0x3c
    3778:	32ff      	adds	r2, #255	; 0xff
    377a:	4906      	ldr	r1, [pc, #24]	; (3794 <ValidateDataRateRxT1+0x20>)
    377c:	5c8a      	ldrb	r2, [r1, r2]
	{
		result = LORAWAN_INVALID_PARAMETER;
    377e:	200a      	movs	r0, #10
	if((dataRate > RegParams.cmnParams.paramsType1.maxRxDR) || (dataRate < RegParams.cmnParams.paramsType1.minRxDR) )
    3780:	429a      	cmp	r2, r3
    3782:	d306      	bcc.n	3792 <ValidateDataRateRxT1+0x1e>
    3784:	229d      	movs	r2, #157	; 0x9d
    3786:	0052      	lsls	r2, r2, #1
    3788:	5c8a      	ldrb	r2, [r1, r2]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    378a:	3802      	subs	r0, #2
	if((dataRate > RegParams.cmnParams.paramsType1.maxRxDR) || (dataRate < RegParams.cmnParams.paramsType1.minRxDR) )
    378c:	429a      	cmp	r2, r3
    378e:	d900      	bls.n	3792 <ValidateDataRateRxT1+0x1e>
		result = LORAWAN_INVALID_PARAMETER;
    3790:	3002      	adds	r0, #2
	}
	return result;
}
    3792:	4770      	bx	lr
    3794:	20000b48 	.word	0x20000b48

00003798 <ValidateDataRateRxT2>:
#if (AS_BAND == 1 || JPN_BAND == 1)
static StackRetStatus_t ValidateDataRateRxT2 (LorawanRegionalAttributes_t attr, void *attrInput)
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t dataRate = *(uint8_t *)attrInput;
    3798:	780b      	ldrb	r3, [r1, #0]

    if(dataRate > RegParams.minDataRate || (
    379a:	4a08      	ldr	r2, [pc, #32]	; (37bc <ValidateDataRateRxT2+0x24>)
    379c:	7f12      	ldrb	r2, [r2, #28]
	RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
	{
		result = LORAWAN_INVALID_PARAMETER;
    379e:	200a      	movs	r0, #10
    if(dataRate > RegParams.minDataRate || (
    37a0:	429a      	cmp	r2, r3
    37a2:	d30a      	bcc.n	37ba <ValidateDataRateRxT2+0x22>
	RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
    37a4:	22ac      	movs	r2, #172	; 0xac
    37a6:	32ff      	adds	r2, #255	; 0xff
    37a8:	4904      	ldr	r1, [pc, #16]	; (37bc <ValidateDataRateRxT2+0x24>)
    37aa:	5c8a      	ldrb	r2, [r1, r2]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    37ac:	3802      	subs	r0, #2
    if(dataRate > RegParams.minDataRate || (
    37ae:	0792      	lsls	r2, r2, #30
    37b0:	d503      	bpl.n	37ba <ValidateDataRateRxT2+0x22>
	RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
    37b2:	7e8a      	ldrb	r2, [r1, #26]
    37b4:	429a      	cmp	r2, r3
    37b6:	d900      	bls.n	37ba <ValidateDataRateRxT2+0x22>
		result = LORAWAN_INVALID_PARAMETER;
    37b8:	3002      	adds	r0, #2
	}

	return result;
}
    37ba:	4770      	bx	lr
    37bc:	20000b48 	.word	0x20000b48

000037c0 <ValidateChannelId>:
{
    StackRetStatus_t result = LORAWAN_SUCCESS;
	
    uint8_t channelId = *(uint8_t *)attrInput;
	
    if (channelId >= RegParams.maxChannels)
    37c0:	780a      	ldrb	r2, [r1, #0]
    37c2:	2322      	movs	r3, #34	; 0x22
    37c4:	4903      	ldr	r1, [pc, #12]	; (37d4 <ValidateChannelId+0x14>)
    37c6:	56cb      	ldrsb	r3, [r1, r3]
    StackRetStatus_t result = LORAWAN_SUCCESS;
    37c8:	2008      	movs	r0, #8
    if (channelId >= RegParams.maxChannels)
    37ca:	429a      	cmp	r2, r3
    37cc:	db00      	blt.n	37d0 <ValidateChannelId+0x10>
    {
        result = LORAWAN_INVALID_PARAMETER ;
    37ce:	3002      	adds	r0, #2
    }
	
    return result;
}
    37d0:	4770      	bx	lr
    37d2:	46c0      	nop			; (mov r8, r8)
    37d4:	20000b48 	.word	0x20000b48

000037d8 <ValidateChannelIdT2>:
static StackRetStatus_t ValidateChannelIdT2 (LorawanRegionalAttributes_t attr, void *attrInput)
{
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
	ValChId_t val_chid;
	
	memcpy(&val_chid,attrInput,sizeof(ValChId_t));
    37d8:	780b      	ldrb	r3, [r1, #0]
	if((val_chid.channelIndex >= RegParams.maxChannels) || (val_chid.allowedForDefaultChannels == WITHOUT_DEFAULT_CHANNELS &&
    37da:	2222      	movs	r2, #34	; 0x22
    37dc:	4808      	ldr	r0, [pc, #32]	; (3800 <ValidateChannelIdT2+0x28>)
    37de:	5682      	ldrsb	r2, [r0, r2]
	 val_chid.channelIndex < RegParams.cmnParams.paramsType2.minNonDefChId))
	 {
		 retVal = LORAWAN_INVALID_PARAMETER;
    37e0:	200a      	movs	r0, #10
	if((val_chid.channelIndex >= RegParams.maxChannels) || (val_chid.allowedForDefaultChannels == WITHOUT_DEFAULT_CHANNELS &&
    37e2:	4293      	cmp	r3, r2
    37e4:	da0a      	bge.n	37fc <ValidateChannelIdT2+0x24>
    37e6:	784a      	ldrb	r2, [r1, #1]
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    37e8:	3802      	subs	r0, #2
	if((val_chid.channelIndex >= RegParams.maxChannels) || (val_chid.allowedForDefaultChannels == WITHOUT_DEFAULT_CHANNELS &&
    37ea:	2a00      	cmp	r2, #0
    37ec:	d106      	bne.n	37fc <ValidateChannelIdT2+0x24>
	 val_chid.channelIndex < RegParams.cmnParams.paramsType2.minNonDefChId))
    37ee:	22aa      	movs	r2, #170	; 0xaa
    37f0:	32ff      	adds	r2, #255	; 0xff
	if((val_chid.channelIndex >= RegParams.maxChannels) || (val_chid.allowedForDefaultChannels == WITHOUT_DEFAULT_CHANNELS &&
    37f2:	4903      	ldr	r1, [pc, #12]	; (3800 <ValidateChannelIdT2+0x28>)
    37f4:	5c8a      	ldrb	r2, [r1, r2]
    37f6:	429a      	cmp	r2, r3
    37f8:	d900      	bls.n	37fc <ValidateChannelIdT2+0x24>
		 retVal = LORAWAN_INVALID_PARAMETER;
    37fa:	3002      	adds	r0, #2
	 }
	 return retVal;
}
    37fc:	4770      	bx	lr
    37fe:	46c0      	nop			; (mov r8, r8)
    3800:	20000b48 	.word	0x20000b48

00003804 <LORAREG_GetAttr_DutyCycleT2>:
{
    3804:	b530      	push	{r4, r5, lr}
    3806:	b083      	sub	sp, #12
    3808:	0014      	movs	r4, r2
	valChid.channelIndex = *(uint8_t *)attrInput;
    380a:	780d      	ldrb	r5, [r1, #0]
    380c:	a901      	add	r1, sp, #4
    380e:	700d      	strb	r5, [r1, #0]
	valChid.allowedForDefaultChannels = ALL_CHANNELS;
    3810:	2301      	movs	r3, #1
    3812:	704b      	strb	r3, [r1, #1]
    if (ValidateChannelIdT2(CHANNEL_ID, &valChid) == LORAWAN_SUCCESS)
    3814:	2015      	movs	r0, #21
    3816:	4b0b      	ldr	r3, [pc, #44]	; (3844 <LORAREG_GetAttr_DutyCycleT2+0x40>)
    3818:	4798      	blx	r3
    381a:	2808      	cmp	r0, #8
    381c:	d002      	beq.n	3824 <LORAREG_GetAttr_DutyCycleT2+0x20>
	    result = LORAWAN_INVALID_PARAMETER;
    381e:	200a      	movs	r0, #10
}
    3820:	b003      	add	sp, #12
    3822:	bd30      	pop	{r4, r5, pc}
	    *(uint16_t *)attrOutput = RegParams.cmnParams.paramsType2.subBandDutyCycle[subBandId];
    3824:	4a08      	ldr	r2, [pc, #32]	; (3848 <LORAREG_GetAttr_DutyCycleT2+0x44>)
	    subBandId = RegParams.cmnParams.paramsType2.othChParams[channelId].subBandId;
    3826:	006b      	lsls	r3, r5, #1
    3828:	195b      	adds	r3, r3, r5
    382a:	009b      	lsls	r3, r3, #2
    382c:	18d3      	adds	r3, r2, r3
    382e:	3394      	adds	r3, #148	; 0x94
	    *(uint16_t *)attrOutput = RegParams.cmnParams.paramsType2.subBandDutyCycle[subBandId];
    3830:	781b      	ldrb	r3, [r3, #0]
    3832:	33c8      	adds	r3, #200	; 0xc8
    3834:	005b      	lsls	r3, r3, #1
    3836:	18d2      	adds	r2, r2, r3
    3838:	7991      	ldrb	r1, [r2, #6]
    383a:	79d3      	ldrb	r3, [r2, #7]
    383c:	021b      	lsls	r3, r3, #8
    383e:	430b      	orrs	r3, r1
    3840:	8023      	strh	r3, [r4, #0]
    3842:	e7ed      	b.n	3820 <LORAREG_GetAttr_DutyCycleT2+0x1c>
    3844:	000037d9 	.word	0x000037d9
    3848:	20000b48 	.word	0x20000b48

0000384c <LORAREG_GetAttr_MinMaxDr>:
{
    384c:	b5f0      	push	{r4, r5, r6, r7, lr}
    384e:	4694      	mov	ip, r2
{
	uint8_t i;
	
	// after updating the data range of a channel we need to check if the minimum dataRange has changed or not.
	// The user cannot set the current data rate outside the range of the data range
	uint8_t minDataRate = RegParams.minDataRate;
    3850:	4b1a      	ldr	r3, [pc, #104]	; (38bc <LORAREG_GetAttr_MinMaxDr+0x70>)
    3852:	7f1c      	ldrb	r4, [r3, #28]
	uint8_t maxDataRate = RegParams.maxDataRate;
    3854:	7f5f      	ldrb	r7, [r3, #29]

	for (i = 0; i < RegParams.maxChannels; i++)
    3856:	2122      	movs	r1, #34	; 0x22
    3858:	565e      	ldrsb	r6, [r3, r1]
    385a:	2e00      	cmp	r6, #0
    385c:	dd28      	ble.n	38b0 <LORAREG_GetAttr_MinMaxDr+0x64>
	{
		if ( (RegParams.pChParams[i].dataRange.min < minDataRate) && (RegParams.pChParams[i].status == ENABLED) )
    385e:	0019      	movs	r1, r3
    3860:	791d      	ldrb	r5, [r3, #4]
    3862:	795b      	ldrb	r3, [r3, #5]
    3864:	021b      	lsls	r3, r3, #8
    3866:	432b      	orrs	r3, r5
    3868:	798d      	ldrb	r5, [r1, #6]
    386a:	042d      	lsls	r5, r5, #16
    386c:	432b      	orrs	r3, r5
    386e:	79cd      	ldrb	r5, [r1, #7]
    3870:	062d      	lsls	r5, r5, #24
    3872:	431d      	orrs	r5, r3
    3874:	2100      	movs	r1, #0
    3876:	e00b      	b.n	3890 <LORAREG_GetAttr_MinMaxDr+0x44>
		{
			minDataRate = RegParams.pChParams[i].dataRange.min;
		}
		if ( (RegParams.pChParams[i].dataRange.max > maxDataRate) && (RegParams.pChParams[i].status == ENABLED) )
    3878:	7843      	ldrb	r3, [r0, #1]
    387a:	091b      	lsrs	r3, r3, #4
    387c:	42bb      	cmp	r3, r7
    387e:	dd03      	ble.n	3888 <LORAREG_GetAttr_MinMaxDr+0x3c>
    3880:	7800      	ldrb	r0, [r0, #0]
    3882:	2800      	cmp	r0, #0
    3884:	d000      	beq.n	3888 <LORAREG_GetAttr_MinMaxDr+0x3c>
		{
			maxDataRate = RegParams.pChParams[i].dataRange.max;
    3886:	001f      	movs	r7, r3
	for (i = 0; i < RegParams.maxChannels; i++)
    3888:	3101      	adds	r1, #1
    388a:	b2c9      	uxtb	r1, r1
    388c:	42b1      	cmp	r1, r6
    388e:	da0f      	bge.n	38b0 <LORAREG_GetAttr_MinMaxDr+0x64>
		if ( (RegParams.pChParams[i].dataRange.min < minDataRate) && (RegParams.pChParams[i].status == ENABLED) )
    3890:	0048      	lsls	r0, r1, #1
    3892:	1828      	adds	r0, r5, r0
    3894:	7843      	ldrb	r3, [r0, #1]
    3896:	071b      	lsls	r3, r3, #28
    3898:	0f1b      	lsrs	r3, r3, #28
    389a:	42a3      	cmp	r3, r4
    389c:	daec      	bge.n	3878 <LORAREG_GetAttr_MinMaxDr+0x2c>
    389e:	7802      	ldrb	r2, [r0, #0]
    38a0:	2a00      	cmp	r2, #0
    38a2:	d0f1      	beq.n	3888 <LORAREG_GetAttr_MinMaxDr+0x3c>
			minDataRate = RegParams.pChParams[i].dataRange.min;
    38a4:	001c      	movs	r4, r3
		if ( (RegParams.pChParams[i].dataRange.max > maxDataRate) && (RegParams.pChParams[i].status == ENABLED) )
    38a6:	7843      	ldrb	r3, [r0, #1]
    38a8:	091b      	lsrs	r3, r3, #4
    38aa:	42bb      	cmp	r3, r7
    38ac:	dceb      	bgt.n	3886 <LORAREG_GetAttr_MinMaxDr+0x3a>
    38ae:	e7eb      	b.n	3888 <LORAREG_GetAttr_MinMaxDr+0x3c>
	memcpy(attrOutput,&minmaxDr,sizeof(MinMaxDr_t));
    38b0:	4663      	mov	r3, ip
    38b2:	701c      	strb	r4, [r3, #0]
    38b4:	705f      	strb	r7, [r3, #1]
}
    38b6:	2008      	movs	r0, #8
    38b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    38ba:	46c0      	nop			; (mov r8, r8)
    38bc:	20000b48 	.word	0x20000b48

000038c0 <ValidateChannelMaskCntl>:
#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t ValidateChannelMaskCntl (LorawanRegionalAttributes_t attr, void *attrInput)
{
    StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t channelMaskCntl = *(uint8_t *)attrInput;
    38c0:	780b      	ldrb	r3, [r1, #0]

    // 5 is RFU for channel mask for US
    if ((channelMaskCntl == 5) || (channelMaskCntl > 7))
    38c2:	2b05      	cmp	r3, #5
    38c4:	d004      	beq.n	38d0 <ValidateChannelMaskCntl+0x10>
    StackRetStatus_t result = LORAWAN_SUCCESS;
    38c6:	2008      	movs	r0, #8
    if ((channelMaskCntl == 5) || (channelMaskCntl > 7))
    38c8:	2b07      	cmp	r3, #7
    38ca:	d900      	bls.n	38ce <ValidateChannelMaskCntl+0xe>
    {
        result = LORAWAN_INVALID_PARAMETER;
    38cc:	3002      	adds	r0, #2
    }

    return result;
}
    38ce:	4770      	bx	lr
        result = LORAWAN_INVALID_PARAMETER;
    38d0:	200a      	movs	r0, #10
    38d2:	e7fc      	b.n	38ce <ValidateChannelMaskCntl+0xe>

000038d4 <ValidateTxPower>:
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	uint8_t txPowerNew = *(uint8_t *)attrInput;
	
	//if ((txPowerNew < 5) || (txPowerNew > 10) || (txPowerNew == 6))
	if (txPowerNew > RegParams.maxTxPwrIndx)
    38d4:	780a      	ldrb	r2, [r1, #0]
    38d6:	2325      	movs	r3, #37	; 0x25
    38d8:	4903      	ldr	r1, [pc, #12]	; (38e8 <ValidateTxPower+0x14>)
    38da:	56cb      	ldrsb	r3, [r1, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    38dc:	2008      	movs	r0, #8
	if (txPowerNew > RegParams.maxTxPwrIndx)
    38de:	429a      	cmp	r2, r3
    38e0:	dd00      	ble.n	38e4 <ValidateTxPower+0x10>
	{
		result = LORAWAN_INVALID_PARAMETER;
    38e2:	3002      	adds	r0, #2
	}

	return result;
}
    38e4:	4770      	bx	lr
    38e6:	46c0      	nop			; (mov r8, r8)
    38e8:	20000b48 	.word	0x20000b48

000038ec <ValidateChannelMask>:
 */
#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t ValidateChannelMask (LorawanRegionalAttributes_t attr, void *attrInput)
{
	return LORAWAN_SUCCESS;	
}
    38ec:	2008      	movs	r0, #8
    38ee:	4770      	bx	lr

000038f0 <ValidateChannelMaskT2>:
#endif

#if (EU_BAND == 1 || AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t ValidateChannelMaskT2 (LorawanRegionalAttributes_t attr, void *attrInput)
{
    38f0:	b530      	push	{r4, r5, lr}
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
	
	uint16_t channelMask = * (uint16_t *)attrInput;
    38f2:	8809      	ldrh	r1, [r1, #0]
	
	if(channelMask != 0x0000U)
    38f4:	2900      	cmp	r1, #0
    38f6:	d020      	beq.n	393a <ValidateChannelMaskT2+0x4a>
	{
		for(uint8_t i = 0; i< RegParams.maxChannels;i++)
    38f8:	2322      	movs	r3, #34	; 0x22
    38fa:	4a11      	ldr	r2, [pc, #68]	; (3940 <ValidateChannelMaskT2+0x50>)
    38fc:	56d0      	ldrsb	r0, [r2, r3]
    38fe:	2800      	cmp	r0, #0
    3900:	dd1b      	ble.n	393a <ValidateChannelMaskT2+0x4a>
		{
			if(((channelMask && BIT0) == BIT0) && ((RegParams.pOtherChParams[i].parametersDefined & (FREQUENCY_DEFINED | DATA_RANGE_DEFINED)) != (FREQUENCY_DEFINED | DATA_RANGE_DEFINED)))
    3902:	7a14      	ldrb	r4, [r2, #8]
    3904:	7a53      	ldrb	r3, [r2, #9]
    3906:	021b      	lsls	r3, r3, #8
    3908:	4323      	orrs	r3, r4
    390a:	7a94      	ldrb	r4, [r2, #10]
    390c:	0424      	lsls	r4, r4, #16
    390e:	4323      	orrs	r3, r4
    3910:	7ad4      	ldrb	r4, [r2, #11]
    3912:	0624      	lsls	r4, r4, #24
    3914:	431c      	orrs	r4, r3
    3916:	2300      	movs	r3, #0
    3918:	2503      	movs	r5, #3
    391a:	e004      	b.n	3926 <ValidateChannelMaskT2+0x36>
				retVal = LORAWAN_INVALID_PARAMETER;
				break;
			}
			else
			{
				channelMask = channelMask >> SHIFT1;
    391c:	0849      	lsrs	r1, r1, #1
		for(uint8_t i = 0; i< RegParams.maxChannels;i++)
    391e:	3301      	adds	r3, #1
    3920:	b2db      	uxtb	r3, r3
    3922:	4283      	cmp	r3, r0
    3924:	da09      	bge.n	393a <ValidateChannelMaskT2+0x4a>
			if(((channelMask && BIT0) == BIT0) && ((RegParams.pOtherChParams[i].parametersDefined & (FREQUENCY_DEFINED | DATA_RANGE_DEFINED)) != (FREQUENCY_DEFINED | DATA_RANGE_DEFINED)))
    3926:	2900      	cmp	r1, #0
    3928:	d0f8      	beq.n	391c <ValidateChannelMaskT2+0x2c>
    392a:	005a      	lsls	r2, r3, #1
    392c:	18d2      	adds	r2, r2, r3
    392e:	0092      	lsls	r2, r2, #2
    3930:	18a2      	adds	r2, r4, r2
    3932:	7ad2      	ldrb	r2, [r2, #11]
    3934:	402a      	ands	r2, r5
    3936:	2a03      	cmp	r2, #3
    3938:	d0f0      	beq.n	391c <ValidateChannelMaskT2+0x2c>
	else
	{
		////ChMask can be set to 0 if ChMaskCtrl is set to 6
		return retVal = LORAWAN_SUCCESS;
	}
}
    393a:	2008      	movs	r0, #8
    393c:	bd30      	pop	{r4, r5, pc}
    393e:	46c0      	nop			; (mov r8, r8)
    3940:	20000b48 	.word	0x20000b48

00003944 <ValidateChannelMaskCntlT2>:
#endif

#if (EU_BAND == 1 || AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t ValidateChannelMaskCntlT2 (LorawanRegionalAttributes_t attr, void *attrInput)
{
	uint8_t channelMaskCntl = * (uint16_t *)attrInput;
    3944:	780b      	ldrb	r3, [r1, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    3946:	2008      	movs	r0, #8
	
    if ( (channelMaskCntl != 0) && (channelMaskCntl != 6) )
    3948:	2b00      	cmp	r3, #0
    394a:	d002      	beq.n	3952 <ValidateChannelMaskCntlT2+0xe>
    394c:	2b06      	cmp	r3, #6
    394e:	d001      	beq.n	3954 <ValidateChannelMaskCntlT2+0x10>
    {
	    result = LORAWAN_INVALID_PARAMETER;
    3950:	3002      	adds	r0, #2
    }
	return result;
}
    3952:	4770      	bx	lr
	StackRetStatus_t result = LORAWAN_SUCCESS;
    3954:	2008      	movs	r0, #8
    3956:	e7fc      	b.n	3952 <ValidateChannelMaskCntlT2+0xe>

00003958 <ValidateChMaskChCntlT2>:
{
    3958:	b510      	push	{r4, lr}
    395a:	b082      	sub	sp, #8
	ValChMaskCntl_t chMaskchCntl = * (ValChMaskCntl_t *)attrInput;
    395c:	ac01      	add	r4, sp, #4
    395e:	2204      	movs	r2, #4
    3960:	0020      	movs	r0, r4
    3962:	4b0f      	ldr	r3, [pc, #60]	; (39a0 <ValidateChMaskChCntlT2+0x48>)
    3964:	4798      	blx	r3
    if ( chMaskchCntl.chnlMask || chMaskchCntl.chnlMaskCntl )
    3966:	8863      	ldrh	r3, [r4, #2]
    3968:	2b00      	cmp	r3, #0
    396a:	d104      	bne.n	3976 <ValidateChMaskChCntlT2+0x1e>
    396c:	ab01      	add	r3, sp, #4
    396e:	781a      	ldrb	r2, [r3, #0]
		return LORAWAN_INVALID_PARAMETER;
    3970:	230a      	movs	r3, #10
    if ( chMaskchCntl.chnlMask || chMaskchCntl.chnlMaskCntl )
    3972:	2a00      	cmp	r2, #0
    3974:	d007      	beq.n	3986 <ValidateChMaskChCntlT2+0x2e>
		if(((ValidateChannelMaskT2(CHANNEL_MASK, (void *)&chMaskchCntl.chnlMask)) == LORAWAN_SUCCESS) && (ValidateChannelMaskCntlT2(CHANNEL_MASK_CNTL, (void *)&chMaskchCntl.chnlMaskCntl)) == LORAWAN_SUCCESS)
    3976:	466b      	mov	r3, sp
    3978:	1d99      	adds	r1, r3, #6
    397a:	201a      	movs	r0, #26
    397c:	4b09      	ldr	r3, [pc, #36]	; (39a4 <ValidateChMaskChCntlT2+0x4c>)
    397e:	4798      	blx	r3
			return LORAWAN_INVALID_PARAMETER;
    3980:	230a      	movs	r3, #10
		if(((ValidateChannelMaskT2(CHANNEL_MASK, (void *)&chMaskchCntl.chnlMask)) == LORAWAN_SUCCESS) && (ValidateChannelMaskCntlT2(CHANNEL_MASK_CNTL, (void *)&chMaskchCntl.chnlMaskCntl)) == LORAWAN_SUCCESS)
    3982:	2808      	cmp	r0, #8
    3984:	d002      	beq.n	398c <ValidateChMaskChCntlT2+0x34>
}
    3986:	0018      	movs	r0, r3
    3988:	b002      	add	sp, #8
    398a:	bd10      	pop	{r4, pc}
		if(((ValidateChannelMaskT2(CHANNEL_MASK, (void *)&chMaskchCntl.chnlMask)) == LORAWAN_SUCCESS) && (ValidateChannelMaskCntlT2(CHANNEL_MASK_CNTL, (void *)&chMaskchCntl.chnlMaskCntl)) == LORAWAN_SUCCESS)
    398c:	a901      	add	r1, sp, #4
    398e:	3013      	adds	r0, #19
    3990:	4b05      	ldr	r3, [pc, #20]	; (39a8 <ValidateChMaskChCntlT2+0x50>)
    3992:	4798      	blx	r3
    3994:	0003      	movs	r3, r0
    3996:	2808      	cmp	r0, #8
    3998:	d0f5      	beq.n	3986 <ValidateChMaskChCntlT2+0x2e>
			return LORAWAN_INVALID_PARAMETER;
    399a:	230a      	movs	r3, #10
    399c:	e7f3      	b.n	3986 <ValidateChMaskChCntlT2+0x2e>
    399e:	46c0      	nop			; (mov r8, r8)
    39a0:	000112d5 	.word	0x000112d5
    39a4:	000038f1 	.word	0x000038f1
    39a8:	00003945 	.word	0x00003945

000039ac <ValidateDataRate>:
{
    StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t dataRate = *(uint8_t *)attrInput;

    if ( dataRate > RegParams.minDataRate )
    39ac:	780a      	ldrb	r2, [r1, #0]
    39ae:	4b03      	ldr	r3, [pc, #12]	; (39bc <ValidateDataRate+0x10>)
    39b0:	7f1b      	ldrb	r3, [r3, #28]
    StackRetStatus_t result = LORAWAN_SUCCESS;
    39b2:	2008      	movs	r0, #8
    if ( dataRate > RegParams.minDataRate )
    39b4:	429a      	cmp	r2, r3
    39b6:	d900      	bls.n	39ba <ValidateDataRate+0xe>
    {
        result = LORAWAN_INVALID_PARAMETER;
    39b8:	3002      	adds	r0, #2
    }

    return result;
}
    39ba:	4770      	bx	lr
    39bc:	20000b48 	.word	0x20000b48

000039c0 <ValidateSupportedDr>:
#endif

static StackRetStatus_t ValidateSupportedDr (LorawanRegionalAttributes_t attr, void *attrInput)
{
    39c0:	b570      	push	{r4, r5, r6, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
	uint8_t  dataRate;
	dataRate = *(uint8_t *)attrInput;
    39c2:	780d      	ldrb	r5, [r1, #0]
	
	for(uint8_t i = 0; i <RegParams.maxChannels; i++)
    39c4:	2322      	movs	r3, #34	; 0x22
    39c6:	4a14      	ldr	r2, [pc, #80]	; (3a18 <ValidateSupportedDr+0x58>)
    39c8:	56d4      	ldrsb	r4, [r2, r3]
    39ca:	2c00      	cmp	r4, #0
    39cc:	dd22      	ble.n	3a14 <ValidateSupportedDr+0x54>
	{
		if(RegParams.pChParams[i].status == ENABLED && dataRate >= RegParams.pChParams[i].dataRange.min &&
    39ce:	7910      	ldrb	r0, [r2, #4]
    39d0:	7953      	ldrb	r3, [r2, #5]
    39d2:	021b      	lsls	r3, r3, #8
    39d4:	4303      	orrs	r3, r0
    39d6:	7990      	ldrb	r0, [r2, #6]
    39d8:	0400      	lsls	r0, r0, #16
    39da:	4303      	orrs	r3, r0
    39dc:	79d0      	ldrb	r0, [r2, #7]
    39de:	0600      	lsls	r0, r0, #24
    39e0:	4318      	orrs	r0, r3
    39e2:	2300      	movs	r3, #0
    39e4:	002e      	movs	r6, r5
    39e6:	e003      	b.n	39f0 <ValidateSupportedDr+0x30>
	for(uint8_t i = 0; i <RegParams.maxChannels; i++)
    39e8:	3301      	adds	r3, #1
    39ea:	b2db      	uxtb	r3, r3
    39ec:	42a3      	cmp	r3, r4
    39ee:	da0f      	bge.n	3a10 <ValidateSupportedDr+0x50>
		if(RegParams.pChParams[i].status == ENABLED && dataRate >= RegParams.pChParams[i].dataRange.min &&
    39f0:	005a      	lsls	r2, r3, #1
    39f2:	1882      	adds	r2, r0, r2
    39f4:	7811      	ldrb	r1, [r2, #0]
    39f6:	2900      	cmp	r1, #0
    39f8:	d0f6      	beq.n	39e8 <ValidateSupportedDr+0x28>
    39fa:	7851      	ldrb	r1, [r2, #1]
    39fc:	0709      	lsls	r1, r1, #28
    39fe:	0f09      	lsrs	r1, r1, #28
    3a00:	428d      	cmp	r5, r1
    3a02:	dbf1      	blt.n	39e8 <ValidateSupportedDr+0x28>
		   dataRate <= RegParams.pChParams[i].dataRange.max)
    3a04:	7852      	ldrb	r2, [r2, #1]
    3a06:	0912      	lsrs	r2, r2, #4
		if(RegParams.pChParams[i].status == ENABLED && dataRate >= RegParams.pChParams[i].dataRange.min &&
    3a08:	4296      	cmp	r6, r2
    3a0a:	dced      	bgt.n	39e8 <ValidateSupportedDr+0x28>
		{
			result = LORAWAN_SUCCESS;
    3a0c:	2008      	movs	r0, #8
    3a0e:	e000      	b.n	3a12 <ValidateSupportedDr+0x52>
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    3a10:	200a      	movs	r0, #10
			break;
		}
	}
	return result;	
}
    3a12:	bd70      	pop	{r4, r5, r6, pc}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    3a14:	200a      	movs	r0, #10
    3a16:	e7fc      	b.n	3a12 <ValidateSupportedDr+0x52>
    3a18:	20000b48 	.word	0x20000b48

00003a1c <ValidateRxFreqT1>:

#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t ValidateRxFreqT1 (LorawanRegionalAttributes_t attr, void *attrInput)
{
    3a1c:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_SUCCESS;
	uint32_t FreqNew = *(uint32_t *)attrInput;
	
	if(FreqNew < FREQ_923300KHZ || FreqNew > FREQ_927500KHZ || (FreqNew - FREQ_923300KHZ) % FREQ_600KHZ != 0)
    3a1e:	6808      	ldr	r0, [r1, #0]
    3a20:	4b07      	ldr	r3, [pc, #28]	; (3a40 <ValidateRxFreqT1+0x24>)
    3a22:	469c      	mov	ip, r3
    3a24:	4460      	add	r0, ip
    3a26:	4a07      	ldr	r2, [pc, #28]	; (3a44 <ValidateRxFreqT1+0x28>)
	{
		result = LORAWAN_INVALID_PARAMETER;
    3a28:	230a      	movs	r3, #10
	if(FreqNew < FREQ_923300KHZ || FreqNew > FREQ_927500KHZ || (FreqNew - FREQ_923300KHZ) % FREQ_600KHZ != 0)
    3a2a:	4290      	cmp	r0, r2
    3a2c:	d806      	bhi.n	3a3c <ValidateRxFreqT1+0x20>
    3a2e:	4906      	ldr	r1, [pc, #24]	; (3a48 <ValidateRxFreqT1+0x2c>)
    3a30:	4b06      	ldr	r3, [pc, #24]	; (3a4c <ValidateRxFreqT1+0x30>)
    3a32:	4798      	blx	r3
	StackRetStatus_t result = LORAWAN_SUCCESS;
    3a34:	2308      	movs	r3, #8
	if(FreqNew < FREQ_923300KHZ || FreqNew > FREQ_927500KHZ || (FreqNew - FREQ_923300KHZ) % FREQ_600KHZ != 0)
    3a36:	2900      	cmp	r1, #0
    3a38:	d000      	beq.n	3a3c <ValidateRxFreqT1+0x20>
		result = LORAWAN_INVALID_PARAMETER;
    3a3a:	3302      	adds	r3, #2
	}
	return result;
}
    3a3c:	0018      	movs	r0, r3
    3a3e:	bd10      	pop	{r4, pc}
    3a40:	c8f78f60 	.word	0xc8f78f60
    3a44:	00401640 	.word	0x00401640
    3a48:	000927c0 	.word	0x000927c0
    3a4c:	0000f019 	.word	0x0000f019

00003a50 <ValidateRx1DataRateOffset>:
{
	StackRetStatus_t retVal = LORAWAN_INVALID_PARAMETER;
	
	uint8_t rx1DrOffset = *(uint8_t *)attrInput;
	
	if(rx1DrOffset <= RegParams.Rx1DrOffset)
    3a50:	780a      	ldrb	r2, [r1, #0]
    3a52:	2324      	movs	r3, #36	; 0x24
    3a54:	4903      	ldr	r1, [pc, #12]	; (3a64 <ValidateRx1DataRateOffset+0x14>)
    3a56:	56cb      	ldrsb	r3, [r1, r3]
	StackRetStatus_t retVal = LORAWAN_INVALID_PARAMETER;
    3a58:	200a      	movs	r0, #10
	if(rx1DrOffset <= RegParams.Rx1DrOffset)
    3a5a:	429a      	cmp	r2, r3
    3a5c:	dc00      	bgt.n	3a60 <ValidateRx1DataRateOffset+0x10>
	{
		retVal = LORAWAN_SUCCESS;
    3a5e:	3802      	subs	r0, #2
	}
	
	return retVal;
}
    3a60:	4770      	bx	lr
    3a62:	46c0      	nop			; (mov r8, r8)
    3a64:	20000b48 	.word	0x20000b48

00003a68 <getSubBandId>:
}
#endif

#if (EU_BAND == 1 || AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static uint8_t getSubBandId(uint32_t frequency)
{
    3a68:	b530      	push	{r4, r5, lr}
    3a6a:	0004      	movs	r4, r0
	uint8_t subBandId = 0xFF;
#if (EU_BAND == 1)	
	for(uint8_t i = 0; i < RegParams.maxSubBands; i++)
    3a6c:	2321      	movs	r3, #33	; 0x21
    3a6e:	4a19      	ldr	r2, [pc, #100]	; (3ad4 <getSubBandId+0x6c>)
    3a70:	5cd5      	ldrb	r5, [r2, r3]
    3a72:	2d00      	cmp	r5, #0
    3a74:	d02c      	beq.n	3ad0 <getSubBandId+0x68>
	{
		if(frequency >= RegParams.pSubBandParams[i].freqMin && frequency <= RegParams.pSubBandParams[i].freqMax)
    3a76:	0011      	movs	r1, r2
    3a78:	7b13      	ldrb	r3, [r2, #12]
    3a7a:	7b52      	ldrb	r2, [r2, #13]
    3a7c:	0212      	lsls	r2, r2, #8
    3a7e:	431a      	orrs	r2, r3
    3a80:	7b8b      	ldrb	r3, [r1, #14]
    3a82:	041b      	lsls	r3, r3, #16
    3a84:	431a      	orrs	r2, r3
    3a86:	7bcb      	ldrb	r3, [r1, #15]
    3a88:	061b      	lsls	r3, r3, #24
    3a8a:	4313      	orrs	r3, r2
    3a8c:	2000      	movs	r0, #0
    3a8e:	e004      	b.n	3a9a <getSubBandId+0x32>
	for(uint8_t i = 0; i < RegParams.maxSubBands; i++)
    3a90:	3001      	adds	r0, #1
    3a92:	b2c0      	uxtb	r0, r0
    3a94:	330c      	adds	r3, #12
    3a96:	42a8      	cmp	r0, r5
    3a98:	d018      	beq.n	3acc <getSubBandId+0x64>
		if(frequency >= RegParams.pSubBandParams[i].freqMin && frequency <= RegParams.pSubBandParams[i].freqMax)
    3a9a:	781a      	ldrb	r2, [r3, #0]
    3a9c:	7859      	ldrb	r1, [r3, #1]
    3a9e:	0209      	lsls	r1, r1, #8
    3aa0:	4311      	orrs	r1, r2
    3aa2:	789a      	ldrb	r2, [r3, #2]
    3aa4:	0412      	lsls	r2, r2, #16
    3aa6:	4311      	orrs	r1, r2
    3aa8:	78da      	ldrb	r2, [r3, #3]
    3aaa:	0612      	lsls	r2, r2, #24
    3aac:	430a      	orrs	r2, r1
    3aae:	42a2      	cmp	r2, r4
    3ab0:	d8ee      	bhi.n	3a90 <getSubBandId+0x28>
    3ab2:	791a      	ldrb	r2, [r3, #4]
    3ab4:	7959      	ldrb	r1, [r3, #5]
    3ab6:	0209      	lsls	r1, r1, #8
    3ab8:	4311      	orrs	r1, r2
    3aba:	799a      	ldrb	r2, [r3, #6]
    3abc:	0412      	lsls	r2, r2, #16
    3abe:	4311      	orrs	r1, r2
    3ac0:	79da      	ldrb	r2, [r3, #7]
    3ac2:	0612      	lsls	r2, r2, #24
    3ac4:	430a      	orrs	r2, r1
    3ac6:	4294      	cmp	r4, r2
    3ac8:	d8e2      	bhi.n	3a90 <getSubBandId+0x28>
    3aca:	e000      	b.n	3ace <getSubBandId+0x66>
	uint8_t subBandId = 0xFF;
    3acc:	20ff      	movs	r0, #255	; 0xff
#elif (AS_BAND == 1)
	// whole ASIA 923 spectrum is one band
	subBandId = 0;
#endif
	return subBandId;
}
    3ace:	bd30      	pop	{r4, r5, pc}
	uint8_t subBandId = 0xFF;
    3ad0:	20ff      	movs	r0, #255	; 0xff
    3ad2:	e7fc      	b.n	3ace <getSubBandId+0x66>
    3ad4:	20000b48 	.word	0x20000b48

00003ad8 <ValidateFreq>:
{
    3ad8:	b510      	push	{r4, lr}
    if(getSubBandId(frequencyNew) == 0xFF)
    3ada:	6808      	ldr	r0, [r1, #0]
    3adc:	4b04      	ldr	r3, [pc, #16]	; (3af0 <ValidateFreq+0x18>)
    3ade:	4798      	blx	r3
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    3ae0:	2308      	movs	r3, #8
    if(getSubBandId(frequencyNew) == 0xFF)
    3ae2:	28ff      	cmp	r0, #255	; 0xff
    3ae4:	d001      	beq.n	3aea <ValidateFreq+0x12>
}
    3ae6:	0018      	movs	r0, r3
    3ae8:	bd10      	pop	{r4, pc}
		retVal = LORAWAN_INVALID_PARAMETER;
    3aea:	3302      	adds	r3, #2
    3aec:	e7fb      	b.n	3ae6 <ValidateFreq+0xe>
    3aee:	46c0      	nop			; (mov r8, r8)
    3af0:	00003a69 	.word	0x00003a69

00003af4 <ValidateFrequencyAS>:
 */
#if(AS_BAND == 1)
static StackRetStatus_t ValidateFrequencyAS (LorawanRegionalAttributes_t attr, void *attrInput)
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	uint32_t frequencyNew = * (uint32_t *)attrInput;
    3af4:	680b      	ldr	r3, [r1, #0]

    /*Bands Supporting Freq 923-925MHz*/
    if(RegParams.band == ISM_BRN923 || RegParams.band == ISM_CMB923 || RegParams.band == ISM_INS923 || RegParams.band == ISM_LAOS923)
    3af6:	2226      	movs	r2, #38	; 0x26
    3af8:	4919      	ldr	r1, [pc, #100]	; (3b60 <ValidateFrequencyAS+0x6c>)
    3afa:	5c8a      	ldrb	r2, [r1, r2]
    3afc:	1f91      	subs	r1, r2, #6
    3afe:	2903      	cmp	r1, #3
    3b00:	d808      	bhi.n	3b14 <ValidateFrequencyAS+0x20>
	{
		if ( (frequencyNew < FREQ_923000KHZ) || (frequencyNew > FREQ_925000KHZ) )
    3b02:	4a18      	ldr	r2, [pc, #96]	; (3b64 <ValidateFrequencyAS+0x70>)
    3b04:	4694      	mov	ip, r2
    3b06:	4463      	add	r3, ip
    3b08:	4a17      	ldr	r2, [pc, #92]	; (3b68 <ValidateFrequencyAS+0x74>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    3b0a:	2008      	movs	r0, #8
		if ( (frequencyNew < FREQ_923000KHZ) || (frequencyNew > FREQ_925000KHZ) )
    3b0c:	4293      	cmp	r3, r2
    3b0e:	d900      	bls.n	3b12 <ValidateFrequencyAS+0x1e>
		{
			result = LORAWAN_INVALID_PARAMETER;
    3b10:	3002      	adds	r0, #2
	else
	{
		result = LORAWAN_INVALID_PARAMETER;
	}
	return result;
}
    3b12:	4770      	bx	lr
	else if(RegParams.band == ISM_NZ923)
    3b14:	2a0a      	cmp	r2, #10
    3b16:	d011      	beq.n	3b3c <ValidateFrequencyAS+0x48>
	else if(RegParams.band == ISM_SP923 || RegParams.band == ISM_THAI923 || RegParams.band == ISM_VTM923)
    3b18:	2a0b      	cmp	r2, #11
    3b1a:	d018      	beq.n	3b4e <ValidateFrequencyAS+0x5a>
    3b1c:	0011      	movs	r1, r2
    3b1e:	390d      	subs	r1, #13
    3b20:	2901      	cmp	r1, #1
    3b22:	d914      	bls.n	3b4e <ValidateFrequencyAS+0x5a>
		result = LORAWAN_INVALID_PARAMETER;
    3b24:	200a      	movs	r0, #10
	else if(RegParams.band == ISM_TWN923)
    3b26:	2a0c      	cmp	r2, #12
    3b28:	d1f3      	bne.n	3b12 <ValidateFrequencyAS+0x1e>
		if ( (frequencyNew < FREQ_922000KHZ) || (frequencyNew > FREQ_928000KHZ) )
    3b2a:	4a10      	ldr	r2, [pc, #64]	; (3b6c <ValidateFrequencyAS+0x78>)
    3b2c:	4694      	mov	ip, r2
    3b2e:	4463      	add	r3, ip
    3b30:	4a0f      	ldr	r2, [pc, #60]	; (3b70 <ValidateFrequencyAS+0x7c>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    3b32:	3802      	subs	r0, #2
		if ( (frequencyNew < FREQ_922000KHZ) || (frequencyNew > FREQ_928000KHZ) )
    3b34:	4293      	cmp	r3, r2
    3b36:	d9ec      	bls.n	3b12 <ValidateFrequencyAS+0x1e>
			result = LORAWAN_INVALID_PARAMETER;
    3b38:	3002      	adds	r0, #2
    3b3a:	e7ea      	b.n	3b12 <ValidateFrequencyAS+0x1e>
		if ( (frequencyNew < FREQ_915000KHZ) || (frequencyNew > FREQ_928000KHZ) )
    3b3c:	4a0d      	ldr	r2, [pc, #52]	; (3b74 <ValidateFrequencyAS+0x80>)
    3b3e:	4694      	mov	ip, r2
    3b40:	4463      	add	r3, ip
    3b42:	4a0d      	ldr	r2, [pc, #52]	; (3b78 <ValidateFrequencyAS+0x84>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    3b44:	2008      	movs	r0, #8
		if ( (frequencyNew < FREQ_915000KHZ) || (frequencyNew > FREQ_928000KHZ) )
    3b46:	4293      	cmp	r3, r2
    3b48:	d9e3      	bls.n	3b12 <ValidateFrequencyAS+0x1e>
			result = LORAWAN_INVALID_PARAMETER;
    3b4a:	3002      	adds	r0, #2
    3b4c:	e7e1      	b.n	3b12 <ValidateFrequencyAS+0x1e>
		if ( (frequencyNew < FREQ_920000KHZ) || (frequencyNew > FREQ_925000KHZ) )
    3b4e:	4a0b      	ldr	r2, [pc, #44]	; (3b7c <ValidateFrequencyAS+0x88>)
    3b50:	4694      	mov	ip, r2
    3b52:	4463      	add	r3, ip
    3b54:	4a0a      	ldr	r2, [pc, #40]	; (3b80 <ValidateFrequencyAS+0x8c>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    3b56:	2008      	movs	r0, #8
		if ( (frequencyNew < FREQ_920000KHZ) || (frequencyNew > FREQ_925000KHZ) )
    3b58:	4293      	cmp	r3, r2
    3b5a:	d9da      	bls.n	3b12 <ValidateFrequencyAS+0x1e>
			result = LORAWAN_INVALID_PARAMETER;
    3b5c:	3002      	adds	r0, #2
    3b5e:	e7d8      	b.n	3b12 <ValidateFrequencyAS+0x1e>
    3b60:	20000b48 	.word	0x20000b48
    3b64:	c8fc2340 	.word	0xc8fc2340
    3b68:	001e8480 	.word	0x001e8480
    3b6c:	c90b6580 	.word	0xc90b6580
    3b70:	005b8d80 	.word	0x005b8d80
    3b74:	c9763540 	.word	0xc9763540
    3b78:	00c65d40 	.word	0x00c65d40
    3b7c:	c929ea00 	.word	0xc929ea00
    3b80:	004c4b40 	.word	0x004c4b40

00003b84 <setTxParams>:
}
#endif

#if ( AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t setTxParams(LorawanRegionalAttributes_t attr, void *attrInput)
{
    3b84:	b5f0      	push	{r4, r5, r6, r7, lr}
	TxParams_t updateTxParams;

	memcpy(&updateTxParams,attrInput,sizeof(TxParams_t));
    3b86:	780d      	ldrb	r5, [r1, #0]
    3b88:	7849      	ldrb	r1, [r1, #1]
    3b8a:	084a      	lsrs	r2, r1, #1
	
	RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime = updateTxParams.uplinkDwellTime;
    3b8c:	4809      	ldr	r0, [pc, #36]	; (3bb4 <setTxParams+0x30>)
    3b8e:	24ac      	movs	r4, #172	; 0xac
    3b90:	34ff      	adds	r4, #255	; 0xff
    3b92:	2601      	movs	r6, #1
    3b94:	4031      	ands	r1, r6
    3b96:	5d03      	ldrb	r3, [r0, r4]
    3b98:	2701      	movs	r7, #1
    3b9a:	43bb      	bics	r3, r7
	RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime = updateTxParams.downlinkDwellTime;
    3b9c:	4032      	ands	r2, r6
    3b9e:	0052      	lsls	r2, r2, #1
    3ba0:	430b      	orrs	r3, r1
    3ba2:	2102      	movs	r1, #2
    3ba4:	438b      	bics	r3, r1
    3ba6:	4313      	orrs	r3, r2
    3ba8:	5503      	strb	r3, [r0, r4]
	RegParams.maxTxPwr = updateTxParams.maxEIRP;
    3baa:	2320      	movs	r3, #32
    3bac:	54c5      	strb	r5, [r0, r3]
	
	return LORAWAN_SUCCESS;
}
    3bae:	2008      	movs	r0, #8
    3bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3bb2:	46c0      	nop			; (mov r8, r8)
    3bb4:	20000b48 	.word	0x20000b48

00003bb8 <SearchAvailableChannel1>:
{
    3bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3bba:	46de      	mov	lr, fp
    3bbc:	464f      	mov	r7, r9
    3bbe:	4646      	mov	r6, r8
    3bc0:	b5c0      	push	{r6, r7, lr}
    3bc2:	b082      	sub	sp, #8
    3bc4:	9001      	str	r0, [sp, #4]
    3bc6:	0015      	movs	r5, r2
    3bc8:	4698      	mov	r8, r3
	uint8_t startingIndex = 0;
    3bca:	2300      	movs	r3, #0
    3bcc:	4699      	mov	r9, r3
	if (maxChannels == 8)
    3bce:	0003      	movs	r3, r0
    3bd0:	2808      	cmp	r0, #8
    3bd2:	d01d      	beq.n	3c10 <SearchAvailableChannel1+0x58>
	randomNumber =  (rand () % maxChannels) + 1; //this is a guard so that randomNumber is not 0 and the search will happen
    3bd4:	4b2d      	ldr	r3, [pc, #180]	; (3c8c <SearchAvailableChannel1+0xd4>)
    3bd6:	4798      	blx	r3
    3bd8:	9901      	ldr	r1, [sp, #4]
    3bda:	000f      	movs	r7, r1
    3bdc:	4b2c      	ldr	r3, [pc, #176]	; (3c90 <SearchAvailableChannel1+0xd8>)
    3bde:	4798      	blx	r3
    3be0:	3101      	adds	r1, #1
    3be2:	b2cb      	uxtb	r3, r1
    3be4:	469b      	mov	fp, r3
	while (randomNumber)
    3be6:	2b00      	cmp	r3, #0
    3be8:	d04e      	beq.n	3c88 <SearchAvailableChannel1+0xd0>
			if ( (currDr >= RegParams.pChParams[i].dataRange.min) && (currDr <= RegParams.pChParams[i].dataRange.max) && 
    3bea:	492a      	ldr	r1, [pc, #168]	; (3c94 <SearchAvailableChannel1+0xdc>)
    3bec:	790a      	ldrb	r2, [r1, #4]
    3bee:	794b      	ldrb	r3, [r1, #5]
    3bf0:	021b      	lsls	r3, r3, #8
    3bf2:	431a      	orrs	r2, r3
    3bf4:	798b      	ldrb	r3, [r1, #6]
    3bf6:	041b      	lsls	r3, r3, #16
    3bf8:	4313      	orrs	r3, r2
    3bfa:	79ca      	ldrb	r2, [r1, #7]
    3bfc:	0612      	lsls	r2, r2, #24
    3bfe:	431a      	orrs	r2, r3
    3c00:	0016      	movs	r6, r2
    3c02:	465c      	mov	r4, fp
		for (i = startingIndex; (i < (startingIndex + maxChannels)) && (randomNumber != 0) ; i++)
    3c04:	0038      	movs	r0, r7
    3c06:	4448      	add	r0, r9
    3c08:	464b      	mov	r3, r9
    3c0a:	9300      	str	r3, [sp, #0]
			if ( (currDr >= RegParams.pChParams[i].dataRange.min) && (currDr <= RegParams.pChParams[i].dataRange.max) && 
    3c0c:	002f      	movs	r7, r5
    3c0e:	e021      	b.n	3c54 <SearchAvailableChannel1+0x9c>
		startingIndex = RegParams.cmnParams.paramsType1.Max_125khzChan;
    3c10:	3335      	adds	r3, #53	; 0x35
    3c12:	33ff      	adds	r3, #255	; 0xff
    3c14:	4a1f      	ldr	r2, [pc, #124]	; (3c94 <SearchAvailableChannel1+0xdc>)
    3c16:	5cd3      	ldrb	r3, [r2, r3]
    3c18:	4699      	mov	r9, r3
    3c1a:	e7db      	b.n	3bd4 <SearchAvailableChannel1+0x1c>
		for (i = startingIndex; (i < (startingIndex + maxChannels)) && (randomNumber != 0) ; i++)
    3c1c:	3301      	adds	r3, #1
    3c1e:	b2db      	uxtb	r3, r3
    3c20:	4283      	cmp	r3, r0
    3c22:	da13      	bge.n	3c4c <SearchAvailableChannel1+0x94>
    3c24:	2c00      	cmp	r4, #0
    3c26:	d01c      	beq.n	3c62 <SearchAvailableChannel1+0xaa>
			if ( (currDr >= RegParams.pChParams[i].dataRange.min) && (currDr <= RegParams.pChParams[i].dataRange.max) && 
    3c28:	0059      	lsls	r1, r3, #1
    3c2a:	1871      	adds	r1, r6, r1
    3c2c:	784a      	ldrb	r2, [r1, #1]
    3c2e:	0712      	lsls	r2, r2, #28
    3c30:	0f12      	lsrs	r2, r2, #28
    3c32:	4295      	cmp	r5, r2
    3c34:	dbf2      	blt.n	3c1c <SearchAvailableChannel1+0x64>
    3c36:	784a      	ldrb	r2, [r1, #1]
    3c38:	0912      	lsrs	r2, r2, #4
    3c3a:	4297      	cmp	r7, r2
    3c3c:	dcee      	bgt.n	3c1c <SearchAvailableChannel1+0x64>
    3c3e:	780a      	ldrb	r2, [r1, #0]
    3c40:	2a00      	cmp	r2, #0
    3c42:	d0eb      	beq.n	3c1c <SearchAvailableChannel1+0x64>
				randomNumber --;
    3c44:	3c01      	subs	r4, #1
    3c46:	b2e4      	uxtb	r4, r4
    3c48:	e7e8      	b.n	3c1c <SearchAvailableChannel1+0x64>
		for (i = startingIndex; (i < (startingIndex + maxChannels)) && (randomNumber != 0) ; i++)
    3c4a:	9b00      	ldr	r3, [sp, #0]
		if ( randomNumber == randomNumberCopy )
    3c4c:	45a3      	cmp	fp, r4
    3c4e:	d00a      	beq.n	3c66 <SearchAvailableChannel1+0xae>
	while (randomNumber)
    3c50:	2c00      	cmp	r4, #0
    3c52:	d006      	beq.n	3c62 <SearchAvailableChannel1+0xaa>
		for (i = startingIndex; (i < (startingIndex + maxChannels)) && (randomNumber != 0) ; i++)
    3c54:	4581      	cmp	r9, r0
    3c56:	daf8      	bge.n	3c4a <SearchAvailableChannel1+0x92>
    3c58:	2c00      	cmp	r4, #0
    3c5a:	d001      	beq.n	3c60 <SearchAvailableChannel1+0xa8>
    3c5c:	9b00      	ldr	r3, [sp, #0]
    3c5e:	e7e3      	b.n	3c28 <SearchAvailableChannel1+0x70>
    3c60:	464b      	mov	r3, r9
	StackRetStatus_t result = LORAWAN_SUCCESS;
    3c62:	2008      	movs	r0, #8
    3c64:	e000      	b.n	3c68 <SearchAvailableChannel1+0xb0>
			result = LORAWAN_NO_CHANNELS_FOUND;
    3c66:	2010      	movs	r0, #16
	if (i != 0)
    3c68:	2b00      	cmp	r3, #0
    3c6a:	d109      	bne.n	3c80 <SearchAvailableChannel1+0xc8>
		*channelIndex = maxChannels - 1;
    3c6c:	9c01      	ldr	r4, [sp, #4]
    3c6e:	3c01      	subs	r4, #1
    3c70:	4643      	mov	r3, r8
    3c72:	701c      	strb	r4, [r3, #0]
}
    3c74:	b002      	add	sp, #8
    3c76:	bc1c      	pop	{r2, r3, r4}
    3c78:	4690      	mov	r8, r2
    3c7a:	4699      	mov	r9, r3
    3c7c:	46a3      	mov	fp, r4
    3c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*channelIndex = i - 1;
    3c80:	3b01      	subs	r3, #1
    3c82:	4642      	mov	r2, r8
    3c84:	7013      	strb	r3, [r2, #0]
    3c86:	e7f5      	b.n	3c74 <SearchAvailableChannel1+0xbc>
	StackRetStatus_t result = LORAWAN_SUCCESS;
    3c88:	2008      	movs	r0, #8
    3c8a:	e7ef      	b.n	3c6c <SearchAvailableChannel1+0xb4>
    3c8c:	0001145d 	.word	0x0001145d
    3c90:	0000f1ed 	.word	0x0000f1ed
    3c94:	20000b48 	.word	0x20000b48

00003c98 <LORAREG_GetAttr_FreeChannel1>:
{
    3c98:	b570      	push	{r4, r5, r6, lr}
	memcpy(&newFreeChannelReq,(NewFreeChannelReq_t *)attrInput,sizeof(NewFreeChannelReq_t));
    3c9a:	784c      	ldrb	r4, [r1, #1]
	if(newFreeChannelReq.maxChannels > RegParams.maxChannels)
    3c9c:	2022      	movs	r0, #34	; 0x22
    3c9e:	4d07      	ldr	r5, [pc, #28]	; (3cbc <LORAREG_GetAttr_FreeChannel1+0x24>)
    3ca0:	562d      	ldrsb	r5, [r5, r0]
		return LORAWAN_INVALID_PARAMETER;
    3ca2:	3818      	subs	r0, #24
	if(newFreeChannelReq.maxChannels > RegParams.maxChannels)
    3ca4:	42ac      	cmp	r4, r5
    3ca6:	dd00      	ble.n	3caa <LORAREG_GetAttr_FreeChannel1+0x12>
}
    3ca8:	bd70      	pop	{r4, r5, r6, pc}
		result = SearchAvailableChannel1(newFreeChannelReq.maxChannels,newFreeChannelReq.transmissionType,newFreeChannelReq.currDr,(uint8_t*)attrOutput);
    3caa:	7888      	ldrb	r0, [r1, #2]
    3cac:	7809      	ldrb	r1, [r1, #0]
    3cae:	0013      	movs	r3, r2
    3cb0:	0002      	movs	r2, r0
    3cb2:	0020      	movs	r0, r4
    3cb4:	4c02      	ldr	r4, [pc, #8]	; (3cc0 <LORAREG_GetAttr_FreeChannel1+0x28>)
    3cb6:	47a0      	blx	r4
	return result;
    3cb8:	e7f6      	b.n	3ca8 <LORAREG_GetAttr_FreeChannel1+0x10>
    3cba:	46c0      	nop			; (mov r8, r8)
    3cbc:	20000b48 	.word	0x20000b48
    3cc0:	00003bb9 	.word	0x00003bb9

00003cc4 <SearchAvailableChannel2>:
{
    3cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
    3cc6:	46de      	mov	lr, fp
    3cc8:	4657      	mov	r7, sl
    3cca:	464e      	mov	r6, r9
    3ccc:	4645      	mov	r5, r8
    3cce:	b5e0      	push	{r5, r6, r7, lr}
    3cd0:	b087      	sub	sp, #28
    3cd2:	9003      	str	r0, [sp, #12]
    3cd4:	9102      	str	r1, [sp, #8]
    3cd6:	0015      	movs	r5, r2
    3cd8:	9304      	str	r3, [sp, #16]
	if(RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout)
    3cda:	4958      	ldr	r1, [pc, #352]	; (3e3c <SearchAvailableChannel2+0x178>)
    3cdc:	23d1      	movs	r3, #209	; 0xd1
    3cde:	005b      	lsls	r3, r3, #1
    3ce0:	5ccb      	ldrb	r3, [r1, r3]
    3ce2:	22a4      	movs	r2, #164	; 0xa4
    3ce4:	32ff      	adds	r2, #255	; 0xff
    3ce6:	5c8a      	ldrb	r2, [r1, r2]
    3ce8:	0212      	lsls	r2, r2, #8
    3cea:	431a      	orrs	r2, r3
    3cec:	23d2      	movs	r3, #210	; 0xd2
    3cee:	005b      	lsls	r3, r3, #1
    3cf0:	5ccb      	ldrb	r3, [r1, r3]
    3cf2:	041b      	lsls	r3, r3, #16
    3cf4:	431a      	orrs	r2, r3
    3cf6:	23a6      	movs	r3, #166	; 0xa6
    3cf8:	33ff      	adds	r3, #255	; 0xff
    3cfa:	5ccb      	ldrb	r3, [r1, r3]
    3cfc:	061b      	lsls	r3, r3, #24
    3cfe:	4313      	orrs	r3, r2
		return LORAWAN_NO_CHANNELS_FOUND;
    3d00:	2010      	movs	r0, #16
	if(RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout)
    3d02:	2b00      	cmp	r3, #0
    3d04:	d006      	beq.n	3d14 <SearchAvailableChannel2+0x50>
}
    3d06:	b007      	add	sp, #28
    3d08:	bc3c      	pop	{r2, r3, r4, r5}
    3d0a:	4690      	mov	r8, r2
    3d0c:	4699      	mov	r9, r3
    3d0e:	46a2      	mov	sl, r4
    3d10:	46ab      	mov	fp, r5
    3d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
	randomNumber = (rand () % maxChannels) + 1; //this is a guard so that randomNumber is not 0 and the search will happen
    3d14:	4b4a      	ldr	r3, [pc, #296]	; (3e40 <SearchAvailableChannel2+0x17c>)
    3d16:	4798      	blx	r3
    3d18:	9903      	ldr	r1, [sp, #12]
    3d1a:	000c      	movs	r4, r1
    3d1c:	4b49      	ldr	r3, [pc, #292]	; (3e44 <SearchAvailableChannel2+0x180>)
    3d1e:	4798      	blx	r3
    3d20:	3101      	adds	r1, #1
    3d22:	b2cb      	uxtb	r3, r1
    3d24:	1e18      	subs	r0, r3, #0
    3d26:	9305      	str	r3, [sp, #20]
	while (randomNumber)
    3d28:	d100      	bne.n	3d2c <SearchAvailableChannel2+0x68>
    3d2a:	e085      	b.n	3e38 <SearchAvailableChannel2+0x174>
			if ((currDr >= RegParams.pChParams[i].dataRange.min) && (currDr <= RegParams.pChParams[i].dataRange.max) && \
    3d2c:	4b43      	ldr	r3, [pc, #268]	; (3e3c <SearchAvailableChannel2+0x178>)
    3d2e:	791e      	ldrb	r6, [r3, #4]
    3d30:	795a      	ldrb	r2, [r3, #5]
    3d32:	0212      	lsls	r2, r2, #8
    3d34:	4332      	orrs	r2, r6
    3d36:	799e      	ldrb	r6, [r3, #6]
    3d38:	0436      	lsls	r6, r6, #16
    3d3a:	4332      	orrs	r2, r6
    3d3c:	79de      	ldrb	r6, [r3, #7]
    3d3e:	0636      	lsls	r6, r6, #24
    3d40:	4316      	orrs	r6, r2
			bool bandWithoutDutyCycle = (((1 << RegParams.band) & (ISM_EUBAND | ISM_ASBAND | (1 << ISM_JPN923))) == 0);
    3d42:	2226      	movs	r2, #38	; 0x26
    3d44:	5c99      	ldrb	r1, [r3, r2]
    3d46:	4a40      	ldr	r2, [pc, #256]	; (3e48 <SearchAvailableChannel2+0x184>)
    3d48:	410a      	asrs	r2, r1
    3d4a:	2101      	movs	r1, #1
    3d4c:	4011      	ands	r1, r2
    3d4e:	468a      	mov	sl, r1
				(bandWithoutDutyCycle || RegParams.pSubBandParams[RegParams.pOtherChParams[i].subBandId].subBandTimeout == 0))
    3d50:	7b19      	ldrb	r1, [r3, #12]
    3d52:	7b5a      	ldrb	r2, [r3, #13]
    3d54:	0212      	lsls	r2, r2, #8
    3d56:	4311      	orrs	r1, r2
    3d58:	7b9a      	ldrb	r2, [r3, #14]
    3d5a:	0412      	lsls	r2, r2, #16
    3d5c:	430a      	orrs	r2, r1
    3d5e:	7bd9      	ldrb	r1, [r3, #15]
    3d60:	0609      	lsls	r1, r1, #24
    3d62:	4311      	orrs	r1, r2
    3d64:	4689      	mov	r9, r1
    3d66:	7a19      	ldrb	r1, [r3, #8]
    3d68:	7a5a      	ldrb	r2, [r3, #9]
    3d6a:	0212      	lsls	r2, r2, #8
    3d6c:	4311      	orrs	r1, r2
    3d6e:	7a9a      	ldrb	r2, [r3, #10]
    3d70:	0412      	lsls	r2, r2, #16
    3d72:	430a      	orrs	r2, r1
    3d74:	7adb      	ldrb	r3, [r3, #11]
    3d76:	061b      	lsls	r3, r3, #24
    3d78:	4313      	orrs	r3, r2
    3d7a:	469b      	mov	fp, r3
    3d7c:	0001      	movs	r1, r0
    3d7e:	46a8      	mov	r8, r5
    3d80:	e045      	b.n	3e0e <SearchAvailableChannel2+0x14a>
				    randomNumber --;					
    3d82:	3901      	subs	r1, #1
    3d84:	b2c9      	uxtb	r1, r1
		for (i = startingIndex; (i < (startingIndex + maxChannels)) && (randomNumber != 0) ; i++)
    3d86:	3301      	adds	r3, #1
    3d88:	b2db      	uxtb	r3, r3
    3d8a:	429c      	cmp	r4, r3
    3d8c:	dd3a      	ble.n	3e04 <SearchAvailableChannel2+0x140>
    3d8e:	2900      	cmp	r1, #0
    3d90:	d044      	beq.n	3e1c <SearchAvailableChannel2+0x158>
			if ((currDr >= RegParams.pChParams[i].dataRange.min) && (currDr <= RegParams.pChParams[i].dataRange.max) && \
    3d92:	001f      	movs	r7, r3
    3d94:	0058      	lsls	r0, r3, #1
    3d96:	1830      	adds	r0, r6, r0
    3d98:	7842      	ldrb	r2, [r0, #1]
    3d9a:	0712      	lsls	r2, r2, #28
    3d9c:	0f12      	lsrs	r2, r2, #28
    3d9e:	4295      	cmp	r5, r2
    3da0:	dbf1      	blt.n	3d86 <SearchAvailableChannel2+0xc2>
    3da2:	7842      	ldrb	r2, [r0, #1]
    3da4:	0912      	lsrs	r2, r2, #4
    3da6:	4590      	cmp	r8, r2
    3da8:	dced      	bgt.n	3d86 <SearchAvailableChannel2+0xc2>
    3daa:	7802      	ldrb	r2, [r0, #0]
    3dac:	2a00      	cmp	r2, #0
    3dae:	d0ea      	beq.n	3d86 <SearchAvailableChannel2+0xc2>
				(RegParams.pChParams[i].status == ENABLED) && \
    3db0:	4652      	mov	r2, sl
    3db2:	2a00      	cmp	r2, #0
    3db4:	d018      	beq.n	3de8 <SearchAvailableChannel2+0x124>
				(bandWithoutDutyCycle || RegParams.pSubBandParams[RegParams.pOtherChParams[i].subBandId].subBandTimeout == 0))
    3db6:	005a      	lsls	r2, r3, #1
    3db8:	18d2      	adds	r2, r2, r3
    3dba:	0092      	lsls	r2, r2, #2
    3dbc:	445a      	add	r2, fp
    3dbe:	7a10      	ldrb	r0, [r2, #8]
    3dc0:	0042      	lsls	r2, r0, #1
    3dc2:	1812      	adds	r2, r2, r0
    3dc4:	0092      	lsls	r2, r2, #2
    3dc6:	444a      	add	r2, r9
    3dc8:	7a10      	ldrb	r0, [r2, #8]
    3dca:	4684      	mov	ip, r0
    3dcc:	9201      	str	r2, [sp, #4]
    3dce:	7a50      	ldrb	r0, [r2, #9]
    3dd0:	0200      	lsls	r0, r0, #8
    3dd2:	4662      	mov	r2, ip
    3dd4:	4310      	orrs	r0, r2
    3dd6:	9a01      	ldr	r2, [sp, #4]
    3dd8:	7a92      	ldrb	r2, [r2, #10]
    3dda:	0412      	lsls	r2, r2, #16
    3ddc:	4310      	orrs	r0, r2
    3dde:	9a01      	ldr	r2, [sp, #4]
    3de0:	7ad2      	ldrb	r2, [r2, #11]
    3de2:	0612      	lsls	r2, r2, #24
    3de4:	4302      	orrs	r2, r0
    3de6:	d1ce      	bne.n	3d86 <SearchAvailableChannel2+0xc2>
				if(transmissionType == 0  && RegParams.pOtherChParams[i].joinRequestChannel == 1)
    3de8:	9a02      	ldr	r2, [sp, #8]
    3dea:	2a00      	cmp	r2, #0
    3dec:	d1c9      	bne.n	3d82 <SearchAvailableChannel2+0xbe>
    3dee:	007a      	lsls	r2, r7, #1
    3df0:	19d7      	adds	r7, r2, r7
    3df2:	00bf      	lsls	r7, r7, #2
    3df4:	445f      	add	r7, fp
    3df6:	7a7a      	ldrb	r2, [r7, #9]
    3df8:	2a00      	cmp	r2, #0
    3dfa:	d0c4      	beq.n	3d86 <SearchAvailableChannel2+0xc2>
					randomNumber --;
    3dfc:	3901      	subs	r1, #1
    3dfe:	b2c9      	uxtb	r1, r1
    3e00:	e7c1      	b.n	3d86 <SearchAvailableChannel2+0xc2>
		for (i = startingIndex; (i < (startingIndex + maxChannels)) && (randomNumber != 0) ; i++)
    3e02:	2300      	movs	r3, #0
		if ( randomNumber == randomNumberCopy )
    3e04:	9a05      	ldr	r2, [sp, #20]
    3e06:	428a      	cmp	r2, r1
    3e08:	d00a      	beq.n	3e20 <SearchAvailableChannel2+0x15c>
	while (randomNumber)
    3e0a:	2900      	cmp	r1, #0
    3e0c:	d006      	beq.n	3e1c <SearchAvailableChannel2+0x158>
		for (i = startingIndex; (i < (startingIndex + maxChannels)) && (randomNumber != 0) ; i++)
    3e0e:	2c00      	cmp	r4, #0
    3e10:	ddf7      	ble.n	3e02 <SearchAvailableChannel2+0x13e>
    3e12:	2900      	cmp	r1, #0
    3e14:	d001      	beq.n	3e1a <SearchAvailableChannel2+0x156>
    3e16:	2300      	movs	r3, #0
    3e18:	e7bb      	b.n	3d92 <SearchAvailableChannel2+0xce>
    3e1a:	000b      	movs	r3, r1
	StackRetStatus_t result = LORAWAN_SUCCESS;
    3e1c:	2008      	movs	r0, #8
    3e1e:	e000      	b.n	3e22 <SearchAvailableChannel2+0x15e>
			result = LORAWAN_NO_CHANNELS_FOUND;
    3e20:	2010      	movs	r0, #16
	if (i != 0)
    3e22:	2b00      	cmp	r3, #0
    3e24:	d104      	bne.n	3e30 <SearchAvailableChannel2+0x16c>
		*channelIndex = maxChannels - 1;
    3e26:	9b03      	ldr	r3, [sp, #12]
    3e28:	3b01      	subs	r3, #1
    3e2a:	9a04      	ldr	r2, [sp, #16]
    3e2c:	7013      	strb	r3, [r2, #0]
    3e2e:	e76a      	b.n	3d06 <SearchAvailableChannel2+0x42>
		*channelIndex = i - 1;
    3e30:	3b01      	subs	r3, #1
    3e32:	9a04      	ldr	r2, [sp, #16]
    3e34:	7013      	strb	r3, [r2, #0]
    3e36:	e766      	b.n	3d06 <SearchAvailableChannel2+0x42>
	StackRetStatus_t result = LORAWAN_SUCCESS;
    3e38:	2008      	movs	r0, #8
    3e3a:	e7f4      	b.n	3e26 <SearchAvailableChannel2+0x162>
    3e3c:	20000b48 	.word	0x20000b48
    3e40:	0001145d 	.word	0x0001145d
    3e44:	0000f1ed 	.word	0x0000f1ed
    3e48:	00007fe3 	.word	0x00007fe3

00003e4c <LORAREG_GetAttr_FreeChannel2>:
{
    3e4c:	b570      	push	{r4, r5, r6, lr}
	memcpy(&newFreeChannelReq,(NewFreeChannelReq_t *)attrInput,sizeof(NewFreeChannelReq_t));
    3e4e:	784c      	ldrb	r4, [r1, #1]
	if(newFreeChannelReq.maxChannels > RegParams.maxChannels)
    3e50:	2022      	movs	r0, #34	; 0x22
    3e52:	4d07      	ldr	r5, [pc, #28]	; (3e70 <LORAREG_GetAttr_FreeChannel2+0x24>)
    3e54:	562d      	ldrsb	r5, [r5, r0]
		return LORAWAN_INVALID_PARAMETER;
    3e56:	3818      	subs	r0, #24
	if(newFreeChannelReq.maxChannels > RegParams.maxChannels)
    3e58:	42ac      	cmp	r4, r5
    3e5a:	dd00      	ble.n	3e5e <LORAREG_GetAttr_FreeChannel2+0x12>
}
    3e5c:	bd70      	pop	{r4, r5, r6, pc}
		result = SearchAvailableChannel2(newFreeChannelReq.maxChannels,newFreeChannelReq.transmissionType,newFreeChannelReq.currDr,(uint8_t*)attrOutput);
    3e5e:	7888      	ldrb	r0, [r1, #2]
    3e60:	7809      	ldrb	r1, [r1, #0]
    3e62:	0013      	movs	r3, r2
    3e64:	0002      	movs	r2, r0
    3e66:	0020      	movs	r0, r4
    3e68:	4c02      	ldr	r4, [pc, #8]	; (3e74 <LORAREG_GetAttr_FreeChannel2+0x28>)
    3e6a:	47a0      	blx	r4
	return result;
    3e6c:	e7f6      	b.n	3e5c <LORAREG_GetAttr_FreeChannel2+0x10>
    3e6e:	46c0      	nop			; (mov r8, r8)
    3e70:	20000b48 	.word	0x20000b48
    3e74:	00003cc5 	.word	0x00003cc5

00003e78 <UpdateChannelIdStatus>:
{
    3e78:	b510      	push	{r4, lr}
	if(chid < RegParams.maxChannels || ((((1 << RegParams.band) & (ISM_NAAUBAND)) == 0) && chid >= RegParams.cmnParams.paramsType2.minNonDefChId))
    3e7a:	2322      	movs	r3, #34	; 0x22
    3e7c:	4a14      	ldr	r2, [pc, #80]	; (3ed0 <UpdateChannelIdStatus+0x58>)
    3e7e:	56d3      	ldrsb	r3, [r2, r3]
    3e80:	4298      	cmp	r0, r3
    3e82:	db0b      	blt.n	3e9c <UpdateChannelIdStatus+0x24>
    3e84:	2326      	movs	r3, #38	; 0x26
    3e86:	5cd2      	ldrb	r2, [r2, r3]
    3e88:	3b1a      	subs	r3, #26
    3e8a:	4113      	asrs	r3, r2
    3e8c:	07db      	lsls	r3, r3, #31
    3e8e:	d41e      	bmi.n	3ece <UpdateChannelIdStatus+0x56>
    3e90:	23aa      	movs	r3, #170	; 0xaa
    3e92:	33ff      	adds	r3, #255	; 0xff
    3e94:	4a0e      	ldr	r2, [pc, #56]	; (3ed0 <UpdateChannelIdStatus+0x58>)
    3e96:	5cd3      	ldrb	r3, [r2, r3]
    3e98:	4283      	cmp	r3, r0
    3e9a:	d818      	bhi.n	3ece <UpdateChannelIdStatus+0x56>
		RegParams.pChParams[chid].status = statusNew;
    3e9c:	4b0c      	ldr	r3, [pc, #48]	; (3ed0 <UpdateChannelIdStatus+0x58>)
    3e9e:	791a      	ldrb	r2, [r3, #4]
    3ea0:	795c      	ldrb	r4, [r3, #5]
    3ea2:	0224      	lsls	r4, r4, #8
    3ea4:	4314      	orrs	r4, r2
    3ea6:	799a      	ldrb	r2, [r3, #6]
    3ea8:	0412      	lsls	r2, r2, #16
    3eaa:	4314      	orrs	r4, r2
    3eac:	79da      	ldrb	r2, [r3, #7]
    3eae:	0612      	lsls	r2, r2, #24
    3eb0:	4322      	orrs	r2, r4
    3eb2:	0040      	lsls	r0, r0, #1
    3eb4:	5481      	strb	r1, [r0, r2]
		PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    3eb6:	22f8      	movs	r2, #248	; 0xf8
    3eb8:	32ff      	adds	r2, #255	; 0xff
    3eba:	5c9a      	ldrb	r2, [r3, r2]
    3ebc:	21fc      	movs	r1, #252	; 0xfc
    3ebe:	0049      	lsls	r1, r1, #1
    3ec0:	5c58      	ldrb	r0, [r3, r1]
    3ec2:	0200      	lsls	r0, r0, #8
    3ec4:	4310      	orrs	r0, r2
    3ec6:	b2c1      	uxtb	r1, r0
    3ec8:	0a00      	lsrs	r0, r0, #8
    3eca:	4b02      	ldr	r3, [pc, #8]	; (3ed4 <UpdateChannelIdStatus+0x5c>)
    3ecc:	4798      	blx	r3
}
    3ece:	bd10      	pop	{r4, pc}
    3ed0:	20000b48 	.word	0x20000b48
    3ed4:	00001e65 	.word	0x00001e65

00003ed8 <EnableChannels2>:
{
    3ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3eda:	46ce      	mov	lr, r9
    3edc:	4647      	mov	r7, r8
    3ede:	b580      	push	{r7, lr}
    3ee0:	0004      	movs	r4, r0
    3ee2:	000f      	movs	r7, r1
    3ee4:	0015      	movs	r5, r2
	for(i = startIndx; i <= endIndx; i++)
    3ee6:	4288      	cmp	r0, r1
    3ee8:	d812      	bhi.n	3f10 <EnableChannels2+0x38>
		if((chMask & (0x0001)) == 0x0001)
    3eea:	2601      	movs	r6, #1
			UpdateChannelIdStatus(i, ENABLED);
    3eec:	4b0a      	ldr	r3, [pc, #40]	; (3f18 <EnableChannels2+0x40>)
    3eee:	4699      	mov	r9, r3
			UpdateChannelIdStatus(i, DISABLED);
    3ef0:	4698      	mov	r8, r3
    3ef2:	e007      	b.n	3f04 <EnableChannels2+0x2c>
    3ef4:	2100      	movs	r1, #0
    3ef6:	0020      	movs	r0, r4
    3ef8:	47c0      	blx	r8
		chMask = chMask >> SHIFT1;
    3efa:	086d      	lsrs	r5, r5, #1
	for(i = startIndx; i <= endIndx; i++)
    3efc:	3401      	adds	r4, #1
    3efe:	b2e4      	uxtb	r4, r4
    3f00:	42a7      	cmp	r7, r4
    3f02:	d305      	bcc.n	3f10 <EnableChannels2+0x38>
		if((chMask & (0x0001)) == 0x0001)
    3f04:	422e      	tst	r6, r5
    3f06:	d0f5      	beq.n	3ef4 <EnableChannels2+0x1c>
			UpdateChannelIdStatus(i, ENABLED);
    3f08:	0031      	movs	r1, r6
    3f0a:	0020      	movs	r0, r4
    3f0c:	47c8      	blx	r9
    3f0e:	e7f4      	b.n	3efa <EnableChannels2+0x22>
}
    3f10:	bc0c      	pop	{r2, r3}
    3f12:	4690      	mov	r8, r2
    3f14:	4699      	mov	r9, r3
    3f16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3f18:	00003e79 	.word	0x00003e79

00003f1c <UpdateChannelIdStatusT2>:
{
    3f1c:	b570      	push	{r4, r5, r6, lr}
    3f1e:	000c      	movs	r4, r1
	if(chid < RegParams.maxChannels && chid >= RegParams.cmnParams.paramsType2.minNonDefChId &&
    3f20:	2322      	movs	r3, #34	; 0x22
    3f22:	4a40      	ldr	r2, [pc, #256]	; (4024 <UpdateChannelIdStatusT2+0x108>)
    3f24:	56d3      	ldrsb	r3, [r2, r3]
    3f26:	4298      	cmp	r0, r3
    3f28:	da17      	bge.n	3f5a <UpdateChannelIdStatusT2+0x3e>
    3f2a:	23aa      	movs	r3, #170	; 0xaa
    3f2c:	33ff      	adds	r3, #255	; 0xff
    3f2e:	5cd3      	ldrb	r3, [r2, r3]
    3f30:	4283      	cmp	r3, r0
    3f32:	d812      	bhi.n	3f5a <UpdateChannelIdStatusT2+0x3e>
	   (RegParams.pOtherChParams[chid].parametersDefined & (FREQUENCY_DEFINED | DATA_RANGE_DEFINED)) == (FREQUENCY_DEFINED | DATA_RANGE_DEFINED))
    3f34:	0045      	lsls	r5, r0, #1
    3f36:	182d      	adds	r5, r5, r0
    3f38:	00ad      	lsls	r5, r5, #2
    3f3a:	0011      	movs	r1, r2
    3f3c:	7a13      	ldrb	r3, [r2, #8]
    3f3e:	7a52      	ldrb	r2, [r2, #9]
    3f40:	0212      	lsls	r2, r2, #8
    3f42:	431a      	orrs	r2, r3
    3f44:	7a8b      	ldrb	r3, [r1, #10]
    3f46:	041b      	lsls	r3, r3, #16
    3f48:	431a      	orrs	r2, r3
    3f4a:	7acb      	ldrb	r3, [r1, #11]
    3f4c:	061b      	lsls	r3, r3, #24
    3f4e:	4313      	orrs	r3, r2
    3f50:	195b      	adds	r3, r3, r5
	if(chid < RegParams.maxChannels && chid >= RegParams.cmnParams.paramsType2.minNonDefChId &&
    3f52:	7adb      	ldrb	r3, [r3, #11]
    3f54:	43db      	mvns	r3, r3
    3f56:	079b      	lsls	r3, r3, #30
    3f58:	d000      	beq.n	3f5c <UpdateChannelIdStatusT2+0x40>
}
    3f5a:	bd70      	pop	{r4, r5, r6, pc}
		RegParams.pChParams[chid].status = statusNew;
    3f5c:	000e      	movs	r6, r1
    3f5e:	790b      	ldrb	r3, [r1, #4]
    3f60:	794a      	ldrb	r2, [r1, #5]
    3f62:	0212      	lsls	r2, r2, #8
    3f64:	431a      	orrs	r2, r3
    3f66:	798b      	ldrb	r3, [r1, #6]
    3f68:	041b      	lsls	r3, r3, #16
    3f6a:	431a      	orrs	r2, r3
    3f6c:	79cb      	ldrb	r3, [r1, #7]
    3f6e:	061b      	lsls	r3, r3, #24
    3f70:	4313      	orrs	r3, r2
    3f72:	0040      	lsls	r0, r0, #1
    3f74:	54c4      	strb	r4, [r0, r3]
		PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    3f76:	23f8      	movs	r3, #248	; 0xf8
    3f78:	33ff      	adds	r3, #255	; 0xff
    3f7a:	5ccb      	ldrb	r3, [r1, r3]
    3f7c:	22fc      	movs	r2, #252	; 0xfc
    3f7e:	0052      	lsls	r2, r2, #1
    3f80:	5c88      	ldrb	r0, [r1, r2]
    3f82:	0200      	lsls	r0, r0, #8
    3f84:	4318      	orrs	r0, r3
    3f86:	b2c1      	uxtb	r1, r0
    3f88:	0a00      	lsrs	r0, r0, #8
    3f8a:	4b27      	ldr	r3, [pc, #156]	; (4028 <UpdateChannelIdStatusT2+0x10c>)
    3f8c:	4798      	blx	r3
		if(((1 << RegParams.band) & (ISM_EUBAND)) != 0 && statusNew == DISABLED)
    3f8e:	2326      	movs	r3, #38	; 0x26
    3f90:	5cf2      	ldrb	r2, [r6, r3]
    3f92:	3b23      	subs	r3, #35	; 0x23
    3f94:	4113      	asrs	r3, r2
    3f96:	07db      	lsls	r3, r3, #31
    3f98:	d5df      	bpl.n	3f5a <UpdateChannelIdStatusT2+0x3e>
    3f9a:	2c00      	cmp	r4, #0
    3f9c:	d1dd      	bne.n	3f5a <UpdateChannelIdStatusT2+0x3e>
			subBandId = RegParams.pOtherChParams[chid].subBandId;
    3f9e:	4b21      	ldr	r3, [pc, #132]	; (4024 <UpdateChannelIdStatusT2+0x108>)
    3fa0:	7a18      	ldrb	r0, [r3, #8]
    3fa2:	7a5a      	ldrb	r2, [r3, #9]
    3fa4:	0212      	lsls	r2, r2, #8
    3fa6:	4302      	orrs	r2, r0
    3fa8:	7a98      	ldrb	r0, [r3, #10]
    3faa:	0400      	lsls	r0, r0, #16
    3fac:	4302      	orrs	r2, r0
    3fae:	7ad8      	ldrb	r0, [r3, #11]
    3fb0:	0600      	lsls	r0, r0, #24
    3fb2:	4310      	orrs	r0, r2
    3fb4:	1945      	adds	r5, r0, r5
    3fb6:	7a2d      	ldrb	r5, [r5, #8]
			for(uint8_t i = 0; i < RegParams.maxChannels; i++)
    3fb8:	2222      	movs	r2, #34	; 0x22
    3fba:	569c      	ldrsb	r4, [r3, r2]
    3fbc:	2c00      	cmp	r4, #0
    3fbe:	dd1c      	ble.n	3ffa <UpdateChannelIdStatusT2+0xde>
				if(RegParams.pChParams[i].status == ENABLED &&
    3fc0:	001a      	movs	r2, r3
    3fc2:	7919      	ldrb	r1, [r3, #4]
    3fc4:	795b      	ldrb	r3, [r3, #5]
    3fc6:	021b      	lsls	r3, r3, #8
    3fc8:	430b      	orrs	r3, r1
    3fca:	7991      	ldrb	r1, [r2, #6]
    3fcc:	0409      	lsls	r1, r1, #16
    3fce:	430b      	orrs	r3, r1
    3fd0:	79d1      	ldrb	r1, [r2, #7]
    3fd2:	0609      	lsls	r1, r1, #24
    3fd4:	4319      	orrs	r1, r3
    3fd6:	2300      	movs	r3, #0
    3fd8:	e003      	b.n	3fe2 <UpdateChannelIdStatusT2+0xc6>
			for(uint8_t i = 0; i < RegParams.maxChannels; i++)
    3fda:	3301      	adds	r3, #1
    3fdc:	b2db      	uxtb	r3, r3
    3fde:	42a3      	cmp	r3, r4
    3fe0:	da0b      	bge.n	3ffa <UpdateChannelIdStatusT2+0xde>
				if(RegParams.pChParams[i].status == ENABLED &&
    3fe2:	005a      	lsls	r2, r3, #1
    3fe4:	5c52      	ldrb	r2, [r2, r1]
    3fe6:	2a00      	cmp	r2, #0
    3fe8:	d0f7      	beq.n	3fda <UpdateChannelIdStatusT2+0xbe>
				 subBandId == RegParams.pOtherChParams[i].subBandId)
    3fea:	005a      	lsls	r2, r3, #1
    3fec:	18d2      	adds	r2, r2, r3
    3fee:	0092      	lsls	r2, r2, #2
    3ff0:	1882      	adds	r2, r0, r2
				if(RegParams.pChParams[i].status == ENABLED &&
    3ff2:	7a12      	ldrb	r2, [r2, #8]
    3ff4:	42aa      	cmp	r2, r5
    3ff6:	d1f0      	bne.n	3fda <UpdateChannelIdStatusT2+0xbe>
    3ff8:	e7af      	b.n	3f5a <UpdateChannelIdStatusT2+0x3e>
			RegParams.pSubBandParams[subBandId].subBandTimeout = 0;
    3ffa:	490a      	ldr	r1, [pc, #40]	; (4024 <UpdateChannelIdStatusT2+0x108>)
    3ffc:	7b0a      	ldrb	r2, [r1, #12]
    3ffe:	7b4b      	ldrb	r3, [r1, #13]
    4000:	021b      	lsls	r3, r3, #8
    4002:	4313      	orrs	r3, r2
    4004:	7b8a      	ldrb	r2, [r1, #14]
    4006:	0412      	lsls	r2, r2, #16
    4008:	4313      	orrs	r3, r2
    400a:	7bca      	ldrb	r2, [r1, #15]
    400c:	0612      	lsls	r2, r2, #24
    400e:	431a      	orrs	r2, r3
    4010:	006b      	lsls	r3, r5, #1
    4012:	195d      	adds	r5, r3, r5
    4014:	00ad      	lsls	r5, r5, #2
    4016:	18ad      	adds	r5, r5, r2
    4018:	2300      	movs	r3, #0
    401a:	722b      	strb	r3, [r5, #8]
    401c:	726b      	strb	r3, [r5, #9]
    401e:	72ab      	strb	r3, [r5, #10]
    4020:	72eb      	strb	r3, [r5, #11]
    4022:	e79a      	b.n	3f5a <UpdateChannelIdStatusT2+0x3e>
    4024:	20000b48 	.word	0x20000b48
    4028:	00001e65 	.word	0x00001e65

0000402c <setChannelIdStatusT2>:
{
    402c:	b570      	push	{r4, r5, r6, lr}
    402e:	b082      	sub	sp, #8
	memcpy(&updateChid,attrInput,sizeof(UpdateChId_t));
    4030:	780d      	ldrb	r5, [r1, #0]
    4032:	784e      	ldrb	r6, [r1, #1]
	valChid.channelIndex = updateChid.channelIndex;
    4034:	a901      	add	r1, sp, #4
    4036:	700d      	strb	r5, [r1, #0]
	valChid.allowedForDefaultChannels = WITHOUT_DEFAULT_CHANNELS;
    4038:	2300      	movs	r3, #0
    403a:	704b      	strb	r3, [r1, #1]
	if(ValidateChannelIdT2(CHANNEL_ID, &valChid) == LORAWAN_SUCCESS)
    403c:	2015      	movs	r0, #21
    403e:	4b0c      	ldr	r3, [pc, #48]	; (4070 <setChannelIdStatusT2+0x44>)
    4040:	4798      	blx	r3
    4042:	0004      	movs	r4, r0
    4044:	2808      	cmp	r0, #8
    4046:	d003      	beq.n	4050 <setChannelIdStatusT2+0x24>
		retVal = LORAWAN_INVALID_PARAMETER;
    4048:	240a      	movs	r4, #10
}
    404a:	0020      	movs	r0, r4
    404c:	b002      	add	sp, #8
    404e:	bd70      	pop	{r4, r5, r6, pc}
		if(RegParams.band ==  ISM_IND865)
    4050:	2326      	movs	r3, #38	; 0x26
    4052:	4a08      	ldr	r2, [pc, #32]	; (4074 <setChannelIdStatusT2+0x48>)
    4054:	5cd3      	ldrb	r3, [r2, r3]
    4056:	2b0f      	cmp	r3, #15
    4058:	d004      	beq.n	4064 <setChannelIdStatusT2+0x38>
		    UpdateChannelIdStatusT2(updateChid.channelIndex,updateChid.statusNew);
    405a:	0031      	movs	r1, r6
    405c:	0028      	movs	r0, r5
    405e:	4b06      	ldr	r3, [pc, #24]	; (4078 <setChannelIdStatusT2+0x4c>)
    4060:	4798      	blx	r3
    4062:	e7f2      	b.n	404a <setChannelIdStatusT2+0x1e>
			UpdateChannelIdStatus(updateChid.channelIndex,updateChid.statusNew);
    4064:	0031      	movs	r1, r6
    4066:	0028      	movs	r0, r5
    4068:	4b04      	ldr	r3, [pc, #16]	; (407c <setChannelIdStatusT2+0x50>)
    406a:	4798      	blx	r3
    406c:	e7ed      	b.n	404a <setChannelIdStatusT2+0x1e>
    406e:	46c0      	nop			; (mov r8, r8)
    4070:	000037d9 	.word	0x000037d9
    4074:	20000b48 	.word	0x20000b48
    4078:	00003f1d 	.word	0x00003f1d
    407c:	00003e79 	.word	0x00003e79

00004080 <UpdateChannelIdStatusT4>:
{
    4080:	b570      	push	{r4, r5, r6, lr}
    4082:	0004      	movs	r4, r0
    4084:	000d      	movs	r5, r1
	RegParams.pChParams[chid].status = statusNew;
    4086:	4925      	ldr	r1, [pc, #148]	; (411c <UpdateChannelIdStatusT4+0x9c>)
    4088:	790b      	ldrb	r3, [r1, #4]
    408a:	794a      	ldrb	r2, [r1, #5]
    408c:	0212      	lsls	r2, r2, #8
    408e:	431a      	orrs	r2, r3
    4090:	798b      	ldrb	r3, [r1, #6]
    4092:	041b      	lsls	r3, r3, #16
    4094:	431a      	orrs	r2, r3
    4096:	79cb      	ldrb	r3, [r1, #7]
    4098:	061b      	lsls	r3, r3, #24
    409a:	4313      	orrs	r3, r2
    409c:	0042      	lsls	r2, r0, #1
    409e:	54d5      	strb	r5, [r2, r3]
	PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    40a0:	23f8      	movs	r3, #248	; 0xf8
    40a2:	33ff      	adds	r3, #255	; 0xff
    40a4:	5ccb      	ldrb	r3, [r1, r3]
    40a6:	22fc      	movs	r2, #252	; 0xfc
    40a8:	0052      	lsls	r2, r2, #1
    40aa:	5c88      	ldrb	r0, [r1, r2]
    40ac:	0200      	lsls	r0, r0, #8
    40ae:	4318      	orrs	r0, r3
    40b0:	b2c1      	uxtb	r1, r0
    40b2:	0a00      	lsrs	r0, r0, #8
    40b4:	4b1a      	ldr	r3, [pc, #104]	; (4120 <UpdateChannelIdStatusT4+0xa0>)
    40b6:	4798      	blx	r3
	if(statusNew == ENABLED)
    40b8:	2d00      	cmp	r5, #0
    40ba:	d02a      	beq.n	4112 <UpdateChannelIdStatusT4+0x92>
		if(RegParams.pOtherChParams[chid].ulfrequency < FREQ_922100KHZ)
    40bc:	4a17      	ldr	r2, [pc, #92]	; (411c <UpdateChannelIdStatusT4+0x9c>)
    40be:	7a10      	ldrb	r0, [r2, #8]
    40c0:	7a53      	ldrb	r3, [r2, #9]
    40c2:	021b      	lsls	r3, r3, #8
    40c4:	4303      	orrs	r3, r0
    40c6:	7a90      	ldrb	r0, [r2, #10]
    40c8:	0400      	lsls	r0, r0, #16
    40ca:	4303      	orrs	r3, r0
    40cc:	7ad0      	ldrb	r0, [r2, #11]
    40ce:	0600      	lsls	r0, r0, #24
    40d0:	4318      	orrs	r0, r3
    40d2:	0063      	lsls	r3, r4, #1
    40d4:	191c      	adds	r4, r3, r4
    40d6:	00a4      	lsls	r4, r4, #2
    40d8:	1900      	adds	r0, r0, r4
    40da:	7803      	ldrb	r3, [r0, #0]
    40dc:	7842      	ldrb	r2, [r0, #1]
    40de:	0212      	lsls	r2, r2, #8
    40e0:	431a      	orrs	r2, r3
    40e2:	7883      	ldrb	r3, [r0, #2]
    40e4:	041b      	lsls	r3, r3, #16
    40e6:	431a      	orrs	r2, r3
    40e8:	78c3      	ldrb	r3, [r0, #3]
    40ea:	061b      	lsls	r3, r3, #24
    40ec:	4313      	orrs	r3, r2
    40ee:	4a0d      	ldr	r2, [pc, #52]	; (4124 <UpdateChannelIdStatusT4+0xa4>)
    40f0:	4293      	cmp	r3, r2
    40f2:	d80f      	bhi.n	4114 <UpdateChannelIdStatusT4+0x94>
			RegParams.pOtherChParams[chid].maxEIRP = DEFAULT_EIRP_LF;
    40f4:	230a      	movs	r3, #10
    40f6:	7283      	strb	r3, [r0, #10]
		PDS_STORE(RegParams.regParamItems.ch_param_2_item_id);
    40f8:	4b08      	ldr	r3, [pc, #32]	; (411c <UpdateChannelIdStatusT4+0x9c>)
    40fa:	22fa      	movs	r2, #250	; 0xfa
    40fc:	32ff      	adds	r2, #255	; 0xff
    40fe:	5c9a      	ldrb	r2, [r3, r2]
    4100:	21fd      	movs	r1, #253	; 0xfd
    4102:	0049      	lsls	r1, r1, #1
    4104:	5c58      	ldrb	r0, [r3, r1]
    4106:	0200      	lsls	r0, r0, #8
    4108:	4310      	orrs	r0, r2
    410a:	b2c1      	uxtb	r1, r0
    410c:	0a00      	lsrs	r0, r0, #8
    410e:	4b04      	ldr	r3, [pc, #16]	; (4120 <UpdateChannelIdStatusT4+0xa0>)
    4110:	4798      	blx	r3
}
    4112:	bd70      	pop	{r4, r5, r6, pc}
			RegParams.pOtherChParams[chid].maxEIRP = DEFAULT_EIRP_HF;
    4114:	230e      	movs	r3, #14
    4116:	7283      	strb	r3, [r0, #10]
    4118:	e7ee      	b.n	40f8 <UpdateChannelIdStatusT4+0x78>
    411a:	46c0      	nop			; (mov r8, r8)
    411c:	20000b48 	.word	0x20000b48
    4120:	00001e65 	.word	0x00001e65
    4124:	36f6211f 	.word	0x36f6211f

00004128 <UpdateChannelIdStatusT3>:
{
    4128:	b570      	push	{r4, r5, r6, lr}
    412a:	0005      	movs	r5, r0
	RegParams.pChParams[chid].status = statusNew;
    412c:	0046      	lsls	r6, r0, #1
    412e:	4c2a      	ldr	r4, [pc, #168]	; (41d8 <UpdateChannelIdStatusT3+0xb0>)
    4130:	7923      	ldrb	r3, [r4, #4]
    4132:	7962      	ldrb	r2, [r4, #5]
    4134:	0212      	lsls	r2, r2, #8
    4136:	431a      	orrs	r2, r3
    4138:	79a3      	ldrb	r3, [r4, #6]
    413a:	041b      	lsls	r3, r3, #16
    413c:	431a      	orrs	r2, r3
    413e:	79e3      	ldrb	r3, [r4, #7]
    4140:	061b      	lsls	r3, r3, #24
    4142:	4313      	orrs	r3, r2
    4144:	5599      	strb	r1, [r3, r6]
	PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    4146:	23f8      	movs	r3, #248	; 0xf8
    4148:	33ff      	adds	r3, #255	; 0xff
    414a:	5ce3      	ldrb	r3, [r4, r3]
    414c:	22fc      	movs	r2, #252	; 0xfc
    414e:	0052      	lsls	r2, r2, #1
    4150:	5ca0      	ldrb	r0, [r4, r2]
    4152:	0200      	lsls	r0, r0, #8
    4154:	4318      	orrs	r0, r3
    4156:	b2c1      	uxtb	r1, r0
    4158:	0a00      	lsrs	r0, r0, #8
    415a:	4b20      	ldr	r3, [pc, #128]	; (41dc <UpdateChannelIdStatusT3+0xb4>)
    415c:	4798      	blx	r3
	if(RegParams.pChParams[chid].status == DISABLED)
    415e:	7923      	ldrb	r3, [r4, #4]
    4160:	7962      	ldrb	r2, [r4, #5]
    4162:	0212      	lsls	r2, r2, #8
    4164:	431a      	orrs	r2, r3
    4166:	79a3      	ldrb	r3, [r4, #6]
    4168:	041b      	lsls	r3, r3, #16
    416a:	431a      	orrs	r2, r3
    416c:	79e3      	ldrb	r3, [r4, #7]
    416e:	061b      	lsls	r3, r3, #24
    4170:	4313      	orrs	r3, r2
    4172:	5d9b      	ldrb	r3, [r3, r6]
    4174:	2b00      	cmp	r3, #0
    4176:	d000      	beq.n	417a <UpdateChannelIdStatusT3+0x52>
}
    4178:	bd70      	pop	{r4, r5, r6, pc}
		RegParams.pOtherChParams[chid].ulfrequency = 0;
    417a:	4c17      	ldr	r4, [pc, #92]	; (41d8 <UpdateChannelIdStatusT3+0xb0>)
    417c:	7a23      	ldrb	r3, [r4, #8]
    417e:	7a62      	ldrb	r2, [r4, #9]
    4180:	0212      	lsls	r2, r2, #8
    4182:	4313      	orrs	r3, r2
    4184:	7aa2      	ldrb	r2, [r4, #10]
    4186:	0412      	lsls	r2, r2, #16
    4188:	431a      	orrs	r2, r3
    418a:	7ae3      	ldrb	r3, [r4, #11]
    418c:	061b      	lsls	r3, r3, #24
    418e:	431a      	orrs	r2, r3
    4190:	1973      	adds	r3, r6, r5
    4192:	009b      	lsls	r3, r3, #2
    4194:	2100      	movs	r1, #0
    4196:	5499      	strb	r1, [r3, r2]
    4198:	189b      	adds	r3, r3, r2
    419a:	2200      	movs	r2, #0
    419c:	705a      	strb	r2, [r3, #1]
    419e:	709a      	strb	r2, [r3, #2]
    41a0:	70da      	strb	r2, [r3, #3]
		PDS_STORE(RegParams.regParamItems.ch_param_2_item_id);
    41a2:	23fa      	movs	r3, #250	; 0xfa
    41a4:	33ff      	adds	r3, #255	; 0xff
    41a6:	5ce3      	ldrb	r3, [r4, r3]
    41a8:	32fb      	adds	r2, #251	; 0xfb
    41aa:	32ff      	adds	r2, #255	; 0xff
    41ac:	5ca0      	ldrb	r0, [r4, r2]
    41ae:	0200      	lsls	r0, r0, #8
    41b0:	4318      	orrs	r0, r3
    41b2:	b2c1      	uxtb	r1, r0
    41b4:	0a00      	lsrs	r0, r0, #8
    41b6:	4b09      	ldr	r3, [pc, #36]	; (41dc <UpdateChannelIdStatusT3+0xb4>)
    41b8:	4798      	blx	r3
		if( RegParams.band == ISM_JPN923)
    41ba:	2326      	movs	r3, #38	; 0x26
    41bc:	5ce3      	ldrb	r3, [r4, r3]
    41be:	2b05      	cmp	r3, #5
    41c0:	d1da      	bne.n	4178 <UpdateChannelIdStatusT3+0x50>
			RegParams.cmnParams.paramsType2.channelTimer[chid] = 0;
    41c2:	3552      	adds	r5, #82	; 0x52
    41c4:	00ad      	lsls	r5, r5, #2
    41c6:	4b04      	ldr	r3, [pc, #16]	; (41d8 <UpdateChannelIdStatusT3+0xb0>)
    41c8:	195d      	adds	r5, r3, r5
    41ca:	2200      	movs	r2, #0
    41cc:	726a      	strb	r2, [r5, #9]
    41ce:	72aa      	strb	r2, [r5, #10]
    41d0:	72ea      	strb	r2, [r5, #11]
    41d2:	732a      	strb	r2, [r5, #12]
}
    41d4:	e7d0      	b.n	4178 <UpdateChannelIdStatusT3+0x50>
    41d6:	46c0      	nop			; (mov r8, r8)
    41d8:	20000b48 	.word	0x20000b48
    41dc:	00001e65 	.word	0x00001e65

000041e0 <setChannelIdStatusT3>:
{
    41e0:	b570      	push	{r4, r5, r6, lr}
    41e2:	b082      	sub	sp, #8
	memcpy(&updateChid,attrInput,sizeof(UpdateChId_t));
    41e4:	780d      	ldrb	r5, [r1, #0]
    41e6:	784e      	ldrb	r6, [r1, #1]
	valChid.channelIndex = updateChid.channelIndex;
    41e8:	a901      	add	r1, sp, #4
    41ea:	700d      	strb	r5, [r1, #0]
	valChid.allowedForDefaultChannels = ALL_CHANNELS;
    41ec:	2301      	movs	r3, #1
    41ee:	704b      	strb	r3, [r1, #1]
	if(ValidateChannelIdT2(CHANNEL_ID, &valChid) == LORAWAN_SUCCESS)
    41f0:	2015      	movs	r0, #21
    41f2:	4b0c      	ldr	r3, [pc, #48]	; (4224 <setChannelIdStatusT3+0x44>)
    41f4:	4798      	blx	r3
    41f6:	0004      	movs	r4, r0
    41f8:	2808      	cmp	r0, #8
    41fa:	d003      	beq.n	4204 <setChannelIdStatusT3+0x24>
		retVal = LORAWAN_INVALID_PARAMETER;
    41fc:	240a      	movs	r4, #10
}
    41fe:	0020      	movs	r0, r4
    4200:	b002      	add	sp, #8
    4202:	bd70      	pop	{r4, r5, r6, pc}
		if( RegParams.band == ISM_KR920)
    4204:	2326      	movs	r3, #38	; 0x26
    4206:	4a08      	ldr	r2, [pc, #32]	; (4228 <setChannelIdStatusT3+0x48>)
    4208:	5cd3      	ldrb	r3, [r2, r3]
    420a:	2b04      	cmp	r3, #4
    420c:	d004      	beq.n	4218 <setChannelIdStatusT3+0x38>
		    UpdateChannelIdStatusT3(updateChid.channelIndex,updateChid.statusNew);
    420e:	0031      	movs	r1, r6
    4210:	0028      	movs	r0, r5
    4212:	4b06      	ldr	r3, [pc, #24]	; (422c <setChannelIdStatusT3+0x4c>)
    4214:	4798      	blx	r3
    4216:	e7f2      	b.n	41fe <setChannelIdStatusT3+0x1e>
			UpdateChannelIdStatusT4(updateChid.channelIndex,updateChid.statusNew);
    4218:	0031      	movs	r1, r6
    421a:	0028      	movs	r0, r5
    421c:	4b04      	ldr	r3, [pc, #16]	; (4230 <setChannelIdStatusT3+0x50>)
    421e:	4798      	blx	r3
    4220:	e7ed      	b.n	41fe <setChannelIdStatusT3+0x1e>
    4222:	46c0      	nop			; (mov r8, r8)
    4224:	000037d9 	.word	0x000037d9
    4228:	20000b48 	.word	0x20000b48
    422c:	00004129 	.word	0x00004129
    4230:	00004081 	.word	0x00004081

00004234 <LORAREG_GetAttr_Rx1WindowparamsType1>:
{
    4234:	b510      	push	{r4, lr}
    4236:	b082      	sub	sp, #8
    4238:	0010      	movs	r0, r2
	memcpy(&rx1WindowParamsReq,(Rx1WindowParamsReq_t *)attrInput,sizeof(Rx1WindowParamsReq_t));
    423a:	784c      	ldrb	r4, [r1, #1]
    423c:	788b      	ldrb	r3, [r1, #2]
	if(rx1WindowParamReq->joining)
    423e:	780a      	ldrb	r2, [r1, #0]
    4240:	2a00      	cmp	r2, #0
    4242:	d009      	beq.n	4258 <LORAREG_GetAttr_Rx1WindowparamsType1+0x24>
		if (RegParams.cmnParams.paramsType1.alternativeChannel == 1) 
    4244:	2340      	movs	r3, #64	; 0x40
    4246:	33ff      	adds	r3, #255	; 0xff
    4248:	4a23      	ldr	r2, [pc, #140]	; (42d8 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa4>)
    424a:	5cd3      	ldrb	r3, [r2, r3]
    424c:	2b01      	cmp	r3, #1
    424e:	d01a      	beq.n	4286 <LORAREG_GetAttr_Rx1WindowparamsType1+0x52>
			rx1WindowParamReq->currDr = RegParams.cmnParams.paramsType1.maxTxDR;
    4250:	233a      	movs	r3, #58	; 0x3a
    4252:	33ff      	adds	r3, #255	; 0xff
    4254:	4a20      	ldr	r2, [pc, #128]	; (42d8 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa4>)
    4256:	5cd3      	ldrb	r3, [r2, r3]
		            RegParams.cmnParams.paramsType1.RxParamWindowOffset1 - rx1WindowParamReq->drOffset;
    4258:	491f      	ldr	r1, [pc, #124]	; (42d8 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa4>)
    425a:	229f      	movs	r2, #159	; 0x9f
    425c:	0052      	lsls	r2, r2, #1
    425e:	5c8a      	ldrb	r2, [r1, r2]
    4260:	1b12      	subs	r2, r2, r4
    4262:	189b      	adds	r3, r3, r2
    4264:	b2db      	uxtb	r3, r3
	rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr + 
    4266:	466a      	mov	r2, sp
    4268:	7113      	strb	r3, [r2, #4]
	if(rx1WindowParams->rx1Dr > RegParams.cmnParams.paramsType1.maxRxDR)
    426a:	223c      	movs	r2, #60	; 0x3c
    426c:	32ff      	adds	r2, #255	; 0xff
    426e:	5c8a      	ldrb	r2, [r1, r2]
    4270:	4293      	cmp	r3, r2
    4272:	d80c      	bhi.n	428e <LORAREG_GetAttr_Rx1WindowparamsType1+0x5a>
	else if(rx1WindowParams->rx1Dr < RegParams.cmnParams.paramsType1.minRxDR)
    4274:	229d      	movs	r2, #157	; 0x9d
    4276:	0052      	lsls	r2, r2, #1
    4278:	4917      	ldr	r1, [pc, #92]	; (42d8 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa4>)
    427a:	5c8a      	ldrb	r2, [r1, r2]
    427c:	4293      	cmp	r3, r2
    427e:	d208      	bcs.n	4292 <LORAREG_GetAttr_Rx1WindowparamsType1+0x5e>
		rx1WindowParams->rx1Dr = RegParams.cmnParams.paramsType1.minRxDR;
    4280:	466b      	mov	r3, sp
    4282:	711a      	strb	r2, [r3, #4]
    4284:	e005      	b.n	4292 <LORAREG_GetAttr_Rx1WindowparamsType1+0x5e>
			rx1WindowParamReq->currDr = RegParams.cmnParams.paramsType1.minTxDR;
    4286:	3338      	adds	r3, #56	; 0x38
    4288:	33ff      	adds	r3, #255	; 0xff
    428a:	5cd3      	ldrb	r3, [r2, r3]
    428c:	e7e4      	b.n	4258 <LORAREG_GetAttr_Rx1WindowparamsType1+0x24>
		rx1WindowParams->rx1Dr = RegParams.cmnParams.paramsType1.maxRxDR;
    428e:	466b      	mov	r3, sp
    4290:	711a      	strb	r2, [r3, #4]
	rx1WindowParams->rx1Freq = GenerateFrequencyReception(RegParams.lastUsedChannelIndex % 8);
    4292:	4911      	ldr	r1, [pc, #68]	; (42d8 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa4>)
    4294:	2327      	movs	r3, #39	; 0x27
    4296:	5ccc      	ldrb	r4, [r1, r3]
	channelFrequency = RegParams.cmnParams.paramsType1.DownStreamCh0Freq + FREQ_600KHZ * channelIndex;
    4298:	3b20      	subs	r3, #32
    429a:	4023      	ands	r3, r4
    429c:	4c0f      	ldr	r4, [pc, #60]	; (42dc <LORAREG_GetAttr_Rx1WindowparamsType1+0xa8>)
    429e:	435c      	muls	r4, r3
    42a0:	239a      	movs	r3, #154	; 0x9a
    42a2:	005b      	lsls	r3, r3, #1
    42a4:	5ccb      	ldrb	r3, [r1, r3]
    42a6:	2236      	movs	r2, #54	; 0x36
    42a8:	32ff      	adds	r2, #255	; 0xff
    42aa:	5c8a      	ldrb	r2, [r1, r2]
    42ac:	0212      	lsls	r2, r2, #8
    42ae:	4313      	orrs	r3, r2
    42b0:	229b      	movs	r2, #155	; 0x9b
    42b2:	0052      	lsls	r2, r2, #1
    42b4:	5c8a      	ldrb	r2, [r1, r2]
    42b6:	0412      	lsls	r2, r2, #16
    42b8:	431a      	orrs	r2, r3
    42ba:	2338      	movs	r3, #56	; 0x38
    42bc:	33ff      	adds	r3, #255	; 0xff
    42be:	5ccb      	ldrb	r3, [r1, r3]
    42c0:	061b      	lsls	r3, r3, #24
    42c2:	4313      	orrs	r3, r2
    42c4:	18e3      	adds	r3, r4, r3
	rx1WindowParams->rx1Freq = GenerateFrequencyReception(RegParams.lastUsedChannelIndex % 8);
    42c6:	9300      	str	r3, [sp, #0]
	memcpy(attrOutput,&rx1WindowParamsResp,sizeof(Rx1WindowParams_t));
    42c8:	2208      	movs	r2, #8
    42ca:	4669      	mov	r1, sp
    42cc:	4b04      	ldr	r3, [pc, #16]	; (42e0 <LORAREG_GetAttr_Rx1WindowparamsType1+0xac>)
    42ce:	4798      	blx	r3
}
    42d0:	2008      	movs	r0, #8
    42d2:	b002      	add	sp, #8
    42d4:	bd10      	pop	{r4, pc}
    42d6:	46c0      	nop			; (mov r8, r8)
    42d8:	20000b48 	.word	0x20000b48
    42dc:	000927c0 	.word	0x000927c0
    42e0:	000112d5 	.word	0x000112d5

000042e4 <LORAREG_GetAttr_DRangeChBandT1>:
{
    42e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    42e6:	46c6      	mov	lr, r8
    42e8:	b500      	push	{lr}
    42ea:	b084      	sub	sp, #16
    42ec:	9201      	str	r2, [sp, #4]
	memcpy(&bandDrReq,(BandDrReq_t *)attrInput,sizeof(BandDrReq_t));
    42ee:	2204      	movs	r2, #4
    42f0:	a803      	add	r0, sp, #12
    42f2:	4b43      	ldr	r3, [pc, #268]	; (4400 <LORAREG_GetAttr_DRangeChBandT1+0x11c>)
    42f4:	4798      	blx	r3
	if(ValidateChannelMaskCntl(CHANNEL_MASK_CNTL, (void *)&bandDrReq.chnlMaskCntl)	!= LORAWAN_SUCCESS)
    42f6:	a903      	add	r1, sp, #12
    42f8:	201b      	movs	r0, #27
    42fa:	4b42      	ldr	r3, [pc, #264]	; (4404 <LORAREG_GetAttr_DRangeChBandT1+0x120>)
    42fc:	4798      	blx	r3
    42fe:	2808      	cmp	r0, #8
    4300:	d004      	beq.n	430c <LORAREG_GetAttr_DRangeChBandT1+0x28>
		result = LORAWAN_INVALID_PARAMETER;
    4302:	200a      	movs	r0, #10
}
    4304:	b004      	add	sp, #16
    4306:	bc04      	pop	{r2}
    4308:	4690      	mov	r8, r2
    430a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		chBandDr = getChBandDrT1(bandDrReq.chnlMaskCntl,bandDrReq.chnlMask);
    430c:	aa03      	add	r2, sp, #12
    430e:	7813      	ldrb	r3, [r2, #0]
    4310:	8857      	ldrh	r7, [r2, #2]
	if( RegParams.band == ISM_AU915)
    4312:	2226      	movs	r2, #38	; 0x26
    4314:	493c      	ldr	r1, [pc, #240]	; (4408 <LORAREG_GetAttr_DRangeChBandT1+0x124>)
    4316:	5c89      	ldrb	r1, [r1, r2]
		auxMinDataRate = DR6;
    4318:	3903      	subs	r1, #3
    431a:	1e4a      	subs	r2, r1, #1
    431c:	4191      	sbcs	r1, r2
    431e:	3106      	adds	r1, #6
	switch (chMaskCntl)
    4320:	2b07      	cmp	r3, #7
    4322:	d869      	bhi.n	43f8 <LORAREG_GetAttr_DRangeChBandT1+0x114>
    4324:	009a      	lsls	r2, r3, #2
    4326:	4d39      	ldr	r5, [pc, #228]	; (440c <LORAREG_GetAttr_DRangeChBandT1+0x128>)
    4328:	58aa      	ldr	r2, [r5, r2]
    432a:	4697      	mov	pc, r2
			startingIndex = chMaskCntl << SHIFT4;
    432c:	011b      	lsls	r3, r3, #4
    432e:	b2db      	uxtb	r3, r3
			endingIndex = startingIndex + 16;
    4330:	001a      	movs	r2, r3
    4332:	3210      	adds	r2, #16
    4334:	b2d2      	uxtb	r2, r2
    4336:	4690      	mov	r8, r2
			for (i = startingIndex; i < endingIndex; i++)
    4338:	4293      	cmp	r3, r2
    433a:	d25f      	bcs.n	43fc <LORAREG_GetAttr_DRangeChBandT1+0x118>
				if ((RegParams.pChParams[i].dataRange.min < auxMinDataRate) && (((auxChannelMask & 0x0001) == 0x0001) || (auxChannelMask == 0)))
    433c:	4e32      	ldr	r6, [pc, #200]	; (4408 <LORAREG_GetAttr_DRangeChBandT1+0x124>)
    433e:	7935      	ldrb	r5, [r6, #4]
    4340:	7972      	ldrb	r2, [r6, #5]
    4342:	0212      	lsls	r2, r2, #8
    4344:	4315      	orrs	r5, r2
    4346:	79b2      	ldrb	r2, [r6, #6]
    4348:	0412      	lsls	r2, r2, #16
    434a:	432a      	orrs	r2, r5
    434c:	79f5      	ldrb	r5, [r6, #7]
    434e:	062d      	lsls	r5, r5, #24
    4350:	4315      	orrs	r5, r2
    4352:	46ac      	mov	ip, r5
    4354:	2500      	movs	r5, #0
				if ((RegParams.pChParams[i].dataRange.max > auxMaxDataRate) && (((auxChannelMask & 0x0001) == 0x0001) || (auxChannelMask == 0)))
    4356:	2401      	movs	r4, #1
    4358:	e00c      	b.n	4374 <LORAREG_GetAttr_DRangeChBandT1+0x90>
					auxMinDataRate = RegParams.pChParams[i].dataRange.min;
    435a:	0011      	movs	r1, r2
				if ((RegParams.pChParams[i].dataRange.max > auxMaxDataRate) && (((auxChannelMask & 0x0001) == 0x0001) || (auxChannelMask == 0)))
    435c:	7872      	ldrb	r2, [r6, #1]
    435e:	0912      	lsrs	r2, r2, #4
    4360:	42aa      	cmp	r2, r5
    4362:	dd02      	ble.n	436a <LORAREG_GetAttr_DRangeChBandT1+0x86>
    4364:	423c      	tst	r4, r7
    4366:	d011      	beq.n	438c <LORAREG_GetAttr_DRangeChBandT1+0xa8>
					auxMaxDataRate = RegParams.pChParams[i].dataRange.max;
    4368:	0015      	movs	r5, r2
				auxChannelMask = auxChannelMask >> SHIFT1;
    436a:	087f      	lsrs	r7, r7, #1
			for (i = startingIndex; i < endingIndex; i++)
    436c:	3301      	adds	r3, #1
    436e:	b2db      	uxtb	r3, r3
    4370:	4598      	cmp	r8, r3
    4372:	d013      	beq.n	439c <LORAREG_GetAttr_DRangeChBandT1+0xb8>
				if ((RegParams.pChParams[i].dataRange.min < auxMinDataRate) && (((auxChannelMask & 0x0001) == 0x0001) || (auxChannelMask == 0)))
    4374:	005e      	lsls	r6, r3, #1
    4376:	4466      	add	r6, ip
    4378:	7872      	ldrb	r2, [r6, #1]
    437a:	0712      	lsls	r2, r2, #28
    437c:	0f12      	lsrs	r2, r2, #28
    437e:	428a      	cmp	r2, r1
    4380:	daec      	bge.n	435c <LORAREG_GetAttr_DRangeChBandT1+0x78>
    4382:	423c      	tst	r4, r7
    4384:	d1e9      	bne.n	435a <LORAREG_GetAttr_DRangeChBandT1+0x76>
    4386:	2f00      	cmp	r7, #0
    4388:	d1ef      	bne.n	436a <LORAREG_GetAttr_DRangeChBandT1+0x86>
    438a:	e7e6      	b.n	435a <LORAREG_GetAttr_DRangeChBandT1+0x76>
				if ((RegParams.pChParams[i].dataRange.max > auxMaxDataRate) && (((auxChannelMask & 0x0001) == 0x0001) || (auxChannelMask == 0)))
    438c:	2f00      	cmp	r7, #0
    438e:	d0eb      	beq.n	4368 <LORAREG_GetAttr_DRangeChBandT1+0x84>
    4390:	e7eb      	b.n	436a <LORAREG_GetAttr_DRangeChBandT1+0x86>
			auxMinDataRate = RegParams.cmnParams.paramsType1.maxTxDR;
    4392:	233a      	movs	r3, #58	; 0x3a
    4394:	33ff      	adds	r3, #255	; 0xff
    4396:	4a1c      	ldr	r2, [pc, #112]	; (4408 <LORAREG_GetAttr_DRangeChBandT1+0x124>)
    4398:	5cd1      	ldrb	r1, [r2, r3]
			auxMaxDataRate = RegParams.cmnParams.paramsType1.maxTxDR;
    439a:	000d      	movs	r5, r1
    439c:	012d      	lsls	r5, r5, #4
    439e:	230f      	movs	r3, #15
    43a0:	4019      	ands	r1, r3
    43a2:	430d      	orrs	r5, r1
		memcpy(attrOutput,&chBandDr,sizeof(DataRange_t));
    43a4:	9b01      	ldr	r3, [sp, #4]
    43a6:	701d      	strb	r5, [r3, #0]
    43a8:	e7ac      	b.n	4304 <LORAREG_GetAttr_DRangeChBandT1+0x20>
				if (RegParams.pChParams[i].dataRange.min < auxMinDataRate)
    43aa:	4d17      	ldr	r5, [pc, #92]	; (4408 <LORAREG_GetAttr_DRangeChBandT1+0x124>)
    43ac:	792b      	ldrb	r3, [r5, #4]
    43ae:	796a      	ldrb	r2, [r5, #5]
    43b0:	0212      	lsls	r2, r2, #8
    43b2:	431a      	orrs	r2, r3
    43b4:	79ab      	ldrb	r3, [r5, #6]
    43b6:	041b      	lsls	r3, r3, #16
    43b8:	431a      	orrs	r2, r3
    43ba:	79eb      	ldrb	r3, [r5, #7]
    43bc:	061b      	lsls	r3, r3, #24
    43be:	4313      	orrs	r3, r2
    43c0:	001a      	movs	r2, r3
    43c2:	3380      	adds	r3, #128	; 0x80
    43c4:	001c      	movs	r4, r3
    43c6:	2500      	movs	r5, #0
    43c8:	e002      	b.n	43d0 <LORAREG_GetAttr_DRangeChBandT1+0xec>
    43ca:	3202      	adds	r2, #2
			for (i = 0; i < 64; i++)
    43cc:	42a2      	cmp	r2, r4
    43ce:	d00c      	beq.n	43ea <LORAREG_GetAttr_DRangeChBandT1+0x106>
				if (RegParams.pChParams[i].dataRange.min < auxMinDataRate)
    43d0:	0016      	movs	r6, r2
    43d2:	7853      	ldrb	r3, [r2, #1]
    43d4:	071b      	lsls	r3, r3, #28
    43d6:	0f1b      	lsrs	r3, r3, #28
    43d8:	428b      	cmp	r3, r1
    43da:	da00      	bge.n	43de <LORAREG_GetAttr_DRangeChBandT1+0xfa>
					auxMinDataRate = RegParams.pChParams[i].dataRange.min;
    43dc:	0019      	movs	r1, r3
				if (RegParams.pChParams[i].dataRange.max > auxMaxDataRate)
    43de:	7873      	ldrb	r3, [r6, #1]
    43e0:	091b      	lsrs	r3, r3, #4
    43e2:	42ab      	cmp	r3, r5
    43e4:	ddf1      	ble.n	43ca <LORAREG_GetAttr_DRangeChBandT1+0xe6>
					auxMaxDataRate = RegParams.pChParams[i].dataRange.max;
    43e6:	001d      	movs	r5, r3
    43e8:	e7ef      	b.n	43ca <LORAREG_GetAttr_DRangeChBandT1+0xe6>
			if (channelMask != 0)    // if there is at least one channel enabled with DR4
    43ea:	2f00      	cmp	r7, #0
    43ec:	d0d6      	beq.n	439c <LORAREG_GetAttr_DRangeChBandT1+0xb8>
				auxMaxDataRate = RegParams.cmnParams.paramsType1.maxTxDR;
    43ee:	233a      	movs	r3, #58	; 0x3a
    43f0:	33ff      	adds	r3, #255	; 0xff
    43f2:	4a05      	ldr	r2, [pc, #20]	; (4408 <LORAREG_GetAttr_DRangeChBandT1+0x124>)
    43f4:	5cd5      	ldrb	r5, [r2, r3]
    43f6:	e7d1      	b.n	439c <LORAREG_GetAttr_DRangeChBandT1+0xb8>
	uint8_t auxMinDataRate = DR7, auxMaxDataRate = DR0, i;
    43f8:	2500      	movs	r5, #0
    43fa:	e7cf      	b.n	439c <LORAREG_GetAttr_DRangeChBandT1+0xb8>
    43fc:	2500      	movs	r5, #0
    43fe:	e7cd      	b.n	439c <LORAREG_GetAttr_DRangeChBandT1+0xb8>
    4400:	000112d5 	.word	0x000112d5
    4404:	000038c1 	.word	0x000038c1
    4408:	20000b48 	.word	0x20000b48
    440c:	00012a38 	.word	0x00012a38

00004410 <LORAREG_GetAttr_DefRx2Freq>:
{
    4410:	b510      	push	{r4, lr}
    4412:	0010      	movs	r0, r2
	memcpy(attrOutput,&RegParams.DefRx2Freq,sizeof(uint32_t));
    4414:	2204      	movs	r2, #4
    4416:	4902      	ldr	r1, [pc, #8]	; (4420 <LORAREG_GetAttr_DefRx2Freq+0x10>)
    4418:	4b02      	ldr	r3, [pc, #8]	; (4424 <LORAREG_GetAttr_DefRx2Freq+0x14>)
    441a:	4798      	blx	r3
}
    441c:	2008      	movs	r0, #8
    441e:	bd10      	pop	{r4, pc}
    4420:	20000b5c 	.word	0x20000b5c
    4424:	000112d5 	.word	0x000112d5

00004428 <LORAREG_GetAttr_DlFrequency>:
{
    4428:	b510      	push	{r4, lr}
    442a:	0013      	movs	r3, r2
	channelId = *(uint8_t *)attrInput;
    442c:	780a      	ldrb	r2, [r1, #0]
	if (channelId > RegParams.maxChannels)
    442e:	2122      	movs	r1, #34	; 0x22
    4430:	480d      	ldr	r0, [pc, #52]	; (4468 <LORAREG_GetAttr_DlFrequency+0x40>)
    4432:	5641      	ldrsb	r1, [r0, r1]
		result = LORAWAN_INVALID_PARAMETER;
    4434:	200a      	movs	r0, #10
	if (channelId > RegParams.maxChannels)
    4436:	428a      	cmp	r2, r1
    4438:	dd00      	ble.n	443c <LORAREG_GetAttr_DlFrequency+0x14>
}
    443a:	bd10      	pop	{r4, pc}
		memcpy(attrOutput,&(RegParams.pOtherChParams[channelId].rx1Frequency),sizeof(uint32_t));
    443c:	4c0a      	ldr	r4, [pc, #40]	; (4468 <LORAREG_GetAttr_DlFrequency+0x40>)
    443e:	7a21      	ldrb	r1, [r4, #8]
    4440:	7a60      	ldrb	r0, [r4, #9]
    4442:	0200      	lsls	r0, r0, #8
    4444:	4308      	orrs	r0, r1
    4446:	7aa1      	ldrb	r1, [r4, #10]
    4448:	0409      	lsls	r1, r1, #16
    444a:	4308      	orrs	r0, r1
    444c:	7ae1      	ldrb	r1, [r4, #11]
    444e:	0609      	lsls	r1, r1, #24
    4450:	4301      	orrs	r1, r0
    4452:	0050      	lsls	r0, r2, #1
    4454:	1882      	adds	r2, r0, r2
    4456:	0092      	lsls	r2, r2, #2
    4458:	1889      	adds	r1, r1, r2
    445a:	3104      	adds	r1, #4
    445c:	2204      	movs	r2, #4
    445e:	0018      	movs	r0, r3
    4460:	4b02      	ldr	r3, [pc, #8]	; (446c <LORAREG_GetAttr_DlFrequency+0x44>)
    4462:	4798      	blx	r3
	StackRetStatus_t result = LORAWAN_SUCCESS;
    4464:	2008      	movs	r0, #8
    4466:	e7e8      	b.n	443a <LORAREG_GetAttr_DlFrequency+0x12>
    4468:	20000b48 	.word	0x20000b48
    446c:	000112d5 	.word	0x000112d5

00004470 <LORAREG_GetAttr_Rx1WindowparamsType2>:
{
    4470:	b500      	push	{lr}
    4472:	b083      	sub	sp, #12
    4474:	0010      	movs	r0, r2
	memcpy(&rx1WindowParamsReq,(Rx1WindowParamsReq_t *)attrInput,sizeof(Rx1WindowParamsReq_t));
    4476:	784a      	ldrb	r2, [r1, #1]
    4478:	788b      	ldrb	r3, [r1, #2]
    if (rx1WindowParamReq->currDr >= rx1WindowParamReq->drOffset)
    447a:	429a      	cmp	r2, r3
    447c:	d925      	bls.n	44ca <LORAREG_GetAttr_Rx1WindowparamsType2+0x5a>
        rx1WindowParams->rx1Dr = DR0;
    447e:	2300      	movs	r3, #0
    4480:	466a      	mov	r2, sp
    4482:	7113      	strb	r3, [r2, #4]
	rx1WindowParams->rx1Freq = RegParams.pOtherChParams[RegParams.lastUsedChannelIndex].rx1Frequency;			
    4484:	4913      	ldr	r1, [pc, #76]	; (44d4 <LORAREG_GetAttr_Rx1WindowparamsType2+0x64>)
    4486:	7a0b      	ldrb	r3, [r1, #8]
    4488:	7a4a      	ldrb	r2, [r1, #9]
    448a:	0212      	lsls	r2, r2, #8
    448c:	4313      	orrs	r3, r2
    448e:	7a8a      	ldrb	r2, [r1, #10]
    4490:	0412      	lsls	r2, r2, #16
    4492:	431a      	orrs	r2, r3
    4494:	7acb      	ldrb	r3, [r1, #11]
    4496:	061b      	lsls	r3, r3, #24
    4498:	431a      	orrs	r2, r3
    449a:	2327      	movs	r3, #39	; 0x27
    449c:	5cc9      	ldrb	r1, [r1, r3]
    449e:	004b      	lsls	r3, r1, #1
    44a0:	185b      	adds	r3, r3, r1
    44a2:	009b      	lsls	r3, r3, #2
    44a4:	189b      	adds	r3, r3, r2
    44a6:	7919      	ldrb	r1, [r3, #4]
    44a8:	795a      	ldrb	r2, [r3, #5]
    44aa:	0212      	lsls	r2, r2, #8
    44ac:	4311      	orrs	r1, r2
    44ae:	799a      	ldrb	r2, [r3, #6]
    44b0:	0412      	lsls	r2, r2, #16
    44b2:	430a      	orrs	r2, r1
    44b4:	79db      	ldrb	r3, [r3, #7]
    44b6:	061b      	lsls	r3, r3, #24
    44b8:	4313      	orrs	r3, r2
    44ba:	9300      	str	r3, [sp, #0]
	memcpy(attrOutput,&rx1WindowParamsResp,sizeof(Rx1WindowParams_t));
    44bc:	2208      	movs	r2, #8
    44be:	4669      	mov	r1, sp
    44c0:	4b05      	ldr	r3, [pc, #20]	; (44d8 <LORAREG_GetAttr_Rx1WindowparamsType2+0x68>)
    44c2:	4798      	blx	r3
}
    44c4:	2008      	movs	r0, #8
    44c6:	b003      	add	sp, #12
    44c8:	bd00      	pop	{pc}
        rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr - rx1WindowParamReq->drOffset;
    44ca:	1a9b      	subs	r3, r3, r2
    44cc:	466a      	mov	r2, sp
    44ce:	7113      	strb	r3, [r2, #4]
    44d0:	e7d8      	b.n	4484 <LORAREG_GetAttr_Rx1WindowparamsType2+0x14>
    44d2:	46c0      	nop			; (mov r8, r8)
    44d4:	20000b48 	.word	0x20000b48
    44d8:	000112d5 	.word	0x000112d5

000044dc <LORAREG_GetAttr_DRangeChBandT2>:
{
    44dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    44de:	46c6      	mov	lr, r8
    44e0:	b500      	push	{lr}
    44e2:	b082      	sub	sp, #8
    44e4:	4690      	mov	r8, r2
	memcpy(&bandDrReq,(BandDrReq_t *)attrInput,sizeof(BandDrReq_t));
    44e6:	ad01      	add	r5, sp, #4
    44e8:	2204      	movs	r2, #4
    44ea:	0028      	movs	r0, r5
    44ec:	4b38      	ldr	r3, [pc, #224]	; (45d0 <LORAREG_GetAttr_DRangeChBandT2+0xf4>)
    44ee:	4798      	blx	r3
	switch (chMaskCntl)
    44f0:	782b      	ldrb	r3, [r5, #0]
    44f2:	2b00      	cmp	r3, #0
    44f4:	d017      	beq.n	4526 <LORAREG_GetAttr_DRangeChBandT2+0x4a>
    44f6:	2b06      	cmp	r3, #6
    44f8:	d159      	bne.n	45ae <LORAREG_GetAttr_DRangeChBandT2+0xd2>
			for (i = 0; i < RegParams.maxChannels; i++)
    44fa:	331c      	adds	r3, #28
    44fc:	4a35      	ldr	r2, [pc, #212]	; (45d4 <LORAREG_GetAttr_DRangeChBandT2+0xf8>)
    44fe:	56d7      	ldrsb	r7, [r2, r3]
    4500:	2000      	movs	r0, #0
    4502:	2507      	movs	r5, #7
    4504:	2f00      	cmp	r7, #0
    4506:	dd54      	ble.n	45b2 <LORAREG_GetAttr_DRangeChBandT2+0xd6>
				if (RegParams.pChParams[i].dataRange.min < auxMinDataRate)
    4508:	4a32      	ldr	r2, [pc, #200]	; (45d4 <LORAREG_GetAttr_DRangeChBandT2+0xf8>)
    450a:	7916      	ldrb	r6, [r2, #4]
    450c:	7953      	ldrb	r3, [r2, #5]
    450e:	021b      	lsls	r3, r3, #8
    4510:	4333      	orrs	r3, r6
    4512:	7996      	ldrb	r6, [r2, #6]
    4514:	0436      	lsls	r6, r6, #16
    4516:	4333      	orrs	r3, r6
    4518:	79d6      	ldrb	r6, [r2, #7]
    451a:	0636      	lsls	r6, r6, #24
    451c:	431e      	orrs	r6, r3
    451e:	2000      	movs	r0, #0
    4520:	2507      	movs	r5, #7
    4522:	2200      	movs	r2, #0
    4524:	e035      	b.n	4592 <LORAREG_GetAttr_DRangeChBandT2+0xb6>
			for (i = 0; i < RegParams.maxChannels; i++)
    4526:	2322      	movs	r3, #34	; 0x22
    4528:	4a2a      	ldr	r2, [pc, #168]	; (45d4 <LORAREG_GetAttr_DRangeChBandT2+0xf8>)
    452a:	56d3      	ldrsb	r3, [r2, r3]
    452c:	469c      	mov	ip, r3
    452e:	2b00      	cmp	r3, #0
    4530:	dd4a      	ble.n	45c8 <LORAREG_GetAttr_DRangeChBandT2+0xec>
		chBandDr = getChBandDrT2(bandDrReq.chnlMaskCntl,bandDrReq.chnlMask);
    4532:	ab01      	add	r3, sp, #4
    4534:	885e      	ldrh	r6, [r3, #2]
				if ((RegParams.pChParams[i].dataRange.min < auxMinDataRate) && ((auxChannelMask & 0x0001) == 0x0001))
    4536:	7917      	ldrb	r7, [r2, #4]
    4538:	7953      	ldrb	r3, [r2, #5]
    453a:	021b      	lsls	r3, r3, #8
    453c:	433b      	orrs	r3, r7
    453e:	7997      	ldrb	r7, [r2, #6]
    4540:	043f      	lsls	r7, r7, #16
    4542:	433b      	orrs	r3, r7
    4544:	79d7      	ldrb	r7, [r2, #7]
    4546:	063f      	lsls	r7, r7, #24
    4548:	431f      	orrs	r7, r3
    454a:	2000      	movs	r0, #0
    454c:	2507      	movs	r5, #7
    454e:	2200      	movs	r2, #0
				if ((RegParams.pChParams[i].dataRange.max > auxMaxDataRate) && ((auxChannelMask & 0x0001) == 0x0001))
    4550:	2401      	movs	r4, #1
    4552:	e00b      	b.n	456c <LORAREG_GetAttr_DRangeChBandT2+0x90>
    4554:	784b      	ldrb	r3, [r1, #1]
    4556:	091b      	lsrs	r3, r3, #4
    4558:	4283      	cmp	r3, r0
    455a:	dd02      	ble.n	4562 <LORAREG_GetAttr_DRangeChBandT2+0x86>
    455c:	4234      	tst	r4, r6
    455e:	d000      	beq.n	4562 <LORAREG_GetAttr_DRangeChBandT2+0x86>
					auxMaxDataRate = RegParams.pChParams[i].dataRange.max;
    4560:	0018      	movs	r0, r3
				auxChannelMask = auxChannelMask >> SHIFT1;
    4562:	0876      	lsrs	r6, r6, #1
			for (i = 0; i < RegParams.maxChannels; i++)
    4564:	3201      	adds	r2, #1
    4566:	b2d2      	uxtb	r2, r2
    4568:	4562      	cmp	r2, ip
    456a:	da22      	bge.n	45b2 <LORAREG_GetAttr_DRangeChBandT2+0xd6>
				if ((RegParams.pChParams[i].dataRange.min < auxMinDataRate) && ((auxChannelMask & 0x0001) == 0x0001))
    456c:	0051      	lsls	r1, r2, #1
    456e:	1879      	adds	r1, r7, r1
    4570:	784b      	ldrb	r3, [r1, #1]
    4572:	071b      	lsls	r3, r3, #28
    4574:	0f1b      	lsrs	r3, r3, #28
    4576:	42ab      	cmp	r3, r5
    4578:	daec      	bge.n	4554 <LORAREG_GetAttr_DRangeChBandT2+0x78>
    457a:	4234      	tst	r4, r6
    457c:	d0f1      	beq.n	4562 <LORAREG_GetAttr_DRangeChBandT2+0x86>
					auxMinDataRate = RegParams.pChParams[i].dataRange.min;
    457e:	001d      	movs	r5, r3
				if ((RegParams.pChParams[i].dataRange.max > auxMaxDataRate) && ((auxChannelMask & 0x0001) == 0x0001))
    4580:	784b      	ldrb	r3, [r1, #1]
    4582:	091b      	lsrs	r3, r3, #4
    4584:	4298      	cmp	r0, r3
    4586:	dbeb      	blt.n	4560 <LORAREG_GetAttr_DRangeChBandT2+0x84>
    4588:	e7eb      	b.n	4562 <LORAREG_GetAttr_DRangeChBandT2+0x86>
			for (i = 0; i < RegParams.maxChannels; i++)
    458a:	3201      	adds	r2, #1
    458c:	b2d2      	uxtb	r2, r2
    458e:	42ba      	cmp	r2, r7
    4590:	da0f      	bge.n	45b2 <LORAREG_GetAttr_DRangeChBandT2+0xd6>
				if (RegParams.pChParams[i].dataRange.min < auxMinDataRate)
    4592:	0051      	lsls	r1, r2, #1
    4594:	1871      	adds	r1, r6, r1
    4596:	784b      	ldrb	r3, [r1, #1]
    4598:	071b      	lsls	r3, r3, #28
    459a:	0f1b      	lsrs	r3, r3, #28
    459c:	42ab      	cmp	r3, r5
    459e:	da00      	bge.n	45a2 <LORAREG_GetAttr_DRangeChBandT2+0xc6>
					auxMinDataRate = RegParams.pChParams[i].dataRange.min;
    45a0:	001d      	movs	r5, r3
				if (RegParams.pChParams[i].dataRange.max > auxMaxDataRate)
    45a2:	784b      	ldrb	r3, [r1, #1]
    45a4:	091b      	lsrs	r3, r3, #4
    45a6:	4283      	cmp	r3, r0
    45a8:	ddef      	ble.n	458a <LORAREG_GetAttr_DRangeChBandT2+0xae>
					auxMaxDataRate = RegParams.pChParams[i].dataRange.max;
    45aa:	0018      	movs	r0, r3
    45ac:	e7ed      	b.n	458a <LORAREG_GetAttr_DRangeChBandT2+0xae>
			auxMaxDataRate = 0xFF;
    45ae:	20ff      	movs	r0, #255	; 0xff
			auxMinDataRate = 0xFF;
    45b0:	25ff      	movs	r5, #255	; 0xff
    45b2:	0100      	lsls	r0, r0, #4
    45b4:	230f      	movs	r3, #15
    45b6:	401d      	ands	r5, r3
    45b8:	4328      	orrs	r0, r5
		memcpy(attrOutput,&chBandDr,sizeof(DataRange_t));
    45ba:	4643      	mov	r3, r8
    45bc:	7018      	strb	r0, [r3, #0]
}
    45be:	2008      	movs	r0, #8
    45c0:	b002      	add	sp, #8
    45c2:	bc04      	pop	{r2}
    45c4:	4690      	mov	r8, r2
    45c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			for (i = 0; i < RegParams.maxChannels; i++)
    45c8:	2000      	movs	r0, #0
    45ca:	2507      	movs	r5, #7
    45cc:	e7f1      	b.n	45b2 <LORAREG_GetAttr_DRangeChBandT2+0xd6>
    45ce:	46c0      	nop			; (mov r8, r8)
    45d0:	000112d5 	.word	0x000112d5
    45d4:	20000b48 	.word	0x20000b48

000045d8 <LORAREG_GetAttr_FreqT2>:
{
    45d8:	b510      	push	{r4, lr}
    45da:	0014      	movs	r4, r2
	channelId = *(uint8_t *)attrInput;
    45dc:	780b      	ldrb	r3, [r1, #0]
	if(channelId > RegParams.maxChannels)
    45de:	2222      	movs	r2, #34	; 0x22
    45e0:	490d      	ldr	r1, [pc, #52]	; (4618 <LORAREG_GetAttr_FreqT2+0x40>)
    45e2:	568a      	ldrsb	r2, [r1, r2]
		return LORAWAN_INVALID_PARAMETER;
    45e4:	200a      	movs	r0, #10
	if(channelId > RegParams.maxChannels)
    45e6:	4293      	cmp	r3, r2
    45e8:	dd00      	ble.n	45ec <LORAREG_GetAttr_FreqT2+0x14>
}
    45ea:	bd10      	pop	{r4, pc}
		memcpy(attrOutput,(&RegParams.pOtherChParams[channelId].ulfrequency),sizeof(uint32_t));
    45ec:	0008      	movs	r0, r1
    45ee:	7a09      	ldrb	r1, [r1, #8]
    45f0:	7a42      	ldrb	r2, [r0, #9]
    45f2:	0212      	lsls	r2, r2, #8
    45f4:	430a      	orrs	r2, r1
    45f6:	7a81      	ldrb	r1, [r0, #10]
    45f8:	0409      	lsls	r1, r1, #16
    45fa:	430a      	orrs	r2, r1
    45fc:	7ac1      	ldrb	r1, [r0, #11]
    45fe:	0609      	lsls	r1, r1, #24
    4600:	4311      	orrs	r1, r2
    4602:	005a      	lsls	r2, r3, #1
    4604:	18d3      	adds	r3, r2, r3
    4606:	009b      	lsls	r3, r3, #2
    4608:	18c9      	adds	r1, r1, r3
    460a:	2204      	movs	r2, #4
    460c:	0020      	movs	r0, r4
    460e:	4b03      	ldr	r3, [pc, #12]	; (461c <LORAREG_GetAttr_FreqT2+0x44>)
    4610:	4798      	blx	r3
	return result;
    4612:	2008      	movs	r0, #8
    4614:	e7e9      	b.n	45ea <LORAREG_GetAttr_FreqT2+0x12>
    4616:	46c0      	nop			; (mov r8, r8)
    4618:	20000b48 	.word	0x20000b48
    461c:	000112d5 	.word	0x000112d5

00004620 <LORAREG_GetAttr_Rx1WindowparamsType4>:
{
    4620:	b510      	push	{r4, lr}
    4622:	b082      	sub	sp, #8
    4624:	0010      	movs	r0, r2
	if((((1 << RegParams.band) & (ISM_ASBAND)) || ((1 << RegParams.band) & (1 << ISM_JPN923)) != 0) &&  rx1WindowParamReq->joining)
    4626:	2326      	movs	r3, #38	; 0x26
    4628:	4a37      	ldr	r2, [pc, #220]	; (4708 <LORAREG_GetAttr_Rx1WindowparamsType4+0xe8>)
    462a:	5cd2      	ldrb	r2, [r2, r3]
    462c:	4b37      	ldr	r3, [pc, #220]	; (470c <LORAREG_GetAttr_Rx1WindowparamsType4+0xec>)
    462e:	4113      	asrs	r3, r2
    4630:	07db      	lsls	r3, r3, #31
    4632:	d502      	bpl.n	463a <LORAREG_GetAttr_Rx1WindowparamsType4+0x1a>
    4634:	780b      	ldrb	r3, [r1, #0]
    4636:	2b00      	cmp	r3, #0
    4638:	d116      	bne.n	4668 <LORAREG_GetAttr_Rx1WindowparamsType4+0x48>
	if(RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime == 1)
    463a:	23ac      	movs	r3, #172	; 0xac
    463c:	33ff      	adds	r3, #255	; 0xff
    463e:	4a32      	ldr	r2, [pc, #200]	; (4708 <LORAREG_GetAttr_Rx1WindowparamsType4+0xe8>)
    4640:	5cd4      	ldrb	r4, [r2, r3]
		minDR = DR2;
    4642:	3baa      	subs	r3, #170	; 0xaa
    4644:	3bff      	subs	r3, #255	; 0xff
    4646:	401c      	ands	r4, r3
	memcpy(&rx1WindowParamsReq,(Rx1WindowParamsReq_t *)attrInput,sizeof(Rx1WindowParamsReq_t));
    4648:	784b      	ldrb	r3, [r1, #1]
	effectiveDROffset = (rx1WindowParamReq->drOffset > maxDR) ? (maxDR - rx1WindowParamReq->drOffset) : (rx1WindowParamReq->drOffset);
    464a:	2b05      	cmp	r3, #5
    464c:	d92c      	bls.n	46a8 <LORAREG_GetAttr_Rx1WindowparamsType4+0x88>
    464e:	2205      	movs	r2, #5
    4650:	1ad3      	subs	r3, r2, r3
    4652:	b25b      	sxtb	r3, r3
	memcpy(&rx1WindowParamsReq,(Rx1WindowParamsReq_t *)attrInput,sizeof(Rx1WindowParamsReq_t));
    4654:	788a      	ldrb	r2, [r1, #2]
	if (rx1WindowParamReq->currDr >= effectiveDROffset)
    4656:	429a      	cmp	r2, r3
    4658:	db31      	blt.n	46be <LORAREG_GetAttr_Rx1WindowparamsType4+0x9e>
		rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr - effectiveDROffset;
    465a:	1ad3      	subs	r3, r2, r3
    465c:	b2db      	uxtb	r3, r3
		if(rx1WindowParams->rx1Dr < minDR)
    465e:	42a3      	cmp	r3, r4
    4660:	d224      	bcs.n	46ac <LORAREG_GetAttr_Rx1WindowparamsType4+0x8c>
			rx1WindowParams->rx1Dr = minDR;
    4662:	466b      	mov	r3, sp
    4664:	711c      	strb	r4, [r3, #4]
    4666:	e02c      	b.n	46c2 <LORAREG_GetAttr_Rx1WindowparamsType4+0xa2>
		rx1WindowParams->rx1Dr = DR2;
    4668:	2302      	movs	r3, #2
    466a:	466a      	mov	r2, sp
    466c:	7113      	strb	r3, [r2, #4]
		rx1WindowParams->rx1Freq = RegParams.pOtherChParams[RegParams.lastUsedChannelIndex].rx1Frequency;
    466e:	4926      	ldr	r1, [pc, #152]	; (4708 <LORAREG_GetAttr_Rx1WindowparamsType4+0xe8>)
    4670:	7a0b      	ldrb	r3, [r1, #8]
    4672:	7a4a      	ldrb	r2, [r1, #9]
    4674:	0212      	lsls	r2, r2, #8
    4676:	4313      	orrs	r3, r2
    4678:	7a8a      	ldrb	r2, [r1, #10]
    467a:	0412      	lsls	r2, r2, #16
    467c:	431a      	orrs	r2, r3
    467e:	7acb      	ldrb	r3, [r1, #11]
    4680:	061b      	lsls	r3, r3, #24
    4682:	431a      	orrs	r2, r3
    4684:	2327      	movs	r3, #39	; 0x27
    4686:	5cc9      	ldrb	r1, [r1, r3]
    4688:	004b      	lsls	r3, r1, #1
    468a:	185b      	adds	r3, r3, r1
    468c:	009b      	lsls	r3, r3, #2
    468e:	189b      	adds	r3, r3, r2
    4690:	7919      	ldrb	r1, [r3, #4]
    4692:	795a      	ldrb	r2, [r3, #5]
    4694:	0212      	lsls	r2, r2, #8
    4696:	4311      	orrs	r1, r2
    4698:	799a      	ldrb	r2, [r3, #6]
    469a:	0412      	lsls	r2, r2, #16
    469c:	430a      	orrs	r2, r1
    469e:	79db      	ldrb	r3, [r3, #7]
    46a0:	061b      	lsls	r3, r3, #24
    46a2:	4313      	orrs	r3, r2
    46a4:	9300      	str	r3, [sp, #0]
    46a6:	e028      	b.n	46fa <LORAREG_GetAttr_Rx1WindowparamsType4+0xda>
	effectiveDROffset = (rx1WindowParamReq->drOffset > maxDR) ? (maxDR - rx1WindowParamReq->drOffset) : (rx1WindowParamReq->drOffset);
    46a8:	b25b      	sxtb	r3, r3
    46aa:	e7d3      	b.n	4654 <LORAREG_GetAttr_Rx1WindowparamsType4+0x34>
		else if(rx1WindowParams->rx1Dr > maxDR)
    46ac:	2b05      	cmp	r3, #5
    46ae:	d802      	bhi.n	46b6 <LORAREG_GetAttr_Rx1WindowparamsType4+0x96>
		rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr - effectiveDROffset;
    46b0:	466a      	mov	r2, sp
    46b2:	7113      	strb	r3, [r2, #4]
    46b4:	e005      	b.n	46c2 <LORAREG_GetAttr_Rx1WindowparamsType4+0xa2>
			rx1WindowParams->rx1Dr = maxDR;
    46b6:	2305      	movs	r3, #5
    46b8:	466a      	mov	r2, sp
    46ba:	7113      	strb	r3, [r2, #4]
    46bc:	e001      	b.n	46c2 <LORAREG_GetAttr_Rx1WindowparamsType4+0xa2>
		rx1WindowParams->rx1Dr = minDR;
    46be:	466b      	mov	r3, sp
    46c0:	711c      	strb	r4, [r3, #4]
	rx1WindowParams->rx1Freq = RegParams.pOtherChParams[RegParams.lastUsedChannelIndex].rx1Frequency;
    46c2:	4911      	ldr	r1, [pc, #68]	; (4708 <LORAREG_GetAttr_Rx1WindowparamsType4+0xe8>)
    46c4:	7a0b      	ldrb	r3, [r1, #8]
    46c6:	7a4a      	ldrb	r2, [r1, #9]
    46c8:	0212      	lsls	r2, r2, #8
    46ca:	4313      	orrs	r3, r2
    46cc:	7a8a      	ldrb	r2, [r1, #10]
    46ce:	0412      	lsls	r2, r2, #16
    46d0:	431a      	orrs	r2, r3
    46d2:	7acb      	ldrb	r3, [r1, #11]
    46d4:	061b      	lsls	r3, r3, #24
    46d6:	431a      	orrs	r2, r3
    46d8:	2327      	movs	r3, #39	; 0x27
    46da:	5cc9      	ldrb	r1, [r1, r3]
    46dc:	004b      	lsls	r3, r1, #1
    46de:	185b      	adds	r3, r3, r1
    46e0:	009b      	lsls	r3, r3, #2
    46e2:	189b      	adds	r3, r3, r2
    46e4:	7919      	ldrb	r1, [r3, #4]
    46e6:	795a      	ldrb	r2, [r3, #5]
    46e8:	0212      	lsls	r2, r2, #8
    46ea:	4311      	orrs	r1, r2
    46ec:	799a      	ldrb	r2, [r3, #6]
    46ee:	0412      	lsls	r2, r2, #16
    46f0:	430a      	orrs	r2, r1
    46f2:	79db      	ldrb	r3, [r3, #7]
    46f4:	061b      	lsls	r3, r3, #24
    46f6:	4313      	orrs	r3, r2
    46f8:	9300      	str	r3, [sp, #0]
	memcpy(attrOutput,&rx1WindowParamsResp,sizeof(Rx1WindowParams_t));
    46fa:	2208      	movs	r2, #8
    46fc:	4669      	mov	r1, sp
    46fe:	4b04      	ldr	r3, [pc, #16]	; (4710 <LORAREG_GetAttr_Rx1WindowparamsType4+0xf0>)
    4700:	4798      	blx	r3
}
    4702:	2008      	movs	r0, #8
    4704:	b002      	add	sp, #8
    4706:	bd10      	pop	{r4, pc}
    4708:	20000b48 	.word	0x20000b48
    470c:	00007fe0 	.word	0x00007fe0
    4710:	000112d5 	.word	0x000112d5

00004714 <LORAREG_GetAttr_FreqT3>:
{
    4714:	b510      	push	{r4, lr}
    4716:	0014      	movs	r4, r2
	channelId = *(uint8_t *)attrInput;
    4718:	780b      	ldrb	r3, [r1, #0]
	if(channelId > RegParams.maxChannels) 
    471a:	2222      	movs	r2, #34	; 0x22
    471c:	490d      	ldr	r1, [pc, #52]	; (4754 <LORAREG_GetAttr_FreqT3+0x40>)
    471e:	568a      	ldrsb	r2, [r1, r2]
		result = LORAWAN_INVALID_PARAMETER;
    4720:	200a      	movs	r0, #10
	if(channelId > RegParams.maxChannels) 
    4722:	4293      	cmp	r3, r2
    4724:	dd00      	ble.n	4728 <LORAREG_GetAttr_FreqT3+0x14>
}
    4726:	bd10      	pop	{r4, pc}
		memcpy(attrOutput,(&RegParams.pOtherChParams[channelId].ulfrequency),sizeof(uint32_t));
    4728:	0008      	movs	r0, r1
    472a:	7a09      	ldrb	r1, [r1, #8]
    472c:	7a42      	ldrb	r2, [r0, #9]
    472e:	0212      	lsls	r2, r2, #8
    4730:	430a      	orrs	r2, r1
    4732:	7a81      	ldrb	r1, [r0, #10]
    4734:	0409      	lsls	r1, r1, #16
    4736:	430a      	orrs	r2, r1
    4738:	7ac1      	ldrb	r1, [r0, #11]
    473a:	0609      	lsls	r1, r1, #24
    473c:	4311      	orrs	r1, r2
    473e:	005a      	lsls	r2, r3, #1
    4740:	18d3      	adds	r3, r2, r3
    4742:	009b      	lsls	r3, r3, #2
    4744:	18c9      	adds	r1, r1, r3
    4746:	2204      	movs	r2, #4
    4748:	0020      	movs	r0, r4
    474a:	4b03      	ldr	r3, [pc, #12]	; (4758 <LORAREG_GetAttr_FreqT3+0x44>)
    474c:	4798      	blx	r3
	StackRetStatus_t result = LORAWAN_SUCCESS;
    474e:	2008      	movs	r0, #8
    4750:	e7e9      	b.n	4726 <LORAREG_GetAttr_FreqT3+0x12>
    4752:	46c0      	nop			; (mov r8, r8)
    4754:	20000b48 	.word	0x20000b48
    4758:	000112d5 	.word	0x000112d5

0000475c <LORAREG_GetAttr_Rx1WindowparamsType3>:
{
    475c:	b500      	push	{lr}
    475e:	b083      	sub	sp, #12
    4760:	0010      	movs	r0, r2
	memcpy(&rx1WindowParamsReq,(Rx1WindowParamsReq_t *)attrInput,sizeof(Rx1WindowParamsReq_t));
    4762:	784b      	ldrb	r3, [r1, #1]
    4764:	788a      	ldrb	r2, [r1, #2]
	effectiveDROffset = (rx1WindowParamReq->drOffset > maxDR) ? (maxDR - rx1WindowParamReq->drOffset) : (rx1WindowParamReq->drOffset);
    4766:	2b05      	cmp	r3, #5
    4768:	d90b      	bls.n	4782 <LORAREG_GetAttr_Rx1WindowparamsType3+0x26>
    476a:	2105      	movs	r1, #5
    476c:	1acb      	subs	r3, r1, r3
    476e:	b25b      	sxtb	r3, r3
    if (rx1WindowParamReq->currDr >= effectiveDROffset)
    4770:	429a      	cmp	r2, r3
    4772:	db0c      	blt.n	478e <LORAREG_GetAttr_Rx1WindowparamsType3+0x32>
        rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr - effectiveDROffset;
    4774:	1ad3      	subs	r3, r2, r3
    4776:	b2db      	uxtb	r3, r3
		else if(rx1WindowParams->rx1Dr > maxDR)
    4778:	2b05      	cmp	r3, #5
    477a:	d804      	bhi.n	4786 <LORAREG_GetAttr_Rx1WindowparamsType3+0x2a>
        rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr - effectiveDROffset;
    477c:	466a      	mov	r2, sp
    477e:	7113      	strb	r3, [r2, #4]
    4780:	e008      	b.n	4794 <LORAREG_GetAttr_Rx1WindowparamsType3+0x38>
	effectiveDROffset = (rx1WindowParamReq->drOffset > maxDR) ? (maxDR - rx1WindowParamReq->drOffset) : (rx1WindowParamReq->drOffset);
    4782:	b25b      	sxtb	r3, r3
    4784:	e7f4      	b.n	4770 <LORAREG_GetAttr_Rx1WindowparamsType3+0x14>
			rx1WindowParams->rx1Dr = maxDR;
    4786:	2305      	movs	r3, #5
    4788:	466a      	mov	r2, sp
    478a:	7113      	strb	r3, [r2, #4]
    478c:	e002      	b.n	4794 <LORAREG_GetAttr_Rx1WindowparamsType3+0x38>
        rx1WindowParams->rx1Dr = minDR;
    478e:	2300      	movs	r3, #0
    4790:	466a      	mov	r2, sp
    4792:	7113      	strb	r3, [r2, #4]
	rx1WindowParams->rx1Freq = RegParams.pOtherChParams[RegParams.lastUsedChannelIndex].rx1Frequency;			
    4794:	4911      	ldr	r1, [pc, #68]	; (47dc <LORAREG_GetAttr_Rx1WindowparamsType3+0x80>)
    4796:	7a0b      	ldrb	r3, [r1, #8]
    4798:	7a4a      	ldrb	r2, [r1, #9]
    479a:	0212      	lsls	r2, r2, #8
    479c:	4313      	orrs	r3, r2
    479e:	7a8a      	ldrb	r2, [r1, #10]
    47a0:	0412      	lsls	r2, r2, #16
    47a2:	431a      	orrs	r2, r3
    47a4:	7acb      	ldrb	r3, [r1, #11]
    47a6:	061b      	lsls	r3, r3, #24
    47a8:	431a      	orrs	r2, r3
    47aa:	2327      	movs	r3, #39	; 0x27
    47ac:	5cc9      	ldrb	r1, [r1, r3]
    47ae:	004b      	lsls	r3, r1, #1
    47b0:	185b      	adds	r3, r3, r1
    47b2:	009b      	lsls	r3, r3, #2
    47b4:	189b      	adds	r3, r3, r2
    47b6:	7919      	ldrb	r1, [r3, #4]
    47b8:	795a      	ldrb	r2, [r3, #5]
    47ba:	0212      	lsls	r2, r2, #8
    47bc:	4311      	orrs	r1, r2
    47be:	799a      	ldrb	r2, [r3, #6]
    47c0:	0412      	lsls	r2, r2, #16
    47c2:	430a      	orrs	r2, r1
    47c4:	79db      	ldrb	r3, [r3, #7]
    47c6:	061b      	lsls	r3, r3, #24
    47c8:	4313      	orrs	r3, r2
    47ca:	9300      	str	r3, [sp, #0]
	memcpy(attrOutput,&rx1WindowParamsResp,sizeof(Rx1WindowParams_t));
    47cc:	2208      	movs	r2, #8
    47ce:	4669      	mov	r1, sp
    47d0:	4b03      	ldr	r3, [pc, #12]	; (47e0 <LORAREG_GetAttr_Rx1WindowparamsType3+0x84>)
    47d2:	4798      	blx	r3
}
    47d4:	2008      	movs	r0, #8
    47d6:	b003      	add	sp, #12
    47d8:	bd00      	pop	{pc}
    47da:	46c0      	nop			; (mov r8, r8)
    47dc:	20000b48 	.word	0x20000b48
    47e0:	000112d5 	.word	0x000112d5

000047e4 <LORAREG_GetAttr_minLBTChPauseTimer>:
{
    47e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    47e6:	46de      	mov	lr, fp
    47e8:	4657      	mov	r7, sl
    47ea:	464e      	mov	r6, r9
    47ec:	4645      	mov	r5, r8
    47ee:	b5e0      	push	{r5, r6, r7, lr}
    47f0:	b085      	sub	sp, #20
    47f2:	9200      	str	r2, [sp, #0]
	uint32_t minim = UINT32_MAX;
    47f4:	2301      	movs	r3, #1
    47f6:	425b      	negs	r3, r3
    47f8:	9303      	str	r3, [sp, #12]
	currentDataRate = *(uint8_t *)attrInput;
    47fa:	780b      	ldrb	r3, [r1, #0]
    47fc:	4699      	mov	r9, r3
	for (uint8_t i = 0; i < RegParams.maxChannels; i++)
    47fe:	2322      	movs	r3, #34	; 0x22
    4800:	4a2a      	ldr	r2, [pc, #168]	; (48ac <LORAREG_GetAttr_minLBTChPauseTimer+0xc8>)
    4802:	56d7      	ldrsb	r7, [r2, r3]
    4804:	2f00      	cmp	r7, #0
    4806:	dd40      	ble.n	488a <LORAREG_GetAttr_minLBTChPauseTimer+0xa6>
		if ( (RegParams.pChParams[i].status == ENABLED) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0) 
    4808:	7916      	ldrb	r6, [r2, #4]
    480a:	7953      	ldrb	r3, [r2, #5]
    480c:	021b      	lsls	r3, r3, #8
    480e:	4333      	orrs	r3, r6
    4810:	7996      	ldrb	r6, [r2, #6]
    4812:	0436      	lsls	r6, r6, #16
    4814:	4333      	orrs	r3, r6
    4816:	79d6      	ldrb	r6, [r2, #7]
    4818:	0636      	lsls	r6, r6, #24
    481a:	431e      	orrs	r6, r3
    481c:	2300      	movs	r3, #0
    481e:	469a      	mov	sl, r3
    4820:	3b01      	subs	r3, #1
    4822:	4698      	mov	r8, r3
    4824:	2300      	movs	r3, #0
    4826:	2100      	movs	r1, #0
    4828:	4694      	mov	ip, r2
			 && (currentDataRate >= RegParams.pChParams[i].dataRange.min) 
    482a:	464a      	mov	r2, r9
    482c:	9201      	str	r2, [sp, #4]
    482e:	46c3      	mov	fp, r8
    4830:	e004      	b.n	483c <LORAREG_GetAttr_minLBTChPauseTimer+0x58>
	for (uint8_t i = 0; i < RegParams.maxChannels; i++)
    4832:	3101      	adds	r1, #1
    4834:	b2c9      	uxtb	r1, r1
    4836:	000b      	movs	r3, r1
    4838:	42b9      	cmp	r1, r7
    483a:	da23      	bge.n	4884 <LORAREG_GetAttr_minLBTChPauseTimer+0xa0>
		if ( (RegParams.pChParams[i].status == ENABLED) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0) 
    483c:	004a      	lsls	r2, r1, #1
    483e:	18b2      	adds	r2, r6, r2
    4840:	7814      	ldrb	r4, [r2, #0]
    4842:	2c00      	cmp	r4, #0
    4844:	d0f5      	beq.n	4832 <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
    4846:	3352      	adds	r3, #82	; 0x52
    4848:	009b      	lsls	r3, r3, #2
    484a:	4463      	add	r3, ip
    484c:	7a58      	ldrb	r0, [r3, #9]
    484e:	4680      	mov	r8, r0
    4850:	7a98      	ldrb	r0, [r3, #10]
    4852:	0200      	lsls	r0, r0, #8
    4854:	4645      	mov	r5, r8
    4856:	4305      	orrs	r5, r0
    4858:	7ad8      	ldrb	r0, [r3, #11]
    485a:	0400      	lsls	r0, r0, #16
    485c:	4328      	orrs	r0, r5
    485e:	7b1b      	ldrb	r3, [r3, #12]
    4860:	061b      	lsls	r3, r3, #24
    4862:	4303      	orrs	r3, r0
    4864:	d0e5      	beq.n	4832 <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
		     && (RegParams.cmnParams.paramsType2.channelTimer[i] <= minim) 
    4866:	459b      	cmp	fp, r3
    4868:	d3e3      	bcc.n	4832 <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
			 && (currentDataRate >= RegParams.pChParams[i].dataRange.min) 
    486a:	7850      	ldrb	r0, [r2, #1]
    486c:	0700      	lsls	r0, r0, #28
    486e:	0f00      	lsrs	r0, r0, #28
    4870:	4581      	cmp	r9, r0
    4872:	dbde      	blt.n	4832 <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
			 && (currentDataRate <= RegParams.pChParams[i].dataRange.max) )
    4874:	7852      	ldrb	r2, [r2, #1]
    4876:	0912      	lsrs	r2, r2, #4
    4878:	9801      	ldr	r0, [sp, #4]
    487a:	4290      	cmp	r0, r2
    487c:	dcd9      	bgt.n	4832 <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
    487e:	46a2      	mov	sl, r4
			minim = RegParams.cmnParams.paramsType2.channelTimer[i];
    4880:	469b      	mov	fp, r3
    4882:	e7d6      	b.n	4832 <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
    4884:	4653      	mov	r3, sl
    4886:	2b00      	cmp	r3, #0
    4888:	d10c      	bne.n	48a4 <LORAREG_GetAttr_minLBTChPauseTimer+0xc0>
	memcpy(attrOutput,&minim,sizeof(uint32_t));
    488a:	2204      	movs	r2, #4
    488c:	a903      	add	r1, sp, #12
    488e:	9800      	ldr	r0, [sp, #0]
    4890:	4b07      	ldr	r3, [pc, #28]	; (48b0 <LORAREG_GetAttr_minLBTChPauseTimer+0xcc>)
    4892:	4798      	blx	r3
}
    4894:	2008      	movs	r0, #8
    4896:	b005      	add	sp, #20
    4898:	bc3c      	pop	{r2, r3, r4, r5}
    489a:	4690      	mov	r8, r2
    489c:	4699      	mov	r9, r3
    489e:	46a2      	mov	sl, r4
    48a0:	46ab      	mov	fp, r5
    48a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    48a4:	465b      	mov	r3, fp
    48a6:	9303      	str	r3, [sp, #12]
    48a8:	e7ef      	b.n	488a <LORAREG_GetAttr_minLBTChPauseTimer+0xa6>
    48aa:	46c0      	nop			; (mov r8, r8)
    48ac:	20000b48 	.word	0x20000b48
    48b0:	000112d5 	.word	0x000112d5

000048b4 <ValidateTxFreqT2>:
{
    48b4:	b500      	push	{lr}
    48b6:	b083      	sub	sp, #12
	memcpy(&val_freqTx,attrInput,sizeof(ValUpdateFreqTx_t));
    48b8:	2208      	movs	r2, #8
    48ba:	4668      	mov	r0, sp
    48bc:	4b04      	ldr	r3, [pc, #16]	; (48d0 <ValidateTxFreqT2+0x1c>)
    48be:	4798      	blx	r3
	retVal = pValidateAttr[RX_FREQUENCY](RX_FREQUENCY,(void *)&val_freqTx.frequencyNew);
    48c0:	4b04      	ldr	r3, [pc, #16]	; (48d4 <ValidateTxFreqT2+0x20>)
    48c2:	685b      	ldr	r3, [r3, #4]
    48c4:	4669      	mov	r1, sp
    48c6:	2001      	movs	r0, #1
    48c8:	4798      	blx	r3
}
    48ca:	b003      	add	sp, #12
    48cc:	bd00      	pop	{pc}
    48ce:	46c0      	nop			; (mov r8, r8)
    48d0:	000112d5 	.word	0x000112d5
    48d4:	200003e8 	.word	0x200003e8

000048d8 <ValidateFreqIN>:
{
    48d8:	b500      	push	{lr}
    48da:	b083      	sub	sp, #12
	memcpy(&newFreq,attrInput,sizeof(uint32_t));
    48dc:	2204      	movs	r2, #4
    48de:	a801      	add	r0, sp, #4
    48e0:	4b06      	ldr	r3, [pc, #24]	; (48fc <ValidateFreqIN+0x24>)
    48e2:	4798      	blx	r3
	if(newFreq > FREQ_867000KHZ || newFreq < FREQ_865000KHZ)
    48e4:	9b01      	ldr	r3, [sp, #4]
    48e6:	4a06      	ldr	r2, [pc, #24]	; (4900 <ValidateFreqIN+0x28>)
    48e8:	4694      	mov	ip, r2
    48ea:	4463      	add	r3, ip
    48ec:	4a05      	ldr	r2, [pc, #20]	; (4904 <ValidateFreqIN+0x2c>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    48ee:	2008      	movs	r0, #8
	if(newFreq > FREQ_867000KHZ || newFreq < FREQ_865000KHZ)
    48f0:	4293      	cmp	r3, r2
    48f2:	d900      	bls.n	48f6 <ValidateFreqIN+0x1e>
		result = LORAWAN_INVALID_PARAMETER;
    48f4:	3002      	adds	r0, #2
}
    48f6:	b003      	add	sp, #12
    48f8:	bd00      	pop	{pc}
    48fa:	46c0      	nop			; (mov r8, r8)
    48fc:	000112d5 	.word	0x000112d5
    4900:	cc7125c0 	.word	0xcc7125c0
    4904:	001e8480 	.word	0x001e8480

00004908 <ValidateFreqJP>:
{
    4908:	b500      	push	{lr}
    490a:	b083      	sub	sp, #12
	memcpy(&newFreq,attrInput,sizeof(uint32_t));
    490c:	2204      	movs	r2, #4
    490e:	a801      	add	r0, sp, #4
    4910:	4b06      	ldr	r3, [pc, #24]	; (492c <ValidateFreqJP+0x24>)
    4912:	4798      	blx	r3
	if(newFreq > FREQ_928000KHZ || newFreq < FREQ_920000KHZ)
    4914:	9b01      	ldr	r3, [sp, #4]
    4916:	4a06      	ldr	r2, [pc, #24]	; (4930 <ValidateFreqJP+0x28>)
    4918:	4694      	mov	ip, r2
    491a:	4463      	add	r3, ip
    491c:	4a05      	ldr	r2, [pc, #20]	; (4934 <ValidateFreqJP+0x2c>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    491e:	2008      	movs	r0, #8
	if(newFreq > FREQ_928000KHZ || newFreq < FREQ_920000KHZ)
    4920:	4293      	cmp	r3, r2
    4922:	d900      	bls.n	4926 <ValidateFreqJP+0x1e>
		result = LORAWAN_INVALID_PARAMETER;
    4924:	3002      	adds	r0, #2
}
    4926:	b003      	add	sp, #12
    4928:	bd00      	pop	{pc}
    492a:	46c0      	nop			; (mov r8, r8)
    492c:	000112d5 	.word	0x000112d5
    4930:	c929ea00 	.word	0xc929ea00
    4934:	007a1200 	.word	0x007a1200

00004938 <ValidateFreqKR>:
{
    4938:	b500      	push	{lr}
    493a:	b083      	sub	sp, #12
	memcpy(&freqNew,attrInput,sizeof(uint32_t));
    493c:	2204      	movs	r2, #4
    493e:	a801      	add	r0, sp, #4
    4940:	4b0a      	ldr	r3, [pc, #40]	; (496c <ValidateFreqKR+0x34>)
    4942:	4798      	blx	r3
		if(freq == freqNew)
    4944:	9a01      	ldr	r2, [sp, #4]
    4946:	4b0a      	ldr	r3, [pc, #40]	; (4970 <ValidateFreqKR+0x38>)
    4948:	429a      	cmp	r2, r3
    494a:	d00b      	beq.n	4964 <ValidateFreqKR+0x2c>
    494c:	4b09      	ldr	r3, [pc, #36]	; (4974 <ValidateFreqKR+0x3c>)
	for(freq = FREQ_920900KHZ; freq < FREQ_923300KHZ; freq += freqwidth)
    494e:	490a      	ldr	r1, [pc, #40]	; (4978 <ValidateFreqKR+0x40>)
		if(freq == freqNew)
    4950:	429a      	cmp	r2, r3
    4952:	d009      	beq.n	4968 <ValidateFreqKR+0x30>
	for(freq = FREQ_920900KHZ; freq < FREQ_923300KHZ; freq += freqwidth)
    4954:	4809      	ldr	r0, [pc, #36]	; (497c <ValidateFreqKR+0x44>)
    4956:	4684      	mov	ip, r0
    4958:	4463      	add	r3, ip
    495a:	428b      	cmp	r3, r1
    495c:	d1f8      	bne.n	4950 <ValidateFreqKR+0x18>
    StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    495e:	200a      	movs	r0, #10
}
    4960:	b003      	add	sp, #12
    4962:	bd00      	pop	{pc}
			result = LORAWAN_SUCCESS;
    4964:	2008      	movs	r0, #8
    4966:	e7fb      	b.n	4960 <ValidateFreqKR+0x28>
    4968:	2008      	movs	r0, #8
    496a:	e7f9      	b.n	4960 <ValidateFreqKR+0x28>
    496c:	000112d5 	.word	0x000112d5
    4970:	36e3d1a0 	.word	0x36e3d1a0
    4974:	36e6dee0 	.word	0x36e6dee0
    4978:	370870a0 	.word	0x370870a0
    497c:	00030d40 	.word	0x00030d40

00004980 <setNewChannelsT1>:
{
    4980:	b5f0      	push	{r4, r5, r6, r7, lr}
    4982:	b083      	sub	sp, #12
	memcpy(&updateNewCh,attrInput,sizeof(UpdateNewCh_t));
    4984:	ac01      	add	r4, sp, #4
    4986:	2204      	movs	r2, #4
    4988:	0020      	movs	r0, r4
    498a:	4b1f      	ldr	r3, [pc, #124]	; (4a08 <setNewChannelsT1+0x88>)
    498c:	4798      	blx	r3
	chMask = updateNewCh.channelMask;
    498e:	8827      	ldrh	r7, [r4, #0]
	chMaskCtrl = updateNewCh.channelMaskCntl;
    4990:	78a6      	ldrb	r6, [r4, #2]
    4992:	466b      	mov	r3, sp
    4994:	1cd9      	adds	r1, r3, #3
    4996:	700e      	strb	r6, [r1, #0]
	if(ValidateChannelMaskCntl(CHANNEL_MASK_CNTL, &chMaskCtrl) == LORAWAN_SUCCESS)
    4998:	201b      	movs	r0, #27
    499a:	4b1c      	ldr	r3, [pc, #112]	; (4a0c <setNewChannelsT1+0x8c>)
    499c:	4798      	blx	r3
    499e:	0005      	movs	r5, r0
    49a0:	2808      	cmp	r0, #8
    49a2:	d003      	beq.n	49ac <setNewChannelsT1+0x2c>
		retVal = LORAWAN_INVALID_PARAMETER;
    49a4:	250a      	movs	r5, #10
}
    49a6:	0028      	movs	r0, r5
    49a8:	b003      	add	sp, #12
    49aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch(chMaskCtrl)
    49ac:	2e06      	cmp	r6, #6
    49ae:	d01c      	beq.n	49ea <setNewChannelsT1+0x6a>
    49b0:	d80a      	bhi.n	49c8 <setNewChannelsT1+0x48>
    49b2:	2e04      	cmp	r6, #4
    49b4:	d8f7      	bhi.n	49a6 <setNewChannelsT1+0x26>
		channel = chMaskCtrl << SHIFT4;
    49b6:	0136      	lsls	r6, r6, #4
    49b8:	b2f0      	uxtb	r0, r6
				EnableChannels2(channel, channel + 15, chMask);
    49ba:	0001      	movs	r1, r0
    49bc:	310f      	adds	r1, #15
    49be:	b2c9      	uxtb	r1, r1
    49c0:	003a      	movs	r2, r7
    49c2:	4b13      	ldr	r3, [pc, #76]	; (4a10 <setNewChannelsT1+0x90>)
    49c4:	4798      	blx	r3
				break;
    49c6:	e7ee      	b.n	49a6 <setNewChannelsT1+0x26>
		switch(chMaskCtrl)
    49c8:	2400      	movs	r4, #0
    49ca:	2e07      	cmp	r6, #7
    49cc:	d1eb      	bne.n	49a6 <setNewChannelsT1+0x26>
					UpdateChannelIdStatus(i, DISABLED);
    49ce:	4e11      	ldr	r6, [pc, #68]	; (4a14 <setNewChannelsT1+0x94>)
    49d0:	2100      	movs	r1, #0
    49d2:	0020      	movs	r0, r4
    49d4:	47b0      	blx	r6
				for(i = 0; i< 63; i++)
    49d6:	3401      	adds	r4, #1
    49d8:	b2e4      	uxtb	r4, r4
    49da:	2c3f      	cmp	r4, #63	; 0x3f
    49dc:	d1f8      	bne.n	49d0 <setNewChannelsT1+0x50>
				EnableChannels2(64, 71, chMask);
    49de:	003a      	movs	r2, r7
    49e0:	2147      	movs	r1, #71	; 0x47
    49e2:	2040      	movs	r0, #64	; 0x40
    49e4:	4b0a      	ldr	r3, [pc, #40]	; (4a10 <setNewChannelsT1+0x90>)
    49e6:	4798      	blx	r3
				break;
    49e8:	e7dd      	b.n	49a6 <setNewChannelsT1+0x26>
		switch(chMaskCtrl)
    49ea:	2400      	movs	r4, #0
					UpdateChannelIdStatus(i, ENABLED);
    49ec:	4e09      	ldr	r6, [pc, #36]	; (4a14 <setNewChannelsT1+0x94>)
    49ee:	2101      	movs	r1, #1
    49f0:	0020      	movs	r0, r4
    49f2:	47b0      	blx	r6
				for(i = 0; i < 63; i++)
    49f4:	3401      	adds	r4, #1
    49f6:	b2e4      	uxtb	r4, r4
    49f8:	2c3f      	cmp	r4, #63	; 0x3f
    49fa:	d1f8      	bne.n	49ee <setNewChannelsT1+0x6e>
				EnableChannels2(64, 71, chMask);
    49fc:	003a      	movs	r2, r7
    49fe:	2147      	movs	r1, #71	; 0x47
    4a00:	2040      	movs	r0, #64	; 0x40
    4a02:	4b03      	ldr	r3, [pc, #12]	; (4a10 <setNewChannelsT1+0x90>)
    4a04:	4798      	blx	r3
			    break;
    4a06:	e7ce      	b.n	49a6 <setNewChannelsT1+0x26>
    4a08:	000112d5 	.word	0x000112d5
    4a0c:	000038c1 	.word	0x000038c1
    4a10:	00003ed9 	.word	0x00003ed9
    4a14:	00003e79 	.word	0x00003e79

00004a18 <setDlFrequency>:
{
    4a18:	b530      	push	{r4, r5, lr}
    4a1a:	b085      	sub	sp, #20
	memcpy(&updateDlFreq,attrInput,sizeof(ValUpdateFreqTx_t));
    4a1c:	ac02      	add	r4, sp, #8
    4a1e:	2208      	movs	r2, #8
    4a20:	0020      	movs	r0, r4
    4a22:	4b20      	ldr	r3, [pc, #128]	; (4aa4 <setDlFrequency+0x8c>)
    4a24:	4798      	blx	r3
	Chid.channelIndex = updateDlFreq.channelIndex;
    4a26:	ab01      	add	r3, sp, #4
    4a28:	7922      	ldrb	r2, [r4, #4]
    4a2a:	701a      	strb	r2, [r3, #0]
		Chid.allowedForDefaultChannels = ALL_CHANNELS;
    4a2c:	2201      	movs	r2, #1
    4a2e:	705a      	strb	r2, [r3, #1]
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY, &updateDlFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &Chid) != LORAWAN_SUCCESS)
    4a30:	4b1d      	ldr	r3, [pc, #116]	; (4aa8 <setDlFrequency+0x90>)
    4a32:	685b      	ldr	r3, [r3, #4]
    4a34:	0021      	movs	r1, r4
    4a36:	2001      	movs	r0, #1
    4a38:	4798      	blx	r3
		result = LORAWAN_INVALID_PARAMETER;
    4a3a:	240a      	movs	r4, #10
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY, &updateDlFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &Chid) != LORAWAN_SUCCESS)
    4a3c:	2808      	cmp	r0, #8
    4a3e:	d002      	beq.n	4a46 <setDlFrequency+0x2e>
}
    4a40:	0020      	movs	r0, r4
    4a42:	b005      	add	sp, #20
    4a44:	bd30      	pop	{r4, r5, pc}
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY, &updateDlFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &Chid) != LORAWAN_SUCCESS)
    4a46:	a901      	add	r1, sp, #4
    4a48:	300d      	adds	r0, #13
    4a4a:	4b18      	ldr	r3, [pc, #96]	; (4aac <setDlFrequency+0x94>)
    4a4c:	4798      	blx	r3
    4a4e:	0004      	movs	r4, r0
    4a50:	2808      	cmp	r0, #8
    4a52:	d001      	beq.n	4a58 <setDlFrequency+0x40>
		result = LORAWAN_INVALID_PARAMETER;
    4a54:	240a      	movs	r4, #10
    4a56:	e7f3      	b.n	4a40 <setDlFrequency+0x28>
		RegParams.pOtherChParams[updateDlFreq.channelIndex].rx1Frequency = updateDlFreq.frequencyNew;
    4a58:	4a15      	ldr	r2, [pc, #84]	; (4ab0 <setDlFrequency+0x98>)
    4a5a:	7a13      	ldrb	r3, [r2, #8]
    4a5c:	7a50      	ldrb	r0, [r2, #9]
    4a5e:	0200      	lsls	r0, r0, #8
    4a60:	4303      	orrs	r3, r0
    4a62:	7a90      	ldrb	r0, [r2, #10]
    4a64:	0400      	lsls	r0, r0, #16
    4a66:	4318      	orrs	r0, r3
    4a68:	7ad3      	ldrb	r3, [r2, #11]
    4a6a:	061b      	lsls	r3, r3, #24
    4a6c:	4318      	orrs	r0, r3
    4a6e:	a902      	add	r1, sp, #8
    4a70:	790d      	ldrb	r5, [r1, #4]
    4a72:	006b      	lsls	r3, r5, #1
    4a74:	195b      	adds	r3, r3, r5
    4a76:	009b      	lsls	r3, r3, #2
    4a78:	181b      	adds	r3, r3, r0
    4a7a:	7808      	ldrb	r0, [r1, #0]
    4a7c:	7118      	strb	r0, [r3, #4]
    4a7e:	7848      	ldrb	r0, [r1, #1]
    4a80:	7158      	strb	r0, [r3, #5]
    4a82:	7888      	ldrb	r0, [r1, #2]
    4a84:	7198      	strb	r0, [r3, #6]
    4a86:	78c9      	ldrb	r1, [r1, #3]
    4a88:	71d9      	strb	r1, [r3, #7]
		PDS_STORE(RegParams.regParamItems.ch_param_2_item_id);
    4a8a:	23fa      	movs	r3, #250	; 0xfa
    4a8c:	33ff      	adds	r3, #255	; 0xff
    4a8e:	5cd3      	ldrb	r3, [r2, r3]
    4a90:	21fd      	movs	r1, #253	; 0xfd
    4a92:	0049      	lsls	r1, r1, #1
    4a94:	5c50      	ldrb	r0, [r2, r1]
    4a96:	0200      	lsls	r0, r0, #8
    4a98:	4318      	orrs	r0, r3
    4a9a:	b2c1      	uxtb	r1, r0
    4a9c:	0a00      	lsrs	r0, r0, #8
    4a9e:	4b05      	ldr	r3, [pc, #20]	; (4ab4 <setDlFrequency+0x9c>)
    4aa0:	4798      	blx	r3
    4aa2:	e7cd      	b.n	4a40 <setDlFrequency+0x28>
    4aa4:	000112d5 	.word	0x000112d5
    4aa8:	200003e8 	.word	0x200003e8
    4aac:	000037d9 	.word	0x000037d9
    4ab0:	20000b48 	.word	0x20000b48
    4ab4:	00001e65 	.word	0x00001e65

00004ab8 <setNewChannel>:
{
    4ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
    4aba:	46d6      	mov	lr, sl
    4abc:	464f      	mov	r7, r9
    4abe:	4646      	mov	r6, r8
    4ac0:	b5c0      	push	{r6, r7, lr}
    4ac2:	b082      	sub	sp, #8
	if(((ISM_ASBAND) & (1 << RegParams.band)) != 0 || ((ISM_JPN923) == RegParams.band))
    4ac4:	2326      	movs	r3, #38	; 0x26
    4ac6:	4a31      	ldr	r2, [pc, #196]	; (4b8c <setNewChannel+0xd4>)
    4ac8:	5cd2      	ldrb	r2, [r2, r3]
    4aca:	4b31      	ldr	r3, [pc, #196]	; (4b90 <setNewChannel+0xd8>)
    4acc:	4113      	asrs	r3, r2
    4ace:	07db      	lsls	r3, r3, #31
    4ad0:	d407      	bmi.n	4ae2 <setNewChannel+0x2a>
    4ad2:	2a05      	cmp	r2, #5
    4ad4:	d01f      	beq.n	4b16 <setNewChannel+0x5e>
	else if( ISM_KR920 == RegParams.band)
    4ad6:	2a04      	cmp	r2, #4
    4ad8:	d01f      	beq.n	4b1a <setNewChannel+0x62>
	else if( ISM_IND865 == RegParams.band)
    4ada:	2a0f      	cmp	r2, #15
    4adc:	d01f      	beq.n	4b1e <setNewChannel+0x66>
		pUpdateChidStatus = UpdateChannelIdStatusT2;
    4ade:	4f2d      	ldr	r7, [pc, #180]	; (4b94 <setNewChannel+0xdc>)
    4ae0:	e000      	b.n	4ae4 <setNewChannel+0x2c>
		pUpdateChidStatus = UpdateChannelIdStatusT3;
    4ae2:	4f2d      	ldr	r7, [pc, #180]	; (4b98 <setNewChannel+0xe0>)
	memcpy(&newCh, attrInput,sizeof(UpdateNewCh_t));
    4ae4:	ac01      	add	r4, sp, #4
    4ae6:	2204      	movs	r2, #4
    4ae8:	0020      	movs	r0, r4
    4aea:	4b2c      	ldr	r3, [pc, #176]	; (4b9c <setNewChannel+0xe4>)
    4aec:	4798      	blx	r3
	chMask = newCh.channelMask;
    4aee:	8825      	ldrh	r5, [r4, #0]
		result = LORAWAN_INVALID_PARAMETER;
    4af0:	260a      	movs	r6, #10
	if(/*ValidateChannelMaskT2(&chMask) != LORAWAN_SUCCESS*/ chMask == 0 || ValidateChannelMaskCntlT2(CHANNEL_MASK_CNTL, &newCh.channelMaskCntl) != LORAWAN_SUCCESS)
    4af2:	2d00      	cmp	r5, #0
    4af4:	d008      	beq.n	4b08 <setNewChannel+0x50>
    4af6:	466b      	mov	r3, sp
    4af8:	1d99      	adds	r1, r3, #6
    4afa:	201b      	movs	r0, #27
    4afc:	4b28      	ldr	r3, [pc, #160]	; (4ba0 <setNewChannel+0xe8>)
    4afe:	4798      	blx	r3
    4b00:	0006      	movs	r6, r0
    4b02:	2808      	cmp	r0, #8
    4b04:	d00d      	beq.n	4b22 <setNewChannel+0x6a>
		result = LORAWAN_INVALID_PARAMETER;
    4b06:	260a      	movs	r6, #10
}
    4b08:	0030      	movs	r0, r6
    4b0a:	b002      	add	sp, #8
    4b0c:	bc1c      	pop	{r2, r3, r4}
    4b0e:	4690      	mov	r8, r2
    4b10:	4699      	mov	r9, r3
    4b12:	46a2      	mov	sl, r4
    4b14:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pUpdateChidStatus = UpdateChannelIdStatusT3;
    4b16:	4f20      	ldr	r7, [pc, #128]	; (4b98 <setNewChannel+0xe0>)
    4b18:	e7e4      	b.n	4ae4 <setNewChannel+0x2c>
		pUpdateChidStatus = UpdateChannelIdStatusT4;
    4b1a:	4f22      	ldr	r7, [pc, #136]	; (4ba4 <setNewChannel+0xec>)
    4b1c:	e7e2      	b.n	4ae4 <setNewChannel+0x2c>
		pUpdateChidStatus = UpdateChannelIdStatus;
    4b1e:	4f22      	ldr	r7, [pc, #136]	; (4ba8 <setNewChannel+0xf0>)
    4b20:	e7e0      	b.n	4ae4 <setNewChannel+0x2c>
		if(newCh.channelMaskCntl == 6)
    4b22:	ab01      	add	r3, sp, #4
    4b24:	789c      	ldrb	r4, [r3, #2]
    4b26:	2c06      	cmp	r4, #6
    4b28:	d00c      	beq.n	4b44 <setNewChannel+0x8c>
		else if(newCh.channelMaskCntl == 0)
    4b2a:	2c00      	cmp	r4, #0
    4b2c:	d1ec      	bne.n	4b08 <setNewChannel+0x50>
			for(i = 0; i < RegParams.maxChannels; i++)
    4b2e:	2322      	movs	r3, #34	; 0x22
    4b30:	4a16      	ldr	r2, [pc, #88]	; (4b8c <setNewChannel+0xd4>)
    4b32:	56d3      	ldrsb	r3, [r2, r3]
    4b34:	2b00      	cmp	r3, #0
    4b36:	dde7      	ble.n	4b08 <setNewChannel+0x50>
				if((chMask & BIT0) == BIT0)
    4b38:	2301      	movs	r3, #1
    4b3a:	4698      	mov	r8, r3
			for(i = 0; i < RegParams.maxChannels; i++)
    4b3c:	4692      	mov	sl, r2
    4b3e:	2322      	movs	r3, #34	; 0x22
    4b40:	4699      	mov	r9, r3
    4b42:	e01c      	b.n	4b7e <setNewChannel+0xc6>
			for(i = 0; i < RegParams.maxChannels; i++)
    4b44:	2322      	movs	r3, #34	; 0x22
    4b46:	4a11      	ldr	r2, [pc, #68]	; (4b8c <setNewChannel+0xd4>)
    4b48:	56d3      	ldrsb	r3, [r2, r3]
    4b4a:	2b00      	cmp	r3, #0
    4b4c:	dddc      	ble.n	4b08 <setNewChannel+0x50>
    4b4e:	2400      	movs	r4, #0
    4b50:	4690      	mov	r8, r2
    4b52:	2522      	movs	r5, #34	; 0x22
				pUpdateChidStatus(i,ENABLED);
    4b54:	2101      	movs	r1, #1
    4b56:	0020      	movs	r0, r4
    4b58:	47b8      	blx	r7
			for(i = 0; i < RegParams.maxChannels; i++)
    4b5a:	3401      	adds	r4, #1
    4b5c:	b2e4      	uxtb	r4, r4
    4b5e:	4643      	mov	r3, r8
    4b60:	575b      	ldrsb	r3, [r3, r5]
    4b62:	429c      	cmp	r4, r3
    4b64:	dbf6      	blt.n	4b54 <setNewChannel+0x9c>
    4b66:	e7cf      	b.n	4b08 <setNewChannel+0x50>
					pUpdateChidStatus(i,DISABLED);
    4b68:	2100      	movs	r1, #0
    4b6a:	0020      	movs	r0, r4
    4b6c:	47b8      	blx	r7
				chMask = chMask >> SHIFT1;
    4b6e:	086d      	lsrs	r5, r5, #1
			for(i = 0; i < RegParams.maxChannels; i++)
    4b70:	3401      	adds	r4, #1
    4b72:	b2e4      	uxtb	r4, r4
    4b74:	4653      	mov	r3, sl
    4b76:	464a      	mov	r2, r9
    4b78:	569b      	ldrsb	r3, [r3, r2]
    4b7a:	429c      	cmp	r4, r3
    4b7c:	dac4      	bge.n	4b08 <setNewChannel+0x50>
				if((chMask & BIT0) == BIT0)
    4b7e:	4643      	mov	r3, r8
    4b80:	422b      	tst	r3, r5
    4b82:	d0f1      	beq.n	4b68 <setNewChannel+0xb0>
					pUpdateChidStatus(i, ENABLED);
    4b84:	4641      	mov	r1, r8
    4b86:	0020      	movs	r0, r4
    4b88:	47b8      	blx	r7
    4b8a:	e7f0      	b.n	4b6e <setNewChannel+0xb6>
    4b8c:	20000b48 	.word	0x20000b48
    4b90:	00007fc0 	.word	0x00007fc0
    4b94:	00003f1d 	.word	0x00003f1d
    4b98:	00004129 	.word	0x00004129
    4b9c:	000112d5 	.word	0x000112d5
    4ba0:	00003945 	.word	0x00003945
    4ba4:	00004081 	.word	0x00004081
    4ba8:	00003e79 	.word	0x00003e79

00004bac <setFrequency>:
{
    4bac:	b570      	push	{r4, r5, r6, lr}
    4bae:	b084      	sub	sp, #16
	memcpy(&updateTxFreq,attrInput,sizeof(ValUpdateFreqTx_t));
    4bb0:	ac02      	add	r4, sp, #8
    4bb2:	2208      	movs	r2, #8
    4bb4:	0020      	movs	r0, r4
    4bb6:	4b3f      	ldr	r3, [pc, #252]	; (4cb4 <setFrequency+0x108>)
    4bb8:	4798      	blx	r3
	valChid.channelIndex = updateTxFreq.channelIndex;
    4bba:	ab01      	add	r3, sp, #4
    4bbc:	7922      	ldrb	r2, [r4, #4]
    4bbe:	701a      	strb	r2, [r3, #0]
	valChid.allowedForDefaultChannels = WITHOUT_DEFAULT_CHANNELS;
    4bc0:	2200      	movs	r2, #0
    4bc2:	705a      	strb	r2, [r3, #1]
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY,&updateTxFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &valChid) != LORAWAN_SUCCESS)
    4bc4:	4b3c      	ldr	r3, [pc, #240]	; (4cb8 <setFrequency+0x10c>)
    4bc6:	685b      	ldr	r3, [r3, #4]
    4bc8:	0021      	movs	r1, r4
    4bca:	2001      	movs	r0, #1
    4bcc:	4798      	blx	r3
		result = LORAWAN_INVALID_PARAMETER;
    4bce:	240a      	movs	r4, #10
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY,&updateTxFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &valChid) != LORAWAN_SUCCESS)
    4bd0:	2808      	cmp	r0, #8
    4bd2:	d002      	beq.n	4bda <setFrequency+0x2e>
}
    4bd4:	0020      	movs	r0, r4
    4bd6:	b004      	add	sp, #16
    4bd8:	bd70      	pop	{r4, r5, r6, pc}
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY,&updateTxFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &valChid) != LORAWAN_SUCCESS)
    4bda:	a901      	add	r1, sp, #4
    4bdc:	300d      	adds	r0, #13
    4bde:	4b37      	ldr	r3, [pc, #220]	; (4cbc <setFrequency+0x110>)
    4be0:	4798      	blx	r3
    4be2:	0004      	movs	r4, r0
    4be4:	2808      	cmp	r0, #8
    4be6:	d001      	beq.n	4bec <setFrequency+0x40>
		result = LORAWAN_INVALID_PARAMETER;
    4be8:	240a      	movs	r4, #10
    4bea:	e7f3      	b.n	4bd4 <setFrequency+0x28>
		uint8_t chIndx = updateTxFreq.channelIndex;
    4bec:	ab02      	add	r3, sp, #8
    4bee:	791d      	ldrb	r5, [r3, #4]
		if(((1 << RegParams.band) & (ISM_EUBAND)) != 0)
    4bf0:	2326      	movs	r3, #38	; 0x26
    4bf2:	4a33      	ldr	r2, [pc, #204]	; (4cc0 <setFrequency+0x114>)
    4bf4:	5cd2      	ldrb	r2, [r2, r3]
    4bf6:	3b23      	subs	r3, #35	; 0x23
    4bf8:	4113      	asrs	r3, r2
    4bfa:	07db      	lsls	r3, r3, #31
    4bfc:	d446      	bmi.n	4c8c <setFrequency+0xe0>
		RegParams.pOtherChParams[chIndx].ulfrequency = updateTxFreq.frequencyNew;
    4bfe:	006a      	lsls	r2, r5, #1
    4c00:	1952      	adds	r2, r2, r5
    4c02:	0090      	lsls	r0, r2, #2
    4c04:	a902      	add	r1, sp, #8
    4c06:	9d02      	ldr	r5, [sp, #8]
    4c08:	4b2d      	ldr	r3, [pc, #180]	; (4cc0 <setFrequency+0x114>)
    4c0a:	7a1a      	ldrb	r2, [r3, #8]
    4c0c:	7a5e      	ldrb	r6, [r3, #9]
    4c0e:	0236      	lsls	r6, r6, #8
    4c10:	4316      	orrs	r6, r2
    4c12:	7a9a      	ldrb	r2, [r3, #10]
    4c14:	0412      	lsls	r2, r2, #16
    4c16:	4316      	orrs	r6, r2
    4c18:	7ada      	ldrb	r2, [r3, #11]
    4c1a:	0612      	lsls	r2, r2, #24
    4c1c:	4332      	orrs	r2, r6
    4c1e:	5415      	strb	r5, [r2, r0]
    4c20:	0a2e      	lsrs	r6, r5, #8
    4c22:	1812      	adds	r2, r2, r0
    4c24:	7056      	strb	r6, [r2, #1]
    4c26:	0c2e      	lsrs	r6, r5, #16
    4c28:	7096      	strb	r6, [r2, #2]
    4c2a:	0e2d      	lsrs	r5, r5, #24
    4c2c:	70d5      	strb	r5, [r2, #3]
		RegParams.pOtherChParams[chIndx].rx1Frequency = updateTxFreq.frequencyNew;
    4c2e:	7a1a      	ldrb	r2, [r3, #8]
    4c30:	7a5d      	ldrb	r5, [r3, #9]
    4c32:	022d      	lsls	r5, r5, #8
    4c34:	4315      	orrs	r5, r2
    4c36:	7a9a      	ldrb	r2, [r3, #10]
    4c38:	0412      	lsls	r2, r2, #16
    4c3a:	4315      	orrs	r5, r2
    4c3c:	7ada      	ldrb	r2, [r3, #11]
    4c3e:	0612      	lsls	r2, r2, #24
    4c40:	432a      	orrs	r2, r5
    4c42:	1812      	adds	r2, r2, r0
    4c44:	780d      	ldrb	r5, [r1, #0]
    4c46:	7115      	strb	r5, [r2, #4]
    4c48:	784d      	ldrb	r5, [r1, #1]
    4c4a:	7155      	strb	r5, [r2, #5]
    4c4c:	788d      	ldrb	r5, [r1, #2]
    4c4e:	7195      	strb	r5, [r2, #6]
    4c50:	78c9      	ldrb	r1, [r1, #3]
    4c52:	71d1      	strb	r1, [r2, #7]
		RegParams.pOtherChParams[chIndx].parametersDefined |= FREQUENCY_DEFINED;
    4c54:	7a1a      	ldrb	r2, [r3, #8]
    4c56:	7a59      	ldrb	r1, [r3, #9]
    4c58:	0209      	lsls	r1, r1, #8
    4c5a:	4311      	orrs	r1, r2
    4c5c:	7a9a      	ldrb	r2, [r3, #10]
    4c5e:	0412      	lsls	r2, r2, #16
    4c60:	4311      	orrs	r1, r2
    4c62:	7ada      	ldrb	r2, [r3, #11]
    4c64:	0612      	lsls	r2, r2, #24
    4c66:	430a      	orrs	r2, r1
    4c68:	1812      	adds	r2, r2, r0
    4c6a:	7ad1      	ldrb	r1, [r2, #11]
    4c6c:	2001      	movs	r0, #1
    4c6e:	4301      	orrs	r1, r0
    4c70:	72d1      	strb	r1, [r2, #11]
		PDS_STORE(RegParams.regParamItems.ch_param_2_item_id);
    4c72:	22fa      	movs	r2, #250	; 0xfa
    4c74:	32ff      	adds	r2, #255	; 0xff
    4c76:	5c9a      	ldrb	r2, [r3, r2]
    4c78:	21fd      	movs	r1, #253	; 0xfd
    4c7a:	0049      	lsls	r1, r1, #1
    4c7c:	5c58      	ldrb	r0, [r3, r1]
    4c7e:	0200      	lsls	r0, r0, #8
    4c80:	4310      	orrs	r0, r2
    4c82:	b2c1      	uxtb	r1, r0
    4c84:	0a00      	lsrs	r0, r0, #8
    4c86:	4b0f      	ldr	r3, [pc, #60]	; (4cc4 <setFrequency+0x118>)
    4c88:	4798      	blx	r3
    4c8a:	e7a3      	b.n	4bd4 <setFrequency+0x28>
		    RegParams.pOtherChParams[chIndx].subBandId = getSubBandId(updateTxFreq.frequencyNew);
    4c8c:	4a0c      	ldr	r2, [pc, #48]	; (4cc0 <setFrequency+0x114>)
    4c8e:	7a16      	ldrb	r6, [r2, #8]
    4c90:	7a53      	ldrb	r3, [r2, #9]
    4c92:	021b      	lsls	r3, r3, #8
    4c94:	4333      	orrs	r3, r6
    4c96:	7a96      	ldrb	r6, [r2, #10]
    4c98:	0436      	lsls	r6, r6, #16
    4c9a:	4333      	orrs	r3, r6
    4c9c:	7ad6      	ldrb	r6, [r2, #11]
    4c9e:	0636      	lsls	r6, r6, #24
    4ca0:	431e      	orrs	r6, r3
    4ca2:	006b      	lsls	r3, r5, #1
    4ca4:	195b      	adds	r3, r3, r5
    4ca6:	009b      	lsls	r3, r3, #2
    4ca8:	18f6      	adds	r6, r6, r3
    4caa:	9802      	ldr	r0, [sp, #8]
    4cac:	4b06      	ldr	r3, [pc, #24]	; (4cc8 <setFrequency+0x11c>)
    4cae:	4798      	blx	r3
    4cb0:	7230      	strb	r0, [r6, #8]
    4cb2:	e7a4      	b.n	4bfe <setFrequency+0x52>
    4cb4:	000112d5 	.word	0x000112d5
    4cb8:	200003e8 	.word	0x200003e8
    4cbc:	000037d9 	.word	0x000037d9
    4cc0:	20000b48 	.word	0x20000b48
    4cc4:	00001e65 	.word	0x00001e65
    4cc8:	00003a69 	.word	0x00003a69

00004ccc <setDutyCycle>:
{
    4ccc:	b570      	push	{r4, r5, r6, lr}
    4cce:	b082      	sub	sp, #8
    memcpy(&updateDCycle,attrInput,sizeof(UpdateDutyCycle_t));
    4cd0:	ac01      	add	r4, sp, #4
    4cd2:	2204      	movs	r2, #4
    4cd4:	0020      	movs	r0, r4
    4cd6:	4b2d      	ldr	r3, [pc, #180]	; (4d8c <setDutyCycle+0xc0>)
    4cd8:	4798      	blx	r3
	val_chid.channelIndex = updateDCycle.channelIndex;
    4cda:	78a5      	ldrb	r5, [r4, #2]
    4cdc:	466b      	mov	r3, sp
    4cde:	701d      	strb	r5, [r3, #0]
	val_chid.allowedForDefaultChannels = ALL_CHANNELS;
    4ce0:	2301      	movs	r3, #1
    4ce2:	466a      	mov	r2, sp
    4ce4:	7053      	strb	r3, [r2, #1]
	if(ValidateChannelIdT2(CHANNEL_ID, &val_chid) == LORAWAN_SUCCESS)
    4ce6:	4669      	mov	r1, sp
    4ce8:	2015      	movs	r0, #21
    4cea:	4b29      	ldr	r3, [pc, #164]	; (4d90 <setDutyCycle+0xc4>)
    4cec:	4798      	blx	r3
    4cee:	0004      	movs	r4, r0
    4cf0:	2808      	cmp	r0, #8
    4cf2:	d003      	beq.n	4cfc <setDutyCycle+0x30>
		result = LORAWAN_INVALID_PARAMETER;
    4cf4:	240a      	movs	r4, #10
}
    4cf6:	0020      	movs	r0, r4
    4cf8:	b002      	add	sp, #8
    4cfa:	bd70      	pop	{r4, r5, r6, pc}
		bandId = RegParams.pOtherChParams[updateDCycle.channelIndex].subBandId;
    4cfc:	0069      	lsls	r1, r5, #1
    4cfe:	1949      	adds	r1, r1, r5
    4d00:	0089      	lsls	r1, r1, #2
    4d02:	4b24      	ldr	r3, [pc, #144]	; (4d94 <setDutyCycle+0xc8>)
    4d04:	7a1a      	ldrb	r2, [r3, #8]
    4d06:	7a58      	ldrb	r0, [r3, #9]
    4d08:	0200      	lsls	r0, r0, #8
    4d0a:	4310      	orrs	r0, r2
    4d0c:	7a9a      	ldrb	r2, [r3, #10]
    4d0e:	0412      	lsls	r2, r2, #16
    4d10:	4310      	orrs	r0, r2
    4d12:	7ada      	ldrb	r2, [r3, #11]
    4d14:	0612      	lsls	r2, r2, #24
    4d16:	4302      	orrs	r2, r0
    4d18:	1852      	adds	r2, r2, r1
    4d1a:	7a15      	ldrb	r5, [r2, #8]
		RegParams.cmnParams.paramsType2.subBandDutyCycle[bandId] = updateDCycle.dutyCycleNew;
    4d1c:	0028      	movs	r0, r5
    4d1e:	30c8      	adds	r0, #200	; 0xc8
    4d20:	0040      	lsls	r0, r0, #1
    4d22:	aa01      	add	r2, sp, #4
    4d24:	1818      	adds	r0, r3, r0
    4d26:	7816      	ldrb	r6, [r2, #0]
    4d28:	7186      	strb	r6, [r0, #6]
    4d2a:	7852      	ldrb	r2, [r2, #1]
    4d2c:	71c2      	strb	r2, [r0, #7]
		RegParams.pSubBandParams[bandId].subBandTimeout = 0;
    4d2e:	7b18      	ldrb	r0, [r3, #12]
    4d30:	7b5a      	ldrb	r2, [r3, #13]
    4d32:	0212      	lsls	r2, r2, #8
    4d34:	4302      	orrs	r2, r0
    4d36:	7b98      	ldrb	r0, [r3, #14]
    4d38:	0400      	lsls	r0, r0, #16
    4d3a:	4302      	orrs	r2, r0
    4d3c:	7bd8      	ldrb	r0, [r3, #15]
    4d3e:	0600      	lsls	r0, r0, #24
    4d40:	4310      	orrs	r0, r2
    4d42:	006a      	lsls	r2, r5, #1
    4d44:	1952      	adds	r2, r2, r5
    4d46:	0092      	lsls	r2, r2, #2
    4d48:	1812      	adds	r2, r2, r0
    4d4a:	2000      	movs	r0, #0
    4d4c:	7210      	strb	r0, [r2, #8]
    4d4e:	7250      	strb	r0, [r2, #9]
    4d50:	7290      	strb	r0, [r2, #10]
    4d52:	72d0      	strb	r0, [r2, #11]
		RegParams.pOtherChParams[updateDCycle.channelIndex].parametersDefined |= DUTY_CYCLE_DEFINED;
    4d54:	7a1d      	ldrb	r5, [r3, #8]
    4d56:	7a5a      	ldrb	r2, [r3, #9]
    4d58:	0212      	lsls	r2, r2, #8
    4d5a:	432a      	orrs	r2, r5
    4d5c:	7a9d      	ldrb	r5, [r3, #10]
    4d5e:	042d      	lsls	r5, r5, #16
    4d60:	432a      	orrs	r2, r5
    4d62:	7add      	ldrb	r5, [r3, #11]
    4d64:	062d      	lsls	r5, r5, #24
    4d66:	4315      	orrs	r5, r2
    4d68:	186d      	adds	r5, r5, r1
    4d6a:	7aea      	ldrb	r2, [r5, #11]
    4d6c:	2104      	movs	r1, #4
    4d6e:	430a      	orrs	r2, r1
    4d70:	72ea      	strb	r2, [r5, #11]
		PDS_STORE(RegParams.regParamItems.ch_param_2_item_id);
    4d72:	22fa      	movs	r2, #250	; 0xfa
    4d74:	32ff      	adds	r2, #255	; 0xff
    4d76:	5c9a      	ldrb	r2, [r3, r2]
    4d78:	21fd      	movs	r1, #253	; 0xfd
    4d7a:	0049      	lsls	r1, r1, #1
    4d7c:	5c58      	ldrb	r0, [r3, r1]
    4d7e:	0200      	lsls	r0, r0, #8
    4d80:	4310      	orrs	r0, r2
    4d82:	b2c1      	uxtb	r1, r0
    4d84:	0a00      	lsrs	r0, r0, #8
    4d86:	4b04      	ldr	r3, [pc, #16]	; (4d98 <setDutyCycle+0xcc>)
    4d88:	4798      	blx	r3
    4d8a:	e7b4      	b.n	4cf6 <setDutyCycle+0x2a>
    4d8c:	000112d5 	.word	0x000112d5
    4d90:	000037d9 	.word	0x000037d9
    4d94:	20000b48 	.word	0x20000b48
    4d98:	00001e65 	.word	0x00001e65

00004d9c <LORAREG_GetAttr_DutyCycleTimer>:
{
    4d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4d9e:	46d6      	mov	lr, sl
    4da0:	464f      	mov	r7, r9
    4da2:	4646      	mov	r6, r8
    4da4:	b5c0      	push	{r6, r7, lr}
    4da6:	b084      	sub	sp, #16
    4da8:	9200      	str	r2, [sp, #0]
    currentDataRate = *(uint8_t *)attrInput;
    4daa:	780b      	ldrb	r3, [r1, #0]
    4dac:	469c      	mov	ip, r3
    for (uint8_t i = 0; i < RegParams.maxChannels; i++)
    4dae:	2322      	movs	r3, #34	; 0x22
    4db0:	4a51      	ldr	r2, [pc, #324]	; (4ef8 <LORAREG_GetAttr_DutyCycleTimer+0x15c>)
    4db2:	56d6      	ldrsb	r6, [r2, r3]
    4db4:	2e00      	cmp	r6, #0
    4db6:	dc00      	bgt.n	4dba <LORAREG_GetAttr_DutyCycleTimer+0x1e>
    4db8:	e097      	b.n	4eea <LORAREG_GetAttr_DutyCycleTimer+0x14e>
	    if ( (RegParams.pChParams[i].status == ENABLED) )
    4dba:	0013      	movs	r3, r2
    4dbc:	7910      	ldrb	r0, [r2, #4]
    4dbe:	7952      	ldrb	r2, [r2, #5]
    4dc0:	0212      	lsls	r2, r2, #8
    4dc2:	4302      	orrs	r2, r0
    4dc4:	7998      	ldrb	r0, [r3, #6]
    4dc6:	0400      	lsls	r0, r0, #16
    4dc8:	4302      	orrs	r2, r0
    4dca:	79d8      	ldrb	r0, [r3, #7]
    4dcc:	0600      	lsls	r0, r0, #24
    4dce:	4310      	orrs	r0, r2
		    if((RegParams.pSubBandParams[bandId].subBandTimeout != 0) && 
    4dd0:	7b1f      	ldrb	r7, [r3, #12]
    4dd2:	7b5a      	ldrb	r2, [r3, #13]
    4dd4:	0212      	lsls	r2, r2, #8
    4dd6:	433a      	orrs	r2, r7
    4dd8:	7b9f      	ldrb	r7, [r3, #14]
    4dda:	043f      	lsls	r7, r7, #16
    4ddc:	433a      	orrs	r2, r7
    4dde:	7bdf      	ldrb	r7, [r3, #15]
    4de0:	063f      	lsls	r7, r7, #24
    4de2:	4317      	orrs	r7, r2
    4de4:	2500      	movs	r5, #0
    4de6:	2300      	movs	r3, #0
    4de8:	2201      	movs	r2, #1
    4dea:	4252      	negs	r2, r2
    4dec:	4691      	mov	r9, r2
		    bandId = RegParams.cmnParams.paramsType2.othChParams[i].subBandId;
    4dee:	4a42      	ldr	r2, [pc, #264]	; (4ef8 <LORAREG_GetAttr_DutyCycleTimer+0x15c>)
    4df0:	4690      	mov	r8, r2
			   (currentDataRate >= RegParams.pChParams[i].dataRange.min) && 
    4df2:	4662      	mov	r2, ip
    4df4:	9201      	str	r2, [sp, #4]
    4df6:	e004      	b.n	4e02 <LORAREG_GetAttr_DutyCycleTimer+0x66>
    for (uint8_t i = 0; i < RegParams.maxChannels; i++)
    4df8:	3301      	adds	r3, #1
    4dfa:	b2db      	uxtb	r3, r3
    4dfc:	001d      	movs	r5, r3
    4dfe:	42b3      	cmp	r3, r6
    4e00:	da27      	bge.n	4e52 <LORAREG_GetAttr_DutyCycleTimer+0xb6>
	    if ( (RegParams.pChParams[i].status == ENABLED) )
    4e02:	0059      	lsls	r1, r3, #1
    4e04:	1841      	adds	r1, r0, r1
    4e06:	780a      	ldrb	r2, [r1, #0]
    4e08:	2a00      	cmp	r2, #0
    4e0a:	d0f5      	beq.n	4df8 <LORAREG_GetAttr_DutyCycleTimer+0x5c>
		    bandId = RegParams.cmnParams.paramsType2.othChParams[i].subBandId;
    4e0c:	006a      	lsls	r2, r5, #1
    4e0e:	1952      	adds	r2, r2, r5
    4e10:	0092      	lsls	r2, r2, #2
    4e12:	4442      	add	r2, r8
    4e14:	3294      	adds	r2, #148	; 0x94
		    if((RegParams.pSubBandParams[bandId].subBandTimeout != 0) && 
    4e16:	7815      	ldrb	r5, [r2, #0]
    4e18:	006a      	lsls	r2, r5, #1
    4e1a:	1952      	adds	r2, r2, r5
    4e1c:	0092      	lsls	r2, r2, #2
    4e1e:	18ba      	adds	r2, r7, r2
    4e20:	7a15      	ldrb	r5, [r2, #8]
    4e22:	7a54      	ldrb	r4, [r2, #9]
    4e24:	0224      	lsls	r4, r4, #8
    4e26:	4325      	orrs	r5, r4
    4e28:	7a94      	ldrb	r4, [r2, #10]
    4e2a:	0424      	lsls	r4, r4, #16
    4e2c:	4325      	orrs	r5, r4
    4e2e:	7ad2      	ldrb	r2, [r2, #11]
    4e30:	0612      	lsls	r2, r2, #24
    4e32:	432a      	orrs	r2, r5
    4e34:	d0e0      	beq.n	4df8 <LORAREG_GetAttr_DutyCycleTimer+0x5c>
    4e36:	454a      	cmp	r2, r9
    4e38:	d8de      	bhi.n	4df8 <LORAREG_GetAttr_DutyCycleTimer+0x5c>
			   (currentDataRate >= RegParams.pChParams[i].dataRange.min) && 
    4e3a:	784d      	ldrb	r5, [r1, #1]
    4e3c:	072d      	lsls	r5, r5, #28
    4e3e:	0f2d      	lsrs	r5, r5, #28
			   (RegParams.pSubBandParams[bandId].subBandTimeout <= minimSubBandTimer) && 
    4e40:	45ac      	cmp	ip, r5
    4e42:	dbd9      	blt.n	4df8 <LORAREG_GetAttr_DutyCycleTimer+0x5c>
			   (currentDataRate <= RegParams.pChParams[i].dataRange.max) )
    4e44:	7849      	ldrb	r1, [r1, #1]
    4e46:	0909      	lsrs	r1, r1, #4
			   (currentDataRate >= RegParams.pChParams[i].dataRange.min) && 
    4e48:	9c01      	ldr	r4, [sp, #4]
    4e4a:	428c      	cmp	r4, r1
    4e4c:	dcd4      	bgt.n	4df8 <LORAREG_GetAttr_DutyCycleTimer+0x5c>
			    minimSubBandTimer = RegParams.pSubBandParams[bandId].subBandTimeout;
    4e4e:	4691      	mov	r9, r2
    4e50:	e7d2      	b.n	4df8 <LORAREG_GetAttr_DutyCycleTimer+0x5c>
    if(minimSubBandTimer >= RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout)
    4e52:	4929      	ldr	r1, [pc, #164]	; (4ef8 <LORAREG_GetAttr_DutyCycleTimer+0x15c>)
    4e54:	23d1      	movs	r3, #209	; 0xd1
    4e56:	005b      	lsls	r3, r3, #1
    4e58:	5ccb      	ldrb	r3, [r1, r3]
    4e5a:	22a4      	movs	r2, #164	; 0xa4
    4e5c:	32ff      	adds	r2, #255	; 0xff
    4e5e:	5c8a      	ldrb	r2, [r1, r2]
    4e60:	0212      	lsls	r2, r2, #8
    4e62:	431a      	orrs	r2, r3
    4e64:	23d2      	movs	r3, #210	; 0xd2
    4e66:	005b      	lsls	r3, r3, #1
    4e68:	5ccb      	ldrb	r3, [r1, r3]
    4e6a:	041b      	lsls	r3, r3, #16
    4e6c:	431a      	orrs	r2, r3
    4e6e:	23a6      	movs	r3, #166	; 0xa6
    4e70:	33ff      	adds	r3, #255	; 0xff
    4e72:	5ccb      	ldrb	r3, [r1, r3]
    4e74:	061b      	lsls	r3, r3, #24
    4e76:	4313      	orrs	r3, r2
    4e78:	4599      	cmp	r9, r3
    4e7a:	d239      	bcs.n	4ef0 <LORAREG_GetAttr_DutyCycleTimer+0x154>
	    minDutyCycleTimer = RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout;
    4e7c:	9303      	str	r3, [sp, #12]
    ticks = SwTimerReadValue (RegParams.pDutyCycleTimer->timerId);
    4e7e:	4d1e      	ldr	r5, [pc, #120]	; (4ef8 <LORAREG_GetAttr_DutyCycleTimer+0x15c>)
    4e80:	7c2b      	ldrb	r3, [r5, #16]
    4e82:	7c6a      	ldrb	r2, [r5, #17]
    4e84:	0212      	lsls	r2, r2, #8
    4e86:	431a      	orrs	r2, r3
    4e88:	7cab      	ldrb	r3, [r5, #18]
    4e8a:	041b      	lsls	r3, r3, #16
    4e8c:	431a      	orrs	r2, r3
    4e8e:	7ceb      	ldrb	r3, [r5, #19]
    4e90:	061b      	lsls	r3, r3, #24
    4e92:	4313      	orrs	r3, r2
    4e94:	7918      	ldrb	r0, [r3, #4]
    4e96:	4b19      	ldr	r3, [pc, #100]	; (4efc <LORAREG_GetAttr_DutyCycleTimer+0x160>)
    4e98:	4798      	blx	r3
    delta = RegParams.pDutyCycleTimer->lastTimerValue - US_TO_MS(ticks);
    4e9a:	7c2b      	ldrb	r3, [r5, #16]
    4e9c:	7c6a      	ldrb	r2, [r5, #17]
    4e9e:	0212      	lsls	r2, r2, #8
    4ea0:	431a      	orrs	r2, r3
    4ea2:	7cab      	ldrb	r3, [r5, #18]
    4ea4:	041b      	lsls	r3, r3, #16
    4ea6:	431a      	orrs	r2, r3
    4ea8:	7ceb      	ldrb	r3, [r5, #19]
    4eaa:	061b      	lsls	r3, r3, #24
    4eac:	4313      	orrs	r3, r2
    4eae:	781d      	ldrb	r5, [r3, #0]
    4eb0:	785a      	ldrb	r2, [r3, #1]
    4eb2:	0212      	lsls	r2, r2, #8
    4eb4:	432a      	orrs	r2, r5
    4eb6:	789d      	ldrb	r5, [r3, #2]
    4eb8:	042d      	lsls	r5, r5, #16
    4eba:	432a      	orrs	r2, r5
    4ebc:	78dd      	ldrb	r5, [r3, #3]
    4ebe:	062d      	lsls	r5, r5, #24
    4ec0:	4315      	orrs	r5, r2
    4ec2:	21fa      	movs	r1, #250	; 0xfa
    4ec4:	0089      	lsls	r1, r1, #2
    4ec6:	4b0e      	ldr	r3, [pc, #56]	; (4f00 <LORAREG_GetAttr_DutyCycleTimer+0x164>)
    4ec8:	4798      	blx	r3
    4eca:	1a2d      	subs	r5, r5, r0
    minDutyCycleTimer = minDutyCycleTimer - delta; //Logically delta will not be greater than minDcTimer
    4ecc:	9b03      	ldr	r3, [sp, #12]
    4ece:	1b5d      	subs	r5, r3, r5
    4ed0:	9503      	str	r5, [sp, #12]
    memcpy(attrOutput,&minDutyCycleTimer,sizeof(uint32_t));
    4ed2:	2204      	movs	r2, #4
    4ed4:	a903      	add	r1, sp, #12
    4ed6:	9800      	ldr	r0, [sp, #0]
    4ed8:	4b0a      	ldr	r3, [pc, #40]	; (4f04 <LORAREG_GetAttr_DutyCycleTimer+0x168>)
    4eda:	4798      	blx	r3
}
    4edc:	2008      	movs	r0, #8
    4ede:	b004      	add	sp, #16
    4ee0:	bc1c      	pop	{r2, r3, r4}
    4ee2:	4690      	mov	r8, r2
    4ee4:	4699      	mov	r9, r3
    4ee6:	46a2      	mov	sl, r4
    4ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint32_t minimSubBandTimer = UINT32_MAX;
    4eea:	2301      	movs	r3, #1
    4eec:	425b      	negs	r3, r3
    4eee:	4699      	mov	r9, r3
	    minDutyCycleTimer = minimSubBandTimer;
    4ef0:	464b      	mov	r3, r9
    4ef2:	9303      	str	r3, [sp, #12]
    4ef4:	e7c3      	b.n	4e7e <LORAREG_GetAttr_DutyCycleTimer+0xe2>
    4ef6:	46c0      	nop			; (mov r8, r8)
    4ef8:	20000b48 	.word	0x20000b48
    4efc:	00001a9d 	.word	0x00001a9d
    4f00:	0000ef0d 	.word	0x0000ef0d
    4f04:	000112d5 	.word	0x000112d5

00004f08 <setDutyCycleTimer>:
{
    4f08:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f0a:	46de      	mov	lr, fp
    4f0c:	4657      	mov	r7, sl
    4f0e:	464e      	mov	r6, r9
    4f10:	4645      	mov	r5, r8
    4f12:	b5e0      	push	{r5, r6, r7, lr}
    4f14:	b087      	sub	sp, #28
	memcpy(&updateDCTimer,attrInput,sizeof(UpdateDutyCycleTimer_t));
    4f16:	ac04      	add	r4, sp, #16
    4f18:	2206      	movs	r2, #6
    4f1a:	0020      	movs	r0, r4
    4f1c:	4bbc      	ldr	r3, [pc, #752]	; (5210 <setDutyCycleTimer+0x308>)
    4f1e:	4798      	blx	r3
	if(updateDCTimer.joining != 1)
    4f20:	7923      	ldrb	r3, [r4, #4]
    4f22:	2b00      	cmp	r3, #0
    4f24:	d007      	beq.n	4f36 <setDutyCycleTimer+0x2e>
}
    4f26:	2008      	movs	r0, #8
    4f28:	b007      	add	sp, #28
    4f2a:	bc3c      	pop	{r2, r3, r4, r5}
    4f2c:	4690      	mov	r8, r2
    4f2e:	4699      	mov	r9, r3
    4f30:	46a2      	mov	sl, r4
    4f32:	46ab      	mov	fp, r5
    4f34:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bandId = RegParams.pOtherChParams[RegParams.lastUsedChannelIndex].subBandId;
    4f36:	49b7      	ldr	r1, [pc, #732]	; (5214 <setDutyCycleTimer+0x30c>)
    4f38:	7a0b      	ldrb	r3, [r1, #8]
    4f3a:	7a4a      	ldrb	r2, [r1, #9]
    4f3c:	0212      	lsls	r2, r2, #8
    4f3e:	4313      	orrs	r3, r2
    4f40:	7a8a      	ldrb	r2, [r1, #10]
    4f42:	0412      	lsls	r2, r2, #16
    4f44:	431a      	orrs	r2, r3
    4f46:	7acb      	ldrb	r3, [r1, #11]
    4f48:	061b      	lsls	r3, r3, #24
    4f4a:	431a      	orrs	r2, r3
    4f4c:	2327      	movs	r3, #39	; 0x27
    4f4e:	5cc8      	ldrb	r0, [r1, r3]
    4f50:	0043      	lsls	r3, r0, #1
    4f52:	181b      	adds	r3, r3, r0
    4f54:	009b      	lsls	r3, r3, #2
    4f56:	189b      	adds	r3, r3, r2
    4f58:	7a1f      	ldrb	r7, [r3, #8]
		RegParams.pSubBandParams[bandId].subBandTimeout = ((uint32_t)updateDCTimer.timeOnAir * ((uint32_t)RegParams.cmnParams.paramsType2.subBandDutyCycle[bandId] - 1));
    4f5a:	007c      	lsls	r4, r7, #1
    4f5c:	19e4      	adds	r4, r4, r7
    4f5e:	00a4      	lsls	r4, r4, #2
    4f60:	aa04      	add	r2, sp, #16
    4f62:	8815      	ldrh	r5, [r2, #0]
    4f64:	7b08      	ldrb	r0, [r1, #12]
    4f66:	7b4b      	ldrb	r3, [r1, #13]
    4f68:	021b      	lsls	r3, r3, #8
    4f6a:	4303      	orrs	r3, r0
    4f6c:	7b88      	ldrb	r0, [r1, #14]
    4f6e:	0400      	lsls	r0, r0, #16
    4f70:	4303      	orrs	r3, r0
    4f72:	7bc8      	ldrb	r0, [r1, #15]
    4f74:	0600      	lsls	r0, r0, #24
    4f76:	4318      	orrs	r0, r3
    4f78:	003e      	movs	r6, r7
    4f7a:	36c8      	adds	r6, #200	; 0xc8
    4f7c:	0076      	lsls	r6, r6, #1
    4f7e:	198e      	adds	r6, r1, r6
    4f80:	79b3      	ldrb	r3, [r6, #6]
    4f82:	469c      	mov	ip, r3
    4f84:	79f3      	ldrb	r3, [r6, #7]
    4f86:	021b      	lsls	r3, r3, #8
    4f88:	4666      	mov	r6, ip
    4f8a:	4333      	orrs	r3, r6
    4f8c:	3b01      	subs	r3, #1
    4f8e:	436b      	muls	r3, r5
    4f90:	1900      	adds	r0, r0, r4
    4f92:	7203      	strb	r3, [r0, #8]
    4f94:	0a1e      	lsrs	r6, r3, #8
    4f96:	7246      	strb	r6, [r0, #9]
    4f98:	0c1e      	lsrs	r6, r3, #16
    4f9a:	7286      	strb	r6, [r0, #10]
    4f9c:	0e1b      	lsrs	r3, r3, #24
    4f9e:	72c3      	strb	r3, [r0, #11]
		RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout = (uint32_t)updateDCTimer.timeOnAir * ((uint32_t) updateDCTimer.aggDutyCycle - 1);
    4fa0:	8853      	ldrh	r3, [r2, #2]
    4fa2:	3b01      	subs	r3, #1
    4fa4:	436b      	muls	r3, r5
    4fa6:	22d1      	movs	r2, #209	; 0xd1
    4fa8:	0052      	lsls	r2, r2, #1
    4faa:	548b      	strb	r3, [r1, r2]
    4fac:	0a18      	lsrs	r0, r3, #8
    4fae:	000a      	movs	r2, r1
    4fb0:	32a3      	adds	r2, #163	; 0xa3
    4fb2:	32ff      	adds	r2, #255	; 0xff
    4fb4:	7050      	strb	r0, [r2, #1]
    4fb6:	0c18      	lsrs	r0, r3, #16
    4fb8:	7090      	strb	r0, [r2, #2]
    4fba:	0e1b      	lsrs	r3, r3, #24
    4fbc:	70d3      	strb	r3, [r2, #3]
	if(SwTimerIsRunning(RegParams.pDutyCycleTimer->timerId))
    4fbe:	7c0b      	ldrb	r3, [r1, #16]
    4fc0:	7c4a      	ldrb	r2, [r1, #17]
    4fc2:	0212      	lsls	r2, r2, #8
    4fc4:	431a      	orrs	r2, r3
    4fc6:	7c8b      	ldrb	r3, [r1, #18]
    4fc8:	041b      	lsls	r3, r3, #16
    4fca:	431a      	orrs	r2, r3
    4fcc:	7ccb      	ldrb	r3, [r1, #19]
    4fce:	061b      	lsls	r3, r3, #24
    4fd0:	4313      	orrs	r3, r2
    4fd2:	7918      	ldrb	r0, [r3, #4]
    4fd4:	4b90      	ldr	r3, [pc, #576]	; (5218 <setDutyCycleTimer+0x310>)
    4fd6:	4798      	blx	r3
    uint32_t delta = 0, minimSubBandTimer = UINT32_MAX, ticks,nextTimer;
    4fd8:	2300      	movs	r3, #0
    4fda:	4699      	mov	r9, r3
	if(SwTimerIsRunning(RegParams.pDutyCycleTimer->timerId))
    4fdc:	2800      	cmp	r0, #0
    4fde:	d124      	bne.n	502a <setDutyCycleTimer+0x122>
	minimSubBandTimer = RegParams.pSubBandParams[bandId].subBandTimeout;
    4fe0:	4a8c      	ldr	r2, [pc, #560]	; (5214 <setDutyCycleTimer+0x30c>)
    4fe2:	7b13      	ldrb	r3, [r2, #12]
    4fe4:	7b51      	ldrb	r1, [r2, #13]
    4fe6:	0209      	lsls	r1, r1, #8
    4fe8:	4319      	orrs	r1, r3
    4fea:	7b93      	ldrb	r3, [r2, #14]
    4fec:	041b      	lsls	r3, r3, #16
    4fee:	4319      	orrs	r1, r3
    4ff0:	7bd3      	ldrb	r3, [r2, #15]
    4ff2:	061b      	lsls	r3, r3, #24
    4ff4:	430b      	orrs	r3, r1
    4ff6:	191c      	adds	r4, r3, r4
    4ff8:	7a20      	ldrb	r0, [r4, #8]
    4ffa:	7a63      	ldrb	r3, [r4, #9]
    4ffc:	021b      	lsls	r3, r3, #8
    4ffe:	4303      	orrs	r3, r0
    5000:	7aa0      	ldrb	r0, [r4, #10]
    5002:	0400      	lsls	r0, r0, #16
    5004:	4303      	orrs	r3, r0
    5006:	7ae0      	ldrb	r0, [r4, #11]
    5008:	0600      	lsls	r0, r0, #24
    500a:	4318      	orrs	r0, r3
    500c:	9003      	str	r0, [sp, #12]
	for(i = 0; i < RegParams.maxSubBands; i++)
    500e:	2321      	movs	r3, #33	; 0x21
    5010:	5cd3      	ldrb	r3, [r2, r3]
    5012:	2b00      	cmp	r3, #0
    5014:	d100      	bne.n	5018 <setDutyCycleTimer+0x110>
    5016:	e08d      	b.n	5134 <setDutyCycleTimer+0x22c>
    5018:	2200      	movs	r2, #0
		if((i != bandId) && (RegParams.pSubBandParams[i].subBandTimeout != 0))
    501a:	4d7e      	ldr	r5, [pc, #504]	; (5214 <setDutyCycleTimer+0x30c>)
			if(RegParams.pSubBandParams[i].subBandTimeout <= minimSubBandTimer && RegParams.pSubBandParams[i].subBandTimeout != 0)
    501c:	002e      	movs	r6, r5
				RegParams.pSubBandParams[i].subBandTimeout = 0;
    501e:	2300      	movs	r3, #0
    5020:	469a      	mov	sl, r3
	for(i = 0; i < RegParams.maxSubBands; i++)
    5022:	46a8      	mov	r8, r5
    5024:	2321      	movs	r3, #33	; 0x21
    5026:	469c      	mov	ip, r3
    5028:	e042      	b.n	50b0 <setDutyCycleTimer+0x1a8>
		SwTimerStop(RegParams.pDutyCycleTimer->timerId);
    502a:	4d7a      	ldr	r5, [pc, #488]	; (5214 <setDutyCycleTimer+0x30c>)
    502c:	7c2b      	ldrb	r3, [r5, #16]
    502e:	7c6a      	ldrb	r2, [r5, #17]
    5030:	0212      	lsls	r2, r2, #8
    5032:	431a      	orrs	r2, r3
    5034:	7cab      	ldrb	r3, [r5, #18]
    5036:	041b      	lsls	r3, r3, #16
    5038:	431a      	orrs	r2, r3
    503a:	7ceb      	ldrb	r3, [r5, #19]
    503c:	061b      	lsls	r3, r3, #24
    503e:	4313      	orrs	r3, r2
    5040:	7918      	ldrb	r0, [r3, #4]
    5042:	4b76      	ldr	r3, [pc, #472]	; (521c <setDutyCycleTimer+0x314>)
    5044:	4798      	blx	r3
		ticks = SwTimerReadValue(RegParams.pDutyCycleTimer->timerId);
    5046:	7c2b      	ldrb	r3, [r5, #16]
    5048:	7c6a      	ldrb	r2, [r5, #17]
    504a:	0212      	lsls	r2, r2, #8
    504c:	431a      	orrs	r2, r3
    504e:	7cab      	ldrb	r3, [r5, #18]
    5050:	041b      	lsls	r3, r3, #16
    5052:	431a      	orrs	r2, r3
    5054:	7ceb      	ldrb	r3, [r5, #19]
    5056:	061b      	lsls	r3, r3, #24
    5058:	4313      	orrs	r3, r2
    505a:	7918      	ldrb	r0, [r3, #4]
    505c:	4b70      	ldr	r3, [pc, #448]	; (5220 <setDutyCycleTimer+0x318>)
    505e:	4798      	blx	r3
		delta = RegParams.pDutyCycleTimer->lastTimerValue - US_TO_MS(ticks);
    5060:	7c2b      	ldrb	r3, [r5, #16]
    5062:	7c6a      	ldrb	r2, [r5, #17]
    5064:	0212      	lsls	r2, r2, #8
    5066:	431a      	orrs	r2, r3
    5068:	7cab      	ldrb	r3, [r5, #18]
    506a:	041b      	lsls	r3, r3, #16
    506c:	431a      	orrs	r2, r3
    506e:	7ceb      	ldrb	r3, [r5, #19]
    5070:	061b      	lsls	r3, r3, #24
    5072:	4313      	orrs	r3, r2
    5074:	781d      	ldrb	r5, [r3, #0]
    5076:	785a      	ldrb	r2, [r3, #1]
    5078:	0212      	lsls	r2, r2, #8
    507a:	432a      	orrs	r2, r5
    507c:	789d      	ldrb	r5, [r3, #2]
    507e:	042d      	lsls	r5, r5, #16
    5080:	432a      	orrs	r2, r5
    5082:	78dd      	ldrb	r5, [r3, #3]
    5084:	062d      	lsls	r5, r5, #24
    5086:	4315      	orrs	r5, r2
    5088:	21fa      	movs	r1, #250	; 0xfa
    508a:	0089      	lsls	r1, r1, #2
    508c:	4b65      	ldr	r3, [pc, #404]	; (5224 <setDutyCycleTimer+0x31c>)
    508e:	4798      	blx	r3
    5090:	1a2b      	subs	r3, r5, r0
    5092:	4699      	mov	r9, r3
    5094:	e7a4      	b.n	4fe0 <setDutyCycleTimer+0xd8>
				RegParams.pSubBandParams[i].subBandTimeout = 0;
    5096:	4651      	mov	r1, sl
    5098:	7219      	strb	r1, [r3, #8]
    509a:	7259      	strb	r1, [r3, #9]
    509c:	7299      	strb	r1, [r3, #10]
    509e:	72d9      	strb	r1, [r3, #11]
    50a0:	e02c      	b.n	50fc <setDutyCycleTimer+0x1f4>
	for(i = 0; i < RegParams.maxSubBands; i++)
    50a2:	3201      	adds	r2, #1
    50a4:	b2d2      	uxtb	r2, r2
    50a6:	4643      	mov	r3, r8
    50a8:	4661      	mov	r1, ip
    50aa:	5c5b      	ldrb	r3, [r3, r1]
    50ac:	4293      	cmp	r3, r2
    50ae:	d941      	bls.n	5134 <setDutyCycleTimer+0x22c>
		if((i != bandId) && (RegParams.pSubBandParams[i].subBandTimeout != 0))
    50b0:	4297      	cmp	r7, r2
    50b2:	d0f6      	beq.n	50a2 <setDutyCycleTimer+0x19a>
    50b4:	0054      	lsls	r4, r2, #1
    50b6:	18a4      	adds	r4, r4, r2
    50b8:	00a4      	lsls	r4, r4, #2
    50ba:	7b2b      	ldrb	r3, [r5, #12]
    50bc:	7b69      	ldrb	r1, [r5, #13]
    50be:	0209      	lsls	r1, r1, #8
    50c0:	4319      	orrs	r1, r3
    50c2:	7bab      	ldrb	r3, [r5, #14]
    50c4:	041b      	lsls	r3, r3, #16
    50c6:	4319      	orrs	r1, r3
    50c8:	7beb      	ldrb	r3, [r5, #15]
    50ca:	061b      	lsls	r3, r3, #24
    50cc:	430b      	orrs	r3, r1
    50ce:	191b      	adds	r3, r3, r4
    50d0:	7a18      	ldrb	r0, [r3, #8]
    50d2:	7a59      	ldrb	r1, [r3, #9]
    50d4:	0209      	lsls	r1, r1, #8
    50d6:	4301      	orrs	r1, r0
    50d8:	7a98      	ldrb	r0, [r3, #10]
    50da:	0400      	lsls	r0, r0, #16
    50dc:	4308      	orrs	r0, r1
    50de:	7ad9      	ldrb	r1, [r3, #11]
    50e0:	0609      	lsls	r1, r1, #24
    50e2:	4301      	orrs	r1, r0
    50e4:	d0dd      	beq.n	50a2 <setDutyCycleTimer+0x19a>
			if(RegParams.pSubBandParams[i].subBandTimeout > delta)
    50e6:	4589      	cmp	r9, r1
    50e8:	d2d5      	bcs.n	5096 <setDutyCycleTimer+0x18e>
				          RegParams.pSubBandParams[i].subBandTimeout - delta;
    50ea:	4648      	mov	r0, r9
    50ec:	1a09      	subs	r1, r1, r0
				RegParams.pSubBandParams[i].subBandTimeout = 
    50ee:	7219      	strb	r1, [r3, #8]
    50f0:	0a08      	lsrs	r0, r1, #8
    50f2:	7258      	strb	r0, [r3, #9]
    50f4:	0c08      	lsrs	r0, r1, #16
    50f6:	7298      	strb	r0, [r3, #10]
    50f8:	0e09      	lsrs	r1, r1, #24
    50fa:	72d9      	strb	r1, [r3, #11]
			if(RegParams.pSubBandParams[i].subBandTimeout <= minimSubBandTimer && RegParams.pSubBandParams[i].subBandTimeout != 0)
    50fc:	7b33      	ldrb	r3, [r6, #12]
    50fe:	7b71      	ldrb	r1, [r6, #13]
    5100:	0209      	lsls	r1, r1, #8
    5102:	4319      	orrs	r1, r3
    5104:	7bb3      	ldrb	r3, [r6, #14]
    5106:	041b      	lsls	r3, r3, #16
    5108:	4319      	orrs	r1, r3
    510a:	7bf3      	ldrb	r3, [r6, #15]
    510c:	061b      	lsls	r3, r3, #24
    510e:	430b      	orrs	r3, r1
    5110:	191c      	adds	r4, r3, r4
    5112:	7a23      	ldrb	r3, [r4, #8]
    5114:	7a61      	ldrb	r1, [r4, #9]
    5116:	0209      	lsls	r1, r1, #8
    5118:	4319      	orrs	r1, r3
    511a:	7aa3      	ldrb	r3, [r4, #10]
    511c:	041b      	lsls	r3, r3, #16
    511e:	4319      	orrs	r1, r3
    5120:	7ae3      	ldrb	r3, [r4, #11]
    5122:	061b      	lsls	r3, r3, #24
    5124:	430b      	orrs	r3, r1
    5126:	9903      	ldr	r1, [sp, #12]
    5128:	428b      	cmp	r3, r1
    512a:	d8ba      	bhi.n	50a2 <setDutyCycleTimer+0x19a>
    512c:	2b00      	cmp	r3, #0
    512e:	d0b8      	beq.n	50a2 <setDutyCycleTimer+0x19a>
				minimSubBandTimer = RegParams.pSubBandParams[i].subBandTimeout;
    5130:	9303      	str	r3, [sp, #12]
    5132:	e7b6      	b.n	50a2 <setDutyCycleTimer+0x19a>
	if(RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout != 0)
    5134:	4937      	ldr	r1, [pc, #220]	; (5214 <setDutyCycleTimer+0x30c>)
    5136:	23d1      	movs	r3, #209	; 0xd1
    5138:	005b      	lsls	r3, r3, #1
    513a:	5ccb      	ldrb	r3, [r1, r3]
    513c:	22a4      	movs	r2, #164	; 0xa4
    513e:	32ff      	adds	r2, #255	; 0xff
    5140:	5c8a      	ldrb	r2, [r1, r2]
    5142:	0212      	lsls	r2, r2, #8
    5144:	431a      	orrs	r2, r3
    5146:	23d2      	movs	r3, #210	; 0xd2
    5148:	005b      	lsls	r3, r3, #1
    514a:	5ccb      	ldrb	r3, [r1, r3]
    514c:	041b      	lsls	r3, r3, #16
    514e:	431a      	orrs	r2, r3
    5150:	23a6      	movs	r3, #166	; 0xa6
    5152:	33ff      	adds	r3, #255	; 0xff
    5154:	5ccb      	ldrb	r3, [r1, r3]
    5156:	061b      	lsls	r3, r3, #24
    5158:	4313      	orrs	r3, r2
    515a:	d00f      	beq.n	517c <setDutyCycleTimer+0x274>
		if(RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout > delta)
    515c:	4599      	cmp	r9, r3
    515e:	d24b      	bcs.n	51f8 <setDutyCycleTimer+0x2f0>
			RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout = RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout - delta;
    5160:	000a      	movs	r2, r1
    5162:	4649      	mov	r1, r9
    5164:	1a5b      	subs	r3, r3, r1
    5166:	21d1      	movs	r1, #209	; 0xd1
    5168:	0049      	lsls	r1, r1, #1
    516a:	5453      	strb	r3, [r2, r1]
    516c:	0a19      	lsrs	r1, r3, #8
    516e:	32a3      	adds	r2, #163	; 0xa3
    5170:	32ff      	adds	r2, #255	; 0xff
    5172:	7051      	strb	r1, [r2, #1]
    5174:	0c19      	lsrs	r1, r3, #16
    5176:	7091      	strb	r1, [r2, #2]
    5178:	0e1b      	lsrs	r3, r3, #24
    517a:	70d3      	strb	r3, [r2, #3]
		if(RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout >= minimSubBandTimer)
    517c:	4a25      	ldr	r2, [pc, #148]	; (5214 <setDutyCycleTimer+0x30c>)
    517e:	23d1      	movs	r3, #209	; 0xd1
    5180:	005b      	lsls	r3, r3, #1
    5182:	5cd1      	ldrb	r1, [r2, r3]
    5184:	23a4      	movs	r3, #164	; 0xa4
    5186:	33ff      	adds	r3, #255	; 0xff
    5188:	5cd3      	ldrb	r3, [r2, r3]
    518a:	021b      	lsls	r3, r3, #8
    518c:	430b      	orrs	r3, r1
    518e:	21d2      	movs	r1, #210	; 0xd2
    5190:	0049      	lsls	r1, r1, #1
    5192:	5c51      	ldrb	r1, [r2, r1]
    5194:	0409      	lsls	r1, r1, #16
    5196:	430b      	orrs	r3, r1
    5198:	21a6      	movs	r1, #166	; 0xa6
    519a:	31ff      	adds	r1, #255	; 0xff
    519c:	5c51      	ldrb	r1, [r2, r1]
    519e:	0609      	lsls	r1, r1, #24
    51a0:	4319      	orrs	r1, r3
    51a2:	9a03      	ldr	r2, [sp, #12]
    51a4:	4291      	cmp	r1, r2
    51a6:	d200      	bcs.n	51aa <setDutyCycleTimer+0x2a2>
    51a8:	0011      	movs	r1, r2
		RegParams.pDutyCycleTimer->lastTimerValue = nextTimer;
    51aa:	4b1a      	ldr	r3, [pc, #104]	; (5214 <setDutyCycleTimer+0x30c>)
    51ac:	7c1a      	ldrb	r2, [r3, #16]
    51ae:	7c58      	ldrb	r0, [r3, #17]
    51b0:	0200      	lsls	r0, r0, #8
    51b2:	4310      	orrs	r0, r2
    51b4:	7c9a      	ldrb	r2, [r3, #18]
    51b6:	0412      	lsls	r2, r2, #16
    51b8:	4310      	orrs	r0, r2
    51ba:	7cda      	ldrb	r2, [r3, #19]
    51bc:	0612      	lsls	r2, r2, #24
    51be:	4302      	orrs	r2, r0
    51c0:	7011      	strb	r1, [r2, #0]
    51c2:	0a08      	lsrs	r0, r1, #8
    51c4:	7050      	strb	r0, [r2, #1]
    51c6:	0c08      	lsrs	r0, r1, #16
    51c8:	7090      	strb	r0, [r2, #2]
    51ca:	0e08      	lsrs	r0, r1, #24
    51cc:	70d0      	strb	r0, [r2, #3]
		SwTimerStart (RegParams.pDutyCycleTimer->timerId, MS_TO_US(nextTimer), SW_TIMEOUT_RELATIVE, (void *)DutyCycleCallback, NULL);
    51ce:	22fa      	movs	r2, #250	; 0xfa
    51d0:	0092      	lsls	r2, r2, #2
    51d2:	4351      	muls	r1, r2
    51d4:	7c18      	ldrb	r0, [r3, #16]
    51d6:	7c5a      	ldrb	r2, [r3, #17]
    51d8:	0212      	lsls	r2, r2, #8
    51da:	4310      	orrs	r0, r2
    51dc:	7c9a      	ldrb	r2, [r3, #18]
    51de:	0412      	lsls	r2, r2, #16
    51e0:	4302      	orrs	r2, r0
    51e2:	7cdb      	ldrb	r3, [r3, #19]
    51e4:	061b      	lsls	r3, r3, #24
    51e6:	4313      	orrs	r3, r2
    51e8:	7918      	ldrb	r0, [r3, #4]
    51ea:	2300      	movs	r3, #0
    51ec:	9300      	str	r3, [sp, #0]
    51ee:	4b0e      	ldr	r3, [pc, #56]	; (5228 <setDutyCycleTimer+0x320>)
    51f0:	2200      	movs	r2, #0
    51f2:	4c0e      	ldr	r4, [pc, #56]	; (522c <setDutyCycleTimer+0x324>)
    51f4:	47a0      	blx	r4
	return result;
    51f6:	e696      	b.n	4f26 <setDutyCycleTimer+0x1e>
			RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout = 0;
    51f8:	4b06      	ldr	r3, [pc, #24]	; (5214 <setDutyCycleTimer+0x30c>)
    51fa:	2100      	movs	r1, #0
    51fc:	22d1      	movs	r2, #209	; 0xd1
    51fe:	0052      	lsls	r2, r2, #1
    5200:	5499      	strb	r1, [r3, r2]
    5202:	189b      	adds	r3, r3, r2
    5204:	2200      	movs	r2, #0
    5206:	705a      	strb	r2, [r3, #1]
    5208:	709a      	strb	r2, [r3, #2]
    520a:	70da      	strb	r2, [r3, #3]
    520c:	e7b6      	b.n	517c <setDutyCycleTimer+0x274>
    520e:	46c0      	nop			; (mov r8, r8)
    5210:	000112d5 	.word	0x000112d5
    5214:	20000b48 	.word	0x20000b48
    5218:	00001a89 	.word	0x00001a89
    521c:	00001bf5 	.word	0x00001bf5
    5220:	00001a9d 	.word	0x00001a9d
    5224:	0000ef0d 	.word	0x0000ef0d
    5228:	00005231 	.word	0x00005231
    522c:	000018f1 	.word	0x000018f1

00005230 <DutyCycleCallback>:
{
    5230:	b5f0      	push	{r4, r5, r6, r7, lr}
    5232:	46de      	mov	lr, fp
    5234:	4657      	mov	r7, sl
    5236:	464e      	mov	r6, r9
    5238:	4645      	mov	r5, r8
    523a:	b5e0      	push	{r5, r6, r7, lr}
    523c:	b087      	sub	sp, #28
	uint32_t DutyCycleTimeout = RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout;
    523e:	4980      	ldr	r1, [pc, #512]	; (5440 <DutyCycleCallback+0x210>)
    5240:	23d1      	movs	r3, #209	; 0xd1
    5242:	005b      	lsls	r3, r3, #1
    5244:	5cca      	ldrb	r2, [r1, r3]
    5246:	23a4      	movs	r3, #164	; 0xa4
    5248:	33ff      	adds	r3, #255	; 0xff
    524a:	5ccb      	ldrb	r3, [r1, r3]
    524c:	021b      	lsls	r3, r3, #8
    524e:	431a      	orrs	r2, r3
    5250:	23d2      	movs	r3, #210	; 0xd2
    5252:	005b      	lsls	r3, r3, #1
    5254:	5ccb      	ldrb	r3, [r1, r3]
    5256:	041b      	lsls	r3, r3, #16
    5258:	4313      	orrs	r3, r2
    525a:	22a6      	movs	r2, #166	; 0xa6
    525c:	32ff      	adds	r2, #255	; 0xff
    525e:	5c8a      	ldrb	r2, [r1, r2]
    5260:	0612      	lsls	r2, r2, #24
    5262:	431a      	orrs	r2, r3
    5264:	9205      	str	r2, [sp, #20]
    for (i=0; i < RegParams.maxSubBands; i++)
    5266:	2321      	movs	r3, #33	; 0x21
    5268:	5ccb      	ldrb	r3, [r1, r3]
    526a:	2b00      	cmp	r3, #0
    526c:	d100      	bne.n	5270 <DutyCycleCallback+0x40>
    526e:	e0df      	b.n	5430 <DutyCycleCallback+0x200>
    5270:	2600      	movs	r6, #0
    5272:	2300      	movs	r3, #0
    5274:	9304      	str	r3, [sp, #16]
    5276:	3b01      	subs	r3, #1
    5278:	9303      	str	r3, [sp, #12]
        if (( RegParams.pSubBandParams[i].subBandTimeout != 0 ))
    527a:	000f      	movs	r7, r1
            if ( RegParams.pSubBandParams[i].subBandTimeout > RegParams.pDutyCycleTimer->lastTimerValue )
    527c:	4688      	mov	r8, r1
            if ( (RegParams.pSubBandParams[i].subBandTimeout <= minimSubBandTimer) && (RegParams.pSubBandParams[i].subBandTimeout != 0) )
    527e:	468c      	mov	ip, r1
                RegParams.pSubBandParams[i].subBandTimeout = 0;
    5280:	2300      	movs	r3, #0
    5282:	469b      	mov	fp, r3
    for (i=0; i < RegParams.maxSubBands; i++)
    5284:	468a      	mov	sl, r1
    5286:	2321      	movs	r3, #33	; 0x21
    5288:	4699      	mov	r9, r3
    528a:	e00c      	b.n	52a6 <DutyCycleCallback+0x76>
                RegParams.pSubBandParams[i].subBandTimeout = 0;
    528c:	465a      	mov	r2, fp
    528e:	721a      	strb	r2, [r3, #8]
    5290:	725a      	strb	r2, [r3, #9]
    5292:	729a      	strb	r2, [r3, #10]
    5294:	72da      	strb	r2, [r3, #11]
    5296:	e03f      	b.n	5318 <DutyCycleCallback+0xe8>
    for (i=0; i < RegParams.maxSubBands; i++)
    5298:	3601      	adds	r6, #1
    529a:	b2f6      	uxtb	r6, r6
    529c:	4653      	mov	r3, sl
    529e:	464a      	mov	r2, r9
    52a0:	5c9b      	ldrb	r3, [r3, r2]
    52a2:	42b3      	cmp	r3, r6
    52a4:	d95a      	bls.n	535c <DutyCycleCallback+0x12c>
        if (( RegParams.pSubBandParams[i].subBandTimeout != 0 ))
    52a6:	0071      	lsls	r1, r6, #1
    52a8:	1989      	adds	r1, r1, r6
    52aa:	0089      	lsls	r1, r1, #2
    52ac:	7b3b      	ldrb	r3, [r7, #12]
    52ae:	7b7a      	ldrb	r2, [r7, #13]
    52b0:	0212      	lsls	r2, r2, #8
    52b2:	431a      	orrs	r2, r3
    52b4:	7bbb      	ldrb	r3, [r7, #14]
    52b6:	041b      	lsls	r3, r3, #16
    52b8:	431a      	orrs	r2, r3
    52ba:	7bfb      	ldrb	r3, [r7, #15]
    52bc:	061b      	lsls	r3, r3, #24
    52be:	4313      	orrs	r3, r2
    52c0:	185b      	adds	r3, r3, r1
    52c2:	7a1a      	ldrb	r2, [r3, #8]
    52c4:	7a58      	ldrb	r0, [r3, #9]
    52c6:	0200      	lsls	r0, r0, #8
    52c8:	4310      	orrs	r0, r2
    52ca:	7a9a      	ldrb	r2, [r3, #10]
    52cc:	0412      	lsls	r2, r2, #16
    52ce:	4310      	orrs	r0, r2
    52d0:	7ada      	ldrb	r2, [r3, #11]
    52d2:	0612      	lsls	r2, r2, #24
    52d4:	4302      	orrs	r2, r0
    52d6:	d0df      	beq.n	5298 <DutyCycleCallback+0x68>
            if ( RegParams.pSubBandParams[i].subBandTimeout > RegParams.pDutyCycleTimer->lastTimerValue )
    52d8:	4640      	mov	r0, r8
    52da:	7c05      	ldrb	r5, [r0, #16]
    52dc:	7c44      	ldrb	r4, [r0, #17]
    52de:	0224      	lsls	r4, r4, #8
    52e0:	4325      	orrs	r5, r4
    52e2:	7c80      	ldrb	r0, [r0, #18]
    52e4:	0400      	lsls	r0, r0, #16
    52e6:	4305      	orrs	r5, r0
    52e8:	4640      	mov	r0, r8
    52ea:	7cc0      	ldrb	r0, [r0, #19]
    52ec:	0600      	lsls	r0, r0, #24
    52ee:	4328      	orrs	r0, r5
    52f0:	7804      	ldrb	r4, [r0, #0]
    52f2:	7845      	ldrb	r5, [r0, #1]
    52f4:	022d      	lsls	r5, r5, #8
    52f6:	4325      	orrs	r5, r4
    52f8:	7884      	ldrb	r4, [r0, #2]
    52fa:	0424      	lsls	r4, r4, #16
    52fc:	4325      	orrs	r5, r4
    52fe:	78c4      	ldrb	r4, [r0, #3]
    5300:	0624      	lsls	r4, r4, #24
    5302:	432c      	orrs	r4, r5
    5304:	42a2      	cmp	r2, r4
    5306:	d9c1      	bls.n	528c <DutyCycleCallback+0x5c>
                RegParams.pSubBandParams[i].subBandTimeout = RegParams.pSubBandParams[i].subBandTimeout - RegParams.pDutyCycleTimer->lastTimerValue;
    5308:	1b12      	subs	r2, r2, r4
    530a:	721a      	strb	r2, [r3, #8]
    530c:	0a10      	lsrs	r0, r2, #8
    530e:	7258      	strb	r0, [r3, #9]
    5310:	0c10      	lsrs	r0, r2, #16
    5312:	7298      	strb	r0, [r3, #10]
    5314:	0e12      	lsrs	r2, r2, #24
    5316:	72da      	strb	r2, [r3, #11]
            if ( (RegParams.pSubBandParams[i].subBandTimeout <= minimSubBandTimer) && (RegParams.pSubBandParams[i].subBandTimeout != 0) )
    5318:	4663      	mov	r3, ip
    531a:	7b1b      	ldrb	r3, [r3, #12]
    531c:	4662      	mov	r2, ip
    531e:	7b52      	ldrb	r2, [r2, #13]
    5320:	0212      	lsls	r2, r2, #8
    5322:	431a      	orrs	r2, r3
    5324:	4663      	mov	r3, ip
    5326:	7b9b      	ldrb	r3, [r3, #14]
    5328:	041b      	lsls	r3, r3, #16
    532a:	431a      	orrs	r2, r3
    532c:	4663      	mov	r3, ip
    532e:	7bdb      	ldrb	r3, [r3, #15]
    5330:	061b      	lsls	r3, r3, #24
    5332:	4313      	orrs	r3, r2
    5334:	1859      	adds	r1, r3, r1
    5336:	7a0b      	ldrb	r3, [r1, #8]
    5338:	7a4a      	ldrb	r2, [r1, #9]
    533a:	0212      	lsls	r2, r2, #8
    533c:	431a      	orrs	r2, r3
    533e:	7a8b      	ldrb	r3, [r1, #10]
    5340:	041b      	lsls	r3, r3, #16
    5342:	431a      	orrs	r2, r3
    5344:	7acb      	ldrb	r3, [r1, #11]
    5346:	061b      	lsls	r3, r3, #24
    5348:	4313      	orrs	r3, r2
    534a:	9a03      	ldr	r2, [sp, #12]
    534c:	4293      	cmp	r3, r2
    534e:	d8a3      	bhi.n	5298 <DutyCycleCallback+0x68>
    5350:	2b00      	cmp	r3, #0
    5352:	d0a1      	beq.n	5298 <DutyCycleCallback+0x68>
                minimSubBandTimer  = RegParams.pSubBandParams[i].subBandTimeout;
    5354:	9303      	str	r3, [sp, #12]
                found = 1;
    5356:	2301      	movs	r3, #1
    5358:	9304      	str	r3, [sp, #16]
    535a:	e79d      	b.n	5298 <DutyCycleCallback+0x68>
    if (( DutyCycleTimeout != 0 ))
    535c:	9b05      	ldr	r3, [sp, #20]
    535e:	2b00      	cmp	r3, #0
    5360:	d031      	beq.n	53c6 <DutyCycleCallback+0x196>
	    if (DutyCycleTimeout > RegParams.pDutyCycleTimer->lastTimerValue)
    5362:	4937      	ldr	r1, [pc, #220]	; (5440 <DutyCycleCallback+0x210>)
    5364:	7c0b      	ldrb	r3, [r1, #16]
    5366:	7c4a      	ldrb	r2, [r1, #17]
    5368:	0212      	lsls	r2, r2, #8
    536a:	431a      	orrs	r2, r3
    536c:	7c8b      	ldrb	r3, [r1, #18]
    536e:	041b      	lsls	r3, r3, #16
    5370:	431a      	orrs	r2, r3
    5372:	7ccb      	ldrb	r3, [r1, #19]
    5374:	061b      	lsls	r3, r3, #24
    5376:	4313      	orrs	r3, r2
    5378:	7819      	ldrb	r1, [r3, #0]
    537a:	785a      	ldrb	r2, [r3, #1]
    537c:	0212      	lsls	r2, r2, #8
    537e:	430a      	orrs	r2, r1
    5380:	7899      	ldrb	r1, [r3, #2]
    5382:	0409      	lsls	r1, r1, #16
    5384:	430a      	orrs	r2, r1
    5386:	78d9      	ldrb	r1, [r3, #3]
    5388:	0609      	lsls	r1, r1, #24
    538a:	4311      	orrs	r1, r2
    538c:	9a05      	ldr	r2, [sp, #20]
    538e:	428a      	cmp	r2, r1
    5390:	d90f      	bls.n	53b2 <DutyCycleCallback+0x182>
		    RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout = DutyCycleTimeout - RegParams.pDutyCycleTimer->lastTimerValue;
    5392:	1a51      	subs	r1, r2, r1
    5394:	4b2a      	ldr	r3, [pc, #168]	; (5440 <DutyCycleCallback+0x210>)
    5396:	22d1      	movs	r2, #209	; 0xd1
    5398:	0052      	lsls	r2, r2, #1
    539a:	5499      	strb	r1, [r3, r2]
    539c:	0a0a      	lsrs	r2, r1, #8
    539e:	33a3      	adds	r3, #163	; 0xa3
    53a0:	33ff      	adds	r3, #255	; 0xff
    53a2:	705a      	strb	r2, [r3, #1]
    53a4:	0c0a      	lsrs	r2, r1, #16
    53a6:	709a      	strb	r2, [r3, #2]
    53a8:	0e0a      	lsrs	r2, r1, #24
    53aa:	70da      	strb	r2, [r3, #3]
		if(DutyCycleTimeout)
    53ac:	2900      	cmp	r1, #0
    53ae:	d10e      	bne.n	53ce <DutyCycleCallback+0x19e>
    53b0:	e009      	b.n	53c6 <DutyCycleCallback+0x196>
		    RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout = 0;
    53b2:	4b23      	ldr	r3, [pc, #140]	; (5440 <DutyCycleCallback+0x210>)
    53b4:	2100      	movs	r1, #0
    53b6:	22d1      	movs	r2, #209	; 0xd1
    53b8:	0052      	lsls	r2, r2, #1
    53ba:	5499      	strb	r1, [r3, r2]
    53bc:	189b      	adds	r3, r3, r2
    53be:	2200      	movs	r2, #0
    53c0:	705a      	strb	r2, [r3, #1]
    53c2:	709a      	strb	r2, [r3, #2]
    53c4:	70da      	strb	r2, [r3, #3]
    if ( found == 1 )
    53c6:	9b04      	ldr	r3, [sp, #16]
    53c8:	2b00      	cmp	r3, #0
    53ca:	d02a      	beq.n	5422 <DutyCycleCallback+0x1f2>
    53cc:	2100      	movs	r1, #0
    53ce:	9a03      	ldr	r2, [sp, #12]
    53d0:	4291      	cmp	r1, r2
    53d2:	d200      	bcs.n	53d6 <DutyCycleCallback+0x1a6>
    53d4:	0011      	movs	r1, r2
        RegParams.pDutyCycleTimer->lastTimerValue = nextTimer;
    53d6:	4b1a      	ldr	r3, [pc, #104]	; (5440 <DutyCycleCallback+0x210>)
    53d8:	7c1a      	ldrb	r2, [r3, #16]
    53da:	7c58      	ldrb	r0, [r3, #17]
    53dc:	0200      	lsls	r0, r0, #8
    53de:	4310      	orrs	r0, r2
    53e0:	7c9a      	ldrb	r2, [r3, #18]
    53e2:	0412      	lsls	r2, r2, #16
    53e4:	4310      	orrs	r0, r2
    53e6:	7cda      	ldrb	r2, [r3, #19]
    53e8:	0612      	lsls	r2, r2, #24
    53ea:	4302      	orrs	r2, r0
    53ec:	7011      	strb	r1, [r2, #0]
    53ee:	0a08      	lsrs	r0, r1, #8
    53f0:	7050      	strb	r0, [r2, #1]
    53f2:	0c08      	lsrs	r0, r1, #16
    53f4:	7090      	strb	r0, [r2, #2]
    53f6:	0e08      	lsrs	r0, r1, #24
    53f8:	70d0      	strb	r0, [r2, #3]
		SwTimerStart (RegParams.pDutyCycleTimer->timerId, MS_TO_US(nextTimer), SW_TIMEOUT_RELATIVE, (void *)DutyCycleCallback, NULL);
    53fa:	22fa      	movs	r2, #250	; 0xfa
    53fc:	0092      	lsls	r2, r2, #2
    53fe:	4351      	muls	r1, r2
    5400:	7c18      	ldrb	r0, [r3, #16]
    5402:	7c5a      	ldrb	r2, [r3, #17]
    5404:	0212      	lsls	r2, r2, #8
    5406:	4310      	orrs	r0, r2
    5408:	7c9a      	ldrb	r2, [r3, #18]
    540a:	0412      	lsls	r2, r2, #16
    540c:	4302      	orrs	r2, r0
    540e:	7cdb      	ldrb	r3, [r3, #19]
    5410:	061b      	lsls	r3, r3, #24
    5412:	4313      	orrs	r3, r2
    5414:	7918      	ldrb	r0, [r3, #4]
    5416:	2300      	movs	r3, #0
    5418:	9300      	str	r3, [sp, #0]
    541a:	4b0a      	ldr	r3, [pc, #40]	; (5444 <DutyCycleCallback+0x214>)
    541c:	2200      	movs	r2, #0
    541e:	4c0a      	ldr	r4, [pc, #40]	; (5448 <DutyCycleCallback+0x218>)
    5420:	47a0      	blx	r4
}
    5422:	b007      	add	sp, #28
    5424:	bc3c      	pop	{r2, r3, r4, r5}
    5426:	4690      	mov	r8, r2
    5428:	4699      	mov	r9, r3
    542a:	46a2      	mov	sl, r4
    542c:	46ab      	mov	fp, r5
    542e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (( DutyCycleTimeout != 0 ))
    5430:	9b05      	ldr	r3, [sp, #20]
    5432:	2b00      	cmp	r3, #0
    5434:	d0f5      	beq.n	5422 <DutyCycleCallback+0x1f2>
    bool found = 0;
    5436:	2300      	movs	r3, #0
    5438:	9304      	str	r3, [sp, #16]
    uint32_t minimSubBandTimer = UINT32_MAX;
    543a:	3b01      	subs	r3, #1
    543c:	9303      	str	r3, [sp, #12]
    543e:	e790      	b.n	5362 <DutyCycleCallback+0x132>
    5440:	20000b48 	.word	0x20000b48
    5444:	00005231 	.word	0x00005231
    5448:	000018f1 	.word	0x000018f1

0000544c <setLBTTimer>:
    }
}


static StackRetStatus_t setLBTTimer(LorawanRegionalAttributes_t attr, void *attrInput)
{
    544c:	b5f0      	push	{r4, r5, r6, r7, lr}
    544e:	46de      	mov	lr, fp
    5450:	4657      	mov	r7, sl
    5452:	464e      	mov	r6, r9
    5454:	4645      	mov	r5, r8
    5456:	b5e0      	push	{r5, r6, r7, lr}
    5458:	b085      	sub	sp, #20
    bool found = 0;
    uint8_t i;
    uint32_t delta = 0, minim = UINT32_MAX, ticks;
	LBTTimer_t *pLBTTimer;

    i = RegParams.lastUsedChannelIndex;
    545a:	4a71      	ldr	r2, [pc, #452]	; (5620 <setLBTTimer+0x1d4>)
    545c:	2327      	movs	r3, #39	; 0x27
	pLBTTimer = &RegParams.cmnParams.paramsType2.LBTTimer;
	
	RegParams.cmnParams.paramsType2.channelTimer[i] = LBT_TRANSMIT_CHANNEL_PAUSE_DURATION;
    545e:	5cd4      	ldrb	r4, [r2, r3]
    5460:	0023      	movs	r3, r4
    5462:	3352      	adds	r3, #82	; 0x52
    5464:	009b      	lsls	r3, r3, #2
    5466:	18d3      	adds	r3, r2, r3
    5468:	0019      	movs	r1, r3
    546a:	2032      	movs	r0, #50	; 0x32
    546c:	7258      	strb	r0, [r3, #9]
    546e:	2300      	movs	r3, #0
    5470:	728b      	strb	r3, [r1, #10]
    5472:	72cb      	strb	r3, [r1, #11]
    5474:	730b      	strb	r3, [r1, #12]
	
	if(SwTimerIsRunning(pLBTTimer->timerId))
    5476:	2396      	movs	r3, #150	; 0x96
    5478:	33ff      	adds	r3, #255	; 0xff
    547a:	5cd0      	ldrb	r0, [r2, r3]
    547c:	4b69      	ldr	r3, [pc, #420]	; (5624 <setLBTTimer+0x1d8>)
    547e:	4798      	blx	r3
    5480:	2800      	cmp	r0, #0
    5482:	d12f      	bne.n	54e4 <setLBTTimer+0x98>
		ticks = SwTimerReadValue(pLBTTimer->timerId);
		delta = pLBTTimer->lastTimerValue - US_TO_MS(ticks);
	}
	else
	{
		minim = RegParams.cmnParams.paramsType2.channelTimer[i];
    5484:	4866      	ldr	r0, [pc, #408]	; (5620 <setLBTTimer+0x1d4>)
    5486:	0023      	movs	r3, r4
    5488:	3352      	adds	r3, #82	; 0x52
    548a:	009b      	lsls	r3, r3, #2
    548c:	18c3      	adds	r3, r0, r3
    548e:	7a59      	ldrb	r1, [r3, #9]
    5490:	7a9a      	ldrb	r2, [r3, #10]
    5492:	0212      	lsls	r2, r2, #8
    5494:	4311      	orrs	r1, r2
    5496:	7ada      	ldrb	r2, [r3, #11]
    5498:	0412      	lsls	r2, r2, #16
    549a:	430a      	orrs	r2, r1
    549c:	7b19      	ldrb	r1, [r3, #12]
    549e:	0609      	lsls	r1, r1, #24
    54a0:	4311      	orrs	r1, r2
    54a2:	4689      	mov	r9, r1
		found = 1;
	}
	
	for(i = 0; i < RegParams.maxChannels; i++)
    54a4:	2322      	movs	r3, #34	; 0x22
    54a6:	56c3      	ldrsb	r3, [r0, r3]
    54a8:	4698      	mov	r8, r3
    54aa:	2b00      	cmp	r3, #0
    54ac:	dc00      	bgt.n	54b0 <setLBTTimer+0x64>
    54ae:	e08d      	b.n	55cc <setLBTTimer+0x180>
    uint32_t delta = 0, minim = UINT32_MAX, ticks;
    54b0:	2300      	movs	r3, #0
    54b2:	469a      	mov	sl, r3
		found = 1;
    54b4:	3301      	adds	r3, #1
    54b6:	9303      	str	r3, [sp, #12]
	{
		if(i != RegParams.lastUsedChannelIndex)
    54b8:	4a59      	ldr	r2, [pc, #356]	; (5620 <setLBTTimer+0x1d4>)
    54ba:	2327      	movs	r3, #39	; 0x27
    54bc:	5cd0      	ldrb	r0, [r2, r3]
		{
			if((RegParams.pChParams[i].status == ENABLED) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0))
    54be:	7911      	ldrb	r1, [r2, #4]
    54c0:	7953      	ldrb	r3, [r2, #5]
    54c2:	021b      	lsls	r3, r3, #8
    54c4:	430b      	orrs	r3, r1
    54c6:	7991      	ldrb	r1, [r2, #6]
    54c8:	0409      	lsls	r1, r1, #16
    54ca:	430b      	orrs	r3, r1
    54cc:	79d1      	ldrb	r1, [r2, #7]
    54ce:	0609      	lsls	r1, r1, #24
    54d0:	4319      	orrs	r1, r3
    54d2:	2600      	movs	r6, #0
    54d4:	2200      	movs	r2, #0
				{
					RegParams.cmnParams.paramsType2.channelTimer[i] = RegParams.cmnParams.paramsType2.channelTimer[i] - delta;
				}
				else
				{
					RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    54d6:	2300      	movs	r3, #0
    54d8:	469c      	mov	ip, r3
					RegParams.cmnParams.paramsType2.channelTimer[i] = RegParams.cmnParams.paramsType2.channelTimer[i] - delta;
    54da:	4653      	mov	r3, sl
    54dc:	9302      	str	r3, [sp, #8]
    54de:	468b      	mov	fp, r1
    54e0:	4645      	mov	r5, r8
    54e2:	e039      	b.n	5558 <setLBTTimer+0x10c>
		SwTimerStop(pLBTTimer->timerId);
    54e4:	4c4e      	ldr	r4, [pc, #312]	; (5620 <setLBTTimer+0x1d4>)
    54e6:	2596      	movs	r5, #150	; 0x96
    54e8:	35ff      	adds	r5, #255	; 0xff
    54ea:	5d60      	ldrb	r0, [r4, r5]
    54ec:	4b4e      	ldr	r3, [pc, #312]	; (5628 <setLBTTimer+0x1dc>)
    54ee:	4798      	blx	r3
		ticks = SwTimerReadValue(pLBTTimer->timerId);
    54f0:	5d60      	ldrb	r0, [r4, r5]
    54f2:	4b4e      	ldr	r3, [pc, #312]	; (562c <setLBTTimer+0x1e0>)
    54f4:	4798      	blx	r3
	for(i = 0; i < RegParams.maxChannels; i++)
    54f6:	2322      	movs	r3, #34	; 0x22
    54f8:	56e3      	ldrsb	r3, [r4, r3]
    54fa:	4698      	mov	r8, r3
    54fc:	2b00      	cmp	r3, #0
    54fe:	dd68      	ble.n	55d2 <setLBTTimer+0x186>
		delta = pLBTTimer->lastTimerValue - US_TO_MS(ticks);
    5500:	4a47      	ldr	r2, [pc, #284]	; (5620 <setLBTTimer+0x1d4>)
    5502:	2392      	movs	r3, #146	; 0x92
    5504:	33ff      	adds	r3, #255	; 0xff
    5506:	5cd4      	ldrb	r4, [r2, r3]
    5508:	3301      	adds	r3, #1
    550a:	5cd3      	ldrb	r3, [r2, r3]
    550c:	021b      	lsls	r3, r3, #8
    550e:	4323      	orrs	r3, r4
    5510:	2194      	movs	r1, #148	; 0x94
    5512:	31ff      	adds	r1, #255	; 0xff
    5514:	5c54      	ldrb	r4, [r2, r1]
    5516:	0424      	lsls	r4, r4, #16
    5518:	4323      	orrs	r3, r4
    551a:	3101      	adds	r1, #1
    551c:	5c54      	ldrb	r4, [r2, r1]
    551e:	0624      	lsls	r4, r4, #24
    5520:	431c      	orrs	r4, r3
    5522:	21fa      	movs	r1, #250	; 0xfa
    5524:	0089      	lsls	r1, r1, #2
    5526:	4b42      	ldr	r3, [pc, #264]	; (5630 <setLBTTimer+0x1e4>)
    5528:	4798      	blx	r3
    552a:	1a23      	subs	r3, r4, r0
    552c:	469a      	mov	sl, r3
    uint32_t delta = 0, minim = UINT32_MAX, ticks;
    552e:	2301      	movs	r3, #1
    5530:	425b      	negs	r3, r3
    5532:	4699      	mov	r9, r3
    bool found = 0;
    5534:	2300      	movs	r3, #0
    5536:	9303      	str	r3, [sp, #12]
    5538:	e7be      	b.n	54b8 <setLBTTimer+0x6c>
					RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    553a:	3652      	adds	r6, #82	; 0x52
    553c:	00b6      	lsls	r6, r6, #2
    553e:	4b38      	ldr	r3, [pc, #224]	; (5620 <setLBTTimer+0x1d4>)
    5540:	4698      	mov	r8, r3
    5542:	4446      	add	r6, r8
    5544:	4661      	mov	r1, ip
    5546:	7271      	strb	r1, [r6, #9]
    5548:	72b1      	strb	r1, [r6, #10]
    554a:	72f1      	strb	r1, [r6, #11]
    554c:	7331      	strb	r1, [r6, #12]
	for(i = 0; i < RegParams.maxChannels; i++)
    554e:	3201      	adds	r2, #1
    5550:	b2d2      	uxtb	r2, r2
    5552:	0016      	movs	r6, r2
    5554:	42aa      	cmp	r2, r5
    5556:	da36      	bge.n	55c6 <setLBTTimer+0x17a>
		if(i != RegParams.lastUsedChannelIndex)
    5558:	4290      	cmp	r0, r2
    555a:	d0f8      	beq.n	554e <setLBTTimer+0x102>
			if((RegParams.pChParams[i].status == ENABLED) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0))
    555c:	0053      	lsls	r3, r2, #1
    555e:	4659      	mov	r1, fp
    5560:	5c5c      	ldrb	r4, [r3, r1]
    5562:	2c00      	cmp	r4, #0
    5564:	d0f3      	beq.n	554e <setLBTTimer+0x102>
    5566:	0033      	movs	r3, r6
    5568:	3352      	adds	r3, #82	; 0x52
    556a:	009b      	lsls	r3, r3, #2
    556c:	4f2c      	ldr	r7, [pc, #176]	; (5620 <setLBTTimer+0x1d4>)
    556e:	46b8      	mov	r8, r7
    5570:	4443      	add	r3, r8
    5572:	7a5f      	ldrb	r7, [r3, #9]
    5574:	46ba      	mov	sl, r7
    5576:	7a9f      	ldrb	r7, [r3, #10]
    5578:	023f      	lsls	r7, r7, #8
    557a:	46b8      	mov	r8, r7
    557c:	4657      	mov	r7, sl
    557e:	4641      	mov	r1, r8
    5580:	430f      	orrs	r7, r1
    5582:	7ad9      	ldrb	r1, [r3, #11]
    5584:	0409      	lsls	r1, r1, #16
    5586:	430f      	orrs	r7, r1
    5588:	7b1b      	ldrb	r3, [r3, #12]
    558a:	061b      	lsls	r3, r3, #24
    558c:	433b      	orrs	r3, r7
    558e:	d0de      	beq.n	554e <setLBTTimer+0x102>
				if(RegParams.cmnParams.paramsType2.channelTimer[i] > delta)
    5590:	9f02      	ldr	r7, [sp, #8]
    5592:	42bb      	cmp	r3, r7
    5594:	d9d1      	bls.n	553a <setLBTTimer+0xee>
					RegParams.cmnParams.paramsType2.channelTimer[i] = RegParams.cmnParams.paramsType2.channelTimer[i] - delta;
    5596:	1bdb      	subs	r3, r3, r7
    5598:	3652      	adds	r6, #82	; 0x52
    559a:	00b6      	lsls	r6, r6, #2
    559c:	4920      	ldr	r1, [pc, #128]	; (5620 <setLBTTimer+0x1d4>)
    559e:	4688      	mov	r8, r1
    55a0:	4446      	add	r6, r8
    55a2:	2109      	movs	r1, #9
    55a4:	4688      	mov	r8, r1
    55a6:	44b0      	add	r8, r6
    55a8:	7273      	strb	r3, [r6, #9]
    55aa:	0a1e      	lsrs	r6, r3, #8
    55ac:	4641      	mov	r1, r8
    55ae:	704e      	strb	r6, [r1, #1]
    55b0:	0c1e      	lsrs	r6, r3, #16
    55b2:	708e      	strb	r6, [r1, #2]
    55b4:	0e1e      	lsrs	r6, r3, #24
    55b6:	70ce      	strb	r6, [r1, #3]
				}
				if((RegParams.cmnParams.paramsType2.channelTimer[i] <= minim) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0))
    55b8:	454b      	cmp	r3, r9
    55ba:	d8c8      	bhi.n	554e <setLBTTimer+0x102>
    55bc:	2b00      	cmp	r3, #0
    55be:	d0c6      	beq.n	554e <setLBTTimer+0x102>
    55c0:	4699      	mov	r9, r3
				{
					minim = RegParams.cmnParams.paramsType2.channelTimer[i];
					found = 1;
    55c2:	9403      	str	r4, [sp, #12]
    55c4:	e7c3      	b.n	554e <setLBTTimer+0x102>
				}
			}
		}
	}
	if((found == 1) && minim)
    55c6:	9b03      	ldr	r3, [sp, #12]
    55c8:	2b00      	cmp	r3, #0
    55ca:	d002      	beq.n	55d2 <setLBTTimer+0x186>
    55cc:	464b      	mov	r3, r9
    55ce:	2b00      	cmp	r3, #0
    55d0:	d107      	bne.n	55e2 <setLBTTimer+0x196>
	{
		pLBTTimer->lastTimerValue = minim;
		SwTimerStart (pLBTTimer->timerId, MS_TO_US(minim), SW_TIMEOUT_RELATIVE, (void *)LBTChannelPauseCallback, NULL);
	}
	return LORAWAN_SUCCESS;
}
    55d2:	2008      	movs	r0, #8
    55d4:	b005      	add	sp, #20
    55d6:	bc3c      	pop	{r2, r3, r4, r5}
    55d8:	4690      	mov	r8, r2
    55da:	4699      	mov	r9, r3
    55dc:	46a2      	mov	sl, r4
    55de:	46ab      	mov	fp, r5
    55e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pLBTTimer->lastTimerValue = minim;
    55e2:	4b0f      	ldr	r3, [pc, #60]	; (5620 <setLBTTimer+0x1d4>)
    55e4:	2292      	movs	r2, #146	; 0x92
    55e6:	32ff      	adds	r2, #255	; 0xff
    55e8:	4649      	mov	r1, r9
    55ea:	5499      	strb	r1, [r3, r2]
    55ec:	464a      	mov	r2, r9
    55ee:	0a11      	lsrs	r1, r2, #8
    55f0:	001a      	movs	r2, r3
    55f2:	3292      	adds	r2, #146	; 0x92
    55f4:	32ff      	adds	r2, #255	; 0xff
    55f6:	7051      	strb	r1, [r2, #1]
    55f8:	4649      	mov	r1, r9
    55fa:	0c09      	lsrs	r1, r1, #16
    55fc:	7091      	strb	r1, [r2, #2]
    55fe:	4649      	mov	r1, r9
    5600:	0e09      	lsrs	r1, r1, #24
    5602:	70d1      	strb	r1, [r2, #3]
		SwTimerStart (pLBTTimer->timerId, MS_TO_US(minim), SW_TIMEOUT_RELATIVE, (void *)LBTChannelPauseCallback, NULL);
    5604:	21fa      	movs	r1, #250	; 0xfa
    5606:	0089      	lsls	r1, r1, #2
    5608:	464a      	mov	r2, r9
    560a:	4351      	muls	r1, r2
    560c:	2296      	movs	r2, #150	; 0x96
    560e:	32ff      	adds	r2, #255	; 0xff
    5610:	5c98      	ldrb	r0, [r3, r2]
    5612:	2300      	movs	r3, #0
    5614:	9300      	str	r3, [sp, #0]
    5616:	4b07      	ldr	r3, [pc, #28]	; (5634 <setLBTTimer+0x1e8>)
    5618:	2200      	movs	r2, #0
    561a:	4c07      	ldr	r4, [pc, #28]	; (5638 <setLBTTimer+0x1ec>)
    561c:	47a0      	blx	r4
    561e:	e7d8      	b.n	55d2 <setLBTTimer+0x186>
    5620:	20000b48 	.word	0x20000b48
    5624:	00001a89 	.word	0x00001a89
    5628:	00001bf5 	.word	0x00001bf5
    562c:	00001a9d 	.word	0x00001a9d
    5630:	0000ef0d 	.word	0x0000ef0d
    5634:	0000563d 	.word	0x0000563d
    5638:	000018f1 	.word	0x000018f1

0000563c <LBTChannelPauseCallback>:
{
    563c:	b5f0      	push	{r4, r5, r6, r7, lr}
    563e:	46de      	mov	lr, fp
    5640:	4657      	mov	r7, sl
    5642:	464e      	mov	r6, r9
    5644:	4645      	mov	r5, r8
    5646:	b5e0      	push	{r5, r6, r7, lr}
    5648:	b085      	sub	sp, #20
    for (i=0; i < RegParams.maxChannels; i++)
    564a:	2322      	movs	r3, #34	; 0x22
    564c:	4a4a      	ldr	r2, [pc, #296]	; (5778 <LBTChannelPauseCallback+0x13c>)
    564e:	56d6      	ldrsb	r6, [r2, r3]
    5650:	2e00      	cmp	r6, #0
    5652:	dd6a      	ble.n	572a <LBTChannelPauseCallback+0xee>
        if ((RegParams.pChParams[i].status == ENABLED) && ( RegParams.cmnParams.paramsType2.channelTimer[i] != 0 ))
    5654:	0013      	movs	r3, r2
    5656:	7915      	ldrb	r5, [r2, #4]
    5658:	7952      	ldrb	r2, [r2, #5]
    565a:	0212      	lsls	r2, r2, #8
    565c:	432a      	orrs	r2, r5
    565e:	799d      	ldrb	r5, [r3, #6]
    5660:	042d      	lsls	r5, r5, #16
    5662:	432a      	orrs	r2, r5
    5664:	79dd      	ldrb	r5, [r3, #7]
    5666:	062d      	lsls	r5, r5, #24
    5668:	4315      	orrs	r5, r2
            if ( RegParams.cmnParams.paramsType2.channelTimer[i] > pLBTTimer->lastTimerValue)
    566a:	2292      	movs	r2, #146	; 0x92
    566c:	32ff      	adds	r2, #255	; 0xff
    566e:	5c9f      	ldrb	r7, [r3, r2]
    5670:	3201      	adds	r2, #1
    5672:	5c9a      	ldrb	r2, [r3, r2]
    5674:	0212      	lsls	r2, r2, #8
    5676:	433a      	orrs	r2, r7
    5678:	2194      	movs	r1, #148	; 0x94
    567a:	31ff      	adds	r1, #255	; 0xff
    567c:	5c5f      	ldrb	r7, [r3, r1]
    567e:	043f      	lsls	r7, r7, #16
    5680:	433a      	orrs	r2, r7
    5682:	3101      	adds	r1, #1
    5684:	5c5f      	ldrb	r7, [r3, r1]
    5686:	063f      	lsls	r7, r7, #24
    5688:	4317      	orrs	r7, r2
    568a:	9703      	str	r7, [sp, #12]
    568c:	2000      	movs	r0, #0
    568e:	2300      	movs	r3, #0
    5690:	2200      	movs	r2, #0
    5692:	4691      	mov	r9, r2
    5694:	3a01      	subs	r2, #1
    5696:	4690      	mov	r8, r2
                RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    5698:	2200      	movs	r2, #0
    569a:	4694      	mov	ip, r2
    569c:	e00e      	b.n	56bc <LBTChannelPauseCallback+0x80>
    569e:	3052      	adds	r0, #82	; 0x52
    56a0:	0080      	lsls	r0, r0, #2
    56a2:	4a35      	ldr	r2, [pc, #212]	; (5778 <LBTChannelPauseCallback+0x13c>)
    56a4:	4692      	mov	sl, r2
    56a6:	4450      	add	r0, sl
    56a8:	4661      	mov	r1, ip
    56aa:	7241      	strb	r1, [r0, #9]
    56ac:	7281      	strb	r1, [r0, #10]
    56ae:	72c1      	strb	r1, [r0, #11]
    56b0:	7301      	strb	r1, [r0, #12]
    for (i=0; i < RegParams.maxChannels; i++)
    56b2:	3301      	adds	r3, #1
    56b4:	b2db      	uxtb	r3, r3
    56b6:	0018      	movs	r0, r3
    56b8:	42b3      	cmp	r3, r6
    56ba:	da33      	bge.n	5724 <LBTChannelPauseCallback+0xe8>
        if ((RegParams.pChParams[i].status == ENABLED) && ( RegParams.cmnParams.paramsType2.channelTimer[i] != 0 ))
    56bc:	005a      	lsls	r2, r3, #1
    56be:	5d54      	ldrb	r4, [r2, r5]
    56c0:	2c00      	cmp	r4, #0
    56c2:	d0f6      	beq.n	56b2 <LBTChannelPauseCallback+0x76>
    56c4:	0002      	movs	r2, r0
    56c6:	3252      	adds	r2, #82	; 0x52
    56c8:	0092      	lsls	r2, r2, #2
    56ca:	492b      	ldr	r1, [pc, #172]	; (5778 <LBTChannelPauseCallback+0x13c>)
    56cc:	468a      	mov	sl, r1
    56ce:	4452      	add	r2, sl
    56d0:	7a57      	ldrb	r7, [r2, #9]
    56d2:	46bb      	mov	fp, r7
    56d4:	7a97      	ldrb	r7, [r2, #10]
    56d6:	023f      	lsls	r7, r7, #8
    56d8:	46ba      	mov	sl, r7
    56da:	465f      	mov	r7, fp
    56dc:	4651      	mov	r1, sl
    56de:	430f      	orrs	r7, r1
    56e0:	7ad1      	ldrb	r1, [r2, #11]
    56e2:	0409      	lsls	r1, r1, #16
    56e4:	430f      	orrs	r7, r1
    56e6:	7b12      	ldrb	r2, [r2, #12]
    56e8:	0612      	lsls	r2, r2, #24
    56ea:	433a      	orrs	r2, r7
    56ec:	d0e1      	beq.n	56b2 <LBTChannelPauseCallback+0x76>
            if ( RegParams.cmnParams.paramsType2.channelTimer[i] > pLBTTimer->lastTimerValue)
    56ee:	9f03      	ldr	r7, [sp, #12]
    56f0:	42ba      	cmp	r2, r7
    56f2:	d9d4      	bls.n	569e <LBTChannelPauseCallback+0x62>
                RegParams.cmnParams.paramsType2.channelTimer[i] = RegParams.cmnParams.paramsType2.channelTimer[i] - pLBTTimer->lastTimerValue;
    56f4:	1bd2      	subs	r2, r2, r7
    56f6:	3052      	adds	r0, #82	; 0x52
    56f8:	0080      	lsls	r0, r0, #2
    56fa:	491f      	ldr	r1, [pc, #124]	; (5778 <LBTChannelPauseCallback+0x13c>)
    56fc:	468a      	mov	sl, r1
    56fe:	4450      	add	r0, sl
    5700:	2109      	movs	r1, #9
    5702:	468a      	mov	sl, r1
    5704:	4482      	add	sl, r0
    5706:	7242      	strb	r2, [r0, #9]
    5708:	0a10      	lsrs	r0, r2, #8
    570a:	4651      	mov	r1, sl
    570c:	7048      	strb	r0, [r1, #1]
    570e:	0c10      	lsrs	r0, r2, #16
    5710:	7088      	strb	r0, [r1, #2]
    5712:	0e10      	lsrs	r0, r2, #24
    5714:	70c8      	strb	r0, [r1, #3]
            if ( (RegParams.cmnParams.paramsType2.channelTimer[i] <= minim) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0) )
    5716:	4542      	cmp	r2, r8
    5718:	d8cb      	bhi.n	56b2 <LBTChannelPauseCallback+0x76>
    571a:	2a00      	cmp	r2, #0
    571c:	d0c9      	beq.n	56b2 <LBTChannelPauseCallback+0x76>
                found = 1;
    571e:	46a1      	mov	r9, r4
            if ( (RegParams.cmnParams.paramsType2.channelTimer[i] <= minim) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0) )
    5720:	4690      	mov	r8, r2
    5722:	e7c6      	b.n	56b2 <LBTChannelPauseCallback+0x76>
    if ( found == 1 )
    5724:	464b      	mov	r3, r9
    5726:	2b00      	cmp	r3, #0
    5728:	d106      	bne.n	5738 <LBTChannelPauseCallback+0xfc>
}
    572a:	b005      	add	sp, #20
    572c:	bc3c      	pop	{r2, r3, r4, r5}
    572e:	4690      	mov	r8, r2
    5730:	4699      	mov	r9, r3
    5732:	46a2      	mov	sl, r4
    5734:	46ab      	mov	fp, r5
    5736:	bdf0      	pop	{r4, r5, r6, r7, pc}
        pLBTTimer->lastTimerValue = minim;
    5738:	4b0f      	ldr	r3, [pc, #60]	; (5778 <LBTChannelPauseCallback+0x13c>)
    573a:	2292      	movs	r2, #146	; 0x92
    573c:	32ff      	adds	r2, #255	; 0xff
    573e:	4641      	mov	r1, r8
    5740:	5499      	strb	r1, [r3, r2]
    5742:	4642      	mov	r2, r8
    5744:	0a11      	lsrs	r1, r2, #8
    5746:	001a      	movs	r2, r3
    5748:	3292      	adds	r2, #146	; 0x92
    574a:	32ff      	adds	r2, #255	; 0xff
    574c:	7051      	strb	r1, [r2, #1]
    574e:	4641      	mov	r1, r8
    5750:	0c09      	lsrs	r1, r1, #16
    5752:	7091      	strb	r1, [r2, #2]
    5754:	4641      	mov	r1, r8
    5756:	0e09      	lsrs	r1, r1, #24
    5758:	70d1      	strb	r1, [r2, #3]
        SwTimerStart (pLBTTimer->timerId, MS_TO_US(minim), SW_TIMEOUT_RELATIVE, (void *)LBTChannelPauseCallback, NULL);
    575a:	21fa      	movs	r1, #250	; 0xfa
    575c:	0089      	lsls	r1, r1, #2
    575e:	4642      	mov	r2, r8
    5760:	4351      	muls	r1, r2
    5762:	2296      	movs	r2, #150	; 0x96
    5764:	32ff      	adds	r2, #255	; 0xff
    5766:	5c98      	ldrb	r0, [r3, r2]
    5768:	2300      	movs	r3, #0
    576a:	9300      	str	r3, [sp, #0]
    576c:	4b03      	ldr	r3, [pc, #12]	; (577c <LBTChannelPauseCallback+0x140>)
    576e:	2200      	movs	r2, #0
    5770:	4c03      	ldr	r4, [pc, #12]	; (5780 <LBTChannelPauseCallback+0x144>)
    5772:	47a0      	blx	r4
}
    5774:	e7d9      	b.n	572a <LBTChannelPauseCallback+0xee>
    5776:	46c0      	nop			; (mov r8, r8)
    5778:	20000b48 	.word	0x20000b48
    577c:	0000563d 	.word	0x0000563d
    5780:	000018f1 	.word	0x000018f1

00005784 <ValidateDataRangeT2>:
	memcpy(&val_drange,attrInput,sizeof(ValUpdateDrange_t));
    5784:	784a      	ldrb	r2, [r1, #1]
	dataRateMin = val_drange.dataRangeNew & LAST_NIBBLE;
    5786:	230f      	movs	r3, #15
    5788:	4013      	ands	r3, r2
    if ( dataRate > RegParams.minDataRate )
    578a:	4907      	ldr	r1, [pc, #28]	; (57a8 <ValidateDataRangeT2+0x24>)
    578c:	7f09      	ldrb	r1, [r1, #28]
		retVal = LORAWAN_INVALID_PARAMETER;
    578e:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    5790:	428b      	cmp	r3, r1
    5792:	d900      	bls.n	5796 <ValidateDataRangeT2+0x12>
}
    5794:	4770      	bx	lr
	dataRateMax = (val_drange.dataRangeNew & FIRST_NIBBLE) >> SHIFT4;
    5796:	0912      	lsrs	r2, r2, #4
		retVal = LORAWAN_INVALID_PARAMETER;
    5798:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    579a:	428a      	cmp	r2, r1
    579c:	d8fa      	bhi.n	5794 <ValidateDataRangeT2+0x10>
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    579e:	3802      	subs	r0, #2
	   || (dataRateMax < dataRateMin) )
    57a0:	4293      	cmp	r3, r2
    57a2:	d9f7      	bls.n	5794 <ValidateDataRangeT2+0x10>
		retVal = LORAWAN_INVALID_PARAMETER;
    57a4:	3002      	adds	r0, #2
	return retVal;
    57a6:	e7f5      	b.n	5794 <ValidateDataRangeT2+0x10>
    57a8:	20000b48 	.word	0x20000b48

000057ac <setDataRangeT2>:
{
    57ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    57ae:	46c6      	mov	lr, r8
    57b0:	b500      	push	{lr}
    57b2:	b082      	sub	sp, #8
	memcpy((void *)&update_dr,attrInput,sizeof(ValUpdateDrange_t));
    57b4:	780d      	ldrb	r5, [r1, #0]
    57b6:	784e      	ldrb	r6, [r1, #1]
	val_chid.channelIndex = update_dr.channelIndex;
    57b8:	ab01      	add	r3, sp, #4
    57ba:	701d      	strb	r5, [r3, #0]
	val_chid.allowedForDefaultChannels = ALL_CHANNELS;
    57bc:	2201      	movs	r2, #1
    57be:	705a      	strb	r2, [r3, #1]
	if((ValidateDataRangeT2(DATA_RANGE, attrInput) != LORAWAN_SUCCESS) || (ValidateChannelIdT2(CHANNEL_ID, &val_chid) != LORAWAN_SUCCESS))
    57c0:	2012      	movs	r0, #18
    57c2:	4b25      	ldr	r3, [pc, #148]	; (5858 <setDataRangeT2+0xac>)
    57c4:	4798      	blx	r3
		retVal = LORAWAN_INVALID_PARAMETER;
    57c6:	240a      	movs	r4, #10
	if((ValidateDataRangeT2(DATA_RANGE, attrInput) != LORAWAN_SUCCESS) || (ValidateChannelIdT2(CHANNEL_ID, &val_chid) != LORAWAN_SUCCESS))
    57c8:	2808      	cmp	r0, #8
    57ca:	d004      	beq.n	57d6 <setDataRangeT2+0x2a>
}
    57cc:	0020      	movs	r0, r4
    57ce:	b002      	add	sp, #8
    57d0:	bc04      	pop	{r2}
    57d2:	4690      	mov	r8, r2
    57d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if((ValidateDataRangeT2(DATA_RANGE, attrInput) != LORAWAN_SUCCESS) || (ValidateChannelIdT2(CHANNEL_ID, &val_chid) != LORAWAN_SUCCESS))
    57d6:	a901      	add	r1, sp, #4
    57d8:	300d      	adds	r0, #13
    57da:	4b20      	ldr	r3, [pc, #128]	; (585c <setDataRangeT2+0xb0>)
    57dc:	4798      	blx	r3
    57de:	0004      	movs	r4, r0
    57e0:	2808      	cmp	r0, #8
    57e2:	d001      	beq.n	57e8 <setDataRangeT2+0x3c>
		retVal = LORAWAN_INVALID_PARAMETER;
    57e4:	240a      	movs	r4, #10
    57e6:	e7f1      	b.n	57cc <setDataRangeT2+0x20>
		RegParams.pChParams[update_dr.channelIndex].dataRange.value = update_dr.dataRangeNew;
    57e8:	4f1d      	ldr	r7, [pc, #116]	; (5860 <setDataRangeT2+0xb4>)
    57ea:	793b      	ldrb	r3, [r7, #4]
    57ec:	797a      	ldrb	r2, [r7, #5]
    57ee:	0212      	lsls	r2, r2, #8
    57f0:	431a      	orrs	r2, r3
    57f2:	79bb      	ldrb	r3, [r7, #6]
    57f4:	041b      	lsls	r3, r3, #16
    57f6:	431a      	orrs	r2, r3
    57f8:	79fb      	ldrb	r3, [r7, #7]
    57fa:	061b      	lsls	r3, r3, #24
    57fc:	4313      	orrs	r3, r2
    57fe:	006a      	lsls	r2, r5, #1
    5800:	4690      	mov	r8, r2
    5802:	4443      	add	r3, r8
    5804:	705e      	strb	r6, [r3, #1]
		PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    5806:	23f8      	movs	r3, #248	; 0xf8
    5808:	33ff      	adds	r3, #255	; 0xff
    580a:	5cfb      	ldrb	r3, [r7, r3]
    580c:	22fc      	movs	r2, #252	; 0xfc
    580e:	0052      	lsls	r2, r2, #1
    5810:	5cb8      	ldrb	r0, [r7, r2]
    5812:	0200      	lsls	r0, r0, #8
    5814:	4318      	orrs	r0, r3
    5816:	b2c1      	uxtb	r1, r0
    5818:	0a00      	lsrs	r0, r0, #8
    581a:	4e12      	ldr	r6, [pc, #72]	; (5864 <setDataRangeT2+0xb8>)
    581c:	47b0      	blx	r6
		RegParams.pOtherChParams[update_dr.channelIndex].parametersDefined |= DATA_RANGE_DEFINED;
    581e:	7a3b      	ldrb	r3, [r7, #8]
    5820:	7a7a      	ldrb	r2, [r7, #9]
    5822:	0212      	lsls	r2, r2, #8
    5824:	431a      	orrs	r2, r3
    5826:	7abb      	ldrb	r3, [r7, #10]
    5828:	041b      	lsls	r3, r3, #16
    582a:	431a      	orrs	r2, r3
    582c:	7afb      	ldrb	r3, [r7, #11]
    582e:	061b      	lsls	r3, r3, #24
    5830:	4313      	orrs	r3, r2
    5832:	4445      	add	r5, r8
    5834:	00ad      	lsls	r5, r5, #2
    5836:	195d      	adds	r5, r3, r5
    5838:	7aeb      	ldrb	r3, [r5, #11]
    583a:	2202      	movs	r2, #2
    583c:	4313      	orrs	r3, r2
    583e:	72eb      	strb	r3, [r5, #11]
		PDS_STORE(RegParams.regParamItems.ch_param_2_item_id);
    5840:	23fa      	movs	r3, #250	; 0xfa
    5842:	33ff      	adds	r3, #255	; 0xff
    5844:	5cfb      	ldrb	r3, [r7, r3]
    5846:	22fd      	movs	r2, #253	; 0xfd
    5848:	0052      	lsls	r2, r2, #1
    584a:	5cb8      	ldrb	r0, [r7, r2]
    584c:	0200      	lsls	r0, r0, #8
    584e:	4318      	orrs	r0, r3
    5850:	b2c1      	uxtb	r1, r0
    5852:	0a00      	lsrs	r0, r0, #8
    5854:	47b0      	blx	r6
    5856:	e7b9      	b.n	57cc <setDataRangeT2+0x20>
    5858:	00005785 	.word	0x00005785
    585c:	000037d9 	.word	0x000037d9
    5860:	20000b48 	.word	0x20000b48
    5864:	00001e65 	.word	0x00001e65

00005868 <LORAREG_GetAttr_MaxPayloadT3>:
{
    5868:	b530      	push	{r4, r5, lr}
	dataRate = *(uint8_t *)attrInput;
    586a:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    586c:	4916      	ldr	r1, [pc, #88]	; (58c8 <LORAREG_GetAttr_MaxPayloadT3+0x60>)
    586e:	7f09      	ldrb	r1, [r1, #28]
		result =  LORAWAN_INVALID_PARAMETER;
    5870:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    5872:	4299      	cmp	r1, r3
    5874:	d215      	bcs.n	58a2 <LORAREG_GetAttr_MaxPayloadT3+0x3a>
	if(RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime == 1)
    5876:	21ac      	movs	r1, #172	; 0xac
    5878:	31ff      	adds	r1, #255	; 0xff
    587a:	4c13      	ldr	r4, [pc, #76]	; (58c8 <LORAREG_GetAttr_MaxPayloadT3+0x60>)
    587c:	5c61      	ldrb	r1, [r4, r1]
    587e:	07c9      	lsls	r1, r1, #31
    5880:	d411      	bmi.n	58a6 <LORAREG_GetAttr_MaxPayloadT3+0x3e>
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].maxPayloadSizeDt0;
    5882:	4d11      	ldr	r5, [pc, #68]	; (58c8 <LORAREG_GetAttr_MaxPayloadT3+0x60>)
    5884:	7829      	ldrb	r1, [r5, #0]
    5886:	786c      	ldrb	r4, [r5, #1]
    5888:	0224      	lsls	r4, r4, #8
    588a:	430c      	orrs	r4, r1
    588c:	78a9      	ldrb	r1, [r5, #2]
    588e:	0409      	lsls	r1, r1, #16
    5890:	430c      	orrs	r4, r1
    5892:	78e9      	ldrb	r1, [r5, #3]
    5894:	0609      	lsls	r1, r1, #24
    5896:	4321      	orrs	r1, r4
    5898:	00db      	lsls	r3, r3, #3
    589a:	185b      	adds	r3, r3, r1
    589c:	789b      	ldrb	r3, [r3, #2]
    589e:	7013      	strb	r3, [r2, #0]
}
    58a0:	bd30      	pop	{r4, r5, pc}
	StackRetStatus_t result = LORAWAN_SUCCESS;
    58a2:	3802      	subs	r0, #2
    58a4:	e7e7      	b.n	5876 <LORAREG_GetAttr_MaxPayloadT3+0xe>
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].maxPayloadSizeDt1;
    58a6:	0025      	movs	r5, r4
    58a8:	7821      	ldrb	r1, [r4, #0]
    58aa:	7864      	ldrb	r4, [r4, #1]
    58ac:	0224      	lsls	r4, r4, #8
    58ae:	430c      	orrs	r4, r1
    58b0:	78a9      	ldrb	r1, [r5, #2]
    58b2:	0409      	lsls	r1, r1, #16
    58b4:	430c      	orrs	r4, r1
    58b6:	78e9      	ldrb	r1, [r5, #3]
    58b8:	0609      	lsls	r1, r1, #24
    58ba:	4321      	orrs	r1, r4
    58bc:	00db      	lsls	r3, r3, #3
    58be:	1859      	adds	r1, r3, r1
    58c0:	78cb      	ldrb	r3, [r1, #3]
    58c2:	7013      	strb	r3, [r2, #0]
    58c4:	e7ec      	b.n	58a0 <LORAREG_GetAttr_MaxPayloadT3+0x38>
    58c6:	46c0      	nop			; (mov r8, r8)
    58c8:	20000b48 	.word	0x20000b48

000058cc <LORAREG_GetAttr_RxWindowSizeT2>:
{
    58cc:	b510      	push	{r4, lr}
	dataRate = *(uint8_t *)attrInput;
    58ce:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    58d0:	490c      	ldr	r1, [pc, #48]	; (5904 <LORAREG_GetAttr_RxWindowSizeT2+0x38>)
    58d2:	7f09      	ldrb	r1, [r1, #28]
		return LORAWAN_INVALID_PARAMETER;
    58d4:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    58d6:	4299      	cmp	r1, r3
    58d8:	d200      	bcs.n	58dc <LORAREG_GetAttr_RxWindowSizeT2+0x10>
}
    58da:	bd10      	pop	{r4, pc}
		*(uint16_t *)attrOutput = RegParams.pDrParams[dataRate].rxWindowSize;
    58dc:	4c09      	ldr	r4, [pc, #36]	; (5904 <LORAREG_GetAttr_RxWindowSizeT2+0x38>)
    58de:	7821      	ldrb	r1, [r4, #0]
    58e0:	7860      	ldrb	r0, [r4, #1]
    58e2:	0200      	lsls	r0, r0, #8
    58e4:	4308      	orrs	r0, r1
    58e6:	78a1      	ldrb	r1, [r4, #2]
    58e8:	0409      	lsls	r1, r1, #16
    58ea:	4308      	orrs	r0, r1
    58ec:	78e1      	ldrb	r1, [r4, #3]
    58ee:	0609      	lsls	r1, r1, #24
    58f0:	4301      	orrs	r1, r0
    58f2:	00db      	lsls	r3, r3, #3
    58f4:	5c58      	ldrb	r0, [r3, r1]
    58f6:	185b      	adds	r3, r3, r1
    58f8:	785b      	ldrb	r3, [r3, #1]
    58fa:	021b      	lsls	r3, r3, #8
    58fc:	4303      	orrs	r3, r0
    58fe:	8013      	strh	r3, [r2, #0]
	return result;
    5900:	2008      	movs	r0, #8
    5902:	e7ea      	b.n	58da <LORAREG_GetAttr_RxWindowSizeT2+0xe>
    5904:	20000b48 	.word	0x20000b48

00005908 <LORAREG_GetAttr_RxWindowOffsetT2>:
{
    5908:	b510      	push	{r4, lr}
	dataRate = *(uint8_t *)attrInput;
    590a:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    590c:	490b      	ldr	r1, [pc, #44]	; (593c <LORAREG_GetAttr_RxWindowOffsetT2+0x34>)
    590e:	7f09      	ldrb	r1, [r1, #28]
		return LORAWAN_INVALID_PARAMETER;
    5910:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    5912:	4299      	cmp	r1, r3
    5914:	d200      	bcs.n	5918 <LORAREG_GetAttr_RxWindowOffsetT2+0x10>
}
    5916:	bd10      	pop	{r4, pc}
		*(int8_t *)attrOutput = RegParams.pDrParams[dataRate].rxWindowOffset;
    5918:	4c08      	ldr	r4, [pc, #32]	; (593c <LORAREG_GetAttr_RxWindowOffsetT2+0x34>)
    591a:	7821      	ldrb	r1, [r4, #0]
    591c:	7860      	ldrb	r0, [r4, #1]
    591e:	0200      	lsls	r0, r0, #8
    5920:	4308      	orrs	r0, r1
    5922:	78a1      	ldrb	r1, [r4, #2]
    5924:	0409      	lsls	r1, r1, #16
    5926:	4308      	orrs	r0, r1
    5928:	78e1      	ldrb	r1, [r4, #3]
    592a:	0609      	lsls	r1, r1, #24
    592c:	4301      	orrs	r1, r0
    592e:	00db      	lsls	r3, r3, #3
    5930:	185b      	adds	r3, r3, r1
    5932:	791b      	ldrb	r3, [r3, #4]
    5934:	b25b      	sxtb	r3, r3
    5936:	7013      	strb	r3, [r2, #0]
	return result;
    5938:	2008      	movs	r0, #8
    593a:	e7ec      	b.n	5916 <LORAREG_GetAttr_RxWindowOffsetT2+0xe>
    593c:	20000b48 	.word	0x20000b48

00005940 <LORAREG_GetAttr_MaxPayloadT2>:
{
    5940:	b510      	push	{r4, lr}
	dataRate = *(uint8_t *)attrInput;
    5942:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    5944:	490b      	ldr	r1, [pc, #44]	; (5974 <LORAREG_GetAttr_MaxPayloadT2+0x34>)
    5946:	7f09      	ldrb	r1, [r1, #28]
		result =  LORAWAN_INVALID_PARAMETER;
    5948:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    594a:	4299      	cmp	r1, r3
    594c:	d200      	bcs.n	5950 <LORAREG_GetAttr_MaxPayloadT2+0x10>
}
    594e:	bd10      	pop	{r4, pc}
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].maxPayloadSizeDt0;
    5950:	4c08      	ldr	r4, [pc, #32]	; (5974 <LORAREG_GetAttr_MaxPayloadT2+0x34>)
    5952:	7821      	ldrb	r1, [r4, #0]
    5954:	7860      	ldrb	r0, [r4, #1]
    5956:	0200      	lsls	r0, r0, #8
    5958:	4308      	orrs	r0, r1
    595a:	78a1      	ldrb	r1, [r4, #2]
    595c:	0409      	lsls	r1, r1, #16
    595e:	4308      	orrs	r0, r1
    5960:	78e1      	ldrb	r1, [r4, #3]
    5962:	0609      	lsls	r1, r1, #24
    5964:	4301      	orrs	r1, r0
    5966:	00db      	lsls	r3, r3, #3
    5968:	185b      	adds	r3, r3, r1
    596a:	789b      	ldrb	r3, [r3, #2]
    596c:	7013      	strb	r3, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    596e:	2008      	movs	r0, #8
	return result;
    5970:	e7ed      	b.n	594e <LORAREG_GetAttr_MaxPayloadT2+0xe>
    5972:	46c0      	nop			; (mov r8, r8)
    5974:	20000b48 	.word	0x20000b48

00005978 <LORAREG_GetAttr_ModulationAttrT2>:
{
    5978:	b510      	push	{r4, lr}
	dataRate = *(uint8_t *)attrInput;
    597a:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    597c:	490b      	ldr	r1, [pc, #44]	; (59ac <LORAREG_GetAttr_ModulationAttrT2+0x34>)
    597e:	7f09      	ldrb	r1, [r1, #28]
		result = LORAWAN_INVALID_PARAMETER;
    5980:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    5982:	4299      	cmp	r1, r3
    5984:	d200      	bcs.n	5988 <LORAREG_GetAttr_ModulationAttrT2+0x10>
}
    5986:	bd10      	pop	{r4, pc}
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].modulation;
    5988:	4c08      	ldr	r4, [pc, #32]	; (59ac <LORAREG_GetAttr_ModulationAttrT2+0x34>)
    598a:	7821      	ldrb	r1, [r4, #0]
    598c:	7860      	ldrb	r0, [r4, #1]
    598e:	0200      	lsls	r0, r0, #8
    5990:	4308      	orrs	r0, r1
    5992:	78a1      	ldrb	r1, [r4, #2]
    5994:	0409      	lsls	r1, r1, #16
    5996:	4308      	orrs	r0, r1
    5998:	78e1      	ldrb	r1, [r4, #3]
    599a:	0609      	lsls	r1, r1, #24
    599c:	4301      	orrs	r1, r0
    599e:	00db      	lsls	r3, r3, #3
    59a0:	185b      	adds	r3, r3, r1
    59a2:	79db      	ldrb	r3, [r3, #7]
    59a4:	7013      	strb	r3, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    59a6:	2008      	movs	r0, #8
	return result;
    59a8:	e7ed      	b.n	5986 <LORAREG_GetAttr_ModulationAttrT2+0xe>
    59aa:	46c0      	nop			; (mov r8, r8)
    59ac:	20000b48 	.word	0x20000b48

000059b0 <LORAREG_GetAttr_BandwidthAttrT2>:
{
    59b0:	b510      	push	{r4, lr}
	dataRate = *(uint8_t *)attrInput;
    59b2:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    59b4:	490b      	ldr	r1, [pc, #44]	; (59e4 <LORAREG_GetAttr_BandwidthAttrT2+0x34>)
    59b6:	7f09      	ldrb	r1, [r1, #28]
		result = LORAWAN_INVALID_PARAMETER;
    59b8:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    59ba:	4299      	cmp	r1, r3
    59bc:	d200      	bcs.n	59c0 <LORAREG_GetAttr_BandwidthAttrT2+0x10>
}
    59be:	bd10      	pop	{r4, pc}
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].bandwidth;
    59c0:	4c08      	ldr	r4, [pc, #32]	; (59e4 <LORAREG_GetAttr_BandwidthAttrT2+0x34>)
    59c2:	7821      	ldrb	r1, [r4, #0]
    59c4:	7860      	ldrb	r0, [r4, #1]
    59c6:	0200      	lsls	r0, r0, #8
    59c8:	4308      	orrs	r0, r1
    59ca:	78a1      	ldrb	r1, [r4, #2]
    59cc:	0409      	lsls	r1, r1, #16
    59ce:	4308      	orrs	r0, r1
    59d0:	78e1      	ldrb	r1, [r4, #3]
    59d2:	0609      	lsls	r1, r1, #24
    59d4:	4301      	orrs	r1, r0
    59d6:	00db      	lsls	r3, r3, #3
    59d8:	185b      	adds	r3, r3, r1
    59da:	799b      	ldrb	r3, [r3, #6]
    59dc:	7013      	strb	r3, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    59de:	2008      	movs	r0, #8
	return result;
    59e0:	e7ed      	b.n	59be <LORAREG_GetAttr_BandwidthAttrT2+0xe>
    59e2:	46c0      	nop			; (mov r8, r8)
    59e4:	20000b48 	.word	0x20000b48

000059e8 <LORAREG_GetAttr_SpreadFactorT2>:
{
    59e8:	b510      	push	{r4, lr}
	dataRate = *(uint8_t *)attrInput;
    59ea:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    59ec:	490b      	ldr	r1, [pc, #44]	; (5a1c <LORAREG_GetAttr_SpreadFactorT2+0x34>)
    59ee:	7f09      	ldrb	r1, [r1, #28]
		result =  LORAWAN_INVALID_PARAMETER;
    59f0:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    59f2:	4299      	cmp	r1, r3
    59f4:	d200      	bcs.n	59f8 <LORAREG_GetAttr_SpreadFactorT2+0x10>
}
    59f6:	bd10      	pop	{r4, pc}
		*(RadioDataRate_t *)attrOutput = RegParams.pDrParams[dataRate].spreadingFactor;
    59f8:	4c08      	ldr	r4, [pc, #32]	; (5a1c <LORAREG_GetAttr_SpreadFactorT2+0x34>)
    59fa:	7821      	ldrb	r1, [r4, #0]
    59fc:	7860      	ldrb	r0, [r4, #1]
    59fe:	0200      	lsls	r0, r0, #8
    5a00:	4308      	orrs	r0, r1
    5a02:	78a1      	ldrb	r1, [r4, #2]
    5a04:	0409      	lsls	r1, r1, #16
    5a06:	4308      	orrs	r0, r1
    5a08:	78e1      	ldrb	r1, [r4, #3]
    5a0a:	0609      	lsls	r1, r1, #24
    5a0c:	4301      	orrs	r1, r0
    5a0e:	00db      	lsls	r3, r3, #3
    5a10:	185b      	adds	r3, r3, r1
    5a12:	795b      	ldrb	r3, [r3, #5]
    5a14:	7013      	strb	r3, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    5a16:	2008      	movs	r0, #8
	return result;
    5a18:	e7ed      	b.n	59f6 <LORAREG_GetAttr_SpreadFactorT2+0xe>
    5a1a:	46c0      	nop			; (mov r8, r8)
    5a1c:	20000b48 	.word	0x20000b48

00005a20 <ValidateChMaskChCntl>:
{
    5a20:	b500      	push	{lr}
    5a22:	b083      	sub	sp, #12
	ValChMaskCntl_t chMaskchCntl = * (ValChMaskCntl_t *)attrInput;
    5a24:	2204      	movs	r2, #4
    5a26:	a801      	add	r0, sp, #4
    5a28:	4b05      	ldr	r3, [pc, #20]	; (5a40 <ValidateChMaskChCntl+0x20>)
    5a2a:	4798      	blx	r3
	result = ((ValidateChannelMask(CHANNEL_MASK, (void *)&chMaskchCntl.chnlMask)) | (ValidateChannelMaskCntl(CHANNEL_MASK_CNTL,  (void *)&chMaskchCntl.chnlMaskCntl)));		
    5a2c:	a901      	add	r1, sp, #4
    5a2e:	201b      	movs	r0, #27
    5a30:	4b04      	ldr	r3, [pc, #16]	; (5a44 <ValidateChMaskChCntl+0x24>)
    5a32:	4798      	blx	r3
    5a34:	2308      	movs	r3, #8
    5a36:	4318      	orrs	r0, r3
    return result;
    5a38:	b2c0      	uxtb	r0, r0
}
    5a3a:	b003      	add	sp, #12
    5a3c:	bd00      	pop	{pc}
    5a3e:	46c0      	nop			; (mov r8, r8)
    5a40:	000112d5 	.word	0x000112d5
    5a44:	000038c1 	.word	0x000038c1

00005a48 <LORAREG_GetAttr_NewTxChConfigT2>:
{
    5a48:	b5f0      	push	{r4, r5, r6, r7, lr}
    5a4a:	b083      	sub	sp, #12
    5a4c:	0015      	movs	r5, r2
	memcpy(&newTxChannelReq,(NewTxChannelReq_t *)attrInput,sizeof(NewTxChannelReq_t));
    5a4e:	788c      	ldrb	r4, [r1, #2]
    if ( dataRate > RegParams.minDataRate )
    5a50:	4b2e      	ldr	r3, [pc, #184]	; (5b0c <LORAREG_GetAttr_NewTxChConfigT2+0xc4>)
    5a52:	7f1b      	ldrb	r3, [r3, #28]
		result = LORAWAN_INVALID_PARAMETER;
    5a54:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    5a56:	42a3      	cmp	r3, r4
    5a58:	d205      	bcs.n	5a66 <LORAREG_GetAttr_NewTxChConfigT2+0x1e>
}
    5a5a:	b003      	add	sp, #12
    5a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(((((1 << RegParams.band) & (ISM_ASBAND)) || ((1 << RegParams.band) & (1 << ISM_JPN923))) != 0) && (transmissionType == 0))
    5a5e:	2900      	cmp	r1, #0
    5a60:	d10f      	bne.n	5a82 <LORAREG_GetAttr_NewTxChConfigT2+0x3a>
		currDr = DR2;
    5a62:	2402      	movs	r4, #2
    5a64:	e00d      	b.n	5a82 <LORAREG_GetAttr_NewTxChConfigT2+0x3a>
	memcpy(&newTxChannelReq,(NewTxChannelReq_t *)attrInput,sizeof(NewTxChannelReq_t));
    5a66:	784e      	ldrb	r6, [r1, #1]
	if (txPowerNew > RegParams.maxTxPwrIndx)
    5a68:	2325      	movs	r3, #37	; 0x25
    5a6a:	4a28      	ldr	r2, [pc, #160]	; (5b0c <LORAREG_GetAttr_NewTxChConfigT2+0xc4>)
    5a6c:	56d3      	ldrsb	r3, [r2, r3]
		result = LORAWAN_INVALID_PARAMETER;
    5a6e:	200a      	movs	r0, #10
	if (txPowerNew > RegParams.maxTxPwrIndx)
    5a70:	429e      	cmp	r6, r3
    5a72:	dcf2      	bgt.n	5a5a <LORAREG_GetAttr_NewTxChConfigT2+0x12>
		result = GetTxChannelConfig2(newTxChannelReq.transmissionType,newTxChannelReq.txPwr,newTxChannelReq.currDr,(radioConfig_t*)attrOutput);
    5a74:	7809      	ldrb	r1, [r1, #0]
	if(((((1 << RegParams.band) & (ISM_ASBAND)) || ((1 << RegParams.band) & (1 << ISM_JPN923))) != 0) && (transmissionType == 0))
    5a76:	2326      	movs	r3, #38	; 0x26
    5a78:	5cd2      	ldrb	r2, [r2, r3]
    5a7a:	4b25      	ldr	r3, [pc, #148]	; (5b10 <LORAREG_GetAttr_NewTxChConfigT2+0xc8>)
    5a7c:	4113      	asrs	r3, r2
    5a7e:	07db      	lsls	r3, r3, #31
    5a80:	d4ed      	bmi.n	5a5e <LORAREG_GetAttr_NewTxChConfigT2+0x16>
	result = SearchAvailableChannel2 (RegParams.maxChannels, transmissionType,currDr, &channelIndex);
    5a82:	2322      	movs	r3, #34	; 0x22
    5a84:	4a21      	ldr	r2, [pc, #132]	; (5b0c <LORAREG_GetAttr_NewTxChConfigT2+0xc4>)
    5a86:	5cd0      	ldrb	r0, [r2, r3]
    5a88:	466b      	mov	r3, sp
    5a8a:	3307      	adds	r3, #7
    5a8c:	0022      	movs	r2, r4
    5a8e:	4f21      	ldr	r7, [pc, #132]	; (5b14 <LORAREG_GetAttr_NewTxChConfigT2+0xcc>)
    5a90:	47b8      	blx	r7
	if (result == LORAWAN_SUCCESS)
    5a92:	2808      	cmp	r0, #8
    5a94:	d1e1      	bne.n	5a5a <LORAREG_GetAttr_NewTxChConfigT2+0x12>
		RegParams.lastUsedChannelIndex = channelIndex;
    5a96:	466b      	mov	r3, sp
    5a98:	79df      	ldrb	r7, [r3, #7]
    5a9a:	4b1c      	ldr	r3, [pc, #112]	; (5b0c <LORAREG_GetAttr_NewTxChConfigT2+0xc4>)
    5a9c:	2227      	movs	r2, #39	; 0x27
    5a9e:	549f      	strb	r7, [r3, r2]
		radioConfig->frequency = RegParams.pOtherChParams[channelIndex].ulfrequency;
    5aa0:	7a19      	ldrb	r1, [r3, #8]
    5aa2:	7a5a      	ldrb	r2, [r3, #9]
    5aa4:	0212      	lsls	r2, r2, #8
    5aa6:	430a      	orrs	r2, r1
    5aa8:	7a99      	ldrb	r1, [r3, #10]
    5aaa:	0409      	lsls	r1, r1, #16
    5aac:	430a      	orrs	r2, r1
    5aae:	7ad9      	ldrb	r1, [r3, #11]
    5ab0:	0609      	lsls	r1, r1, #24
    5ab2:	4311      	orrs	r1, r2
    5ab4:	007a      	lsls	r2, r7, #1
    5ab6:	19d2      	adds	r2, r2, r7
    5ab8:	0092      	lsls	r2, r2, #2
    5aba:	5c57      	ldrb	r7, [r2, r1]
    5abc:	1852      	adds	r2, r2, r1
    5abe:	7851      	ldrb	r1, [r2, #1]
    5ac0:	0209      	lsls	r1, r1, #8
    5ac2:	430f      	orrs	r7, r1
    5ac4:	7891      	ldrb	r1, [r2, #2]
    5ac6:	0409      	lsls	r1, r1, #16
    5ac8:	4339      	orrs	r1, r7
    5aca:	78d2      	ldrb	r2, [r2, #3]
    5acc:	0612      	lsls	r2, r2, #24
    5ace:	430a      	orrs	r2, r1
    5ad0:	602a      	str	r2, [r5, #0]
		radioConfig->txPower = RegParams.maxTxPwr - 2 *txPwrIndx;
    5ad2:	0076      	lsls	r6, r6, #1
    5ad4:	2220      	movs	r2, #32
    5ad6:	5c9a      	ldrb	r2, [r3, r2]
    5ad8:	1b96      	subs	r6, r2, r6
    5ada:	722e      	strb	r6, [r5, #8]
		radioConfig->freq_hop_period = DISABLED ;
    5adc:	2200      	movs	r2, #0
    5ade:	80aa      	strh	r2, [r5, #4]
		radioConfig->modulation = RegParams.pDrParams[currDr].modulation;
    5ae0:	7819      	ldrb	r1, [r3, #0]
    5ae2:	785a      	ldrb	r2, [r3, #1]
    5ae4:	0212      	lsls	r2, r2, #8
    5ae6:	4311      	orrs	r1, r2
    5ae8:	789a      	ldrb	r2, [r3, #2]
    5aea:	0412      	lsls	r2, r2, #16
    5aec:	430a      	orrs	r2, r1
    5aee:	78db      	ldrb	r3, [r3, #3]
    5af0:	061b      	lsls	r3, r3, #24
    5af2:	4313      	orrs	r3, r2
    5af4:	00e4      	lsls	r4, r4, #3
    5af6:	191c      	adds	r4, r3, r4
    5af8:	79e3      	ldrb	r3, [r4, #7]
    5afa:	726b      	strb	r3, [r5, #9]
		radioConfig->bandwidth = RegParams.pDrParams[currDr].bandwidth;
    5afc:	79a3      	ldrb	r3, [r4, #6]
    5afe:	72ab      	strb	r3, [r5, #10]
		radioConfig->sf = RegParams.pDrParams[currDr].spreadingFactor;
    5b00:	7963      	ldrb	r3, [r4, #5]
    5b02:	72eb      	strb	r3, [r5, #11]
		radioConfig->ecrConfig.override = false;
    5b04:	2300      	movs	r3, #0
    5b06:	71eb      	strb	r3, [r5, #7]
    5b08:	e7a7      	b.n	5a5a <LORAREG_GetAttr_NewTxChConfigT2+0x12>
    5b0a:	46c0      	nop			; (mov r8, r8)
    5b0c:	20000b48 	.word	0x20000b48
    5b10:	00007fe0 	.word	0x00007fe0
    5b14:	00003cc5 	.word	0x00003cc5

00005b18 <setChannelIdStatus>:
{
    5b18:	b510      	push	{r4, lr}
    uint8_t channelId = *(uint8_t *)attrInput;
    5b1a:	7808      	ldrb	r0, [r1, #0]
    if (channelId >= RegParams.maxChannels)
    5b1c:	2322      	movs	r3, #34	; 0x22
    5b1e:	4a05      	ldr	r2, [pc, #20]	; (5b34 <setChannelIdStatus+0x1c>)
    5b20:	56d3      	ldrsb	r3, [r2, r3]
    5b22:	4298      	cmp	r0, r3
    5b24:	db01      	blt.n	5b2a <setChannelIdStatus+0x12>
		retVal = LORAWAN_INVALID_PARAMETER;
    5b26:	200a      	movs	r0, #10
}
    5b28:	bd10      	pop	{r4, pc}
		UpdateChannelIdStatus(updateChid.channelIndex,updateChid.statusNew);
    5b2a:	7849      	ldrb	r1, [r1, #1]
    5b2c:	4b02      	ldr	r3, [pc, #8]	; (5b38 <setChannelIdStatus+0x20>)
    5b2e:	4798      	blx	r3
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    5b30:	2008      	movs	r0, #8
	return retVal;
    5b32:	e7f9      	b.n	5b28 <setChannelIdStatus+0x10>
    5b34:	20000b48 	.word	0x20000b48
    5b38:	00003e79 	.word	0x00003e79

00005b3c <ValidateDataRange>:
{
    5b3c:	b530      	push	{r4, r5, lr}
	uint8_t maxTxDR = RegParams.cmnParams.paramsType1.maxTxDR;
    5b3e:	233a      	movs	r3, #58	; 0x3a
    5b40:	33ff      	adds	r3, #255	; 0xff
    5b42:	4a17      	ldr	r2, [pc, #92]	; (5ba0 <ValidateDataRange+0x64>)
    5b44:	5cd3      	ldrb	r3, [r2, r3]
	memcpy(&val_drange,attrInput,sizeof(ValUpdateDrange_t));
    5b46:	784a      	ldrb	r2, [r1, #1]
	dataRateMax = (val_drange.dataRangeNew & FIRST_NIBBLE) >> SHIFT4;
    5b48:	0914      	lsrs	r4, r2, #4
	    retVal = LORAWAN_INVALID_PARAMETER;	   
    5b4a:	200a      	movs	r0, #10
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    5b4c:	42a3      	cmp	r3, r4
    5b4e:	d213      	bcs.n	5b78 <ValidateDataRange+0x3c>
}
    5b50:	bd30      	pop	{r4, r5, pc}
	   ((chId >= RegParams.cmnParams.paramsType1.Max_125khzChan) && (chId < RegParams.maxChannels) && (dataRateMin != maxTxDR)) ||
    5b52:	2022      	movs	r0, #34	; 0x22
    5b54:	4d12      	ldr	r5, [pc, #72]	; (5ba0 <ValidateDataRange+0x64>)
    5b56:	562d      	ldrsb	r5, [r5, r0]
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    5b58:	381a      	subs	r0, #26
	   ((chId >= RegParams.cmnParams.paramsType1.Max_125khzChan) && (chId < RegParams.maxChannels) && (dataRateMin != maxTxDR)) ||
    5b5a:	42a9      	cmp	r1, r5
    5b5c:	daf8      	bge.n	5b50 <ValidateDataRange+0x14>
	    retVal = LORAWAN_INVALID_PARAMETER;	   
    5b5e:	3002      	adds	r0, #2
	   ((chId >= RegParams.cmnParams.paramsType1.Max_125khzChan) && (chId < RegParams.maxChannels) && (dataRateMin != maxTxDR)) ||
    5b60:	4293      	cmp	r3, r2
    5b62:	d1f5      	bne.n	5b50 <ValidateDataRange+0x14>
	   ((chId >= RegParams.cmnParams.paramsType1.Max_125khzChan) && (chId < RegParams.maxChannels) && (dataRateMax != maxTxDR)))
    5b64:	42a3      	cmp	r3, r4
    5b66:	d005      	beq.n	5b74 <ValidateDataRange+0x38>
	    retVal = LORAWAN_INVALID_PARAMETER;	   
    5b68:	200a      	movs	r0, #10
	return retVal;
    5b6a:	e7f1      	b.n	5b50 <ValidateDataRange+0x14>
	    retVal = LORAWAN_INVALID_PARAMETER;	   
    5b6c:	200a      	movs	r0, #10
    5b6e:	e7ef      	b.n	5b50 <ValidateDataRange+0x14>
    5b70:	200a      	movs	r0, #10
    5b72:	e7ed      	b.n	5b50 <ValidateDataRange+0x14>
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    5b74:	2008      	movs	r0, #8
    5b76:	e7eb      	b.n	5b50 <ValidateDataRange+0x14>
	dataRateMin = val_drange.dataRangeNew & LAST_NIBBLE;
    5b78:	200f      	movs	r0, #15
    5b7a:	4002      	ands	r2, r0
	    retVal = LORAWAN_INVALID_PARAMETER;	   
    5b7c:	3805      	subs	r0, #5
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    5b7e:	4293      	cmp	r3, r2
    5b80:	d3e6      	bcc.n	5b50 <ValidateDataRange+0x14>
	if((ValidateDataRateTxT1(TX_DATARATE, (void *)&dataRateMax) != LORAWAN_SUCCESS ) || (ValidateDataRateTxT1(TX_DATARATE, (void *)&dataRateMin) != LORAWAN_SUCCESS ) || dataRateMax < dataRateMin || 
    5b82:	42a2      	cmp	r2, r4
    5b84:	d8e4      	bhi.n	5b50 <ValidateDataRange+0x14>
	memcpy(&val_drange,attrInput,sizeof(ValUpdateDrange_t));
    5b86:	7809      	ldrb	r1, [r1, #0]
	   ((chId < RegParams.cmnParams.paramsType1.Max_125khzChan) && ((dataRateMin == maxTxDR) || (dataRateMax == maxTxDR))) || 
    5b88:	209e      	movs	r0, #158	; 0x9e
    5b8a:	0040      	lsls	r0, r0, #1
	if((ValidateDataRateTxT1(TX_DATARATE, (void *)&dataRateMax) != LORAWAN_SUCCESS ) || (ValidateDataRateTxT1(TX_DATARATE, (void *)&dataRateMin) != LORAWAN_SUCCESS ) || dataRateMax < dataRateMin || 
    5b8c:	4d04      	ldr	r5, [pc, #16]	; (5ba0 <ValidateDataRange+0x64>)
    5b8e:	5c28      	ldrb	r0, [r5, r0]
    5b90:	4288      	cmp	r0, r1
    5b92:	d9de      	bls.n	5b52 <ValidateDataRange+0x16>
	   ((chId < RegParams.cmnParams.paramsType1.Max_125khzChan) && ((dataRateMin == maxTxDR) || (dataRateMax == maxTxDR))) || 
    5b94:	4293      	cmp	r3, r2
    5b96:	d0e9      	beq.n	5b6c <ValidateDataRange+0x30>
    5b98:	42a3      	cmp	r3, r4
    5b9a:	d0e9      	beq.n	5b70 <ValidateDataRange+0x34>
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    5b9c:	2008      	movs	r0, #8
    5b9e:	e7d7      	b.n	5b50 <ValidateDataRange+0x14>
    5ba0:	20000b48 	.word	0x20000b48

00005ba4 <setDataRange>:
{
    5ba4:	b570      	push	{r4, r5, r6, lr}
    5ba6:	000d      	movs	r5, r1
	if((ValidateDataRange(DATA_RANGE, attrInput) != LORAWAN_SUCCESS) || (ValidateChannelId(CHANNEL_ID, &update_dr.channelIndex) != LORAWAN_SUCCESS))
    5ba8:	2012      	movs	r0, #18
    5baa:	4b16      	ldr	r3, [pc, #88]	; (5c04 <setDataRange+0x60>)
    5bac:	4798      	blx	r3
    5bae:	0004      	movs	r4, r0
    5bb0:	2808      	cmp	r0, #8
    5bb2:	d002      	beq.n	5bba <setDataRange+0x16>
		retVal = LORAWAN_INVALID_PARAMETER;
    5bb4:	240a      	movs	r4, #10
}
    5bb6:	0020      	movs	r0, r4
    5bb8:	bd70      	pop	{r4, r5, r6, pc}
	memcpy((void *)&update_dr,attrInput,sizeof(ValUpdateDrange_t));
    5bba:	782b      	ldrb	r3, [r5, #0]
    if (channelId >= RegParams.maxChannels)
    5bbc:	2222      	movs	r2, #34	; 0x22
    5bbe:	4912      	ldr	r1, [pc, #72]	; (5c08 <setDataRange+0x64>)
    5bc0:	568a      	ldrsb	r2, [r1, r2]
    5bc2:	4293      	cmp	r3, r2
    5bc4:	db01      	blt.n	5bca <setDataRange+0x26>
		retVal = LORAWAN_INVALID_PARAMETER;
    5bc6:	3402      	adds	r4, #2
    5bc8:	e7f5      	b.n	5bb6 <setDataRange+0x12>
	memcpy((void *)&update_dr,attrInput,sizeof(ValUpdateDrange_t));
    5bca:	786d      	ldrb	r5, [r5, #1]
		RegParams.pChParams[update_dr.channelIndex].dataRange.value = update_dr.dataRangeNew;
    5bcc:	4a0e      	ldr	r2, [pc, #56]	; (5c08 <setDataRange+0x64>)
    5bce:	7911      	ldrb	r1, [r2, #4]
    5bd0:	7950      	ldrb	r0, [r2, #5]
    5bd2:	0200      	lsls	r0, r0, #8
    5bd4:	4308      	orrs	r0, r1
    5bd6:	7991      	ldrb	r1, [r2, #6]
    5bd8:	0409      	lsls	r1, r1, #16
    5bda:	4308      	orrs	r0, r1
    5bdc:	79d1      	ldrb	r1, [r2, #7]
    5bde:	0609      	lsls	r1, r1, #24
    5be0:	4301      	orrs	r1, r0
    5be2:	005b      	lsls	r3, r3, #1
    5be4:	185b      	adds	r3, r3, r1
    5be6:	705d      	strb	r5, [r3, #1]
		PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    5be8:	23f8      	movs	r3, #248	; 0xf8
    5bea:	33ff      	adds	r3, #255	; 0xff
    5bec:	5cd3      	ldrb	r3, [r2, r3]
    5bee:	21fc      	movs	r1, #252	; 0xfc
    5bf0:	0049      	lsls	r1, r1, #1
    5bf2:	5c50      	ldrb	r0, [r2, r1]
    5bf4:	0200      	lsls	r0, r0, #8
    5bf6:	4318      	orrs	r0, r3
    5bf8:	b2c1      	uxtb	r1, r0
    5bfa:	0a00      	lsrs	r0, r0, #8
    5bfc:	4b03      	ldr	r3, [pc, #12]	; (5c0c <setDataRange+0x68>)
    5bfe:	4798      	blx	r3
	return retVal;
    5c00:	e7d9      	b.n	5bb6 <setDataRange+0x12>
    5c02:	46c0      	nop			; (mov r8, r8)
    5c04:	00005b3d 	.word	0x00005b3d
    5c08:	20000b48 	.word	0x20000b48
    5c0c:	00001e65 	.word	0x00001e65

00005c10 <LORAREG_GetAttr_RxWindowSizeT1>:
{
    5c10:	b570      	push	{r4, r5, r6, lr}
    5c12:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    5c14:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    5c16:	233a      	movs	r3, #58	; 0x3a
    5c18:	33ff      	adds	r3, #255	; 0xff
    5c1a:	4a0f      	ldr	r2, [pc, #60]	; (5c58 <LORAREG_GetAttr_RxWindowSizeT1+0x48>)
    5c1c:	5cd3      	ldrb	r3, [r2, r3]
    5c1e:	42a3      	cmp	r3, r4
    5c20:	d205      	bcs.n	5c2e <LORAREG_GetAttr_RxWindowSizeT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    5c22:	200f      	movs	r0, #15
    5c24:	4b0d      	ldr	r3, [pc, #52]	; (5c5c <LORAREG_GetAttr_RxWindowSizeT1+0x4c>)
    5c26:	4798      	blx	r3
		return LORAWAN_INVALID_PARAMETER;
    5c28:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    5c2a:	2808      	cmp	r0, #8
    5c2c:	d112      	bne.n	5c54 <LORAREG_GetAttr_RxWindowSizeT1+0x44>
	    *(uint16_t *)attrOutput = RegParams.pDrParams[dataRate].rxWindowSize;	
    5c2e:	490a      	ldr	r1, [pc, #40]	; (5c58 <LORAREG_GetAttr_RxWindowSizeT1+0x48>)
    5c30:	780b      	ldrb	r3, [r1, #0]
    5c32:	784a      	ldrb	r2, [r1, #1]
    5c34:	0212      	lsls	r2, r2, #8
    5c36:	431a      	orrs	r2, r3
    5c38:	788b      	ldrb	r3, [r1, #2]
    5c3a:	041b      	lsls	r3, r3, #16
    5c3c:	431a      	orrs	r2, r3
    5c3e:	78cb      	ldrb	r3, [r1, #3]
    5c40:	061b      	lsls	r3, r3, #24
    5c42:	4313      	orrs	r3, r2
    5c44:	00e4      	lsls	r4, r4, #3
    5c46:	5ce2      	ldrb	r2, [r4, r3]
    5c48:	18e4      	adds	r4, r4, r3
    5c4a:	7863      	ldrb	r3, [r4, #1]
    5c4c:	021b      	lsls	r3, r3, #8
    5c4e:	4313      	orrs	r3, r2
    5c50:	802b      	strh	r3, [r5, #0]
	return result;
    5c52:	2308      	movs	r3, #8
}
    5c54:	0018      	movs	r0, r3
    5c56:	bd70      	pop	{r4, r5, r6, pc}
    5c58:	20000b48 	.word	0x20000b48
    5c5c:	00003775 	.word	0x00003775

00005c60 <LORAREG_GetAttr_RxWindowOffsetT1>:
{
    5c60:	b570      	push	{r4, r5, r6, lr}
    5c62:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    5c64:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    5c66:	233a      	movs	r3, #58	; 0x3a
    5c68:	33ff      	adds	r3, #255	; 0xff
    5c6a:	4a0e      	ldr	r2, [pc, #56]	; (5ca4 <LORAREG_GetAttr_RxWindowOffsetT1+0x44>)
    5c6c:	5cd3      	ldrb	r3, [r2, r3]
    5c6e:	42a3      	cmp	r3, r4
    5c70:	d205      	bcs.n	5c7e <LORAREG_GetAttr_RxWindowOffsetT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    5c72:	200f      	movs	r0, #15
    5c74:	4b0c      	ldr	r3, [pc, #48]	; (5ca8 <LORAREG_GetAttr_RxWindowOffsetT1+0x48>)
    5c76:	4798      	blx	r3
		return LORAWAN_INVALID_PARAMETER;
    5c78:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    5c7a:	2808      	cmp	r0, #8
    5c7c:	d110      	bne.n	5ca0 <LORAREG_GetAttr_RxWindowOffsetT1+0x40>
		*(int8_t *)attrOutput = RegParams.pDrParams[dataRate].rxWindowOffset;
    5c7e:	4909      	ldr	r1, [pc, #36]	; (5ca4 <LORAREG_GetAttr_RxWindowOffsetT1+0x44>)
    5c80:	780b      	ldrb	r3, [r1, #0]
    5c82:	784a      	ldrb	r2, [r1, #1]
    5c84:	0212      	lsls	r2, r2, #8
    5c86:	431a      	orrs	r2, r3
    5c88:	788b      	ldrb	r3, [r1, #2]
    5c8a:	041b      	lsls	r3, r3, #16
    5c8c:	431a      	orrs	r2, r3
    5c8e:	78cb      	ldrb	r3, [r1, #3]
    5c90:	061b      	lsls	r3, r3, #24
    5c92:	4313      	orrs	r3, r2
    5c94:	00e4      	lsls	r4, r4, #3
    5c96:	18e3      	adds	r3, r4, r3
    5c98:	791b      	ldrb	r3, [r3, #4]
    5c9a:	b25b      	sxtb	r3, r3
    5c9c:	702b      	strb	r3, [r5, #0]
	return result;
    5c9e:	2308      	movs	r3, #8
}
    5ca0:	0018      	movs	r0, r3
    5ca2:	bd70      	pop	{r4, r5, r6, pc}
    5ca4:	20000b48 	.word	0x20000b48
    5ca8:	00003775 	.word	0x00003775

00005cac <LORAREG_GetAttr_MaxPayloadT1>:
{
    5cac:	b570      	push	{r4, r5, r6, lr}
    5cae:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    5cb0:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    5cb2:	233a      	movs	r3, #58	; 0x3a
    5cb4:	33ff      	adds	r3, #255	; 0xff
    5cb6:	4a0e      	ldr	r2, [pc, #56]	; (5cf0 <LORAREG_GetAttr_MaxPayloadT1+0x44>)
    5cb8:	5cd3      	ldrb	r3, [r2, r3]
    5cba:	42a3      	cmp	r3, r4
    5cbc:	d205      	bcs.n	5cca <LORAREG_GetAttr_MaxPayloadT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    5cbe:	200f      	movs	r0, #15
    5cc0:	4b0c      	ldr	r3, [pc, #48]	; (5cf4 <LORAREG_GetAttr_MaxPayloadT1+0x48>)
    5cc2:	4798      	blx	r3
		result =  LORAWAN_INVALID_PARAMETER;
    5cc4:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    5cc6:	2808      	cmp	r0, #8
    5cc8:	d10f      	bne.n	5cea <LORAREG_GetAttr_MaxPayloadT1+0x3e>
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].maxPayloadSizeDt0;
    5cca:	4909      	ldr	r1, [pc, #36]	; (5cf0 <LORAREG_GetAttr_MaxPayloadT1+0x44>)
    5ccc:	780b      	ldrb	r3, [r1, #0]
    5cce:	784a      	ldrb	r2, [r1, #1]
    5cd0:	0212      	lsls	r2, r2, #8
    5cd2:	431a      	orrs	r2, r3
    5cd4:	788b      	ldrb	r3, [r1, #2]
    5cd6:	041b      	lsls	r3, r3, #16
    5cd8:	431a      	orrs	r2, r3
    5cda:	78cb      	ldrb	r3, [r1, #3]
    5cdc:	061b      	lsls	r3, r3, #24
    5cde:	4313      	orrs	r3, r2
    5ce0:	00e4      	lsls	r4, r4, #3
    5ce2:	18e3      	adds	r3, r4, r3
    5ce4:	789b      	ldrb	r3, [r3, #2]
    5ce6:	702b      	strb	r3, [r5, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    5ce8:	2308      	movs	r3, #8
}
    5cea:	0018      	movs	r0, r3
    5cec:	bd70      	pop	{r4, r5, r6, pc}
    5cee:	46c0      	nop			; (mov r8, r8)
    5cf0:	20000b48 	.word	0x20000b48
    5cf4:	00003775 	.word	0x00003775

00005cf8 <LORAREG_GetAttr_ModulationAttrT1>:
{
    5cf8:	b570      	push	{r4, r5, r6, lr}
    5cfa:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    5cfc:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    5cfe:	233a      	movs	r3, #58	; 0x3a
    5d00:	33ff      	adds	r3, #255	; 0xff
    5d02:	4a0e      	ldr	r2, [pc, #56]	; (5d3c <LORAREG_GetAttr_ModulationAttrT1+0x44>)
    5d04:	5cd3      	ldrb	r3, [r2, r3]
    5d06:	42a3      	cmp	r3, r4
    5d08:	d205      	bcs.n	5d16 <LORAREG_GetAttr_ModulationAttrT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    5d0a:	200f      	movs	r0, #15
    5d0c:	4b0c      	ldr	r3, [pc, #48]	; (5d40 <LORAREG_GetAttr_ModulationAttrT1+0x48>)
    5d0e:	4798      	blx	r3
		result = LORAWAN_INVALID_PARAMETER;
    5d10:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    5d12:	2808      	cmp	r0, #8
    5d14:	d10f      	bne.n	5d36 <LORAREG_GetAttr_ModulationAttrT1+0x3e>
	    *(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].modulation;
    5d16:	4909      	ldr	r1, [pc, #36]	; (5d3c <LORAREG_GetAttr_ModulationAttrT1+0x44>)
    5d18:	780b      	ldrb	r3, [r1, #0]
    5d1a:	784a      	ldrb	r2, [r1, #1]
    5d1c:	0212      	lsls	r2, r2, #8
    5d1e:	431a      	orrs	r2, r3
    5d20:	788b      	ldrb	r3, [r1, #2]
    5d22:	041b      	lsls	r3, r3, #16
    5d24:	431a      	orrs	r2, r3
    5d26:	78cb      	ldrb	r3, [r1, #3]
    5d28:	061b      	lsls	r3, r3, #24
    5d2a:	4313      	orrs	r3, r2
    5d2c:	00e4      	lsls	r4, r4, #3
    5d2e:	18e3      	adds	r3, r4, r3
    5d30:	79db      	ldrb	r3, [r3, #7]
    5d32:	702b      	strb	r3, [r5, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    5d34:	2308      	movs	r3, #8
}
    5d36:	0018      	movs	r0, r3
    5d38:	bd70      	pop	{r4, r5, r6, pc}
    5d3a:	46c0      	nop			; (mov r8, r8)
    5d3c:	20000b48 	.word	0x20000b48
    5d40:	00003775 	.word	0x00003775

00005d44 <LORAREG_GetAttr_BandwidthAttrT1>:
{
    5d44:	b570      	push	{r4, r5, r6, lr}
    5d46:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    5d48:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    5d4a:	233a      	movs	r3, #58	; 0x3a
    5d4c:	33ff      	adds	r3, #255	; 0xff
    5d4e:	4a0e      	ldr	r2, [pc, #56]	; (5d88 <LORAREG_GetAttr_BandwidthAttrT1+0x44>)
    5d50:	5cd3      	ldrb	r3, [r2, r3]
    5d52:	42a3      	cmp	r3, r4
    5d54:	d205      	bcs.n	5d62 <LORAREG_GetAttr_BandwidthAttrT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    5d56:	200f      	movs	r0, #15
    5d58:	4b0c      	ldr	r3, [pc, #48]	; (5d8c <LORAREG_GetAttr_BandwidthAttrT1+0x48>)
    5d5a:	4798      	blx	r3
		result = LORAWAN_INVALID_PARAMETER;
    5d5c:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    5d5e:	2808      	cmp	r0, #8
    5d60:	d10f      	bne.n	5d82 <LORAREG_GetAttr_BandwidthAttrT1+0x3e>
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].bandwidth;
    5d62:	4909      	ldr	r1, [pc, #36]	; (5d88 <LORAREG_GetAttr_BandwidthAttrT1+0x44>)
    5d64:	780b      	ldrb	r3, [r1, #0]
    5d66:	784a      	ldrb	r2, [r1, #1]
    5d68:	0212      	lsls	r2, r2, #8
    5d6a:	431a      	orrs	r2, r3
    5d6c:	788b      	ldrb	r3, [r1, #2]
    5d6e:	041b      	lsls	r3, r3, #16
    5d70:	431a      	orrs	r2, r3
    5d72:	78cb      	ldrb	r3, [r1, #3]
    5d74:	061b      	lsls	r3, r3, #24
    5d76:	4313      	orrs	r3, r2
    5d78:	00e4      	lsls	r4, r4, #3
    5d7a:	18e3      	adds	r3, r4, r3
    5d7c:	799b      	ldrb	r3, [r3, #6]
    5d7e:	702b      	strb	r3, [r5, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    5d80:	2308      	movs	r3, #8
}
    5d82:	0018      	movs	r0, r3
    5d84:	bd70      	pop	{r4, r5, r6, pc}
    5d86:	46c0      	nop			; (mov r8, r8)
    5d88:	20000b48 	.word	0x20000b48
    5d8c:	00003775 	.word	0x00003775

00005d90 <LORAREG_GetAttr_SpreadFactorT1>:
{
    5d90:	b570      	push	{r4, r5, r6, lr}
    5d92:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    5d94:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    5d96:	233a      	movs	r3, #58	; 0x3a
    5d98:	33ff      	adds	r3, #255	; 0xff
    5d9a:	4a0e      	ldr	r2, [pc, #56]	; (5dd4 <LORAREG_GetAttr_SpreadFactorT1+0x44>)
    5d9c:	5cd3      	ldrb	r3, [r2, r3]
    5d9e:	42a3      	cmp	r3, r4
    5da0:	d205      	bcs.n	5dae <LORAREG_GetAttr_SpreadFactorT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    5da2:	200f      	movs	r0, #15
    5da4:	4b0c      	ldr	r3, [pc, #48]	; (5dd8 <LORAREG_GetAttr_SpreadFactorT1+0x48>)
    5da6:	4798      	blx	r3
		result =  LORAWAN_INVALID_PARAMETER;
    5da8:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    5daa:	2808      	cmp	r0, #8
    5dac:	d10f      	bne.n	5dce <LORAREG_GetAttr_SpreadFactorT1+0x3e>
		*(RadioDataRate_t *)attrOutput = RegParams.pDrParams[dataRate].spreadingFactor;
    5dae:	4909      	ldr	r1, [pc, #36]	; (5dd4 <LORAREG_GetAttr_SpreadFactorT1+0x44>)
    5db0:	780b      	ldrb	r3, [r1, #0]
    5db2:	784a      	ldrb	r2, [r1, #1]
    5db4:	0212      	lsls	r2, r2, #8
    5db6:	431a      	orrs	r2, r3
    5db8:	788b      	ldrb	r3, [r1, #2]
    5dba:	041b      	lsls	r3, r3, #16
    5dbc:	431a      	orrs	r2, r3
    5dbe:	78cb      	ldrb	r3, [r1, #3]
    5dc0:	061b      	lsls	r3, r3, #24
    5dc2:	4313      	orrs	r3, r2
    5dc4:	00e4      	lsls	r4, r4, #3
    5dc6:	18e3      	adds	r3, r4, r3
    5dc8:	795b      	ldrb	r3, [r3, #5]
    5dca:	702b      	strb	r3, [r5, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    5dcc:	2308      	movs	r3, #8
}
    5dce:	0018      	movs	r0, r3
    5dd0:	bd70      	pop	{r4, r5, r6, pc}
    5dd2:	46c0      	nop			; (mov r8, r8)
    5dd4:	20000b48 	.word	0x20000b48
    5dd8:	00003775 	.word	0x00003775

00005ddc <ValidateTxFreqT1>:
{
    5ddc:	b530      	push	{r4, r5, lr}
    5dde:	b083      	sub	sp, #12
	memcpy(&val_freqTx,attrInput,sizeof(ValUpdateFreqTx_t));
    5de0:	2208      	movs	r2, #8
    5de2:	4668      	mov	r0, sp
    5de4:	4b20      	ldr	r3, [pc, #128]	; (5e68 <ValidateTxFreqT1+0x8c>)
    5de6:	4798      	blx	r3
	if(ChIndex > RegParams.maxChannels)
    5de8:	466b      	mov	r3, sp
    5dea:	7919      	ldrb	r1, [r3, #4]
    5dec:	2322      	movs	r3, #34	; 0x22
    5dee:	4a1f      	ldr	r2, [pc, #124]	; (5e6c <ValidateTxFreqT1+0x90>)
    5df0:	56d3      	ldrsb	r3, [r2, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    5df2:	2008      	movs	r0, #8
	if(ChIndex > RegParams.maxChannels)
    5df4:	4299      	cmp	r1, r3
    5df6:	dd00      	ble.n	5dfa <ValidateTxFreqT1+0x1e>
		result = LORAWAN_INVALID_PARAMETER;
    5df8:	3002      	adds	r0, #2
	if(val_freqTx.frequencyNew != GenerateFrequency1(ChIndex) && 
    5dfa:	9c00      	ldr	r4, [sp, #0]
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh0Freq + FREQ_200KHZ * channelIndex;
    5dfc:	4d1b      	ldr	r5, [pc, #108]	; (5e6c <ValidateTxFreqT1+0x90>)
    5dfe:	2396      	movs	r3, #150	; 0x96
    5e00:	005b      	lsls	r3, r3, #1
    5e02:	5ceb      	ldrb	r3, [r5, r3]
    5e04:	222e      	movs	r2, #46	; 0x2e
    5e06:	32ff      	adds	r2, #255	; 0xff
    5e08:	5caa      	ldrb	r2, [r5, r2]
    5e0a:	0212      	lsls	r2, r2, #8
    5e0c:	431a      	orrs	r2, r3
    5e0e:	2397      	movs	r3, #151	; 0x97
    5e10:	005b      	lsls	r3, r3, #1
    5e12:	5ceb      	ldrb	r3, [r5, r3]
    5e14:	041b      	lsls	r3, r3, #16
    5e16:	431a      	orrs	r2, r3
    5e18:	2330      	movs	r3, #48	; 0x30
    5e1a:	33ff      	adds	r3, #255	; 0xff
    5e1c:	5ceb      	ldrb	r3, [r5, r3]
    5e1e:	061b      	lsls	r3, r3, #24
    5e20:	4313      	orrs	r3, r2
    5e22:	4a13      	ldr	r2, [pc, #76]	; (5e70 <ValidateTxFreqT1+0x94>)
    5e24:	434a      	muls	r2, r1
    5e26:	189b      	adds	r3, r3, r2
	if(val_freqTx.frequencyNew != GenerateFrequency1(ChIndex) && 
    5e28:	429c      	cmp	r4, r3
    5e2a:	d01b      	beq.n	5e64 <ValidateTxFreqT1+0x88>
	                   FREQ_1600KHZ * (channelIndex - RegParams.cmnParams.paramsType1.Max_125khzChan);
    5e2c:	239e      	movs	r3, #158	; 0x9e
    5e2e:	005b      	lsls	r3, r3, #1
    5e30:	5ceb      	ldrb	r3, [r5, r3]
    5e32:	1ac9      	subs	r1, r1, r3
    5e34:	4b0f      	ldr	r3, [pc, #60]	; (5e74 <ValidateTxFreqT1+0x98>)
    5e36:	4359      	muls	r1, r3
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh64Freq + 
    5e38:	2398      	movs	r3, #152	; 0x98
    5e3a:	005b      	lsls	r3, r3, #1
    5e3c:	5ceb      	ldrb	r3, [r5, r3]
    5e3e:	2232      	movs	r2, #50	; 0x32
    5e40:	32ff      	adds	r2, #255	; 0xff
    5e42:	5caa      	ldrb	r2, [r5, r2]
    5e44:	0212      	lsls	r2, r2, #8
    5e46:	4313      	orrs	r3, r2
    5e48:	2299      	movs	r2, #153	; 0x99
    5e4a:	0052      	lsls	r2, r2, #1
    5e4c:	5caa      	ldrb	r2, [r5, r2]
    5e4e:	0412      	lsls	r2, r2, #16
    5e50:	431a      	orrs	r2, r3
    5e52:	2334      	movs	r3, #52	; 0x34
    5e54:	33ff      	adds	r3, #255	; 0xff
    5e56:	5ceb      	ldrb	r3, [r5, r3]
    5e58:	061b      	lsls	r3, r3, #24
    5e5a:	4313      	orrs	r3, r2
    5e5c:	18cb      	adds	r3, r1, r3
	if(val_freqTx.frequencyNew != GenerateFrequency1(ChIndex) && 
    5e5e:	429c      	cmp	r4, r3
    5e60:	d000      	beq.n	5e64 <ValidateTxFreqT1+0x88>
		result = LORAWAN_INVALID_PARAMETER;
    5e62:	200a      	movs	r0, #10
}
    5e64:	b003      	add	sp, #12
    5e66:	bd30      	pop	{r4, r5, pc}
    5e68:	000112d5 	.word	0x000112d5
    5e6c:	20000b48 	.word	0x20000b48
    5e70:	00030d40 	.word	0x00030d40
    5e74:	00186a00 	.word	0x00186a00

00005e78 <LORAREG_GetAttr_NewTxChConfigT1>:
{
    5e78:	b5f0      	push	{r4, r5, r6, r7, lr}
    5e7a:	46ce      	mov	lr, r9
    5e7c:	4647      	mov	r7, r8
    5e7e:	b580      	push	{r7, lr}
    5e80:	b083      	sub	sp, #12
    5e82:	0016      	movs	r6, r2
	memcpy(&newTxChannelReq,(NewTxChannelReq_t *)attrInput,sizeof(NewTxChannelReq_t));
    5e84:	788d      	ldrb	r5, [r1, #2]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    5e86:	233a      	movs	r3, #58	; 0x3a
    5e88:	33ff      	adds	r3, #255	; 0xff
    5e8a:	4a72      	ldr	r2, [pc, #456]	; (6054 <LORAREG_GetAttr_NewTxChConfigT1+0x1dc>)
    5e8c:	5cd3      	ldrb	r3, [r2, r3]
		result = LORAWAN_INVALID_PARAMETER;
    5e8e:	240a      	movs	r4, #10
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    5e90:	42ab      	cmp	r3, r5
    5e92:	d26d      	bcs.n	5f70 <LORAREG_GetAttr_NewTxChConfigT1+0xf8>
}
    5e94:	0020      	movs	r0, r4
    5e96:	b003      	add	sp, #12
    5e98:	bc0c      	pop	{r2, r3}
    5e9a:	4690      	mov	r8, r2
    5e9c:	4699      	mov	r9, r3
    5e9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		result = SearchAvailableChannel1 (RegParams.maxChannels, transmissionType,currDr, &channelIndex);
    5ea0:	4b6c      	ldr	r3, [pc, #432]	; (6054 <LORAREG_GetAttr_NewTxChConfigT1+0x1dc>)
    5ea2:	4699      	mov	r9, r3
    5ea4:	2322      	movs	r3, #34	; 0x22
    5ea6:	464a      	mov	r2, r9
    5ea8:	5cd0      	ldrb	r0, [r2, r3]
    5eaa:	466b      	mov	r3, sp
    5eac:	3307      	adds	r3, #7
    5eae:	002a      	movs	r2, r5
    5eb0:	2101      	movs	r1, #1
    5eb2:	4c69      	ldr	r4, [pc, #420]	; (6058 <LORAREG_GetAttr_NewTxChConfigT1+0x1e0>)
    5eb4:	47a0      	blx	r4
    5eb6:	0004      	movs	r4, r0
		radioConfig->sf = RegParams.pDrParams[currDr].spreadingFactor;
    5eb8:	464b      	mov	r3, r9
    5eba:	781b      	ldrb	r3, [r3, #0]
    5ebc:	464a      	mov	r2, r9
    5ebe:	7852      	ldrb	r2, [r2, #1]
    5ec0:	0212      	lsls	r2, r2, #8
    5ec2:	431a      	orrs	r2, r3
    5ec4:	464b      	mov	r3, r9
    5ec6:	789b      	ldrb	r3, [r3, #2]
    5ec8:	041b      	lsls	r3, r3, #16
    5eca:	431a      	orrs	r2, r3
    5ecc:	464b      	mov	r3, r9
    5ece:	78db      	ldrb	r3, [r3, #3]
    5ed0:	061b      	lsls	r3, r3, #24
    5ed2:	4313      	orrs	r3, r2
    5ed4:	00ed      	lsls	r5, r5, #3
    5ed6:	18eb      	adds	r3, r5, r3
    5ed8:	795b      	ldrb	r3, [r3, #5]
    5eda:	72f3      	strb	r3, [r6, #11]
    5edc:	e081      	b.n	5fe2 <LORAREG_GetAttr_NewTxChConfigT1+0x16a>
			    radioConfig->sf = SF_10;				
    5ede:	3308      	adds	r3, #8
    5ee0:	72f3      	strb	r3, [r6, #11]
    5ee2:	e05f      	b.n	5fa4 <LORAREG_GetAttr_NewTxChConfigT1+0x12c>
			radioConfig->sf = SF_8;
    5ee4:	2308      	movs	r3, #8
    5ee6:	72f3      	strb	r3, [r6, #11]
			radioConfig->bandwidth = BW_500KHZ;
    5ee8:	3301      	adds	r3, #1
    5eea:	72b3      	strb	r3, [r6, #10]
			if( RegParams.band == ISM_NA915)
    5eec:	331d      	adds	r3, #29
    5eee:	4a59      	ldr	r2, [pc, #356]	; (6054 <LORAREG_GetAttr_NewTxChConfigT1+0x1dc>)
    5ef0:	5cd3      	ldrb	r3, [r2, r3]
			uint8_t dr = DR6;
    5ef2:	2206      	movs	r2, #6
			if( RegParams.band == ISM_NA915)
    5ef4:	2b02      	cmp	r3, #2
    5ef6:	d00a      	beq.n	5f0e <LORAREG_GetAttr_NewTxChConfigT1+0x96>
			result = SearchAvailableChannel1 (RegParams.cmnParams.paramsType1.Max_500khzChan, transmissionType,dr, &channelIndex);
    5ef8:	233e      	movs	r3, #62	; 0x3e
    5efa:	33ff      	adds	r3, #255	; 0xff
    5efc:	4955      	ldr	r1, [pc, #340]	; (6054 <LORAREG_GetAttr_NewTxChConfigT1+0x1dc>)
    5efe:	5cc8      	ldrb	r0, [r1, r3]
    5f00:	466b      	mov	r3, sp
    5f02:	3307      	adds	r3, #7
    5f04:	2100      	movs	r1, #0
    5f06:	4c54      	ldr	r4, [pc, #336]	; (6058 <LORAREG_GetAttr_NewTxChConfigT1+0x1e0>)
    5f08:	47a0      	blx	r4
    5f0a:	0004      	movs	r4, r0
    5f0c:	e057      	b.n	5fbe <LORAREG_GetAttr_NewTxChConfigT1+0x146>
				dr = DR4;
    5f0e:	3a02      	subs	r2, #2
    5f10:	e7f2      	b.n	5ef8 <LORAREG_GetAttr_NewTxChConfigT1+0x80>
    			radioConfig->ecrConfig.override = true;
    5f12:	3b01      	subs	r3, #1
    5f14:	71f3      	strb	r3, [r6, #7]
			    radioConfig->ecrConfig.ecr = CR_4_5;	 
    5f16:	71b3      	strb	r3, [r6, #6]
    5f18:	e091      	b.n	603e <LORAREG_GetAttr_NewTxChConfigT1+0x1c6>
			radioConfig->bandwidth = BW_500KHZ;
    5f1a:	2109      	movs	r1, #9
    5f1c:	72b1      	strb	r1, [r6, #10]
	                   FREQ_1600KHZ * (channelIndex - RegParams.cmnParams.paramsType1.Max_125khzChan);
    5f1e:	494d      	ldr	r1, [pc, #308]	; (6054 <LORAREG_GetAttr_NewTxChConfigT1+0x1dc>)
    5f20:	209e      	movs	r0, #158	; 0x9e
    5f22:	0040      	lsls	r0, r0, #1
    5f24:	5c08      	ldrb	r0, [r1, r0]
    5f26:	1a12      	subs	r2, r2, r0
    5f28:	484c      	ldr	r0, [pc, #304]	; (605c <LORAREG_GetAttr_NewTxChConfigT1+0x1e4>)
    5f2a:	4342      	muls	r2, r0
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh64Freq + 
    5f2c:	2098      	movs	r0, #152	; 0x98
    5f2e:	0040      	lsls	r0, r0, #1
    5f30:	5c08      	ldrb	r0, [r1, r0]
    5f32:	2532      	movs	r5, #50	; 0x32
    5f34:	35ff      	adds	r5, #255	; 0xff
    5f36:	5d4d      	ldrb	r5, [r1, r5]
    5f38:	022d      	lsls	r5, r5, #8
    5f3a:	4305      	orrs	r5, r0
    5f3c:	2099      	movs	r0, #153	; 0x99
    5f3e:	0040      	lsls	r0, r0, #1
    5f40:	5c08      	ldrb	r0, [r1, r0]
    5f42:	0400      	lsls	r0, r0, #16
    5f44:	4305      	orrs	r5, r0
    5f46:	2034      	movs	r0, #52	; 0x34
    5f48:	30ff      	adds	r0, #255	; 0xff
    5f4a:	5c08      	ldrb	r0, [r1, r0]
    5f4c:	0600      	lsls	r0, r0, #24
    5f4e:	4328      	orrs	r0, r5
    5f50:	1812      	adds	r2, r2, r0
			radioConfig->frequency = GenerateFrequency2 (channelIndex);
    5f52:	6032      	str	r2, [r6, #0]
			if( RegParams.band == ISM_NA915)
    5f54:	2226      	movs	r2, #38	; 0x26
    5f56:	5c8a      	ldrb	r2, [r1, r2]
    5f58:	2a02      	cmp	r2, #2
    5f5a:	d003      	beq.n	5f64 <LORAREG_GetAttr_NewTxChConfigT1+0xec>
			if (txPower <= 26)
    5f5c:	2b1a      	cmp	r3, #26
    5f5e:	d804      	bhi.n	5f6a <LORAREG_GetAttr_NewTxChConfigT1+0xf2>
				radioConfig->txPower = txPower;
    5f60:	7233      	strb	r3, [r6, #8]
    5f62:	e06c      	b.n	603e <LORAREG_GetAttr_NewTxChConfigT1+0x1c6>
			    radioConfig->ecrConfig.override = false;
    5f64:	2200      	movs	r2, #0
    5f66:	71f2      	strb	r2, [r6, #7]
    5f68:	e7f8      	b.n	5f5c <LORAREG_GetAttr_NewTxChConfigT1+0xe4>
				radioConfig->txPower = 26;
    5f6a:	231a      	movs	r3, #26
    5f6c:	7233      	strb	r3, [r6, #8]
    5f6e:	e066      	b.n	603e <LORAREG_GetAttr_NewTxChConfigT1+0x1c6>
	memcpy(&newTxChannelReq,(NewTxChannelReq_t *)attrInput,sizeof(NewTxChannelReq_t));
    5f70:	784f      	ldrb	r7, [r1, #1]
	if (txPowerNew > RegParams.maxTxPwrIndx)
    5f72:	2325      	movs	r3, #37	; 0x25
    5f74:	4a37      	ldr	r2, [pc, #220]	; (6054 <LORAREG_GetAttr_NewTxChConfigT1+0x1dc>)
    5f76:	56d3      	ldrsb	r3, [r2, r3]
		result = LORAWAN_INVALID_PARAMETER;
    5f78:	240a      	movs	r4, #10
	if (txPowerNew > RegParams.maxTxPwrIndx)
    5f7a:	429f      	cmp	r7, r3
    5f7c:	dd00      	ble.n	5f80 <LORAREG_GetAttr_NewTxChConfigT1+0x108>
    5f7e:	e789      	b.n	5e94 <LORAREG_GetAttr_NewTxChConfigT1+0x1c>
	uint8_t txPower = RegParams.maxTxPwr - 2 * txPwrIndx;
    5f80:	2320      	movs	r3, #32
    5f82:	5cd3      	ldrb	r3, [r2, r3]
    5f84:	4698      	mov	r8, r3
	if (transmissionType == 1) // data message (not join request), it should search in all
    5f86:	780b      	ldrb	r3, [r1, #0]
    5f88:	2b00      	cmp	r3, #0
    5f8a:	d189      	bne.n	5ea0 <LORAREG_GetAttr_NewTxChConfigT1+0x28>
		if (RegParams.cmnParams.paramsType1.alternativeChannel == 0) //TOFO init in reginit
    5f8c:	2340      	movs	r3, #64	; 0x40
    5f8e:	33ff      	adds	r3, #255	; 0xff
    5f90:	4a30      	ldr	r2, [pc, #192]	; (6054 <LORAREG_GetAttr_NewTxChConfigT1+0x1dc>)
    5f92:	5cd3      	ldrb	r3, [r2, r3]
    5f94:	2b00      	cmp	r3, #0
    5f96:	d1a5      	bne.n	5ee4 <LORAREG_GetAttr_NewTxChConfigT1+0x6c>
            if( RegParams.band == ISM_NA915)
    5f98:	3326      	adds	r3, #38	; 0x26
    5f9a:	5cd3      	ldrb	r3, [r2, r3]
    5f9c:	2b02      	cmp	r3, #2
    5f9e:	d09e      	beq.n	5ede <LORAREG_GetAttr_NewTxChConfigT1+0x66>
				radioConfig->sf = SF_12;
    5fa0:	230c      	movs	r3, #12
    5fa2:	72f3      	strb	r3, [r6, #11]
			radioConfig->bandwidth = BW_125KHZ;
    5fa4:	2307      	movs	r3, #7
    5fa6:	72b3      	strb	r3, [r6, #10]
			result = SearchAvailableChannel1 (RegParams.cmnParams.paramsType1.Max_125khzChan, transmissionType,DR0, &channelIndex);
    5fa8:	3336      	adds	r3, #54	; 0x36
    5faa:	33ff      	adds	r3, #255	; 0xff
    5fac:	4a29      	ldr	r2, [pc, #164]	; (6054 <LORAREG_GetAttr_NewTxChConfigT1+0x1dc>)
    5fae:	5cd0      	ldrb	r0, [r2, r3]
    5fb0:	466b      	mov	r3, sp
    5fb2:	3307      	adds	r3, #7
    5fb4:	2200      	movs	r2, #0
    5fb6:	2100      	movs	r1, #0
    5fb8:	4c27      	ldr	r4, [pc, #156]	; (6058 <LORAREG_GetAttr_NewTxChConfigT1+0x1e0>)
    5fba:	47a0      	blx	r4
    5fbc:	0004      	movs	r4, r0
		RegParams.cmnParams.paramsType1.alternativeChannel = !RegParams.cmnParams.paramsType1.alternativeChannel;
    5fbe:	4b25      	ldr	r3, [pc, #148]	; (6054 <LORAREG_GetAttr_NewTxChConfigT1+0x1dc>)
    5fc0:	2140      	movs	r1, #64	; 0x40
    5fc2:	31ff      	adds	r1, #255	; 0xff
    5fc4:	5c5a      	ldrb	r2, [r3, r1]
    5fc6:	4250      	negs	r0, r2
    5fc8:	4142      	adcs	r2, r0
    5fca:	545a      	strb	r2, [r3, r1]
		PDS_STORE(RegParams.regParamItems.alt_ch_item_id);
    5fcc:	22f6      	movs	r2, #246	; 0xf6
    5fce:	32ff      	adds	r2, #255	; 0xff
    5fd0:	5c9a      	ldrb	r2, [r3, r2]
    5fd2:	31b7      	adds	r1, #183	; 0xb7
    5fd4:	5c58      	ldrb	r0, [r3, r1]
    5fd6:	0200      	lsls	r0, r0, #8
    5fd8:	4310      	orrs	r0, r2
    5fda:	b2c1      	uxtb	r1, r0
    5fdc:	0a00      	lsrs	r0, r0, #8
    5fde:	4b20      	ldr	r3, [pc, #128]	; (6060 <LORAREG_GetAttr_NewTxChConfigT1+0x1e8>)
    5fe0:	4798      	blx	r3
	if (result == LORAWAN_SUCCESS)
    5fe2:	2c08      	cmp	r4, #8
    5fe4:	d000      	beq.n	5fe8 <LORAREG_GetAttr_NewTxChConfigT1+0x170>
    5fe6:	e755      	b.n	5e94 <LORAREG_GetAttr_NewTxChConfigT1+0x1c>
	uint8_t txPower = RegParams.maxTxPwr - 2 * txPwrIndx;
    5fe8:	007f      	lsls	r7, r7, #1
    5fea:	4643      	mov	r3, r8
    5fec:	1bdb      	subs	r3, r3, r7
    5fee:	b2db      	uxtb	r3, r3
		if (channelIndex < RegParams.cmnParams.paramsType1.Max_125khzChan)
    5ff0:	466a      	mov	r2, sp
    5ff2:	3207      	adds	r2, #7
    5ff4:	7812      	ldrb	r2, [r2, #0]
    5ff6:	219e      	movs	r1, #158	; 0x9e
    5ff8:	0049      	lsls	r1, r1, #1
    5ffa:	4816      	ldr	r0, [pc, #88]	; (6054 <LORAREG_GetAttr_NewTxChConfigT1+0x1dc>)
    5ffc:	5c41      	ldrb	r1, [r0, r1]
    5ffe:	4291      	cmp	r1, r2
    6000:	d98b      	bls.n	5f1a <LORAREG_GetAttr_NewTxChConfigT1+0xa2>
			radioConfig->bandwidth = BW_125KHZ;
    6002:	2107      	movs	r1, #7
    6004:	72b1      	strb	r1, [r6, #10]
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh0Freq + FREQ_200KHZ * channelIndex;
    6006:	3126      	adds	r1, #38	; 0x26
    6008:	31ff      	adds	r1, #255	; 0xff
    600a:	5c41      	ldrb	r1, [r0, r1]
    600c:	252e      	movs	r5, #46	; 0x2e
    600e:	35ff      	adds	r5, #255	; 0xff
    6010:	5d45      	ldrb	r5, [r0, r5]
    6012:	022d      	lsls	r5, r5, #8
    6014:	430d      	orrs	r5, r1
    6016:	2197      	movs	r1, #151	; 0x97
    6018:	0049      	lsls	r1, r1, #1
    601a:	5c41      	ldrb	r1, [r0, r1]
    601c:	0409      	lsls	r1, r1, #16
    601e:	430d      	orrs	r5, r1
    6020:	2130      	movs	r1, #48	; 0x30
    6022:	31ff      	adds	r1, #255	; 0xff
    6024:	5c41      	ldrb	r1, [r0, r1]
    6026:	0609      	lsls	r1, r1, #24
    6028:	4329      	orrs	r1, r5
    602a:	4d0e      	ldr	r5, [pc, #56]	; (6064 <LORAREG_GetAttr_NewTxChConfigT1+0x1ec>)
    602c:	436a      	muls	r2, r5
    602e:	188a      	adds	r2, r1, r2
			radioConfig->frequency = GenerateFrequency1 (channelIndex);
    6030:	6032      	str	r2, [r6, #0]
			radioConfig->txPower = txPower;
    6032:	7233      	strb	r3, [r6, #8]
			if(RegParams.band == ISM_NA915)
    6034:	2326      	movs	r3, #38	; 0x26
    6036:	5cc3      	ldrb	r3, [r0, r3]
    6038:	2b02      	cmp	r3, #2
    603a:	d100      	bne.n	603e <LORAREG_GetAttr_NewTxChConfigT1+0x1c6>
    603c:	e769      	b.n	5f12 <LORAREG_GetAttr_NewTxChConfigT1+0x9a>
		radioConfig->freq_hop_period = DISABLED;
    603e:	2300      	movs	r3, #0
    6040:	80b3      	strh	r3, [r6, #4]
		radioConfig->modulation = MODULATION_LORA;
    6042:	3301      	adds	r3, #1
    6044:	7273      	strb	r3, [r6, #9]
		RegParams.lastUsedChannelIndex = channelIndex;
    6046:	466b      	mov	r3, sp
    6048:	79d9      	ldrb	r1, [r3, #7]
    604a:	2327      	movs	r3, #39	; 0x27
    604c:	4a01      	ldr	r2, [pc, #4]	; (6054 <LORAREG_GetAttr_NewTxChConfigT1+0x1dc>)
    604e:	54d1      	strb	r1, [r2, r3]
    6050:	e720      	b.n	5e94 <LORAREG_GetAttr_NewTxChConfigT1+0x1c>
    6052:	46c0      	nop			; (mov r8, r8)
    6054:	20000b48 	.word	0x20000b48
    6058:	00003bb9 	.word	0x00003bb9
    605c:	00186a00 	.word	0x00186a00
    6060:	00001e65 	.word	0x00001e65
    6064:	00030d40 	.word	0x00030d40

00006068 <LORAREG_InitGetAttrFnPtrsNA>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT1;
    6068:	4b2a      	ldr	r3, [pc, #168]	; (6114 <LORAREG_InitGetAttrFnPtrsNA+0xac>)
    606a:	4a2b      	ldr	r2, [pc, #172]	; (6118 <LORAREG_InitGetAttrFnPtrsNA+0xb0>)
    606c:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT1;
    606e:	4a2b      	ldr	r2, [pc, #172]	; (611c <LORAREG_InitGetAttrFnPtrsNA+0xb4>)
    6070:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT1;
    6072:	4a2b      	ldr	r2, [pc, #172]	; (6120 <LORAREG_InitGetAttrFnPtrsNA+0xb8>)
    6074:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT1;
    6076:	4a2b      	ldr	r2, [pc, #172]	; (6124 <LORAREG_InitGetAttrFnPtrsNA+0xbc>)
    6078:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    607a:	4a2b      	ldr	r2, [pc, #172]	; (6128 <LORAREG_InitGetAttrFnPtrsNA+0xc0>)
    607c:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    607e:	4a2b      	ldr	r2, [pc, #172]	; (612c <LORAREG_InitGetAttrFnPtrsNA+0xc4>)
    6080:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    6082:	4a2b      	ldr	r2, [pc, #172]	; (6130 <LORAREG_InitGetAttrFnPtrsNA+0xc8>)
    6084:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    6086:	4a2b      	ldr	r2, [pc, #172]	; (6134 <LORAREG_InitGetAttrFnPtrsNA+0xcc>)
    6088:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    608a:	4a2b      	ldr	r2, [pc, #172]	; (6138 <LORAREG_InitGetAttrFnPtrsNA+0xd0>)
    608c:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    608e:	4a2b      	ldr	r2, [pc, #172]	; (613c <LORAREG_InitGetAttrFnPtrsNA+0xd4>)
    6090:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    6092:	4a2b      	ldr	r2, [pc, #172]	; (6140 <LORAREG_InitGetAttrFnPtrsNA+0xd8>)
    6094:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT1;
    6096:	4a2b      	ldr	r2, [pc, #172]	; (6144 <LORAREG_InitGetAttrFnPtrsNA+0xdc>)
    6098:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    609a:	4a2b      	ldr	r2, [pc, #172]	; (6148 <LORAREG_InitGetAttrFnPtrsNA+0xe0>)
    609c:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    609e:	4a2b      	ldr	r2, [pc, #172]	; (614c <LORAREG_InitGetAttrFnPtrsNA+0xe4>)
    60a0:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType1;
    60a2:	4a2b      	ldr	r2, [pc, #172]	; (6150 <LORAREG_InitGetAttrFnPtrsNA+0xe8>)
    60a4:	665a      	str	r2, [r3, #100]	; 0x64
    pGetAttr[DUTY_CYCLE] = LORAREG_GetAttr_DutyCycleT1;
    60a6:	4a2b      	ldr	r2, [pc, #172]	; (6154 <LORAREG_InitGetAttrFnPtrsNA+0xec>)
    60a8:	679a      	str	r2, [r3, #120]	; 0x78
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT1;
    60aa:	492b      	ldr	r1, [pc, #172]	; (6158 <LORAREG_InitGetAttrFnPtrsNA+0xf0>)
    60ac:	2284      	movs	r2, #132	; 0x84
    60ae:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT1;
    60b0:	492a      	ldr	r1, [pc, #168]	; (615c <LORAREG_InitGetAttrFnPtrsNA+0xf4>)
    60b2:	3204      	adds	r2, #4
    60b4:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT1;
    60b6:	492a      	ldr	r1, [pc, #168]	; (6160 <LORAREG_InitGetAttrFnPtrsNA+0xf8>)
    60b8:	3204      	adds	r2, #4
    60ba:	5099      	str	r1, [r3, r2]
    pGetAttr[MIN_DUTY_CYCLE_TIMER] = LORAREG_GetAttr_MinDutyCycleTimer;
    60bc:	4929      	ldr	r1, [pc, #164]	; (6164 <LORAREG_InitGetAttrFnPtrsNA+0xfc>)
    60be:	3204      	adds	r2, #4
    60c0:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    60c2:	4929      	ldr	r1, [pc, #164]	; (6168 <LORAREG_InitGetAttrFnPtrsNA+0x100>)
    60c4:	3204      	adds	r2, #4
    60c6:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    60c8:	4928      	ldr	r1, [pc, #160]	; (616c <LORAREG_InitGetAttrFnPtrsNA+0x104>)
    60ca:	3204      	adds	r2, #4
    60cc:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    60ce:	4928      	ldr	r1, [pc, #160]	; (6170 <LORAREG_InitGetAttrFnPtrsNA+0x108>)
    60d0:	3204      	adds	r2, #4
    60d2:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    60d4:	4927      	ldr	r1, [pc, #156]	; (6174 <LORAREG_InitGetAttrFnPtrsNA+0x10c>)
    60d6:	3204      	adds	r2, #4
    60d8:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    60da:	4927      	ldr	r1, [pc, #156]	; (6178 <LORAREG_InitGetAttrFnPtrsNA+0x110>)
    60dc:	3204      	adds	r2, #4
    60de:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    60e0:	4926      	ldr	r1, [pc, #152]	; (617c <LORAREG_InitGetAttrFnPtrsNA+0x114>)
    60e2:	3204      	adds	r2, #4
    60e4:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    60e6:	4926      	ldr	r1, [pc, #152]	; (6180 <LORAREG_InitGetAttrFnPtrsNA+0x118>)
    60e8:	3204      	adds	r2, #4
    60ea:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    60ec:	4925      	ldr	r1, [pc, #148]	; (6184 <LORAREG_InitGetAttrFnPtrsNA+0x11c>)
    60ee:	3204      	adds	r2, #4
    60f0:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT1;
    60f2:	4925      	ldr	r1, [pc, #148]	; (6188 <LORAREG_InitGetAttrFnPtrsNA+0x120>)
    60f4:	3204      	adds	r2, #4
    60f6:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel1;
    60f8:	4924      	ldr	r1, [pc, #144]	; (618c <LORAREG_InitGetAttrFnPtrsNA+0x124>)
    60fa:	3204      	adds	r2, #4
    60fc:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    60fe:	4924      	ldr	r1, [pc, #144]	; (6190 <LORAREG_InitGetAttrFnPtrsNA+0x128>)
    6100:	3204      	adds	r2, #4
    6102:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    6104:	4923      	ldr	r1, [pc, #140]	; (6194 <LORAREG_InitGetAttrFnPtrsNA+0x12c>)
    6106:	3214      	adds	r2, #20
    6108:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    610a:	4923      	ldr	r1, [pc, #140]	; (6198 <LORAREG_InitGetAttrFnPtrsNA+0x130>)
    610c:	3204      	adds	r2, #4
    610e:	5099      	str	r1, [r3, r2]
}
    6110:	4770      	bx	lr
    6112:	46c0      	nop			; (mov r8, r8)
    6114:	20000230 	.word	0x20000230
    6118:	000036a1 	.word	0x000036a1
    611c:	00005c11 	.word	0x00005c11
    6120:	00005c61 	.word	0x00005c61
    6124:	00005cad 	.word	0x00005cad
    6128:	000034ed 	.word	0x000034ed
    612c:	000034fd 	.word	0x000034fd
    6130:	00003515 	.word	0x00003515
    6134:	00003525 	.word	0x00003525
    6138:	00004411 	.word	0x00004411
    613c:	00003535 	.word	0x00003535
    6140:	00003545 	.word	0x00003545
    6144:	000042e5 	.word	0x000042e5
    6148:	0000384d 	.word	0x0000384d
    614c:	00003595 	.word	0x00003595
    6150:	00004235 	.word	0x00004235
    6154:	000035e1 	.word	0x000035e1
    6158:	00005cf9 	.word	0x00005cf9
    615c:	00005d45 	.word	0x00005d45
    6160:	00005d91 	.word	0x00005d91
    6164:	000035eb 	.word	0x000035eb
    6168:	000035f5 	.word	0x000035f5
    616c:	000035ff 	.word	0x000035ff
    6170:	00003609 	.word	0x00003609
    6174:	00003615 	.word	0x00003615
    6178:	00003621 	.word	0x00003621
    617c:	0000362b 	.word	0x0000362b
    6180:	00003633 	.word	0x00003633
    6184:	0000363b 	.word	0x0000363b
    6188:	00005e79 	.word	0x00005e79
    618c:	00003c99 	.word	0x00003c99
    6190:	00003665 	.word	0x00003665
    6194:	00003645 	.word	0x00003645
    6198:	00003655 	.word	0x00003655

0000619c <LORAREG_InitGetAttrFnPtrsEU>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT2;
    619c:	4b2b      	ldr	r3, [pc, #172]	; (624c <LORAREG_InitGetAttrFnPtrsEU+0xb0>)
    619e:	4a2c      	ldr	r2, [pc, #176]	; (6250 <LORAREG_InitGetAttrFnPtrsEU+0xb4>)
    61a0:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT2;
    61a2:	4a2c      	ldr	r2, [pc, #176]	; (6254 <LORAREG_InitGetAttrFnPtrsEU+0xb8>)
    61a4:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT2;
    61a6:	4a2c      	ldr	r2, [pc, #176]	; (6258 <LORAREG_InitGetAttrFnPtrsEU+0xbc>)
    61a8:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT2;
    61aa:	4a2c      	ldr	r2, [pc, #176]	; (625c <LORAREG_InitGetAttrFnPtrsEU+0xc0>)
    61ac:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    61ae:	4a2c      	ldr	r2, [pc, #176]	; (6260 <LORAREG_InitGetAttrFnPtrsEU+0xc4>)
    61b0:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    61b2:	4a2c      	ldr	r2, [pc, #176]	; (6264 <LORAREG_InitGetAttrFnPtrsEU+0xc8>)
    61b4:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    61b6:	4a2c      	ldr	r2, [pc, #176]	; (6268 <LORAREG_InitGetAttrFnPtrsEU+0xcc>)
    61b8:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    61ba:	4a2c      	ldr	r2, [pc, #176]	; (626c <LORAREG_InitGetAttrFnPtrsEU+0xd0>)
    61bc:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    61be:	4a2c      	ldr	r2, [pc, #176]	; (6270 <LORAREG_InitGetAttrFnPtrsEU+0xd4>)
    61c0:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    61c2:	4a2c      	ldr	r2, [pc, #176]	; (6274 <LORAREG_InitGetAttrFnPtrsEU+0xd8>)
    61c4:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    61c6:	4a2c      	ldr	r2, [pc, #176]	; (6278 <LORAREG_InitGetAttrFnPtrsEU+0xdc>)
    61c8:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT2;
    61ca:	4a2c      	ldr	r2, [pc, #176]	; (627c <LORAREG_InitGetAttrFnPtrsEU+0xe0>)
    61cc:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    61ce:	4a2c      	ldr	r2, [pc, #176]	; (6280 <LORAREG_InitGetAttrFnPtrsEU+0xe4>)
    61d0:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    61d2:	4a2c      	ldr	r2, [pc, #176]	; (6284 <LORAREG_InitGetAttrFnPtrsEU+0xe8>)
    61d4:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType2;
    61d6:	4a2c      	ldr	r2, [pc, #176]	; (6288 <LORAREG_InitGetAttrFnPtrsEU+0xec>)
    61d8:	665a      	str	r2, [r3, #100]	; 0x64
    pGetAttr[DUTY_CYCLE] = LORAREG_GetAttr_DutyCycleT2;
    61da:	4a2c      	ldr	r2, [pc, #176]	; (628c <LORAREG_InitGetAttrFnPtrsEU+0xf0>)
    61dc:	679a      	str	r2, [r3, #120]	; 0x78
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT2;
    61de:	492c      	ldr	r1, [pc, #176]	; (6290 <LORAREG_InitGetAttrFnPtrsEU+0xf4>)
    61e0:	2284      	movs	r2, #132	; 0x84
    61e2:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT2;
    61e4:	492b      	ldr	r1, [pc, #172]	; (6294 <LORAREG_InitGetAttrFnPtrsEU+0xf8>)
    61e6:	3204      	adds	r2, #4
    61e8:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT2;
    61ea:	492b      	ldr	r1, [pc, #172]	; (6298 <LORAREG_InitGetAttrFnPtrsEU+0xfc>)
    61ec:	3204      	adds	r2, #4
    61ee:	5099      	str	r1, [r3, r2]
    pGetAttr[MIN_DUTY_CYCLE_TIMER] = LORAREG_GetAttr_DutyCycleTimer;
    61f0:	492a      	ldr	r1, [pc, #168]	; (629c <LORAREG_InitGetAttrFnPtrsEU+0x100>)
    61f2:	3204      	adds	r2, #4
    61f4:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    61f6:	492a      	ldr	r1, [pc, #168]	; (62a0 <LORAREG_InitGetAttrFnPtrsEU+0x104>)
    61f8:	3204      	adds	r2, #4
    61fa:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    61fc:	4929      	ldr	r1, [pc, #164]	; (62a4 <LORAREG_InitGetAttrFnPtrsEU+0x108>)
    61fe:	3204      	adds	r2, #4
    6200:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    6202:	4929      	ldr	r1, [pc, #164]	; (62a8 <LORAREG_InitGetAttrFnPtrsEU+0x10c>)
    6204:	3204      	adds	r2, #4
    6206:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    6208:	4928      	ldr	r1, [pc, #160]	; (62ac <LORAREG_InitGetAttrFnPtrsEU+0x110>)
    620a:	3204      	adds	r2, #4
    620c:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    620e:	4928      	ldr	r1, [pc, #160]	; (62b0 <LORAREG_InitGetAttrFnPtrsEU+0x114>)
    6210:	3204      	adds	r2, #4
    6212:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    6214:	4927      	ldr	r1, [pc, #156]	; (62b4 <LORAREG_InitGetAttrFnPtrsEU+0x118>)
    6216:	3204      	adds	r2, #4
    6218:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    621a:	4927      	ldr	r1, [pc, #156]	; (62b8 <LORAREG_InitGetAttrFnPtrsEU+0x11c>)
    621c:	3204      	adds	r2, #4
    621e:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    6220:	4926      	ldr	r1, [pc, #152]	; (62bc <LORAREG_InitGetAttrFnPtrsEU+0x120>)
    6222:	3204      	adds	r2, #4
    6224:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT2;
    6226:	4926      	ldr	r1, [pc, #152]	; (62c0 <LORAREG_InitGetAttrFnPtrsEU+0x124>)
    6228:	3204      	adds	r2, #4
    622a:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel2;
    622c:	4925      	ldr	r1, [pc, #148]	; (62c4 <LORAREG_InitGetAttrFnPtrsEU+0x128>)
    622e:	3204      	adds	r2, #4
    6230:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    6232:	4925      	ldr	r1, [pc, #148]	; (62c8 <LORAREG_InitGetAttrFnPtrsEU+0x12c>)
    6234:	3204      	adds	r2, #4
    6236:	5099      	str	r1, [r3, r2]
    pGetAttr[DL_FREQUENCY] = LORAREG_GetAttr_DlFrequency;
    6238:	4924      	ldr	r1, [pc, #144]	; (62cc <LORAREG_InitGetAttrFnPtrsEU+0x130>)
    623a:	320c      	adds	r2, #12
    623c:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    623e:	4924      	ldr	r1, [pc, #144]	; (62d0 <LORAREG_InitGetAttrFnPtrsEU+0x134>)
    6240:	3208      	adds	r2, #8
    6242:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    6244:	4923      	ldr	r1, [pc, #140]	; (62d4 <LORAREG_InitGetAttrFnPtrsEU+0x138>)
    6246:	3204      	adds	r2, #4
    6248:	5099      	str	r1, [r3, r2]
}
    624a:	4770      	bx	lr
    624c:	20000230 	.word	0x20000230
    6250:	000045d9 	.word	0x000045d9
    6254:	000058cd 	.word	0x000058cd
    6258:	00005909 	.word	0x00005909
    625c:	00005941 	.word	0x00005941
    6260:	000034ed 	.word	0x000034ed
    6264:	000034fd 	.word	0x000034fd
    6268:	00003515 	.word	0x00003515
    626c:	00003525 	.word	0x00003525
    6270:	00004411 	.word	0x00004411
    6274:	00003535 	.word	0x00003535
    6278:	00003545 	.word	0x00003545
    627c:	000044dd 	.word	0x000044dd
    6280:	0000384d 	.word	0x0000384d
    6284:	00003595 	.word	0x00003595
    6288:	00004471 	.word	0x00004471
    628c:	00003805 	.word	0x00003805
    6290:	00005979 	.word	0x00005979
    6294:	000059b1 	.word	0x000059b1
    6298:	000059e9 	.word	0x000059e9
    629c:	00004d9d 	.word	0x00004d9d
    62a0:	000035f5 	.word	0x000035f5
    62a4:	000035ff 	.word	0x000035ff
    62a8:	00003609 	.word	0x00003609
    62ac:	00003615 	.word	0x00003615
    62b0:	00003621 	.word	0x00003621
    62b4:	0000362b 	.word	0x0000362b
    62b8:	00003633 	.word	0x00003633
    62bc:	0000363b 	.word	0x0000363b
    62c0:	00005a49 	.word	0x00005a49
    62c4:	00003e4d 	.word	0x00003e4d
    62c8:	00003665 	.word	0x00003665
    62cc:	00004429 	.word	0x00004429
    62d0:	00003645 	.word	0x00003645
    62d4:	00003655 	.word	0x00003655

000062d8 <LORAREG_InitGetAttrFnPtrsAS>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT3;
    62d8:	4b2b      	ldr	r3, [pc, #172]	; (6388 <LORAREG_InitGetAttrFnPtrsAS+0xb0>)
    62da:	4a2c      	ldr	r2, [pc, #176]	; (638c <LORAREG_InitGetAttrFnPtrsAS+0xb4>)
    62dc:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT2;
    62de:	4a2c      	ldr	r2, [pc, #176]	; (6390 <LORAREG_InitGetAttrFnPtrsAS+0xb8>)
    62e0:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT2;
    62e2:	4a2c      	ldr	r2, [pc, #176]	; (6394 <LORAREG_InitGetAttrFnPtrsAS+0xbc>)
    62e4:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT3;
    62e6:	4a2c      	ldr	r2, [pc, #176]	; (6398 <LORAREG_InitGetAttrFnPtrsAS+0xc0>)
    62e8:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    62ea:	4a2c      	ldr	r2, [pc, #176]	; (639c <LORAREG_InitGetAttrFnPtrsAS+0xc4>)
    62ec:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    62ee:	4a2c      	ldr	r2, [pc, #176]	; (63a0 <LORAREG_InitGetAttrFnPtrsAS+0xc8>)
    62f0:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    62f2:	4a2c      	ldr	r2, [pc, #176]	; (63a4 <LORAREG_InitGetAttrFnPtrsAS+0xcc>)
    62f4:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    62f6:	4a2c      	ldr	r2, [pc, #176]	; (63a8 <LORAREG_InitGetAttrFnPtrsAS+0xd0>)
    62f8:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    62fa:	4a2c      	ldr	r2, [pc, #176]	; (63ac <LORAREG_InitGetAttrFnPtrsAS+0xd4>)
    62fc:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    62fe:	4a2c      	ldr	r2, [pc, #176]	; (63b0 <LORAREG_InitGetAttrFnPtrsAS+0xd8>)
    6300:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    6302:	4a2c      	ldr	r2, [pc, #176]	; (63b4 <LORAREG_InitGetAttrFnPtrsAS+0xdc>)
    6304:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT2;
    6306:	4a2c      	ldr	r2, [pc, #176]	; (63b8 <LORAREG_InitGetAttrFnPtrsAS+0xe0>)
    6308:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    630a:	4a2c      	ldr	r2, [pc, #176]	; (63bc <LORAREG_InitGetAttrFnPtrsAS+0xe4>)
    630c:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    630e:	4a2c      	ldr	r2, [pc, #176]	; (63c0 <LORAREG_InitGetAttrFnPtrsAS+0xe8>)
    6310:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType4;
    6312:	4a2c      	ldr	r2, [pc, #176]	; (63c4 <LORAREG_InitGetAttrFnPtrsAS+0xec>)
    6314:	665a      	str	r2, [r3, #100]	; 0x64
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT2;
    6316:	492c      	ldr	r1, [pc, #176]	; (63c8 <LORAREG_InitGetAttrFnPtrsAS+0xf0>)
    6318:	2284      	movs	r2, #132	; 0x84
    631a:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT2;
    631c:	492b      	ldr	r1, [pc, #172]	; (63cc <LORAREG_InitGetAttrFnPtrsAS+0xf4>)
    631e:	3204      	adds	r2, #4
    6320:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT2;
    6322:	492b      	ldr	r1, [pc, #172]	; (63d0 <LORAREG_InitGetAttrFnPtrsAS+0xf8>)
    6324:	3204      	adds	r2, #4
    6326:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    6328:	492a      	ldr	r1, [pc, #168]	; (63d4 <LORAREG_InitGetAttrFnPtrsAS+0xfc>)
    632a:	3208      	adds	r2, #8
    632c:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    632e:	492a      	ldr	r1, [pc, #168]	; (63d8 <LORAREG_InitGetAttrFnPtrsAS+0x100>)
    6330:	3204      	adds	r2, #4
    6332:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    6334:	4929      	ldr	r1, [pc, #164]	; (63dc <LORAREG_InitGetAttrFnPtrsAS+0x104>)
    6336:	3204      	adds	r2, #4
    6338:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    633a:	4929      	ldr	r1, [pc, #164]	; (63e0 <LORAREG_InitGetAttrFnPtrsAS+0x108>)
    633c:	3204      	adds	r2, #4
    633e:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    6340:	4928      	ldr	r1, [pc, #160]	; (63e4 <LORAREG_InitGetAttrFnPtrsAS+0x10c>)
    6342:	3204      	adds	r2, #4
    6344:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    6346:	4928      	ldr	r1, [pc, #160]	; (63e8 <LORAREG_InitGetAttrFnPtrsAS+0x110>)
    6348:	3204      	adds	r2, #4
    634a:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    634c:	4927      	ldr	r1, [pc, #156]	; (63ec <LORAREG_InitGetAttrFnPtrsAS+0x114>)
    634e:	3204      	adds	r2, #4
    6350:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    6352:	4927      	ldr	r1, [pc, #156]	; (63f0 <LORAREG_InitGetAttrFnPtrsAS+0x118>)
    6354:	3204      	adds	r2, #4
    6356:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT2;
    6358:	4926      	ldr	r1, [pc, #152]	; (63f4 <LORAREG_InitGetAttrFnPtrsAS+0x11c>)
    635a:	3204      	adds	r2, #4
    635c:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel2;
    635e:	4926      	ldr	r1, [pc, #152]	; (63f8 <LORAREG_InitGetAttrFnPtrsAS+0x120>)
    6360:	3204      	adds	r2, #4
    6362:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    6364:	4925      	ldr	r1, [pc, #148]	; (63fc <LORAREG_InitGetAttrFnPtrsAS+0x124>)
    6366:	3204      	adds	r2, #4
    6368:	5099      	str	r1, [r3, r2]
    pGetAttr[DL_FREQUENCY] = LORAREG_GetAttr_DlFrequency;
    636a:	4925      	ldr	r1, [pc, #148]	; (6400 <LORAREG_InitGetAttrFnPtrsAS+0x128>)
    636c:	320c      	adds	r2, #12
    636e:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    6370:	4924      	ldr	r1, [pc, #144]	; (6404 <LORAREG_InitGetAttrFnPtrsAS+0x12c>)
    6372:	3208      	adds	r2, #8
    6374:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    6376:	4924      	ldr	r1, [pc, #144]	; (6408 <LORAREG_InitGetAttrFnPtrsAS+0x130>)
    6378:	3204      	adds	r2, #4
    637a:	5099      	str	r1, [r3, r2]
    pGetAttr[DUTY_CYCLE] = LORAREG_GetAttr_DutyCycleT2;
    637c:	4a23      	ldr	r2, [pc, #140]	; (640c <LORAREG_InitGetAttrFnPtrsAS+0x134>)
    637e:	679a      	str	r2, [r3, #120]	; 0x78
    pGetAttr[MIN_DUTY_CYCLE_TIMER] = LORAREG_GetAttr_DutyCycleTimer;
    6380:	4923      	ldr	r1, [pc, #140]	; (6410 <LORAREG_InitGetAttrFnPtrsAS+0x138>)
    6382:	2290      	movs	r2, #144	; 0x90
    6384:	5099      	str	r1, [r3, r2]
}
    6386:	4770      	bx	lr
    6388:	20000230 	.word	0x20000230
    638c:	00004715 	.word	0x00004715
    6390:	000058cd 	.word	0x000058cd
    6394:	00005909 	.word	0x00005909
    6398:	00005869 	.word	0x00005869
    639c:	000034ed 	.word	0x000034ed
    63a0:	000034fd 	.word	0x000034fd
    63a4:	00003515 	.word	0x00003515
    63a8:	00003525 	.word	0x00003525
    63ac:	00004411 	.word	0x00004411
    63b0:	00003535 	.word	0x00003535
    63b4:	00003545 	.word	0x00003545
    63b8:	000044dd 	.word	0x000044dd
    63bc:	0000384d 	.word	0x0000384d
    63c0:	00003595 	.word	0x00003595
    63c4:	00004621 	.word	0x00004621
    63c8:	00005979 	.word	0x00005979
    63cc:	000059b1 	.word	0x000059b1
    63d0:	000059e9 	.word	0x000059e9
    63d4:	000035f5 	.word	0x000035f5
    63d8:	000035ff 	.word	0x000035ff
    63dc:	00003609 	.word	0x00003609
    63e0:	00003615 	.word	0x00003615
    63e4:	00003621 	.word	0x00003621
    63e8:	0000362b 	.word	0x0000362b
    63ec:	00003633 	.word	0x00003633
    63f0:	0000363b 	.word	0x0000363b
    63f4:	00005a49 	.word	0x00005a49
    63f8:	00003e4d 	.word	0x00003e4d
    63fc:	00003665 	.word	0x00003665
    6400:	00004429 	.word	0x00004429
    6404:	00003645 	.word	0x00003645
    6408:	00003655 	.word	0x00003655
    640c:	00003805 	.word	0x00003805
    6410:	00004d9d 	.word	0x00004d9d

00006414 <LORAREG_InitGetAttrFnPtrsAU>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT1;
    6414:	4b29      	ldr	r3, [pc, #164]	; (64bc <LORAREG_InitGetAttrFnPtrsAU+0xa8>)
    6416:	4a2a      	ldr	r2, [pc, #168]	; (64c0 <LORAREG_InitGetAttrFnPtrsAU+0xac>)
    6418:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT1;
    641a:	4a2a      	ldr	r2, [pc, #168]	; (64c4 <LORAREG_InitGetAttrFnPtrsAU+0xb0>)
    641c:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT1;
    641e:	4a2a      	ldr	r2, [pc, #168]	; (64c8 <LORAREG_InitGetAttrFnPtrsAU+0xb4>)
    6420:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT1;
    6422:	4a2a      	ldr	r2, [pc, #168]	; (64cc <LORAREG_InitGetAttrFnPtrsAU+0xb8>)
    6424:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    6426:	4a2a      	ldr	r2, [pc, #168]	; (64d0 <LORAREG_InitGetAttrFnPtrsAU+0xbc>)
    6428:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    642a:	4a2a      	ldr	r2, [pc, #168]	; (64d4 <LORAREG_InitGetAttrFnPtrsAU+0xc0>)
    642c:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    642e:	4a2a      	ldr	r2, [pc, #168]	; (64d8 <LORAREG_InitGetAttrFnPtrsAU+0xc4>)
    6430:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    6432:	4a2a      	ldr	r2, [pc, #168]	; (64dc <LORAREG_InitGetAttrFnPtrsAU+0xc8>)
    6434:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    6436:	4a2a      	ldr	r2, [pc, #168]	; (64e0 <LORAREG_InitGetAttrFnPtrsAU+0xcc>)
    6438:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    643a:	4a2a      	ldr	r2, [pc, #168]	; (64e4 <LORAREG_InitGetAttrFnPtrsAU+0xd0>)
    643c:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    643e:	4a2a      	ldr	r2, [pc, #168]	; (64e8 <LORAREG_InitGetAttrFnPtrsAU+0xd4>)
    6440:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT1;
    6442:	4a2a      	ldr	r2, [pc, #168]	; (64ec <LORAREG_InitGetAttrFnPtrsAU+0xd8>)
    6444:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    6446:	4a2a      	ldr	r2, [pc, #168]	; (64f0 <LORAREG_InitGetAttrFnPtrsAU+0xdc>)
    6448:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    644a:	4a2a      	ldr	r2, [pc, #168]	; (64f4 <LORAREG_InitGetAttrFnPtrsAU+0xe0>)
    644c:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType1;
    644e:	4a2a      	ldr	r2, [pc, #168]	; (64f8 <LORAREG_InitGetAttrFnPtrsAU+0xe4>)
    6450:	665a      	str	r2, [r3, #100]	; 0x64
    pGetAttr[DUTY_CYCLE] = LORAREG_GetAttr_DutyCycleT1;
    6452:	4a2a      	ldr	r2, [pc, #168]	; (64fc <LORAREG_InitGetAttrFnPtrsAU+0xe8>)
    6454:	679a      	str	r2, [r3, #120]	; 0x78
    pGetAttr[DUTY_CYCLE_TIMER] = LORAREG_GetAttr_MinDutyCycleTimer;
    6456:	4a2a      	ldr	r2, [pc, #168]	; (6500 <LORAREG_InitGetAttrFnPtrsAU+0xec>)
    6458:	67da      	str	r2, [r3, #124]	; 0x7c
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT1;
    645a:	492a      	ldr	r1, [pc, #168]	; (6504 <LORAREG_InitGetAttrFnPtrsAU+0xf0>)
    645c:	2284      	movs	r2, #132	; 0x84
    645e:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT1;
    6460:	4929      	ldr	r1, [pc, #164]	; (6508 <LORAREG_InitGetAttrFnPtrsAU+0xf4>)
    6462:	3204      	adds	r2, #4
    6464:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT1;
    6466:	4929      	ldr	r1, [pc, #164]	; (650c <LORAREG_InitGetAttrFnPtrsAU+0xf8>)
    6468:	3204      	adds	r2, #4
    646a:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    646c:	4928      	ldr	r1, [pc, #160]	; (6510 <LORAREG_InitGetAttrFnPtrsAU+0xfc>)
    646e:	3208      	adds	r2, #8
    6470:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    6472:	4928      	ldr	r1, [pc, #160]	; (6514 <LORAREG_InitGetAttrFnPtrsAU+0x100>)
    6474:	3204      	adds	r2, #4
    6476:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    6478:	4927      	ldr	r1, [pc, #156]	; (6518 <LORAREG_InitGetAttrFnPtrsAU+0x104>)
    647a:	3204      	adds	r2, #4
    647c:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    647e:	4927      	ldr	r1, [pc, #156]	; (651c <LORAREG_InitGetAttrFnPtrsAU+0x108>)
    6480:	3204      	adds	r2, #4
    6482:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    6484:	4926      	ldr	r1, [pc, #152]	; (6520 <LORAREG_InitGetAttrFnPtrsAU+0x10c>)
    6486:	3204      	adds	r2, #4
    6488:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    648a:	4926      	ldr	r1, [pc, #152]	; (6524 <LORAREG_InitGetAttrFnPtrsAU+0x110>)
    648c:	3204      	adds	r2, #4
    648e:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    6490:	4925      	ldr	r1, [pc, #148]	; (6528 <LORAREG_InitGetAttrFnPtrsAU+0x114>)
    6492:	3204      	adds	r2, #4
    6494:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    6496:	4925      	ldr	r1, [pc, #148]	; (652c <LORAREG_InitGetAttrFnPtrsAU+0x118>)
    6498:	3204      	adds	r2, #4
    649a:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT1;
    649c:	4924      	ldr	r1, [pc, #144]	; (6530 <LORAREG_InitGetAttrFnPtrsAU+0x11c>)
    649e:	3204      	adds	r2, #4
    64a0:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel1;
    64a2:	4924      	ldr	r1, [pc, #144]	; (6534 <LORAREG_InitGetAttrFnPtrsAU+0x120>)
    64a4:	3204      	adds	r2, #4
    64a6:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    64a8:	4923      	ldr	r1, [pc, #140]	; (6538 <LORAREG_InitGetAttrFnPtrsAU+0x124>)
    64aa:	3204      	adds	r2, #4
    64ac:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    64ae:	4923      	ldr	r1, [pc, #140]	; (653c <LORAREG_InitGetAttrFnPtrsAU+0x128>)
    64b0:	3214      	adds	r2, #20
    64b2:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    64b4:	4922      	ldr	r1, [pc, #136]	; (6540 <LORAREG_InitGetAttrFnPtrsAU+0x12c>)
    64b6:	3204      	adds	r2, #4
    64b8:	5099      	str	r1, [r3, r2]
}
    64ba:	4770      	bx	lr
    64bc:	20000230 	.word	0x20000230
    64c0:	000036a1 	.word	0x000036a1
    64c4:	00005c11 	.word	0x00005c11
    64c8:	00005c61 	.word	0x00005c61
    64cc:	00005cad 	.word	0x00005cad
    64d0:	000034ed 	.word	0x000034ed
    64d4:	000034fd 	.word	0x000034fd
    64d8:	00003515 	.word	0x00003515
    64dc:	00003525 	.word	0x00003525
    64e0:	00004411 	.word	0x00004411
    64e4:	00003535 	.word	0x00003535
    64e8:	00003545 	.word	0x00003545
    64ec:	000042e5 	.word	0x000042e5
    64f0:	0000384d 	.word	0x0000384d
    64f4:	00003595 	.word	0x00003595
    64f8:	00004235 	.word	0x00004235
    64fc:	000035e1 	.word	0x000035e1
    6500:	000035eb 	.word	0x000035eb
    6504:	00005cf9 	.word	0x00005cf9
    6508:	00005d45 	.word	0x00005d45
    650c:	00005d91 	.word	0x00005d91
    6510:	000035f5 	.word	0x000035f5
    6514:	000035ff 	.word	0x000035ff
    6518:	00003609 	.word	0x00003609
    651c:	00003615 	.word	0x00003615
    6520:	00003621 	.word	0x00003621
    6524:	0000362b 	.word	0x0000362b
    6528:	00003633 	.word	0x00003633
    652c:	0000363b 	.word	0x0000363b
    6530:	00005e79 	.word	0x00005e79
    6534:	00003c99 	.word	0x00003c99
    6538:	00003665 	.word	0x00003665
    653c:	00003645 	.word	0x00003645
    6540:	00003655 	.word	0x00003655

00006544 <LORAREG_InitGetAttrFnPtrsIN>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT2;
    6544:	4b29      	ldr	r3, [pc, #164]	; (65ec <LORAREG_InitGetAttrFnPtrsIN+0xa8>)
    6546:	4a2a      	ldr	r2, [pc, #168]	; (65f0 <LORAREG_InitGetAttrFnPtrsIN+0xac>)
    6548:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT2;
    654a:	4a2a      	ldr	r2, [pc, #168]	; (65f4 <LORAREG_InitGetAttrFnPtrsIN+0xb0>)
    654c:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT2;
    654e:	4a2a      	ldr	r2, [pc, #168]	; (65f8 <LORAREG_InitGetAttrFnPtrsIN+0xb4>)
    6550:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT2;
    6552:	4a2a      	ldr	r2, [pc, #168]	; (65fc <LORAREG_InitGetAttrFnPtrsIN+0xb8>)
    6554:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    6556:	4a2a      	ldr	r2, [pc, #168]	; (6600 <LORAREG_InitGetAttrFnPtrsIN+0xbc>)
    6558:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    655a:	4a2a      	ldr	r2, [pc, #168]	; (6604 <LORAREG_InitGetAttrFnPtrsIN+0xc0>)
    655c:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    655e:	4a2a      	ldr	r2, [pc, #168]	; (6608 <LORAREG_InitGetAttrFnPtrsIN+0xc4>)
    6560:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    6562:	4a2a      	ldr	r2, [pc, #168]	; (660c <LORAREG_InitGetAttrFnPtrsIN+0xc8>)
    6564:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    6566:	4a2a      	ldr	r2, [pc, #168]	; (6610 <LORAREG_InitGetAttrFnPtrsIN+0xcc>)
    6568:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    656a:	4a2a      	ldr	r2, [pc, #168]	; (6614 <LORAREG_InitGetAttrFnPtrsIN+0xd0>)
    656c:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    656e:	4a2a      	ldr	r2, [pc, #168]	; (6618 <LORAREG_InitGetAttrFnPtrsIN+0xd4>)
    6570:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT2;
    6572:	4a2a      	ldr	r2, [pc, #168]	; (661c <LORAREG_InitGetAttrFnPtrsIN+0xd8>)
    6574:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    6576:	4a2a      	ldr	r2, [pc, #168]	; (6620 <LORAREG_InitGetAttrFnPtrsIN+0xdc>)
    6578:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    657a:	4a2a      	ldr	r2, [pc, #168]	; (6624 <LORAREG_InitGetAttrFnPtrsIN+0xe0>)
    657c:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType3;
    657e:	4a2a      	ldr	r2, [pc, #168]	; (6628 <LORAREG_InitGetAttrFnPtrsIN+0xe4>)
    6580:	665a      	str	r2, [r3, #100]	; 0x64
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT2;
    6582:	492a      	ldr	r1, [pc, #168]	; (662c <LORAREG_InitGetAttrFnPtrsIN+0xe8>)
    6584:	2284      	movs	r2, #132	; 0x84
    6586:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT2;
    6588:	4929      	ldr	r1, [pc, #164]	; (6630 <LORAREG_InitGetAttrFnPtrsIN+0xec>)
    658a:	3204      	adds	r2, #4
    658c:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT2;
    658e:	4929      	ldr	r1, [pc, #164]	; (6634 <LORAREG_InitGetAttrFnPtrsIN+0xf0>)
    6590:	3204      	adds	r2, #4
    6592:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    6594:	4928      	ldr	r1, [pc, #160]	; (6638 <LORAREG_InitGetAttrFnPtrsIN+0xf4>)
    6596:	3208      	adds	r2, #8
    6598:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    659a:	4928      	ldr	r1, [pc, #160]	; (663c <LORAREG_InitGetAttrFnPtrsIN+0xf8>)
    659c:	3204      	adds	r2, #4
    659e:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    65a0:	4927      	ldr	r1, [pc, #156]	; (6640 <LORAREG_InitGetAttrFnPtrsIN+0xfc>)
    65a2:	3204      	adds	r2, #4
    65a4:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    65a6:	4927      	ldr	r1, [pc, #156]	; (6644 <LORAREG_InitGetAttrFnPtrsIN+0x100>)
    65a8:	3204      	adds	r2, #4
    65aa:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    65ac:	4926      	ldr	r1, [pc, #152]	; (6648 <LORAREG_InitGetAttrFnPtrsIN+0x104>)
    65ae:	3204      	adds	r2, #4
    65b0:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    65b2:	4926      	ldr	r1, [pc, #152]	; (664c <LORAREG_InitGetAttrFnPtrsIN+0x108>)
    65b4:	3204      	adds	r2, #4
    65b6:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    65b8:	4925      	ldr	r1, [pc, #148]	; (6650 <LORAREG_InitGetAttrFnPtrsIN+0x10c>)
    65ba:	3204      	adds	r2, #4
    65bc:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    65be:	4925      	ldr	r1, [pc, #148]	; (6654 <LORAREG_InitGetAttrFnPtrsIN+0x110>)
    65c0:	3204      	adds	r2, #4
    65c2:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT2;
    65c4:	4924      	ldr	r1, [pc, #144]	; (6658 <LORAREG_InitGetAttrFnPtrsIN+0x114>)
    65c6:	3204      	adds	r2, #4
    65c8:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel2;
    65ca:	4924      	ldr	r1, [pc, #144]	; (665c <LORAREG_InitGetAttrFnPtrsIN+0x118>)
    65cc:	3204      	adds	r2, #4
    65ce:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    65d0:	4923      	ldr	r1, [pc, #140]	; (6660 <LORAREG_InitGetAttrFnPtrsIN+0x11c>)
    65d2:	3204      	adds	r2, #4
    65d4:	5099      	str	r1, [r3, r2]
    pGetAttr[DL_FREQUENCY] = LORAREG_GetAttr_DlFrequency;
    65d6:	4923      	ldr	r1, [pc, #140]	; (6664 <LORAREG_InitGetAttrFnPtrsIN+0x120>)
    65d8:	320c      	adds	r2, #12
    65da:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    65dc:	4922      	ldr	r1, [pc, #136]	; (6668 <LORAREG_InitGetAttrFnPtrsIN+0x124>)
    65de:	3208      	adds	r2, #8
    65e0:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    65e2:	4922      	ldr	r1, [pc, #136]	; (666c <LORAREG_InitGetAttrFnPtrsIN+0x128>)
    65e4:	3204      	adds	r2, #4
    65e6:	5099      	str	r1, [r3, r2]
}
    65e8:	4770      	bx	lr
    65ea:	46c0      	nop			; (mov r8, r8)
    65ec:	20000230 	.word	0x20000230
    65f0:	000045d9 	.word	0x000045d9
    65f4:	000058cd 	.word	0x000058cd
    65f8:	00005909 	.word	0x00005909
    65fc:	00005941 	.word	0x00005941
    6600:	000034ed 	.word	0x000034ed
    6604:	000034fd 	.word	0x000034fd
    6608:	00003515 	.word	0x00003515
    660c:	00003525 	.word	0x00003525
    6610:	00004411 	.word	0x00004411
    6614:	00003535 	.word	0x00003535
    6618:	00003545 	.word	0x00003545
    661c:	000044dd 	.word	0x000044dd
    6620:	0000384d 	.word	0x0000384d
    6624:	00003595 	.word	0x00003595
    6628:	0000475d 	.word	0x0000475d
    662c:	00005979 	.word	0x00005979
    6630:	000059b1 	.word	0x000059b1
    6634:	000059e9 	.word	0x000059e9
    6638:	000035f5 	.word	0x000035f5
    663c:	000035ff 	.word	0x000035ff
    6640:	00003609 	.word	0x00003609
    6644:	00003615 	.word	0x00003615
    6648:	00003621 	.word	0x00003621
    664c:	0000362b 	.word	0x0000362b
    6650:	00003633 	.word	0x00003633
    6654:	0000363b 	.word	0x0000363b
    6658:	00005a49 	.word	0x00005a49
    665c:	00003e4d 	.word	0x00003e4d
    6660:	00003665 	.word	0x00003665
    6664:	00004429 	.word	0x00004429
    6668:	00003645 	.word	0x00003645
    666c:	00003655 	.word	0x00003655

00006670 <LORAREG_InitGetAttrFnPtrsJP>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT3;
    6670:	4b2c      	ldr	r3, [pc, #176]	; (6724 <LORAREG_InitGetAttrFnPtrsJP+0xb4>)
    6672:	4a2d      	ldr	r2, [pc, #180]	; (6728 <LORAREG_InitGetAttrFnPtrsJP+0xb8>)
    6674:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT2;
    6676:	4a2d      	ldr	r2, [pc, #180]	; (672c <LORAREG_InitGetAttrFnPtrsJP+0xbc>)
    6678:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT2;
    667a:	4a2d      	ldr	r2, [pc, #180]	; (6730 <LORAREG_InitGetAttrFnPtrsJP+0xc0>)
    667c:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT3;
    667e:	4a2d      	ldr	r2, [pc, #180]	; (6734 <LORAREG_InitGetAttrFnPtrsJP+0xc4>)
    6680:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    6682:	4a2d      	ldr	r2, [pc, #180]	; (6738 <LORAREG_InitGetAttrFnPtrsJP+0xc8>)
    6684:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    6686:	4a2d      	ldr	r2, [pc, #180]	; (673c <LORAREG_InitGetAttrFnPtrsJP+0xcc>)
    6688:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    668a:	4a2d      	ldr	r2, [pc, #180]	; (6740 <LORAREG_InitGetAttrFnPtrsJP+0xd0>)
    668c:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    668e:	4a2d      	ldr	r2, [pc, #180]	; (6744 <LORAREG_InitGetAttrFnPtrsJP+0xd4>)
    6690:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    6692:	4a2d      	ldr	r2, [pc, #180]	; (6748 <LORAREG_InitGetAttrFnPtrsJP+0xd8>)
    6694:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    6696:	4a2d      	ldr	r2, [pc, #180]	; (674c <LORAREG_InitGetAttrFnPtrsJP+0xdc>)
    6698:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    669a:	4a2d      	ldr	r2, [pc, #180]	; (6750 <LORAREG_InitGetAttrFnPtrsJP+0xe0>)
    669c:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT2;
    669e:	4a2d      	ldr	r2, [pc, #180]	; (6754 <LORAREG_InitGetAttrFnPtrsJP+0xe4>)
    66a0:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    66a2:	4a2d      	ldr	r2, [pc, #180]	; (6758 <LORAREG_InitGetAttrFnPtrsJP+0xe8>)
    66a4:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    66a6:	4a2d      	ldr	r2, [pc, #180]	; (675c <LORAREG_InitGetAttrFnPtrsJP+0xec>)
    66a8:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType4;
    66aa:	4a2d      	ldr	r2, [pc, #180]	; (6760 <LORAREG_InitGetAttrFnPtrsJP+0xf0>)
    66ac:	665a      	str	r2, [r3, #100]	; 0x64
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT2;
    66ae:	492d      	ldr	r1, [pc, #180]	; (6764 <LORAREG_InitGetAttrFnPtrsJP+0xf4>)
    66b0:	2284      	movs	r2, #132	; 0x84
    66b2:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT2;
    66b4:	492c      	ldr	r1, [pc, #176]	; (6768 <LORAREG_InitGetAttrFnPtrsJP+0xf8>)
    66b6:	3204      	adds	r2, #4
    66b8:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT2;
    66ba:	492c      	ldr	r1, [pc, #176]	; (676c <LORAREG_InitGetAttrFnPtrsJP+0xfc>)
    66bc:	3204      	adds	r2, #4
    66be:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    66c0:	492b      	ldr	r1, [pc, #172]	; (6770 <LORAREG_InitGetAttrFnPtrsJP+0x100>)
    66c2:	3208      	adds	r2, #8
    66c4:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    66c6:	492b      	ldr	r1, [pc, #172]	; (6774 <LORAREG_InitGetAttrFnPtrsJP+0x104>)
    66c8:	3204      	adds	r2, #4
    66ca:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    66cc:	492a      	ldr	r1, [pc, #168]	; (6778 <LORAREG_InitGetAttrFnPtrsJP+0x108>)
    66ce:	3204      	adds	r2, #4
    66d0:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    66d2:	492a      	ldr	r1, [pc, #168]	; (677c <LORAREG_InitGetAttrFnPtrsJP+0x10c>)
    66d4:	3204      	adds	r2, #4
    66d6:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    66d8:	4929      	ldr	r1, [pc, #164]	; (6780 <LORAREG_InitGetAttrFnPtrsJP+0x110>)
    66da:	3204      	adds	r2, #4
    66dc:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    66de:	4929      	ldr	r1, [pc, #164]	; (6784 <LORAREG_InitGetAttrFnPtrsJP+0x114>)
    66e0:	3204      	adds	r2, #4
    66e2:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    66e4:	4928      	ldr	r1, [pc, #160]	; (6788 <LORAREG_InitGetAttrFnPtrsJP+0x118>)
    66e6:	3204      	adds	r2, #4
    66e8:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    66ea:	4928      	ldr	r1, [pc, #160]	; (678c <LORAREG_InitGetAttrFnPtrsJP+0x11c>)
    66ec:	3204      	adds	r2, #4
    66ee:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT2;
    66f0:	4927      	ldr	r1, [pc, #156]	; (6790 <LORAREG_InitGetAttrFnPtrsJP+0x120>)
    66f2:	3204      	adds	r2, #4
    66f4:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel2;
    66f6:	4927      	ldr	r1, [pc, #156]	; (6794 <LORAREG_InitGetAttrFnPtrsJP+0x124>)
    66f8:	3204      	adds	r2, #4
    66fa:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    66fc:	4926      	ldr	r1, [pc, #152]	; (6798 <LORAREG_InitGetAttrFnPtrsJP+0x128>)
    66fe:	3204      	adds	r2, #4
    6700:	5099      	str	r1, [r3, r2]
    pGetAttr[DEFAULT_LBT_PARAMS] = LORAREG_GetAttr_DefLBTParams;
    6702:	4926      	ldr	r1, [pc, #152]	; (679c <LORAREG_InitGetAttrFnPtrsJP+0x12c>)
    6704:	3204      	adds	r2, #4
    6706:	5099      	str	r1, [r3, r2]
    pGetAttr[MIN_LBT_CHANNEL_PAUSE_TIMER] = LORAREG_GetAttr_minLBTChPauseTimer;
    6708:	4925      	ldr	r1, [pc, #148]	; (67a0 <LORAREG_InitGetAttrFnPtrsJP+0x130>)
    670a:	3204      	adds	r2, #4
    670c:	5099      	str	r1, [r3, r2]
    pGetAttr[DL_FREQUENCY] = LORAREG_GetAttr_DlFrequency;
    670e:	4925      	ldr	r1, [pc, #148]	; (67a4 <LORAREG_InitGetAttrFnPtrsJP+0x134>)
    6710:	3204      	adds	r2, #4
    6712:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    6714:	4924      	ldr	r1, [pc, #144]	; (67a8 <LORAREG_InitGetAttrFnPtrsJP+0x138>)
    6716:	3208      	adds	r2, #8
    6718:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    671a:	4924      	ldr	r1, [pc, #144]	; (67ac <LORAREG_InitGetAttrFnPtrsJP+0x13c>)
    671c:	3204      	adds	r2, #4
    671e:	5099      	str	r1, [r3, r2]
}
    6720:	4770      	bx	lr
    6722:	46c0      	nop			; (mov r8, r8)
    6724:	20000230 	.word	0x20000230
    6728:	00004715 	.word	0x00004715
    672c:	000058cd 	.word	0x000058cd
    6730:	00005909 	.word	0x00005909
    6734:	00005869 	.word	0x00005869
    6738:	000034ed 	.word	0x000034ed
    673c:	000034fd 	.word	0x000034fd
    6740:	00003515 	.word	0x00003515
    6744:	00003525 	.word	0x00003525
    6748:	00004411 	.word	0x00004411
    674c:	00003535 	.word	0x00003535
    6750:	00003545 	.word	0x00003545
    6754:	000044dd 	.word	0x000044dd
    6758:	0000384d 	.word	0x0000384d
    675c:	00003595 	.word	0x00003595
    6760:	00004621 	.word	0x00004621
    6764:	00005979 	.word	0x00005979
    6768:	000059b1 	.word	0x000059b1
    676c:	000059e9 	.word	0x000059e9
    6770:	000035f5 	.word	0x000035f5
    6774:	000035ff 	.word	0x000035ff
    6778:	00003609 	.word	0x00003609
    677c:	00003615 	.word	0x00003615
    6780:	00003621 	.word	0x00003621
    6784:	0000362b 	.word	0x0000362b
    6788:	00003633 	.word	0x00003633
    678c:	0000363b 	.word	0x0000363b
    6790:	00005a49 	.word	0x00005a49
    6794:	00003e4d 	.word	0x00003e4d
    6798:	00003665 	.word	0x00003665
    679c:	00003675 	.word	0x00003675
    67a0:	000047e5 	.word	0x000047e5
    67a4:	00004429 	.word	0x00004429
    67a8:	00003645 	.word	0x00003645
    67ac:	00003655 	.word	0x00003655

000067b0 <LORAREG_InitGetAttrFnPtrsKR>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT2;
    67b0:	4b2c      	ldr	r3, [pc, #176]	; (6864 <LORAREG_InitGetAttrFnPtrsKR+0xb4>)
    67b2:	4a2d      	ldr	r2, [pc, #180]	; (6868 <LORAREG_InitGetAttrFnPtrsKR+0xb8>)
    67b4:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT2;
    67b6:	4a2d      	ldr	r2, [pc, #180]	; (686c <LORAREG_InitGetAttrFnPtrsKR+0xbc>)
    67b8:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT2;
    67ba:	4a2d      	ldr	r2, [pc, #180]	; (6870 <LORAREG_InitGetAttrFnPtrsKR+0xc0>)
    67bc:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT2;
    67be:	4a2d      	ldr	r2, [pc, #180]	; (6874 <LORAREG_InitGetAttrFnPtrsKR+0xc4>)
    67c0:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    67c2:	4a2d      	ldr	r2, [pc, #180]	; (6878 <LORAREG_InitGetAttrFnPtrsKR+0xc8>)
    67c4:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    67c6:	4a2d      	ldr	r2, [pc, #180]	; (687c <LORAREG_InitGetAttrFnPtrsKR+0xcc>)
    67c8:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    67ca:	4a2d      	ldr	r2, [pc, #180]	; (6880 <LORAREG_InitGetAttrFnPtrsKR+0xd0>)
    67cc:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    67ce:	4a2d      	ldr	r2, [pc, #180]	; (6884 <LORAREG_InitGetAttrFnPtrsKR+0xd4>)
    67d0:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    67d2:	4a2d      	ldr	r2, [pc, #180]	; (6888 <LORAREG_InitGetAttrFnPtrsKR+0xd8>)
    67d4:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    67d6:	4a2d      	ldr	r2, [pc, #180]	; (688c <LORAREG_InitGetAttrFnPtrsKR+0xdc>)
    67d8:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    67da:	4a2d      	ldr	r2, [pc, #180]	; (6890 <LORAREG_InitGetAttrFnPtrsKR+0xe0>)
    67dc:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT2;
    67de:	4a2d      	ldr	r2, [pc, #180]	; (6894 <LORAREG_InitGetAttrFnPtrsKR+0xe4>)
    67e0:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    67e2:	4a2d      	ldr	r2, [pc, #180]	; (6898 <LORAREG_InitGetAttrFnPtrsKR+0xe8>)
    67e4:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    67e6:	4a2d      	ldr	r2, [pc, #180]	; (689c <LORAREG_InitGetAttrFnPtrsKR+0xec>)
    67e8:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType2;
    67ea:	4a2d      	ldr	r2, [pc, #180]	; (68a0 <LORAREG_InitGetAttrFnPtrsKR+0xf0>)
    67ec:	665a      	str	r2, [r3, #100]	; 0x64
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT2;
    67ee:	492d      	ldr	r1, [pc, #180]	; (68a4 <LORAREG_InitGetAttrFnPtrsKR+0xf4>)
    67f0:	2284      	movs	r2, #132	; 0x84
    67f2:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT2;
    67f4:	492c      	ldr	r1, [pc, #176]	; (68a8 <LORAREG_InitGetAttrFnPtrsKR+0xf8>)
    67f6:	3204      	adds	r2, #4
    67f8:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT2;
    67fa:	492c      	ldr	r1, [pc, #176]	; (68ac <LORAREG_InitGetAttrFnPtrsKR+0xfc>)
    67fc:	3204      	adds	r2, #4
    67fe:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    6800:	492b      	ldr	r1, [pc, #172]	; (68b0 <LORAREG_InitGetAttrFnPtrsKR+0x100>)
    6802:	3208      	adds	r2, #8
    6804:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    6806:	492b      	ldr	r1, [pc, #172]	; (68b4 <LORAREG_InitGetAttrFnPtrsKR+0x104>)
    6808:	3204      	adds	r2, #4
    680a:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    680c:	492a      	ldr	r1, [pc, #168]	; (68b8 <LORAREG_InitGetAttrFnPtrsKR+0x108>)
    680e:	3204      	adds	r2, #4
    6810:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    6812:	492a      	ldr	r1, [pc, #168]	; (68bc <LORAREG_InitGetAttrFnPtrsKR+0x10c>)
    6814:	3204      	adds	r2, #4
    6816:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    6818:	4929      	ldr	r1, [pc, #164]	; (68c0 <LORAREG_InitGetAttrFnPtrsKR+0x110>)
    681a:	3204      	adds	r2, #4
    681c:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    681e:	4929      	ldr	r1, [pc, #164]	; (68c4 <LORAREG_InitGetAttrFnPtrsKR+0x114>)
    6820:	3204      	adds	r2, #4
    6822:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    6824:	4928      	ldr	r1, [pc, #160]	; (68c8 <LORAREG_InitGetAttrFnPtrsKR+0x118>)
    6826:	3204      	adds	r2, #4
    6828:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    682a:	4928      	ldr	r1, [pc, #160]	; (68cc <LORAREG_InitGetAttrFnPtrsKR+0x11c>)
    682c:	3204      	adds	r2, #4
    682e:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT2;
    6830:	4927      	ldr	r1, [pc, #156]	; (68d0 <LORAREG_InitGetAttrFnPtrsKR+0x120>)
    6832:	3204      	adds	r2, #4
    6834:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel2;
    6836:	4927      	ldr	r1, [pc, #156]	; (68d4 <LORAREG_InitGetAttrFnPtrsKR+0x124>)
    6838:	3204      	adds	r2, #4
    683a:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    683c:	4926      	ldr	r1, [pc, #152]	; (68d8 <LORAREG_InitGetAttrFnPtrsKR+0x128>)
    683e:	3204      	adds	r2, #4
    6840:	5099      	str	r1, [r3, r2]
    pGetAttr[DEFAULT_LBT_PARAMS] = LORAREG_GetAttr_DefLBTParams;
    6842:	4926      	ldr	r1, [pc, #152]	; (68dc <LORAREG_InitGetAttrFnPtrsKR+0x12c>)
    6844:	3204      	adds	r2, #4
    6846:	5099      	str	r1, [r3, r2]
    pGetAttr[MIN_LBT_CHANNEL_PAUSE_TIMER] = LORAREG_GetAttr_minLBTChPauseTimer;
    6848:	4925      	ldr	r1, [pc, #148]	; (68e0 <LORAREG_InitGetAttrFnPtrsKR+0x130>)
    684a:	3204      	adds	r2, #4
    684c:	5099      	str	r1, [r3, r2]
    pGetAttr[DL_FREQUENCY] = LORAREG_GetAttr_DlFrequency;
    684e:	4925      	ldr	r1, [pc, #148]	; (68e4 <LORAREG_InitGetAttrFnPtrsKR+0x134>)
    6850:	3204      	adds	r2, #4
    6852:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    6854:	4924      	ldr	r1, [pc, #144]	; (68e8 <LORAREG_InitGetAttrFnPtrsKR+0x138>)
    6856:	3208      	adds	r2, #8
    6858:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    685a:	4924      	ldr	r1, [pc, #144]	; (68ec <LORAREG_InitGetAttrFnPtrsKR+0x13c>)
    685c:	3204      	adds	r2, #4
    685e:	5099      	str	r1, [r3, r2]
}
    6860:	4770      	bx	lr
    6862:	46c0      	nop			; (mov r8, r8)
    6864:	20000230 	.word	0x20000230
    6868:	000045d9 	.word	0x000045d9
    686c:	000058cd 	.word	0x000058cd
    6870:	00005909 	.word	0x00005909
    6874:	00005941 	.word	0x00005941
    6878:	000034ed 	.word	0x000034ed
    687c:	000034fd 	.word	0x000034fd
    6880:	00003515 	.word	0x00003515
    6884:	00003525 	.word	0x00003525
    6888:	00004411 	.word	0x00004411
    688c:	00003535 	.word	0x00003535
    6890:	00003545 	.word	0x00003545
    6894:	000044dd 	.word	0x000044dd
    6898:	0000384d 	.word	0x0000384d
    689c:	00003595 	.word	0x00003595
    68a0:	00004471 	.word	0x00004471
    68a4:	00005979 	.word	0x00005979
    68a8:	000059b1 	.word	0x000059b1
    68ac:	000059e9 	.word	0x000059e9
    68b0:	000035f5 	.word	0x000035f5
    68b4:	000035ff 	.word	0x000035ff
    68b8:	00003609 	.word	0x00003609
    68bc:	00003615 	.word	0x00003615
    68c0:	00003621 	.word	0x00003621
    68c4:	0000362b 	.word	0x0000362b
    68c8:	00003633 	.word	0x00003633
    68cc:	0000363b 	.word	0x0000363b
    68d0:	00005a49 	.word	0x00005a49
    68d4:	00003e4d 	.word	0x00003e4d
    68d8:	00003665 	.word	0x00003665
    68dc:	00003675 	.word	0x00003675
    68e0:	000047e5 	.word	0x000047e5
    68e4:	00004429 	.word	0x00004429
    68e8:	00003645 	.word	0x00003645
    68ec:	00003655 	.word	0x00003655

000068f0 <LORAREG_InitValidateAttrFnPtrsNA>:
    pValidateAttr[RX_FREQUENCY] = ValidateRxFreqT1;
    68f0:	4b0d      	ldr	r3, [pc, #52]	; (6928 <LORAREG_InitValidateAttrFnPtrsNA+0x38>)
    68f2:	4a0e      	ldr	r2, [pc, #56]	; (692c <LORAREG_InitValidateAttrFnPtrsNA+0x3c>)
    68f4:	605a      	str	r2, [r3, #4]
    pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT1;
    68f6:	4a0e      	ldr	r2, [pc, #56]	; (6930 <LORAREG_InitValidateAttrFnPtrsNA+0x40>)
    68f8:	609a      	str	r2, [r3, #8]
    pValidateAttr[RX_DATARATE] = ValidateDataRateRxT1;
    68fa:	4a0e      	ldr	r2, [pc, #56]	; (6934 <LORAREG_InitValidateAttrFnPtrsNA+0x44>)
    68fc:	63da      	str	r2, [r3, #60]	; 0x3c
    pValidateAttr[TX_DATARATE] = ValidateDataRateTxT1;
    68fe:	490e      	ldr	r1, [pc, #56]	; (6938 <LORAREG_InitValidateAttrFnPtrsNA+0x48>)
    6900:	6419      	str	r1, [r3, #64]	; 0x40
    pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    6902:	490e      	ldr	r1, [pc, #56]	; (693c <LORAREG_InitValidateAttrFnPtrsNA+0x4c>)
    6904:	6459      	str	r1, [r3, #68]	; 0x44
    pValidateAttr[DATA_RANGE] = ValidateDataRange;
    6906:	490e      	ldr	r1, [pc, #56]	; (6940 <LORAREG_InitValidateAttrFnPtrsNA+0x50>)
    6908:	6499      	str	r1, [r3, #72]	; 0x48
    pValidateAttr[CHANNEL_ID] = ValidateChannelId;
    690a:	490e      	ldr	r1, [pc, #56]	; (6944 <LORAREG_InitValidateAttrFnPtrsNA+0x54>)
    690c:	6559      	str	r1, [r3, #84]	; 0x54
    pValidateAttr[RX2_DATARATE] = ValidateDataRateRxT1;
    690e:	65da      	str	r2, [r3, #92]	; 0x5c
    pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    6910:	4a0d      	ldr	r2, [pc, #52]	; (6948 <LORAREG_InitValidateAttrFnPtrsNA+0x58>)
    6912:	661a      	str	r2, [r3, #96]	; 0x60
    pValidateAttr[CHANNEL_MASK] = ValidateChannelMask;
    6914:	4a0d      	ldr	r2, [pc, #52]	; (694c <LORAREG_InitValidateAttrFnPtrsNA+0x5c>)
    6916:	669a      	str	r2, [r3, #104]	; 0x68
    pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntl;
    6918:	4a0d      	ldr	r2, [pc, #52]	; (6950 <LORAREG_InitValidateAttrFnPtrsNA+0x60>)
    691a:	66da      	str	r2, [r3, #108]	; 0x6c
    pValidateAttr[TX_PWR] = ValidateTxPower;
    691c:	4a0d      	ldr	r2, [pc, #52]	; (6954 <LORAREG_InitValidateAttrFnPtrsNA+0x64>)
    691e:	675a      	str	r2, [r3, #116]	; 0x74
    pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntl;
    6920:	490d      	ldr	r1, [pc, #52]	; (6958 <LORAREG_InitValidateAttrFnPtrsNA+0x68>)
    6922:	22d8      	movs	r2, #216	; 0xd8
    6924:	5099      	str	r1, [r3, r2]
}
    6926:	4770      	bx	lr
    6928:	200003e8 	.word	0x200003e8
    692c:	00003a1d 	.word	0x00003a1d
    6930:	00005ddd 	.word	0x00005ddd
    6934:	00003775 	.word	0x00003775
    6938:	00003735 	.word	0x00003735
    693c:	000039c1 	.word	0x000039c1
    6940:	00005b3d 	.word	0x00005b3d
    6944:	000037c1 	.word	0x000037c1
    6948:	00003a51 	.word	0x00003a51
    694c:	000038ed 	.word	0x000038ed
    6950:	000038c1 	.word	0x000038c1
    6954:	000038d5 	.word	0x000038d5
    6958:	00005a21 	.word	0x00005a21

0000695c <LORAREG_InitValidateAttrFnPtrsEU>:
	pValidateAttr[RX_FREQUENCY] = ValidateFreq;
    695c:	4b0d      	ldr	r3, [pc, #52]	; (6994 <LORAREG_InitValidateAttrFnPtrsEU+0x38>)
    695e:	4a0e      	ldr	r2, [pc, #56]	; (6998 <LORAREG_InitValidateAttrFnPtrsEU+0x3c>)
    6960:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT2;
    6962:	4a0e      	ldr	r2, [pc, #56]	; (699c <LORAREG_InitValidateAttrFnPtrsEU+0x40>)
    6964:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRate;
    6966:	4a0e      	ldr	r2, [pc, #56]	; (69a0 <LORAREG_InitValidateAttrFnPtrsEU+0x44>)
    6968:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRate;
    696a:	641a      	str	r2, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    696c:	490d      	ldr	r1, [pc, #52]	; (69a4 <LORAREG_InitValidateAttrFnPtrsEU+0x48>)
    696e:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRangeT2;
    6970:	490d      	ldr	r1, [pc, #52]	; (69a8 <LORAREG_InitValidateAttrFnPtrsEU+0x4c>)
    6972:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelIdT2;
    6974:	490d      	ldr	r1, [pc, #52]	; (69ac <LORAREG_InitValidateAttrFnPtrsEU+0x50>)
    6976:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRate;
    6978:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    697a:	4a0d      	ldr	r2, [pc, #52]	; (69b0 <LORAREG_InitValidateAttrFnPtrsEU+0x54>)
    697c:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMaskT2;
    697e:	4a0d      	ldr	r2, [pc, #52]	; (69b4 <LORAREG_InitValidateAttrFnPtrsEU+0x58>)
    6980:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntlT2;
    6982:	4a0d      	ldr	r2, [pc, #52]	; (69b8 <LORAREG_InitValidateAttrFnPtrsEU+0x5c>)
    6984:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    6986:	4a0d      	ldr	r2, [pc, #52]	; (69bc <LORAREG_InitValidateAttrFnPtrsEU+0x60>)
    6988:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntlT2;
    698a:	490d      	ldr	r1, [pc, #52]	; (69c0 <LORAREG_InitValidateAttrFnPtrsEU+0x64>)
    698c:	22d8      	movs	r2, #216	; 0xd8
    698e:	5099      	str	r1, [r3, r2]
}
    6990:	4770      	bx	lr
    6992:	46c0      	nop			; (mov r8, r8)
    6994:	200003e8 	.word	0x200003e8
    6998:	00003ad9 	.word	0x00003ad9
    699c:	000048b5 	.word	0x000048b5
    69a0:	000039ad 	.word	0x000039ad
    69a4:	000039c1 	.word	0x000039c1
    69a8:	00005785 	.word	0x00005785
    69ac:	000037d9 	.word	0x000037d9
    69b0:	00003a51 	.word	0x00003a51
    69b4:	000038f1 	.word	0x000038f1
    69b8:	00003945 	.word	0x00003945
    69bc:	000038d5 	.word	0x000038d5
    69c0:	00003959 	.word	0x00003959

000069c4 <LORAREG_InitValidateAttrFnPtrsAS>:
	pValidateAttr[RX_FREQUENCY] = ValidateFrequencyAS;
    69c4:	4b0d      	ldr	r3, [pc, #52]	; (69fc <LORAREG_InitValidateAttrFnPtrsAS+0x38>)
    69c6:	4a0e      	ldr	r2, [pc, #56]	; (6a00 <LORAREG_InitValidateAttrFnPtrsAS+0x3c>)
    69c8:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT2;
    69ca:	4a0e      	ldr	r2, [pc, #56]	; (6a04 <LORAREG_InitValidateAttrFnPtrsAS+0x40>)
    69cc:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRateRxT2;
    69ce:	4a0e      	ldr	r2, [pc, #56]	; (6a08 <LORAREG_InitValidateAttrFnPtrsAS+0x44>)
    69d0:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRateTxT2;
    69d2:	490e      	ldr	r1, [pc, #56]	; (6a0c <LORAREG_InitValidateAttrFnPtrsAS+0x48>)
    69d4:	6419      	str	r1, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    69d6:	490e      	ldr	r1, [pc, #56]	; (6a10 <LORAREG_InitValidateAttrFnPtrsAS+0x4c>)
    69d8:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRangeT2;
    69da:	490e      	ldr	r1, [pc, #56]	; (6a14 <LORAREG_InitValidateAttrFnPtrsAS+0x50>)
    69dc:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelIdT2;
    69de:	490e      	ldr	r1, [pc, #56]	; (6a18 <LORAREG_InitValidateAttrFnPtrsAS+0x54>)
    69e0:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRateRxT2;
    69e2:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    69e4:	4a0d      	ldr	r2, [pc, #52]	; (6a1c <LORAREG_InitValidateAttrFnPtrsAS+0x58>)
    69e6:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMaskT2;
    69e8:	4a0d      	ldr	r2, [pc, #52]	; (6a20 <LORAREG_InitValidateAttrFnPtrsAS+0x5c>)
    69ea:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntlT2;
    69ec:	4a0d      	ldr	r2, [pc, #52]	; (6a24 <LORAREG_InitValidateAttrFnPtrsAS+0x60>)
    69ee:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    69f0:	4a0d      	ldr	r2, [pc, #52]	; (6a28 <LORAREG_InitValidateAttrFnPtrsAS+0x64>)
    69f2:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntlT2;
    69f4:	490d      	ldr	r1, [pc, #52]	; (6a2c <LORAREG_InitValidateAttrFnPtrsAS+0x68>)
    69f6:	22d8      	movs	r2, #216	; 0xd8
    69f8:	5099      	str	r1, [r3, r2]
}
    69fa:	4770      	bx	lr
    69fc:	200003e8 	.word	0x200003e8
    6a00:	00003af5 	.word	0x00003af5
    6a04:	000048b5 	.word	0x000048b5
    6a08:	00003799 	.word	0x00003799
    6a0c:	0000374d 	.word	0x0000374d
    6a10:	000039c1 	.word	0x000039c1
    6a14:	00005785 	.word	0x00005785
    6a18:	000037d9 	.word	0x000037d9
    6a1c:	00003a51 	.word	0x00003a51
    6a20:	000038f1 	.word	0x000038f1
    6a24:	00003945 	.word	0x00003945
    6a28:	000038d5 	.word	0x000038d5
    6a2c:	00003959 	.word	0x00003959

00006a30 <LORAREG_InitValidateAttrFnPtrsAU>:
	pValidateAttr[RX_FREQUENCY] = ValidateRxFreqT1;
    6a30:	4b0d      	ldr	r3, [pc, #52]	; (6a68 <LORAREG_InitValidateAttrFnPtrsAU+0x38>)
    6a32:	4a0e      	ldr	r2, [pc, #56]	; (6a6c <LORAREG_InitValidateAttrFnPtrsAU+0x3c>)
    6a34:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT1;
    6a36:	4a0e      	ldr	r2, [pc, #56]	; (6a70 <LORAREG_InitValidateAttrFnPtrsAU+0x40>)
    6a38:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRateRxT1;
    6a3a:	4a0e      	ldr	r2, [pc, #56]	; (6a74 <LORAREG_InitValidateAttrFnPtrsAU+0x44>)
    6a3c:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRateTxT1;
    6a3e:	490e      	ldr	r1, [pc, #56]	; (6a78 <LORAREG_InitValidateAttrFnPtrsAU+0x48>)
    6a40:	6419      	str	r1, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    6a42:	490e      	ldr	r1, [pc, #56]	; (6a7c <LORAREG_InitValidateAttrFnPtrsAU+0x4c>)
    6a44:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRange;
    6a46:	490e      	ldr	r1, [pc, #56]	; (6a80 <LORAREG_InitValidateAttrFnPtrsAU+0x50>)
    6a48:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelId;
    6a4a:	490e      	ldr	r1, [pc, #56]	; (6a84 <LORAREG_InitValidateAttrFnPtrsAU+0x54>)
    6a4c:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRateRxT1;
    6a4e:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    6a50:	4a0d      	ldr	r2, [pc, #52]	; (6a88 <LORAREG_InitValidateAttrFnPtrsAU+0x58>)
    6a52:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMask;
    6a54:	4a0d      	ldr	r2, [pc, #52]	; (6a8c <LORAREG_InitValidateAttrFnPtrsAU+0x5c>)
    6a56:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntl;
    6a58:	4a0d      	ldr	r2, [pc, #52]	; (6a90 <LORAREG_InitValidateAttrFnPtrsAU+0x60>)
    6a5a:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    6a5c:	4a0d      	ldr	r2, [pc, #52]	; (6a94 <LORAREG_InitValidateAttrFnPtrsAU+0x64>)
    6a5e:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntl;
    6a60:	490d      	ldr	r1, [pc, #52]	; (6a98 <LORAREG_InitValidateAttrFnPtrsAU+0x68>)
    6a62:	22d8      	movs	r2, #216	; 0xd8
    6a64:	5099      	str	r1, [r3, r2]
}
    6a66:	4770      	bx	lr
    6a68:	200003e8 	.word	0x200003e8
    6a6c:	00003a1d 	.word	0x00003a1d
    6a70:	00005ddd 	.word	0x00005ddd
    6a74:	00003775 	.word	0x00003775
    6a78:	00003735 	.word	0x00003735
    6a7c:	000039c1 	.word	0x000039c1
    6a80:	00005b3d 	.word	0x00005b3d
    6a84:	000037c1 	.word	0x000037c1
    6a88:	00003a51 	.word	0x00003a51
    6a8c:	000038ed 	.word	0x000038ed
    6a90:	000038c1 	.word	0x000038c1
    6a94:	000038d5 	.word	0x000038d5
    6a98:	00005a21 	.word	0x00005a21

00006a9c <LORAREG_InitValidateAttrFnPtrsIN>:
	pValidateAttr[RX_FREQUENCY] = ValidateFreqIN;
    6a9c:	4b0d      	ldr	r3, [pc, #52]	; (6ad4 <LORAREG_InitValidateAttrFnPtrsIN+0x38>)
    6a9e:	4a0e      	ldr	r2, [pc, #56]	; (6ad8 <LORAREG_InitValidateAttrFnPtrsIN+0x3c>)
    6aa0:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT2;
    6aa2:	4a0e      	ldr	r2, [pc, #56]	; (6adc <LORAREG_InitValidateAttrFnPtrsIN+0x40>)
    6aa4:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRate;
    6aa6:	4a0e      	ldr	r2, [pc, #56]	; (6ae0 <LORAREG_InitValidateAttrFnPtrsIN+0x44>)
    6aa8:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRate;
    6aaa:	641a      	str	r2, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    6aac:	490d      	ldr	r1, [pc, #52]	; (6ae4 <LORAREG_InitValidateAttrFnPtrsIN+0x48>)
    6aae:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRangeT2;
    6ab0:	490d      	ldr	r1, [pc, #52]	; (6ae8 <LORAREG_InitValidateAttrFnPtrsIN+0x4c>)
    6ab2:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelIdT2;
    6ab4:	490d      	ldr	r1, [pc, #52]	; (6aec <LORAREG_InitValidateAttrFnPtrsIN+0x50>)
    6ab6:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRate;
    6ab8:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    6aba:	4a0d      	ldr	r2, [pc, #52]	; (6af0 <LORAREG_InitValidateAttrFnPtrsIN+0x54>)
    6abc:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMaskT2;
    6abe:	4a0d      	ldr	r2, [pc, #52]	; (6af4 <LORAREG_InitValidateAttrFnPtrsIN+0x58>)
    6ac0:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntlT2;
    6ac2:	4a0d      	ldr	r2, [pc, #52]	; (6af8 <LORAREG_InitValidateAttrFnPtrsIN+0x5c>)
    6ac4:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    6ac6:	4a0d      	ldr	r2, [pc, #52]	; (6afc <LORAREG_InitValidateAttrFnPtrsIN+0x60>)
    6ac8:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntlT2;
    6aca:	490d      	ldr	r1, [pc, #52]	; (6b00 <LORAREG_InitValidateAttrFnPtrsIN+0x64>)
    6acc:	22d8      	movs	r2, #216	; 0xd8
    6ace:	5099      	str	r1, [r3, r2]
}
    6ad0:	4770      	bx	lr
    6ad2:	46c0      	nop			; (mov r8, r8)
    6ad4:	200003e8 	.word	0x200003e8
    6ad8:	000048d9 	.word	0x000048d9
    6adc:	000048b5 	.word	0x000048b5
    6ae0:	000039ad 	.word	0x000039ad
    6ae4:	000039c1 	.word	0x000039c1
    6ae8:	00005785 	.word	0x00005785
    6aec:	000037d9 	.word	0x000037d9
    6af0:	00003a51 	.word	0x00003a51
    6af4:	000038f1 	.word	0x000038f1
    6af8:	00003945 	.word	0x00003945
    6afc:	000038d5 	.word	0x000038d5
    6b00:	00003959 	.word	0x00003959

00006b04 <LORAREG_InitValidateAttrFnPtrsJP>:
	pValidateAttr[RX_FREQUENCY] = ValidateFreqJP;
    6b04:	4b0d      	ldr	r3, [pc, #52]	; (6b3c <LORAREG_InitValidateAttrFnPtrsJP+0x38>)
    6b06:	4a0e      	ldr	r2, [pc, #56]	; (6b40 <LORAREG_InitValidateAttrFnPtrsJP+0x3c>)
    6b08:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT2;
    6b0a:	4a0e      	ldr	r2, [pc, #56]	; (6b44 <LORAREG_InitValidateAttrFnPtrsJP+0x40>)
    6b0c:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRateRxT2;
    6b0e:	4a0e      	ldr	r2, [pc, #56]	; (6b48 <LORAREG_InitValidateAttrFnPtrsJP+0x44>)
    6b10:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRateTxT2;
    6b12:	490e      	ldr	r1, [pc, #56]	; (6b4c <LORAREG_InitValidateAttrFnPtrsJP+0x48>)
    6b14:	6419      	str	r1, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    6b16:	490e      	ldr	r1, [pc, #56]	; (6b50 <LORAREG_InitValidateAttrFnPtrsJP+0x4c>)
    6b18:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRangeT2;
    6b1a:	490e      	ldr	r1, [pc, #56]	; (6b54 <LORAREG_InitValidateAttrFnPtrsJP+0x50>)
    6b1c:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelIdT2;
    6b1e:	490e      	ldr	r1, [pc, #56]	; (6b58 <LORAREG_InitValidateAttrFnPtrsJP+0x54>)
    6b20:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRateRxT2;
    6b22:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    6b24:	4a0d      	ldr	r2, [pc, #52]	; (6b5c <LORAREG_InitValidateAttrFnPtrsJP+0x58>)
    6b26:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMaskT2;
    6b28:	4a0d      	ldr	r2, [pc, #52]	; (6b60 <LORAREG_InitValidateAttrFnPtrsJP+0x5c>)
    6b2a:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntlT2;
    6b2c:	4a0d      	ldr	r2, [pc, #52]	; (6b64 <LORAREG_InitValidateAttrFnPtrsJP+0x60>)
    6b2e:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    6b30:	4a0d      	ldr	r2, [pc, #52]	; (6b68 <LORAREG_InitValidateAttrFnPtrsJP+0x64>)
    6b32:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntlT2;
    6b34:	490d      	ldr	r1, [pc, #52]	; (6b6c <LORAREG_InitValidateAttrFnPtrsJP+0x68>)
    6b36:	22d8      	movs	r2, #216	; 0xd8
    6b38:	5099      	str	r1, [r3, r2]
}
    6b3a:	4770      	bx	lr
    6b3c:	200003e8 	.word	0x200003e8
    6b40:	00004909 	.word	0x00004909
    6b44:	000048b5 	.word	0x000048b5
    6b48:	00003799 	.word	0x00003799
    6b4c:	0000374d 	.word	0x0000374d
    6b50:	000039c1 	.word	0x000039c1
    6b54:	00005785 	.word	0x00005785
    6b58:	000037d9 	.word	0x000037d9
    6b5c:	00003a51 	.word	0x00003a51
    6b60:	000038f1 	.word	0x000038f1
    6b64:	00003945 	.word	0x00003945
    6b68:	000038d5 	.word	0x000038d5
    6b6c:	00003959 	.word	0x00003959

00006b70 <LORAREG_InitValidateAttrFnPtrsKR>:
	pValidateAttr[RX_FREQUENCY] = ValidateFreqKR;
    6b70:	4b0d      	ldr	r3, [pc, #52]	; (6ba8 <LORAREG_InitValidateAttrFnPtrsKR+0x38>)
    6b72:	4a0e      	ldr	r2, [pc, #56]	; (6bac <LORAREG_InitValidateAttrFnPtrsKR+0x3c>)
    6b74:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT2;
    6b76:	4a0e      	ldr	r2, [pc, #56]	; (6bb0 <LORAREG_InitValidateAttrFnPtrsKR+0x40>)
    6b78:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRate;
    6b7a:	4a0e      	ldr	r2, [pc, #56]	; (6bb4 <LORAREG_InitValidateAttrFnPtrsKR+0x44>)
    6b7c:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRate;
    6b7e:	641a      	str	r2, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    6b80:	490d      	ldr	r1, [pc, #52]	; (6bb8 <LORAREG_InitValidateAttrFnPtrsKR+0x48>)
    6b82:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRangeT2;
    6b84:	490d      	ldr	r1, [pc, #52]	; (6bbc <LORAREG_InitValidateAttrFnPtrsKR+0x4c>)
    6b86:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelIdT2;
    6b88:	490d      	ldr	r1, [pc, #52]	; (6bc0 <LORAREG_InitValidateAttrFnPtrsKR+0x50>)
    6b8a:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRate;
    6b8c:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    6b8e:	4a0d      	ldr	r2, [pc, #52]	; (6bc4 <LORAREG_InitValidateAttrFnPtrsKR+0x54>)
    6b90:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMaskT2;
    6b92:	4a0d      	ldr	r2, [pc, #52]	; (6bc8 <LORAREG_InitValidateAttrFnPtrsKR+0x58>)
    6b94:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntlT2;
    6b96:	4a0d      	ldr	r2, [pc, #52]	; (6bcc <LORAREG_InitValidateAttrFnPtrsKR+0x5c>)
    6b98:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    6b9a:	4a0d      	ldr	r2, [pc, #52]	; (6bd0 <LORAREG_InitValidateAttrFnPtrsKR+0x60>)
    6b9c:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntlT2;
    6b9e:	490d      	ldr	r1, [pc, #52]	; (6bd4 <LORAREG_InitValidateAttrFnPtrsKR+0x64>)
    6ba0:	22d8      	movs	r2, #216	; 0xd8
    6ba2:	5099      	str	r1, [r3, r2]
}
    6ba4:	4770      	bx	lr
    6ba6:	46c0      	nop			; (mov r8, r8)
    6ba8:	200003e8 	.word	0x200003e8
    6bac:	00004939 	.word	0x00004939
    6bb0:	000048b5 	.word	0x000048b5
    6bb4:	000039ad 	.word	0x000039ad
    6bb8:	000039c1 	.word	0x000039c1
    6bbc:	00005785 	.word	0x00005785
    6bc0:	000037d9 	.word	0x000037d9
    6bc4:	00003a51 	.word	0x00003a51
    6bc8:	000038f1 	.word	0x000038f1
    6bcc:	00003945 	.word	0x00003945
    6bd0:	000038d5 	.word	0x000038d5
    6bd4:	00003959 	.word	0x00003959

00006bd8 <LORAREG_InitSetAttrFnPtrsNA>:
	pSetAttr[DATA_RANGE] = setDataRange;
    6bd8:	4b03      	ldr	r3, [pc, #12]	; (6be8 <LORAREG_InitSetAttrFnPtrsNA+0x10>)
    6bda:	4a04      	ldr	r2, [pc, #16]	; (6bec <LORAREG_InitSetAttrFnPtrsNA+0x14>)
    6bdc:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatus;
    6bde:	4a04      	ldr	r2, [pc, #16]	; (6bf0 <LORAREG_InitSetAttrFnPtrsNA+0x18>)
    6be0:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[NEW_CHANNELS] = setNewChannelsT1;
    6be2:	4a04      	ldr	r2, [pc, #16]	; (6bf4 <LORAREG_InitSetAttrFnPtrsNA+0x1c>)
    6be4:	671a      	str	r2, [r3, #112]	; 0x70
}
    6be6:	4770      	bx	lr
    6be8:	2000030c 	.word	0x2000030c
    6bec:	00005ba5 	.word	0x00005ba5
    6bf0:	00005b19 	.word	0x00005b19
    6bf4:	00004981 	.word	0x00004981

00006bf8 <LORAREG_InitSetAttrFnPtrsEU>:
	pSetAttr[DATA_RANGE] = setDataRangeT2;
    6bf8:	4b08      	ldr	r3, [pc, #32]	; (6c1c <LORAREG_InitSetAttrFnPtrsEU+0x24>)
    6bfa:	4a09      	ldr	r2, [pc, #36]	; (6c20 <LORAREG_InitSetAttrFnPtrsEU+0x28>)
    6bfc:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatusT2;
    6bfe:	4a09      	ldr	r2, [pc, #36]	; (6c24 <LORAREG_InitSetAttrFnPtrsEU+0x2c>)
    6c00:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[DUTY_CYCLE] = setDutyCycle;
    6c02:	4a09      	ldr	r2, [pc, #36]	; (6c28 <LORAREG_InitSetAttrFnPtrsEU+0x30>)
    6c04:	679a      	str	r2, [r3, #120]	; 0x78
	pSetAttr[DUTY_CYCLE_TIMER] = setDutyCycleTimer;
    6c06:	4a09      	ldr	r2, [pc, #36]	; (6c2c <LORAREG_InitSetAttrFnPtrsEU+0x34>)
    6c08:	67da      	str	r2, [r3, #124]	; 0x7c
	pSetAttr[FREQUENCY] = setFrequency;
    6c0a:	4a09      	ldr	r2, [pc, #36]	; (6c30 <LORAREG_InitSetAttrFnPtrsEU+0x38>)
    6c0c:	601a      	str	r2, [r3, #0]
	pSetAttr[NEW_CHANNELS] = setNewChannel;
    6c0e:	4a09      	ldr	r2, [pc, #36]	; (6c34 <LORAREG_InitSetAttrFnPtrsEU+0x3c>)
    6c10:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[DL_FREQUENCY] = setDlFrequency;
    6c12:	4909      	ldr	r1, [pc, #36]	; (6c38 <LORAREG_InitSetAttrFnPtrsEU+0x40>)
    6c14:	22c8      	movs	r2, #200	; 0xc8
    6c16:	5099      	str	r1, [r3, r2]
}
    6c18:	4770      	bx	lr
    6c1a:	46c0      	nop			; (mov r8, r8)
    6c1c:	2000030c 	.word	0x2000030c
    6c20:	000057ad 	.word	0x000057ad
    6c24:	0000402d 	.word	0x0000402d
    6c28:	00004ccd 	.word	0x00004ccd
    6c2c:	00004f09 	.word	0x00004f09
    6c30:	00004bad 	.word	0x00004bad
    6c34:	00004ab9 	.word	0x00004ab9
    6c38:	00004a19 	.word	0x00004a19

00006c3c <LORAREG_InitSetAttrFnPtrsAS>:
	pSetAttr[DATA_RANGE] = setDataRangeT2;
    6c3c:	4b09      	ldr	r3, [pc, #36]	; (6c64 <LORAREG_InitSetAttrFnPtrsAS+0x28>)
    6c3e:	4a0a      	ldr	r2, [pc, #40]	; (6c68 <LORAREG_InitSetAttrFnPtrsAS+0x2c>)
    6c40:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatusT3;
    6c42:	4a0a      	ldr	r2, [pc, #40]	; (6c6c <LORAREG_InitSetAttrFnPtrsAS+0x30>)
    6c44:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[FREQUENCY] = setFrequency;
    6c46:	4a0a      	ldr	r2, [pc, #40]	; (6c70 <LORAREG_InitSetAttrFnPtrsAS+0x34>)
    6c48:	601a      	str	r2, [r3, #0]
	pSetAttr[DL_FREQUENCY] = setDlFrequency;
    6c4a:	490a      	ldr	r1, [pc, #40]	; (6c74 <LORAREG_InitSetAttrFnPtrsAS+0x38>)
    6c4c:	22c8      	movs	r2, #200	; 0xc8
    6c4e:	5099      	str	r1, [r3, r2]
    pSetAttr[NEW_CHANNELS] = setNewChannel;
    6c50:	4a09      	ldr	r2, [pc, #36]	; (6c78 <LORAREG_InitSetAttrFnPtrsAS+0x3c>)
    6c52:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[TX_PARAMS] = setTxParams;
    6c54:	4909      	ldr	r1, [pc, #36]	; (6c7c <LORAREG_InitSetAttrFnPtrsAS+0x40>)
    6c56:	22cc      	movs	r2, #204	; 0xcc
    6c58:	5099      	str	r1, [r3, r2]
	pSetAttr[DUTY_CYCLE] = setDutyCycle;
    6c5a:	4a09      	ldr	r2, [pc, #36]	; (6c80 <LORAREG_InitSetAttrFnPtrsAS+0x44>)
    6c5c:	679a      	str	r2, [r3, #120]	; 0x78
	pSetAttr[DUTY_CYCLE_TIMER] = setDutyCycleTimer;
    6c5e:	4a09      	ldr	r2, [pc, #36]	; (6c84 <LORAREG_InitSetAttrFnPtrsAS+0x48>)
    6c60:	67da      	str	r2, [r3, #124]	; 0x7c
}
    6c62:	4770      	bx	lr
    6c64:	2000030c 	.word	0x2000030c
    6c68:	000057ad 	.word	0x000057ad
    6c6c:	000041e1 	.word	0x000041e1
    6c70:	00004bad 	.word	0x00004bad
    6c74:	00004a19 	.word	0x00004a19
    6c78:	00004ab9 	.word	0x00004ab9
    6c7c:	00003b85 	.word	0x00003b85
    6c80:	00004ccd 	.word	0x00004ccd
    6c84:	00004f09 	.word	0x00004f09

00006c88 <LORAREG_InitSetAttrFnPtrsAU>:
	pSetAttr[DATA_RANGE] = setDataRange;
    6c88:	4b03      	ldr	r3, [pc, #12]	; (6c98 <LORAREG_InitSetAttrFnPtrsAU+0x10>)
    6c8a:	4a04      	ldr	r2, [pc, #16]	; (6c9c <LORAREG_InitSetAttrFnPtrsAU+0x14>)
    6c8c:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatus;
    6c8e:	4a04      	ldr	r2, [pc, #16]	; (6ca0 <LORAREG_InitSetAttrFnPtrsAU+0x18>)
    6c90:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[NEW_CHANNELS] = setNewChannelsT1;
    6c92:	4a04      	ldr	r2, [pc, #16]	; (6ca4 <LORAREG_InitSetAttrFnPtrsAU+0x1c>)
    6c94:	671a      	str	r2, [r3, #112]	; 0x70
}
    6c96:	4770      	bx	lr
    6c98:	2000030c 	.word	0x2000030c
    6c9c:	00005ba5 	.word	0x00005ba5
    6ca0:	00005b19 	.word	0x00005b19
    6ca4:	00004981 	.word	0x00004981

00006ca8 <LORAREG_InitSetAttrFnPtrsIN>:
	pSetAttr[DATA_RANGE] = setDataRangeT2;
    6ca8:	4b07      	ldr	r3, [pc, #28]	; (6cc8 <LORAREG_InitSetAttrFnPtrsIN+0x20>)
    6caa:	4a08      	ldr	r2, [pc, #32]	; (6ccc <LORAREG_InitSetAttrFnPtrsIN+0x24>)
    6cac:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatusT2;
    6cae:	4a08      	ldr	r2, [pc, #32]	; (6cd0 <LORAREG_InitSetAttrFnPtrsIN+0x28>)
    6cb0:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[FREQUENCY] = setFrequency;
    6cb2:	4a08      	ldr	r2, [pc, #32]	; (6cd4 <LORAREG_InitSetAttrFnPtrsIN+0x2c>)
    6cb4:	601a      	str	r2, [r3, #0]
	pSetAttr[NEW_CHANNELS] = setNewChannel;
    6cb6:	4a08      	ldr	r2, [pc, #32]	; (6cd8 <LORAREG_InitSetAttrFnPtrsIN+0x30>)
    6cb8:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[DL_FREQUENCY] = setDlFrequency;
    6cba:	4908      	ldr	r1, [pc, #32]	; (6cdc <LORAREG_InitSetAttrFnPtrsIN+0x34>)
    6cbc:	22c8      	movs	r2, #200	; 0xc8
    6cbe:	5099      	str	r1, [r3, r2]
	pSetAttr[TX_PARAMS] = setTxParams;
    6cc0:	4907      	ldr	r1, [pc, #28]	; (6ce0 <LORAREG_InitSetAttrFnPtrsIN+0x38>)
    6cc2:	3204      	adds	r2, #4
    6cc4:	5099      	str	r1, [r3, r2]
}
    6cc6:	4770      	bx	lr
    6cc8:	2000030c 	.word	0x2000030c
    6ccc:	000057ad 	.word	0x000057ad
    6cd0:	0000402d 	.word	0x0000402d
    6cd4:	00004bad 	.word	0x00004bad
    6cd8:	00004ab9 	.word	0x00004ab9
    6cdc:	00004a19 	.word	0x00004a19
    6ce0:	00003b85 	.word	0x00003b85

00006ce4 <LORAREG_InitSetAttrFnPtrsJP>:
	pSetAttr[DATA_RANGE] = setDataRangeT2;
    6ce4:	4b0a      	ldr	r3, [pc, #40]	; (6d10 <LORAREG_InitSetAttrFnPtrsJP+0x2c>)
    6ce6:	4a0b      	ldr	r2, [pc, #44]	; (6d14 <LORAREG_InitSetAttrFnPtrsJP+0x30>)
    6ce8:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatusT3;
    6cea:	4a0b      	ldr	r2, [pc, #44]	; (6d18 <LORAREG_InitSetAttrFnPtrsJP+0x34>)
    6cec:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[LBT_TIMER] = setLBTTimer;
    6cee:	490b      	ldr	r1, [pc, #44]	; (6d1c <LORAREG_InitSetAttrFnPtrsJP+0x38>)
    6cf0:	2280      	movs	r2, #128	; 0x80
    6cf2:	5099      	str	r1, [r3, r2]
	pSetAttr[FREQUENCY] = setFrequency;
    6cf4:	4a0a      	ldr	r2, [pc, #40]	; (6d20 <LORAREG_InitSetAttrFnPtrsJP+0x3c>)
    6cf6:	601a      	str	r2, [r3, #0]
	pSetAttr[DL_FREQUENCY] = setDlFrequency;
    6cf8:	490a      	ldr	r1, [pc, #40]	; (6d24 <LORAREG_InitSetAttrFnPtrsJP+0x40>)
    6cfa:	22c8      	movs	r2, #200	; 0xc8
    6cfc:	5099      	str	r1, [r3, r2]
	pSetAttr[NEW_CHANNELS] = setNewChannel;
    6cfe:	4a0a      	ldr	r2, [pc, #40]	; (6d28 <LORAREG_InitSetAttrFnPtrsJP+0x44>)
    6d00:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[TX_PARAMS] = setTxParams;
    6d02:	490a      	ldr	r1, [pc, #40]	; (6d2c <LORAREG_InitSetAttrFnPtrsJP+0x48>)
    6d04:	22cc      	movs	r2, #204	; 0xcc
    6d06:	5099      	str	r1, [r3, r2]
	pSetAttr[DUTY_CYCLE] = NULL;
    6d08:	2200      	movs	r2, #0
    6d0a:	679a      	str	r2, [r3, #120]	; 0x78
	pSetAttr[DUTY_CYCLE_TIMER] = NULL;
    6d0c:	67da      	str	r2, [r3, #124]	; 0x7c
}
    6d0e:	4770      	bx	lr
    6d10:	2000030c 	.word	0x2000030c
    6d14:	000057ad 	.word	0x000057ad
    6d18:	000041e1 	.word	0x000041e1
    6d1c:	0000544d 	.word	0x0000544d
    6d20:	00004bad 	.word	0x00004bad
    6d24:	00004a19 	.word	0x00004a19
    6d28:	00004ab9 	.word	0x00004ab9
    6d2c:	00003b85 	.word	0x00003b85

00006d30 <LORAREG_InitSetAttrFnPtrsKR>:
	pSetAttr[DATA_RANGE] = setDataRangeT2;
    6d30:	4b09      	ldr	r3, [pc, #36]	; (6d58 <LORAREG_InitSetAttrFnPtrsKR+0x28>)
    6d32:	4a0a      	ldr	r2, [pc, #40]	; (6d5c <LORAREG_InitSetAttrFnPtrsKR+0x2c>)
    6d34:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatusT3;
    6d36:	4a0a      	ldr	r2, [pc, #40]	; (6d60 <LORAREG_InitSetAttrFnPtrsKR+0x30>)
    6d38:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[LBT_TIMER] = setLBTTimer;
    6d3a:	490a      	ldr	r1, [pc, #40]	; (6d64 <LORAREG_InitSetAttrFnPtrsKR+0x34>)
    6d3c:	2280      	movs	r2, #128	; 0x80
    6d3e:	5099      	str	r1, [r3, r2]
	pSetAttr[FREQUENCY] = setFrequency;
    6d40:	4a09      	ldr	r2, [pc, #36]	; (6d68 <LORAREG_InitSetAttrFnPtrsKR+0x38>)
    6d42:	601a      	str	r2, [r3, #0]
	pSetAttr[DL_FREQUENCY] = setDlFrequency;
    6d44:	4909      	ldr	r1, [pc, #36]	; (6d6c <LORAREG_InitSetAttrFnPtrsKR+0x3c>)
    6d46:	22c8      	movs	r2, #200	; 0xc8
    6d48:	5099      	str	r1, [r3, r2]
	pSetAttr[NEW_CHANNELS] = setNewChannel;
    6d4a:	4a09      	ldr	r2, [pc, #36]	; (6d70 <LORAREG_InitSetAttrFnPtrsKR+0x40>)
    6d4c:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[TX_PARAMS] = setTxParams;
    6d4e:	4909      	ldr	r1, [pc, #36]	; (6d74 <LORAREG_InitSetAttrFnPtrsKR+0x44>)
    6d50:	22cc      	movs	r2, #204	; 0xcc
    6d52:	5099      	str	r1, [r3, r2]
}
    6d54:	4770      	bx	lr
    6d56:	46c0      	nop			; (mov r8, r8)
    6d58:	2000030c 	.word	0x2000030c
    6d5c:	000057ad 	.word	0x000057ad
    6d60:	000041e1 	.word	0x000041e1
    6d64:	0000544d 	.word	0x0000544d
    6d68:	00004bad 	.word	0x00004bad
    6d6c:	00004a19 	.word	0x00004a19
    6d70:	00004ab9 	.word	0x00004ab9
    6d74:	00003b85 	.word	0x00003b85

00006d78 <LORAREG_GetAttr>:
{
    6d78:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    6d7a:	230a      	movs	r3, #10
	if(attrType < REG_NUM_ATTRIBUTES)
    6d7c:	2836      	cmp	r0, #54	; 0x36
    6d7e:	d901      	bls.n	6d84 <LORAREG_GetAttr+0xc>
}
    6d80:	0018      	movs	r0, r3
    6d82:	bd10      	pop	{r4, pc}
	    result = pGetAttr[attrType](attrType, attrInput,attrOutput);	
    6d84:	0084      	lsls	r4, r0, #2
    6d86:	4b02      	ldr	r3, [pc, #8]	; (6d90 <LORAREG_GetAttr+0x18>)
    6d88:	58e3      	ldr	r3, [r4, r3]
    6d8a:	4798      	blx	r3
    6d8c:	0003      	movs	r3, r0
    6d8e:	e7f7      	b.n	6d80 <LORAREG_GetAttr+0x8>
    6d90:	20000230 	.word	0x20000230

00006d94 <LORAREG_ValidateAttr>:
{
    6d94:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    6d96:	230a      	movs	r3, #10
	if(attrType < REG_NUM_ATTRIBUTES)
    6d98:	2836      	cmp	r0, #54	; 0x36
    6d9a:	d901      	bls.n	6da0 <LORAREG_ValidateAttr+0xc>
}
    6d9c:	0018      	movs	r0, r3
    6d9e:	bd10      	pop	{r4, pc}
	    result = pValidateAttr[attrType](attrType, attrInput);		
    6da0:	0082      	lsls	r2, r0, #2
    6da2:	4b02      	ldr	r3, [pc, #8]	; (6dac <LORAREG_ValidateAttr+0x18>)
    6da4:	58d3      	ldr	r3, [r2, r3]
    6da6:	4798      	blx	r3
    6da8:	0003      	movs	r3, r0
    6daa:	e7f7      	b.n	6d9c <LORAREG_ValidateAttr+0x8>
    6dac:	200003e8 	.word	0x200003e8

00006db0 <LORAREG_SetAttr>:
{
    6db0:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    6db2:	230a      	movs	r3, #10
	if(attrType < REG_NUM_ATTRIBUTES)
    6db4:	2836      	cmp	r0, #54	; 0x36
    6db6:	d901      	bls.n	6dbc <LORAREG_SetAttr+0xc>
}
    6db8:	0018      	movs	r0, r3
    6dba:	bd10      	pop	{r4, pc}
	    result = pSetAttr[attrType](attrType, attrInput);		
    6dbc:	0082      	lsls	r2, r0, #2
    6dbe:	4b02      	ldr	r3, [pc, #8]	; (6dc8 <LORAREG_SetAttr+0x18>)
    6dc0:	58d3      	ldr	r3, [r2, r3]
    6dc2:	4798      	blx	r3
    6dc4:	0003      	movs	r3, r0
    6dc6:	e7f7      	b.n	6db8 <LORAREG_SetAttr+0x8>
    6dc8:	2000030c 	.word	0x2000030c

00006dcc <CreateAllRegSoftwareTimers>:
{
    6dcc:	b510      	push	{r4, lr}
    StackRetStatus_t status = SwTimerCreate(&regTimerId[0]);    
    6dce:	4805      	ldr	r0, [pc, #20]	; (6de4 <CreateAllRegSoftwareTimers+0x18>)
    6dd0:	4b05      	ldr	r3, [pc, #20]	; (6de8 <CreateAllRegSoftwareTimers+0x1c>)
    6dd2:	4798      	blx	r3
    if (LORAWAN_SUCCESS == status)
    6dd4:	2808      	cmp	r0, #8
    6dd6:	d000      	beq.n	6dda <CreateAllRegSoftwareTimers+0xe>
}
    6dd8:	bd10      	pop	{r4, pc}
        status = SwTimerCreate(&regTimerId[1]);
    6dda:	4804      	ldr	r0, [pc, #16]	; (6dec <CreateAllRegSoftwareTimers+0x20>)
    6ddc:	4b02      	ldr	r3, [pc, #8]	; (6de8 <CreateAllRegSoftwareTimers+0x1c>)
    6dde:	4798      	blx	r3
    6de0:	e7fa      	b.n	6dd8 <CreateAllRegSoftwareTimers+0xc>
    6de2:	46c0      	nop			; (mov r8, r8)
    6de4:	20000b44 	.word	0x20000b44
    6de8:	000018bd 	.word	0x000018bd
    6dec:	20000b45 	.word	0x20000b45

00006df0 <StopAllRegSoftwareTimers>:
{
    6df0:	b570      	push	{r4, r5, r6, lr}
	SwTimerStop(regTimerId[0]);
    6df2:	4d03      	ldr	r5, [pc, #12]	; (6e00 <StopAllRegSoftwareTimers+0x10>)
    6df4:	7828      	ldrb	r0, [r5, #0]
    6df6:	4c03      	ldr	r4, [pc, #12]	; (6e04 <StopAllRegSoftwareTimers+0x14>)
    6df8:	47a0      	blx	r4
	SwTimerStop(regTimerId[1]);
    6dfa:	7868      	ldrb	r0, [r5, #1]
    6dfc:	47a0      	blx	r4
}
    6dfe:	bd70      	pop	{r4, r5, r6, pc}
    6e00:	20000b44 	.word	0x20000b44
    6e04:	00001bf5 	.word	0x00001bf5

00006e08 <LORAREG_Init>:
{	
    6e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6e0a:	0007      	movs	r7, r0
	if(!initialized)
    6e0c:	4b24      	ldr	r3, [pc, #144]	; (6ea0 <LORAREG_Init+0x98>)
    6e0e:	781b      	ldrb	r3, [r3, #0]
    6e10:	2b00      	cmp	r3, #0
    6e12:	d109      	bne.n	6e28 <LORAREG_Init+0x20>
		if (LORAWAN_SUCCESS == CreateAllRegSoftwareTimers())
    6e14:	4b23      	ldr	r3, [pc, #140]	; (6ea4 <LORAREG_Init+0x9c>)
    6e16:	4798      	blx	r3
    6e18:	2808      	cmp	r0, #8
    6e1a:	d001      	beq.n	6e20 <LORAREG_Init+0x18>
			result = LORAWAN_RESOURCE_UNAVAILABLE;
    6e1c:	2014      	movs	r0, #20
    6e1e:	e006      	b.n	6e2e <LORAREG_Init+0x26>
			initialized = true;
    6e20:	2201      	movs	r2, #1
    6e22:	4b1f      	ldr	r3, [pc, #124]	; (6ea0 <LORAREG_Init+0x98>)
    6e24:	701a      	strb	r2, [r3, #0]
    6e26:	e002      	b.n	6e2e <LORAREG_Init+0x26>
		StopAllRegSoftwareTimers();	
    6e28:	4b1f      	ldr	r3, [pc, #124]	; (6ea8 <LORAREG_Init+0xa0>)
    6e2a:	4798      	blx	r3
	StackRetStatus_t result = LORAWAN_SUCCESS;
    6e2c:	2008      	movs	r0, #8
    6e2e:	2300      	movs	r3, #0
		pGetAttr[i] = InValidGetAttr;
    6e30:	4e1e      	ldr	r6, [pc, #120]	; (6eac <LORAREG_Init+0xa4>)
    6e32:	4d1f      	ldr	r5, [pc, #124]	; (6eb0 <LORAREG_Init+0xa8>)
		pValidateAttr[i] = InValidAttr;
    6e34:	4c1f      	ldr	r4, [pc, #124]	; (6eb4 <LORAREG_Init+0xac>)
    6e36:	4a20      	ldr	r2, [pc, #128]	; (6eb8 <LORAREG_Init+0xb0>)
		pSetAttr[i] = InValidAttr;
    6e38:	4920      	ldr	r1, [pc, #128]	; (6ebc <LORAREG_Init+0xb4>)
		pGetAttr[i] = InValidGetAttr;
    6e3a:	519d      	str	r5, [r3, r6]
		pValidateAttr[i] = InValidAttr;
    6e3c:	511a      	str	r2, [r3, r4]
		pSetAttr[i] = InValidAttr;
    6e3e:	505a      	str	r2, [r3, r1]
    6e40:	3304      	adds	r3, #4
	for(int i = 0; i < REG_NUM_ATTRIBUTES; i++)
    6e42:	2bdc      	cmp	r3, #220	; 0xdc
    6e44:	d1f9      	bne.n	6e3a <LORAREG_Init+0x32>
	if(ismBand == ISM_NA915)
    6e46:	2f02      	cmp	r7, #2
    6e48:	d00d      	beq.n	6e66 <LORAREG_Init+0x5e>
	else if(ismBand == ISM_EU868 || ismBand == ISM_EU433)
    6e4a:	2f01      	cmp	r7, #1
    6e4c:	d90f      	bls.n	6e6e <LORAREG_Init+0x66>
	else if(ismBand >= ISM_BRN923 && ismBand <= ISM_VTM923)
    6e4e:	1fbb      	subs	r3, r7, #6
    6e50:	2b08      	cmp	r3, #8
    6e52:	d910      	bls.n	6e76 <LORAREG_Init+0x6e>
	else if(ismBand == ISM_AU915)
    6e54:	2f03      	cmp	r7, #3
    6e56:	d012      	beq.n	6e7e <LORAREG_Init+0x76>
	else if(ismBand == ISM_IND865)
    6e58:	2f0f      	cmp	r7, #15
    6e5a:	d014      	beq.n	6e86 <LORAREG_Init+0x7e>
	else if(ismBand == ISM_JPN923)
    6e5c:	2f05      	cmp	r7, #5
    6e5e:	d016      	beq.n	6e8e <LORAREG_Init+0x86>
	else if(ismBand == ISM_KR920)
    6e60:	2f04      	cmp	r7, #4
    6e62:	d018      	beq.n	6e96 <LORAREG_Init+0x8e>
}
    6e64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    result = LORAReg_InitNA(ismBand);
    6e66:	2002      	movs	r0, #2
    6e68:	4b15      	ldr	r3, [pc, #84]	; (6ec0 <LORAREG_Init+0xb8>)
    6e6a:	4798      	blx	r3
    6e6c:	e7fa      	b.n	6e64 <LORAREG_Init+0x5c>
	    result = LORAReg_InitEU(ismBand);		
    6e6e:	0038      	movs	r0, r7
    6e70:	4b14      	ldr	r3, [pc, #80]	; (6ec4 <LORAREG_Init+0xbc>)
    6e72:	4798      	blx	r3
    6e74:	e7f6      	b.n	6e64 <LORAREG_Init+0x5c>
		result = LORAReg_InitAS(ismBand);
    6e76:	0038      	movs	r0, r7
    6e78:	4b13      	ldr	r3, [pc, #76]	; (6ec8 <LORAREG_Init+0xc0>)
    6e7a:	4798      	blx	r3
    6e7c:	e7f2      	b.n	6e64 <LORAREG_Init+0x5c>
		result = LORAReg_InitAU(ismBand);
    6e7e:	2003      	movs	r0, #3
    6e80:	4b12      	ldr	r3, [pc, #72]	; (6ecc <LORAREG_Init+0xc4>)
    6e82:	4798      	blx	r3
    6e84:	e7ee      	b.n	6e64 <LORAREG_Init+0x5c>
		result = LORAReg_InitIN(ismBand);
    6e86:	200f      	movs	r0, #15
    6e88:	4b11      	ldr	r3, [pc, #68]	; (6ed0 <LORAREG_Init+0xc8>)
    6e8a:	4798      	blx	r3
    6e8c:	e7ea      	b.n	6e64 <LORAREG_Init+0x5c>
		result = LORAReg_InitJP(ismBand);
    6e8e:	2005      	movs	r0, #5
    6e90:	4b10      	ldr	r3, [pc, #64]	; (6ed4 <LORAREG_Init+0xcc>)
    6e92:	4798      	blx	r3
    6e94:	e7e6      	b.n	6e64 <LORAREG_Init+0x5c>
		result = LORAReg_InitKR(ismBand);
    6e96:	2004      	movs	r0, #4
    6e98:	4b0f      	ldr	r3, [pc, #60]	; (6ed8 <LORAREG_Init+0xd0>)
    6e9a:	4798      	blx	r3
    6e9c:	e7e2      	b.n	6e64 <LORAREG_Init+0x5c>
    6e9e:	46c0      	nop			; (mov r8, r8)
    6ea0:	2000022d 	.word	0x2000022d
    6ea4:	00006dcd 	.word	0x00006dcd
    6ea8:	00006df1 	.word	0x00006df1
    6eac:	20000230 	.word	0x20000230
    6eb0:	000034e5 	.word	0x000034e5
    6eb4:	200003e8 	.word	0x200003e8
    6eb8:	000034e9 	.word	0x000034e9
    6ebc:	2000030c 	.word	0x2000030c
    6ec0:	00003305 	.word	0x00003305
    6ec4:	000029d9 	.word	0x000029d9
    6ec8:	000025bd 	.word	0x000025bd
    6ecc:	000027f5 	.word	0x000027f5
    6ed0:	00002c79 	.word	0x00002c79
    6ed4:	00002e35 	.word	0x00002e35
    6ed8:	00003071 	.word	0x00003071

00006edc <LORAREG_SupportedBands>:
	#endif
	#if (NA_BAND == 1)
	    (1 <<(ISM_NA915)) |
	#endif
	    0 ;
	*bands = value;
    6edc:	2301      	movs	r3, #1
    6ede:	425b      	negs	r3, r3
    6ee0:	8003      	strh	r3, [r0, #0]
	
	return status;
}
    6ee2:	2008      	movs	r0, #8
    6ee4:	4770      	bx	lr
	...

00006ee8 <LORAREG_UnInit>:

StackRetStatus_t LORAREG_UnInit(void)
{
    6ee8:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
	
	StopAllRegSoftwareTimers();
    6eea:	4b0d      	ldr	r3, [pc, #52]	; (6f20 <LORAREG_UnInit+0x38>)
    6eec:	4798      	blx	r3

#if (ENABLE_PDS == 1)
	/* Do not reset the mac fild id1 */
	if(RegParams.regParamItems.fileid)
    6eee:	23fa      	movs	r3, #250	; 0xfa
    6ef0:	005b      	lsls	r3, r3, #1
    6ef2:	4a0c      	ldr	r2, [pc, #48]	; (6f24 <LORAREG_UnInit+0x3c>)
    6ef4:	5cd0      	ldrb	r0, [r2, r3]
    6ef6:	2800      	cmp	r0, #0
    6ef8:	d106      	bne.n	6f08 <LORAREG_UnInit+0x20>
		{
			PDS_UnRegFile(PDS_FILE_REG_EU868_12_IDX);
		}
	}
#endif	
	memset(&RegParams,0,sizeof(RegParams_t));
    6efa:	4a0b      	ldr	r2, [pc, #44]	; (6f28 <LORAREG_UnInit+0x40>)
    6efc:	2100      	movs	r1, #0
    6efe:	4809      	ldr	r0, [pc, #36]	; (6f24 <LORAREG_UnInit+0x3c>)
    6f00:	4b0a      	ldr	r3, [pc, #40]	; (6f2c <LORAREG_UnInit+0x44>)
    6f02:	4798      	blx	r3
	
	return result;
}
    6f04:	200a      	movs	r0, #10
    6f06:	bd10      	pop	{r4, pc}
	    PDS_UnRegFile(RegParams.regParamItems.fileid);
    6f08:	4b09      	ldr	r3, [pc, #36]	; (6f30 <LORAREG_UnInit+0x48>)
    6f0a:	4798      	blx	r3
		if(RegParams.band == ISM_EU868)
    6f0c:	2326      	movs	r3, #38	; 0x26
    6f0e:	4a05      	ldr	r2, [pc, #20]	; (6f24 <LORAREG_UnInit+0x3c>)
    6f10:	5cd3      	ldrb	r3, [r2, r3]
    6f12:	2b00      	cmp	r3, #0
    6f14:	d1f1      	bne.n	6efa <LORAREG_UnInit+0x12>
			PDS_UnRegFile(PDS_FILE_REG_EU868_12_IDX);
    6f16:	200b      	movs	r0, #11
    6f18:	4b05      	ldr	r3, [pc, #20]	; (6f30 <LORAREG_UnInit+0x48>)
    6f1a:	4798      	blx	r3
    6f1c:	e7ed      	b.n	6efa <LORAREG_UnInit+0x12>
    6f1e:	46c0      	nop			; (mov r8, r8)
    6f20:	00006df1 	.word	0x00006df1
    6f24:	20000b48 	.word	0x20000b48
    6f28:	000001ff 	.word	0x000001ff
    6f2c:	000112e7 	.word	0x000112e7
    6f30:	00001f09 	.word	0x00001f09

00006f34 <PMM_Wakeup>:

/**
* \brief Wakeup from sleep
*/
void PMM_Wakeup(void)
{
    6f34:	b570      	push	{r4, r5, r6, lr}
    uint64_t sleptTimeUs = 0;

    if (PMM_STATE_SLEEP == pmmState)
    6f36:	4b16      	ldr	r3, [pc, #88]	; (6f90 <PMM_Wakeup+0x5c>)
    6f38:	781b      	ldrb	r3, [r3, #0]
    6f3a:	2b01      	cmp	r3, #1
    6f3c:	d000      	beq.n	6f40 <PMM_Wakeup+0xc>
        {
            sleepReq->pmmWakeupCallback(US_TO_MS(sleptTimeUs));
            sleepReq = NULL;
        }
    }
}
    6f3e:	bd70      	pop	{r4, r5, r6, pc}
		pmmState = PMM_STATE_ACTIVE;
    6f40:	2200      	movs	r2, #0
    6f42:	4b13      	ldr	r3, [pc, #76]	; (6f90 <PMM_Wakeup+0x5c>)
    6f44:	701a      	strb	r2, [r3, #0]
        sleptTimeUs = SLEEP_TICKS_TO_US(SleepTimerGetElapsedTime());
    6f46:	4b13      	ldr	r3, [pc, #76]	; (6f94 <PMM_Wakeup+0x60>)
    6f48:	4798      	blx	r3
    6f4a:	4b13      	ldr	r3, [pc, #76]	; (6f98 <PMM_Wakeup+0x64>)
    6f4c:	4798      	blx	r3
    6f4e:	4913      	ldr	r1, [pc, #76]	; (6f9c <PMM_Wakeup+0x68>)
    6f50:	4b13      	ldr	r3, [pc, #76]	; (6fa0 <PMM_Wakeup+0x6c>)
    6f52:	4798      	blx	r3
    6f54:	4b13      	ldr	r3, [pc, #76]	; (6fa4 <PMM_Wakeup+0x70>)
    6f56:	4798      	blx	r3
    6f58:	0004      	movs	r4, r0
    6f5a:	000d      	movs	r5, r1
        SleepTimerStop();
    6f5c:	4b12      	ldr	r3, [pc, #72]	; (6fa8 <PMM_Wakeup+0x74>)
    6f5e:	4798      	blx	r3
        SystemTimerSync(sleptTimeUs);
    6f60:	0020      	movs	r0, r4
    6f62:	0029      	movs	r1, r5
    6f64:	4b11      	ldr	r3, [pc, #68]	; (6fac <PMM_Wakeup+0x78>)
    6f66:	4798      	blx	r3
        if (sleepReq && sleepReq->pmmWakeupCallback)
    6f68:	4b11      	ldr	r3, [pc, #68]	; (6fb0 <PMM_Wakeup+0x7c>)
    6f6a:	681b      	ldr	r3, [r3, #0]
    6f6c:	2b00      	cmp	r3, #0
    6f6e:	d0e6      	beq.n	6f3e <PMM_Wakeup+0xa>
    6f70:	689e      	ldr	r6, [r3, #8]
    6f72:	2e00      	cmp	r6, #0
    6f74:	d0e3      	beq.n	6f3e <PMM_Wakeup+0xa>
            sleepReq->pmmWakeupCallback(US_TO_MS(sleptTimeUs));
    6f76:	22fa      	movs	r2, #250	; 0xfa
    6f78:	0092      	lsls	r2, r2, #2
    6f7a:	2300      	movs	r3, #0
    6f7c:	0020      	movs	r0, r4
    6f7e:	0029      	movs	r1, r5
    6f80:	4c0c      	ldr	r4, [pc, #48]	; (6fb4 <PMM_Wakeup+0x80>)
    6f82:	47a0      	blx	r4
    6f84:	47b0      	blx	r6
            sleepReq = NULL;
    6f86:	2200      	movs	r2, #0
    6f88:	4b09      	ldr	r3, [pc, #36]	; (6fb0 <PMM_Wakeup+0x7c>)
    6f8a:	601a      	str	r2, [r3, #0]
}
    6f8c:	e7d7      	b.n	6f3e <PMM_Wakeup+0xa>
    6f8e:	46c0      	nop			; (mov r8, r8)
    6f90:	200004c4 	.word	0x200004c4
    6f94:	00006fb9 	.word	0x00006fb9
    6f98:	0001024d 	.word	0x0001024d
    6f9c:	41f423d7 	.word	0x41f423d7
    6fa0:	0000fbf5 	.word	0x0000fbf5
    6fa4:	0000f331 	.word	0x0000f331
    6fa8:	00006fcd 	.word	0x00006fcd
    6fac:	00001d9d 	.word	0x00001d9d
    6fb0:	200004c8 	.word	0x200004c8
    6fb4:	0000f26d 	.word	0x0000f26d

00006fb8 <SleepTimerGetElapsedTime>:
/**
* \brief Calculate the Elapsed Time from the previous call of this function
* \retval Elapsed time in ticks
*/
uint32_t SleepTimerGetElapsedTime(void)
{
    6fb8:	b510      	push	{r4, lr}
	return rtc_count_get_count(&rtc);
    6fba:	4802      	ldr	r0, [pc, #8]	; (6fc4 <SleepTimerGetElapsedTime+0xc>)
    6fbc:	4b02      	ldr	r3, [pc, #8]	; (6fc8 <SleepTimerGetElapsedTime+0x10>)
    6fbe:	4798      	blx	r3
}
    6fc0:	bd10      	pop	{r4, pc}
    6fc2:	46c0      	nop			; (mov r8, r8)
    6fc4:	20000d48 	.word	0x20000d48
    6fc8:	00000425 	.word	0x00000425

00006fcc <SleepTimerStop>:

/**
* \brief Stop the sleep timer
*/
void SleepTimerStop(void)
{
    6fcc:	b510      	push	{r4, lr}
	rtc_count_disable_callback(&rtc, RTC_COUNT_CALLBACK_COMPARE_0);
    6fce:	2108      	movs	r1, #8
    6fd0:	4801      	ldr	r0, [pc, #4]	; (6fd8 <SleepTimerStop+0xc>)
    6fd2:	4b02      	ldr	r3, [pc, #8]	; (6fdc <SleepTimerStop+0x10>)
    6fd4:	4798      	blx	r3
}
    6fd6:	bd10      	pop	{r4, pc}
    6fd8:	20000d48 	.word	0x20000d48
    6fdc:	00000451 	.word	0x00000451

00006fe0 <HAL_SPISend>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    6fe0:	4b13      	ldr	r3, [pc, #76]	; (7030 <HAL_SPISend+0x50>)
    6fe2:	681b      	ldr	r3, [r3, #0]
static uint8_t HAL_SPISend(uint8_t data)
{
	uint16_t read_val = 0;
	
	/* Write the byte in the transceiver data register */
	while (!spi_is_ready_to_write(&master));
    6fe4:	2101      	movs	r1, #1

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    6fe6:	7e1a      	ldrb	r2, [r3, #24]
    6fe8:	420a      	tst	r2, r1
    6fea:	d0fc      	beq.n	6fe6 <HAL_SPISend+0x6>
    6fec:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    6fee:	07d2      	lsls	r2, r2, #31
    6ff0:	d500      	bpl.n	6ff4 <HAL_SPISend+0x14>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    6ff2:	6298      	str	r0, [r3, #40]	; 0x28
	spi_write(&master, data);
	while (!spi_is_write_complete(&master));
    6ff4:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    6ff6:	7e1a      	ldrb	r2, [r3, #24]
    6ff8:	420a      	tst	r2, r1
    6ffa:	d0fc      	beq.n	6ff6 <HAL_SPISend+0x16>
	
	while (!spi_is_ready_to_read(&master));
    6ffc:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    6ffe:	7e1a      	ldrb	r2, [r3, #24]
    7000:	420a      	tst	r2, r1
    7002:	d0fc      	beq.n	6ffe <HAL_SPISend+0x1e>
    7004:	7e1a      	ldrb	r2, [r3, #24]
	uint16_t read_val = 0;
    7006:	2000      	movs	r0, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    7008:	0752      	lsls	r2, r2, #29
    700a:	d50a      	bpl.n	7022 <HAL_SPISend+0x42>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    700c:	8b5a      	ldrh	r2, [r3, #26]
    700e:	0752      	lsls	r2, r2, #29
    7010:	d501      	bpl.n	7016 <HAL_SPISend+0x36>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    7012:	2204      	movs	r2, #4
    7014:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    7016:	4a06      	ldr	r2, [pc, #24]	; (7030 <HAL_SPISend+0x50>)
    7018:	7992      	ldrb	r2, [r2, #6]
    701a:	2a01      	cmp	r2, #1
    701c:	d003      	beq.n	7026 <HAL_SPISend+0x46>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    701e:	6a98      	ldr	r0, [r3, #40]	; 0x28
    7020:	b2c0      	uxtb	r0, r0
	spi_read(&master, &read_val);
	
	return ((uint8_t)read_val);
    7022:	b2c0      	uxtb	r0, r0
}
    7024:	4770      	bx	lr
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    7026:	6a98      	ldr	r0, [r3, #40]	; 0x28
    7028:	05c0      	lsls	r0, r0, #23
    702a:	0dc0      	lsrs	r0, r0, #23
    702c:	e7f9      	b.n	7022 <HAL_SPISend+0x42>
    702e:	46c0      	nop			; (mov r8, r8)
    7030:	200004d8 	.word	0x200004d8

00007034 <HAL_ResetPinMakeOutput>:
{
    7034:	b500      	push	{lr}
    7036:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    7038:	a901      	add	r1, sp, #4
    703a:	2301      	movs	r3, #1
    703c:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
    703e:	2200      	movs	r2, #0
    7040:	708a      	strb	r2, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    7042:	700b      	strb	r3, [r1, #0]
	port_pin_set_config(SX_RF_RESET_PIN,&pin_conf);
    7044:	202f      	movs	r0, #47	; 0x2f
    7046:	4b02      	ldr	r3, [pc, #8]	; (7050 <HAL_ResetPinMakeOutput+0x1c>)
    7048:	4798      	blx	r3
}
    704a:	b003      	add	sp, #12
    704c:	bd00      	pop	{pc}
    704e:	46c0      	nop			; (mov r8, r8)
    7050:	000086a1 	.word	0x000086a1

00007054 <HAL_RadioDIO2Callback>:
{
    7054:	b510      	push	{r4, lr}
  if (interruptHandlerDio2)
    7056:	4b05      	ldr	r3, [pc, #20]	; (706c <HAL_RadioDIO2Callback+0x18>)
    7058:	681b      	ldr	r3, [r3, #0]
    705a:	2b00      	cmp	r3, #0
    705c:	d004      	beq.n	7068 <HAL_RadioDIO2Callback+0x14>
	PMM_Wakeup();
    705e:	4b04      	ldr	r3, [pc, #16]	; (7070 <HAL_RadioDIO2Callback+0x1c>)
    7060:	4798      	blx	r3
    interruptHandlerDio2();
    7062:	4b02      	ldr	r3, [pc, #8]	; (706c <HAL_RadioDIO2Callback+0x18>)
    7064:	681b      	ldr	r3, [r3, #0]
    7066:	4798      	blx	r3
}
    7068:	bd10      	pop	{r4, pc}
    706a:	46c0      	nop			; (mov r8, r8)
    706c:	200004d4 	.word	0x200004d4
    7070:	00006f35 	.word	0x00006f35

00007074 <HAL_RadioDIO1Callback>:
{
    7074:	b510      	push	{r4, lr}
  if (interruptHandlerDio1)
    7076:	4b05      	ldr	r3, [pc, #20]	; (708c <HAL_RadioDIO1Callback+0x18>)
    7078:	681b      	ldr	r3, [r3, #0]
    707a:	2b00      	cmp	r3, #0
    707c:	d004      	beq.n	7088 <HAL_RadioDIO1Callback+0x14>
	PMM_Wakeup();
    707e:	4b04      	ldr	r3, [pc, #16]	; (7090 <HAL_RadioDIO1Callback+0x1c>)
    7080:	4798      	blx	r3
    interruptHandlerDio1();
    7082:	4b02      	ldr	r3, [pc, #8]	; (708c <HAL_RadioDIO1Callback+0x18>)
    7084:	681b      	ldr	r3, [r3, #0]
    7086:	4798      	blx	r3
}
    7088:	bd10      	pop	{r4, pc}
    708a:	46c0      	nop			; (mov r8, r8)
    708c:	200004d0 	.word	0x200004d0
    7090:	00006f35 	.word	0x00006f35

00007094 <HAL_RadioDIO0Callback>:
{
    7094:	b510      	push	{r4, lr}
  if (interruptHandlerDio0)
    7096:	4b05      	ldr	r3, [pc, #20]	; (70ac <HAL_RadioDIO0Callback+0x18>)
    7098:	681b      	ldr	r3, [r3, #0]
    709a:	2b00      	cmp	r3, #0
    709c:	d004      	beq.n	70a8 <HAL_RadioDIO0Callback+0x14>
	PMM_Wakeup();
    709e:	4b04      	ldr	r3, [pc, #16]	; (70b0 <HAL_RadioDIO0Callback+0x1c>)
    70a0:	4798      	blx	r3
    interruptHandlerDio0();
    70a2:	4b02      	ldr	r3, [pc, #8]	; (70ac <HAL_RadioDIO0Callback+0x18>)
    70a4:	681b      	ldr	r3, [r3, #0]
    70a6:	4798      	blx	r3
}
    70a8:	bd10      	pop	{r4, pc}
    70aa:	46c0      	nop			; (mov r8, r8)
    70ac:	200004cc 	.word	0x200004cc
    70b0:	00006f35 	.word	0x00006f35

000070b4 <HAL_SPICSAssert>:
{
    70b4:	b510      	push	{r4, lr}
	spi_select_slave(&master, &slave, true);
    70b6:	2201      	movs	r2, #1
    70b8:	4902      	ldr	r1, [pc, #8]	; (70c4 <HAL_SPICSAssert+0x10>)
    70ba:	4803      	ldr	r0, [pc, #12]	; (70c8 <HAL_SPICSAssert+0x14>)
    70bc:	4b03      	ldr	r3, [pc, #12]	; (70cc <HAL_SPICSAssert+0x18>)
    70be:	4798      	blx	r3
}
    70c0:	bd10      	pop	{r4, pc}
    70c2:	46c0      	nop			; (mov r8, r8)
    70c4:	20000d80 	.word	0x20000d80
    70c8:	200004d8 	.word	0x200004d8
    70cc:	00007dd5 	.word	0x00007dd5

000070d0 <HAL_SPICSDeassert>:
{
    70d0:	b510      	push	{r4, lr}
	spi_select_slave(&master, &slave, false);
    70d2:	2200      	movs	r2, #0
    70d4:	4902      	ldr	r1, [pc, #8]	; (70e0 <HAL_SPICSDeassert+0x10>)
    70d6:	4803      	ldr	r0, [pc, #12]	; (70e4 <HAL_SPICSDeassert+0x14>)
    70d8:	4b03      	ldr	r3, [pc, #12]	; (70e8 <HAL_SPICSDeassert+0x18>)
    70da:	4798      	blx	r3
}
    70dc:	bd10      	pop	{r4, pc}
    70de:	46c0      	nop			; (mov r8, r8)
    70e0:	20000d80 	.word	0x20000d80
    70e4:	200004d8 	.word	0x200004d8
    70e8:	00007dd5 	.word	0x00007dd5

000070ec <HAL_RadioInit>:
{
    70ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    70ee:	46d6      	mov	lr, sl
    70f0:	464f      	mov	r7, r9
    70f2:	4646      	mov	r6, r8
    70f4:	b5c0      	push	{r6, r7, lr}
    70f6:	b090      	sub	sp, #64	; 0x40
	config->input_pull = PORT_PIN_PULL_UP;
    70f8:	ac01      	add	r4, sp, #4
    70fa:	2601      	movs	r6, #1
    70fc:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    70fe:	2500      	movs	r5, #0
    7100:	70a5      	strb	r5, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    7102:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(SX_RF_SPI_SCK, &pin_conf);
    7104:	0021      	movs	r1, r4
    7106:	2052      	movs	r0, #82	; 0x52
    7108:	4f56      	ldr	r7, [pc, #344]	; (7264 <HAL_RadioInit+0x178>)
    710a:	47b8      	blx	r7
	port_pin_set_config(SX_RF_SPI_MOSI, &pin_conf);
    710c:	0021      	movs	r1, r4
    710e:	203e      	movs	r0, #62	; 0x3e
    7110:	47b8      	blx	r7
	port_pin_set_config(SX_RF_SPI_CS, &pin_conf);
    7112:	0021      	movs	r1, r4
    7114:	203f      	movs	r0, #63	; 0x3f
    7116:	47b8      	blx	r7
	port_pin_set_config(SX_RF_RESET_PIN, &pin_conf);
    7118:	0021      	movs	r1, r4
    711a:	202f      	movs	r0, #47	; 0x2f
    711c:	47b8      	blx	r7
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    711e:	2280      	movs	r2, #128	; 0x80
    7120:	02d2      	lsls	r2, r2, #11
    7122:	4b51      	ldr	r3, [pc, #324]	; (7268 <HAL_RadioInit+0x17c>)
    7124:	619a      	str	r2, [r3, #24]
    7126:	4b51      	ldr	r3, [pc, #324]	; (726c <HAL_RadioInit+0x180>)
    7128:	2280      	movs	r2, #128	; 0x80
    712a:	05d2      	lsls	r2, r2, #23
    712c:	619a      	str	r2, [r3, #24]
    712e:	2280      	movs	r2, #128	; 0x80
    7130:	0612      	lsls	r2, r2, #24
    7132:	619a      	str	r2, [r3, #24]
    7134:	2280      	movs	r2, #128	; 0x80
    7136:	0212      	lsls	r2, r2, #8
    7138:	619a      	str	r2, [r3, #24]
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    713a:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(SX_RF_SPI_MISO, &pin_conf);
    713c:	0021      	movs	r1, r4
    713e:	2053      	movs	r0, #83	; 0x53
    7140:	47b8      	blx	r7
	extint_chan_get_config_defaults(&config_extint_chan);
    7142:	ac02      	add	r4, sp, #8
    7144:	0020      	movs	r0, r4
    7146:	4b4a      	ldr	r3, [pc, #296]	; (7270 <HAL_RadioInit+0x184>)
    7148:	4798      	blx	r3
	config_extint_chan.gpio_pin           = DIO0_EIC_PIN;
    714a:	2330      	movs	r3, #48	; 0x30
    714c:	9302      	str	r3, [sp, #8]
	config_extint_chan.gpio_pin_mux       = DIO0_EIC_MUX;
    714e:	6065      	str	r5, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    7150:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    7152:	72e6      	strb	r6, [r4, #11]
	extint_chan_set_config(DIO0_EIC_LINE, &config_extint_chan);
    7154:	0021      	movs	r1, r4
    7156:	2000      	movs	r0, #0
    7158:	4b46      	ldr	r3, [pc, #280]	; (7274 <HAL_RadioInit+0x188>)
    715a:	469a      	mov	sl, r3
    715c:	4798      	blx	r3
	extint_register_callback(HAL_RadioDIO0Callback,DIO0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    715e:	2200      	movs	r2, #0
    7160:	2100      	movs	r1, #0
    7162:	4845      	ldr	r0, [pc, #276]	; (7278 <HAL_RadioInit+0x18c>)
    7164:	4b45      	ldr	r3, [pc, #276]	; (727c <HAL_RadioInit+0x190>)
    7166:	4699      	mov	r9, r3
    7168:	4798      	blx	r3
	extint_chan_enable_callback(DIO0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    716a:	2100      	movs	r1, #0
    716c:	2000      	movs	r0, #0
    716e:	4b44      	ldr	r3, [pc, #272]	; (7280 <HAL_RadioInit+0x194>)
    7170:	4698      	mov	r8, r3
    7172:	4798      	blx	r3
	config_extint_chan.gpio_pin           = DIO1_EIC_PIN;
    7174:	230b      	movs	r3, #11
    7176:	9302      	str	r3, [sp, #8]
	config_extint_chan.gpio_pin_mux       = DIO1_EIC_MUX;
    7178:	6065      	str	r5, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    717a:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    717c:	72e6      	strb	r6, [r4, #11]
	extint_chan_set_config(DIO1_EIC_LINE, &config_extint_chan);
    717e:	0021      	movs	r1, r4
    7180:	200b      	movs	r0, #11
    7182:	47d0      	blx	sl
	extint_register_callback(HAL_RadioDIO1Callback,DIO1_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    7184:	2200      	movs	r2, #0
    7186:	210b      	movs	r1, #11
    7188:	483e      	ldr	r0, [pc, #248]	; (7284 <HAL_RadioInit+0x198>)
    718a:	47c8      	blx	r9
	extint_chan_enable_callback(DIO1_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    718c:	2100      	movs	r1, #0
    718e:	200b      	movs	r0, #11
    7190:	47c0      	blx	r8
	config_extint_chan.gpio_pin           = DIO2_EIC_PIN;
    7192:	230c      	movs	r3, #12
    7194:	9302      	str	r3, [sp, #8]
	config_extint_chan.gpio_pin_mux       = DIO2_EIC_MUX;
    7196:	6065      	str	r5, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    7198:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    719a:	72e6      	strb	r6, [r4, #11]
	extint_chan_set_config(DIO2_EIC_LINE, &config_extint_chan);
    719c:	0021      	movs	r1, r4
    719e:	200c      	movs	r0, #12
    71a0:	47d0      	blx	sl
	extint_register_callback(HAL_RadioDIO2Callback,DIO2_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    71a2:	2200      	movs	r2, #0
    71a4:	210c      	movs	r1, #12
    71a6:	4838      	ldr	r0, [pc, #224]	; (7288 <HAL_RadioInit+0x19c>)
    71a8:	47c8      	blx	r9
	extint_chan_enable_callback(DIO2_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    71aa:	2100      	movs	r1, #0
    71ac:	200c      	movs	r0, #12
    71ae:	47c0      	blx	r8
	slave->ss_pin          = config->ss_pin;
    71b0:	4b36      	ldr	r3, [pc, #216]	; (728c <HAL_RadioInit+0x1a0>)
    71b2:	4698      	mov	r8, r3
    71b4:	233f      	movs	r3, #63	; 0x3f
    71b6:	4642      	mov	r2, r8
    71b8:	7013      	strb	r3, [r2, #0]
	slave->address_enabled = config->address_enabled;
    71ba:	7055      	strb	r5, [r2, #1]
	slave->address         = config->address;
    71bc:	7095      	strb	r5, [r2, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    71be:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    71c0:	70a5      	strb	r5, [r4, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    71c2:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    71c4:	0021      	movs	r1, r4
    71c6:	203f      	movs	r0, #63	; 0x3f
    71c8:	47b8      	blx	r7
	port_pin_set_output_level(slave->ss_pin, true);
    71ca:	4643      	mov	r3, r8
    71cc:	781b      	ldrb	r3, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    71ce:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    71d0:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
    71d2:	2900      	cmp	r1, #0
    71d4:	d104      	bne.n	71e0 <HAL_RadioInit+0xf4>
		return &(ports[port_index]->Group[group_index]);
    71d6:	095a      	lsrs	r2, r3, #5
    71d8:	01d2      	lsls	r2, r2, #7
    71da:	492d      	ldr	r1, [pc, #180]	; (7290 <HAL_RadioInit+0x1a4>)
    71dc:	468c      	mov	ip, r1
    71de:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    71e0:	261f      	movs	r6, #31
    71e2:	4033      	ands	r3, r6
    71e4:	2501      	movs	r5, #1
    71e6:	0029      	movs	r1, r5
    71e8:	4099      	lsls	r1, r3
		port_base->OUTSET.reg = pin_mask;
    71ea:	6191      	str	r1, [r2, #24]
	config->mode             = SPI_MODE_MASTER;
    71ec:	ac02      	add	r4, sp, #8
    71ee:	7025      	strb	r5, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    71f0:	2300      	movs	r3, #0
    71f2:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    71f4:	9304      	str	r3, [sp, #16]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    71f6:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    71f8:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    71fa:	74a5      	strb	r5, [r4, #18]
	config->select_slave_low_detect_enable= true;
    71fc:	74e5      	strb	r5, [r4, #19]
	config->master_slave_select_enable= false;
    71fe:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    7200:	2224      	movs	r2, #36	; 0x24
    7202:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    7204:	3a18      	subs	r2, #24
    7206:	2100      	movs	r1, #0
    7208:	a808      	add	r0, sp, #32
    720a:	4b22      	ldr	r3, [pc, #136]	; (7294 <HAL_RadioInit+0x1a8>)
    720c:	4798      	blx	r3
	config_spi_master.mode_specific.master.baudrate = SX_RF_SPI_BAUDRATE;
    720e:	4b22      	ldr	r3, [pc, #136]	; (7298 <HAL_RadioInit+0x1ac>)
    7210:	61a3      	str	r3, [r4, #24]
	config_spi_master.mux_setting = SX_RF_SPI_SERCOM_MUX_SETTING;
    7212:	2380      	movs	r3, #128	; 0x80
    7214:	025b      	lsls	r3, r3, #9
    7216:	60e3      	str	r3, [r4, #12]
	config_spi_master.pinmux_pad0 = SX_RF_SPI_SERCOM_PINMUX_PAD0;
    7218:	4b20      	ldr	r3, [pc, #128]	; (729c <HAL_RadioInit+0x1b0>)
    721a:	62a3      	str	r3, [r4, #40]	; 0x28
	config_spi_master.pinmux_pad1 = PINMUX_UNUSED;
    721c:	2301      	movs	r3, #1
    721e:	425b      	negs	r3, r3
    7220:	62e3      	str	r3, [r4, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = SX_RF_SPI_SERCOM_PINMUX_PAD2;
    7222:	4b1f      	ldr	r3, [pc, #124]	; (72a0 <HAL_RadioInit+0x1b4>)
    7224:	6323      	str	r3, [r4, #48]	; 0x30
	config_spi_master.pinmux_pad3 = SX_RF_SPI_SERCOM_PINMUX_PAD3;
    7226:	4b1f      	ldr	r3, [pc, #124]	; (72a4 <HAL_RadioInit+0x1b8>)
    7228:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&master, SX_RF_SPI, &config_spi_master);	
    722a:	4f1f      	ldr	r7, [pc, #124]	; (72a8 <HAL_RadioInit+0x1bc>)
    722c:	0022      	movs	r2, r4
    722e:	491f      	ldr	r1, [pc, #124]	; (72ac <HAL_RadioInit+0x1c0>)
    7230:	0038      	movs	r0, r7
    7232:	4b1f      	ldr	r3, [pc, #124]	; (72b0 <HAL_RadioInit+0x1c4>)
    7234:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    7236:	683c      	ldr	r4, [r7, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    7238:	0020      	movs	r0, r4
    723a:	4b1e      	ldr	r3, [pc, #120]	; (72b4 <HAL_RadioInit+0x1c8>)
    723c:	4798      	blx	r3
    723e:	4006      	ands	r6, r0
    7240:	40b5      	lsls	r5, r6
    7242:	4b1d      	ldr	r3, [pc, #116]	; (72b8 <HAL_RadioInit+0x1cc>)
    7244:	601d      	str	r5, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    7246:	683a      	ldr	r2, [r7, #0]
	return (spi_module->SYNCBUSY.reg);
    7248:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    724a:	2b00      	cmp	r3, #0
    724c:	d1fc      	bne.n	7248 <HAL_RadioInit+0x15c>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    724e:	6823      	ldr	r3, [r4, #0]
    7250:	2202      	movs	r2, #2
    7252:	4313      	orrs	r3, r2
    7254:	6023      	str	r3, [r4, #0]
}
    7256:	b010      	add	sp, #64	; 0x40
    7258:	bc1c      	pop	{r2, r3, r4}
    725a:	4690      	mov	r8, r2
    725c:	4699      	mov	r9, r3
    725e:	46a2      	mov	sl, r4
    7260:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7262:	46c0      	nop			; (mov r8, r8)
    7264:	000086a1 	.word	0x000086a1
    7268:	40002900 	.word	0x40002900
    726c:	40002880 	.word	0x40002880
    7270:	00000379 	.word	0x00000379
    7274:	0000038d 	.word	0x0000038d
    7278:	00007095 	.word	0x00007095
    727c:	000081bd 	.word	0x000081bd
    7280:	000081e9 	.word	0x000081e9
    7284:	00007075 	.word	0x00007075
    7288:	00007055 	.word	0x00007055
    728c:	20000d80 	.word	0x20000d80
    7290:	40002800 	.word	0x40002800
    7294:	000112e7 	.word	0x000112e7
    7298:	001e8480 	.word	0x001e8480
    729c:	00530005 	.word	0x00530005
    72a0:	003e0005 	.word	0x003e0005
    72a4:	00520005 	.word	0x00520005
    72a8:	200004d8 	.word	0x200004d8
    72ac:	42001000 	.word	0x42001000
    72b0:	00007ba1 	.word	0x00007ba1
    72b4:	0000812d 	.word	0x0000812d
    72b8:	e000e100 	.word	0xe000e100

000072bc <RADIO_Reset>:
{
    72bc:	b570      	push	{r4, r5, r6, lr}
    72be:	b082      	sub	sp, #8
	HAL_ResetPinMakeOutput();
    72c0:	4c0a      	ldr	r4, [pc, #40]	; (72ec <RADIO_Reset+0x30>)
    72c2:	47a0      	blx	r4
	} else {
		port_base->OUTCLR.reg = pin_mask;
    72c4:	4d0a      	ldr	r5, [pc, #40]	; (72f0 <RADIO_Reset+0x34>)
    72c6:	2680      	movs	r6, #128	; 0x80
    72c8:	0236      	lsls	r6, r6, #8
    72ca:	616e      	str	r6, [r5, #20]
	SystemBlockingWaitMs(1);
    72cc:	2001      	movs	r0, #1
    72ce:	4b09      	ldr	r3, [pc, #36]	; (72f4 <RADIO_Reset+0x38>)
    72d0:	4798      	blx	r3
	config->direction  = PORT_PIN_DIR_INPUT;
    72d2:	a901      	add	r1, sp, #4
    72d4:	2300      	movs	r3, #0
    72d6:	700b      	strb	r3, [r1, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    72d8:	2201      	movs	r2, #1
    72da:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    72dc:	708b      	strb	r3, [r1, #2]
	port_pin_set_config(SX_RF_RESET_PIN,&pin_conf);
    72de:	202f      	movs	r0, #47	; 0x2f
    72e0:	4b05      	ldr	r3, [pc, #20]	; (72f8 <RADIO_Reset+0x3c>)
    72e2:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    72e4:	61ae      	str	r6, [r5, #24]
	HAL_ResetPinMakeOutput();
    72e6:	47a0      	blx	r4
}
    72e8:	b002      	add	sp, #8
    72ea:	bd70      	pop	{r4, r5, r6, pc}
    72ec:	00007035 	.word	0x00007035
    72f0:	40002880 	.word	0x40002880
    72f4:	00007459 	.word	0x00007459
    72f8:	000086a1 	.word	0x000086a1

000072fc <RADIO_RegisterWrite>:
{
    72fc:	b570      	push	{r4, r5, r6, lr}
    72fe:	0004      	movs	r4, r0
    7300:	000d      	movs	r5, r1
	HAL_SPICSAssert();
    7302:	4b05      	ldr	r3, [pc, #20]	; (7318 <RADIO_RegisterWrite+0x1c>)
    7304:	4798      	blx	r3
	HAL_SPISend(REG_WRITE_CMD | reg);
    7306:	2080      	movs	r0, #128	; 0x80
    7308:	4320      	orrs	r0, r4
    730a:	4c04      	ldr	r4, [pc, #16]	; (731c <RADIO_RegisterWrite+0x20>)
    730c:	47a0      	blx	r4
	HAL_SPISend(value);
    730e:	0028      	movs	r0, r5
    7310:	47a0      	blx	r4
	HAL_SPICSDeassert();
    7312:	4b03      	ldr	r3, [pc, #12]	; (7320 <RADIO_RegisterWrite+0x24>)
    7314:	4798      	blx	r3
}
    7316:	bd70      	pop	{r4, r5, r6, pc}
    7318:	000070b5 	.word	0x000070b5
    731c:	00006fe1 	.word	0x00006fe1
    7320:	000070d1 	.word	0x000070d1

00007324 <RADIO_RegisterRead>:
{
    7324:	b510      	push	{r4, lr}
    7326:	0004      	movs	r4, r0
	HAL_SPICSAssert();
    7328:	4b06      	ldr	r3, [pc, #24]	; (7344 <RADIO_RegisterRead+0x20>)
    732a:	4798      	blx	r3
	HAL_SPISend(reg);
    732c:	207f      	movs	r0, #127	; 0x7f
    732e:	4020      	ands	r0, r4
    7330:	4c05      	ldr	r4, [pc, #20]	; (7348 <RADIO_RegisterRead+0x24>)
    7332:	47a0      	blx	r4
	readValue = HAL_SPISend(0xFF);
    7334:	20ff      	movs	r0, #255	; 0xff
    7336:	47a0      	blx	r4
    7338:	0004      	movs	r4, r0
	HAL_SPICSDeassert();
    733a:	4b04      	ldr	r3, [pc, #16]	; (734c <RADIO_RegisterRead+0x28>)
    733c:	4798      	blx	r3
}
    733e:	0020      	movs	r0, r4
    7340:	bd10      	pop	{r4, pc}
    7342:	46c0      	nop			; (mov r8, r8)
    7344:	000070b5 	.word	0x000070b5
    7348:	00006fe1 	.word	0x00006fe1
    734c:	000070d1 	.word	0x000070d1

00007350 <RADIO_FrameWrite>:
{
    7350:	b570      	push	{r4, r5, r6, lr}
    7352:	0004      	movs	r4, r0
    7354:	000e      	movs	r6, r1
    7356:	0015      	movs	r5, r2
    HAL_SPICSAssert();
    7358:	4b0a      	ldr	r3, [pc, #40]	; (7384 <RADIO_FrameWrite+0x34>)
    735a:	4798      	blx	r3
    HAL_SPISend(REG_WRITE_CMD | offset);
    735c:	2080      	movs	r0, #128	; 0x80
    735e:	4320      	orrs	r0, r4
    7360:	4b09      	ldr	r3, [pc, #36]	; (7388 <RADIO_FrameWrite+0x38>)
    7362:	4798      	blx	r3
    for (uint8_t i = 0; i < bufferLen; i++)
    7364:	2d00      	cmp	r5, #0
    7366:	d00a      	beq.n	737e <RADIO_FrameWrite+0x2e>
    7368:	0034      	movs	r4, r6
    736a:	3d01      	subs	r5, #1
    736c:	b2ed      	uxtb	r5, r5
    736e:	3501      	adds	r5, #1
    7370:	1975      	adds	r5, r6, r5
	    HAL_SPISend(buffer[i]);
    7372:	4e05      	ldr	r6, [pc, #20]	; (7388 <RADIO_FrameWrite+0x38>)
    7374:	7820      	ldrb	r0, [r4, #0]
    7376:	47b0      	blx	r6
    7378:	3401      	adds	r4, #1
    for (uint8_t i = 0; i < bufferLen; i++)
    737a:	42ac      	cmp	r4, r5
    737c:	d1fa      	bne.n	7374 <RADIO_FrameWrite+0x24>
    HAL_SPICSDeassert();
    737e:	4b03      	ldr	r3, [pc, #12]	; (738c <RADIO_FrameWrite+0x3c>)
    7380:	4798      	blx	r3
}
    7382:	bd70      	pop	{r4, r5, r6, pc}
    7384:	000070b5 	.word	0x000070b5
    7388:	00006fe1 	.word	0x00006fe1
    738c:	000070d1 	.word	0x000070d1

00007390 <RADIO_FrameRead>:
{
    7390:	b570      	push	{r4, r5, r6, lr}
    7392:	0004      	movs	r4, r0
    7394:	000e      	movs	r6, r1
    7396:	0015      	movs	r5, r2
    HAL_SPICSAssert();
    7398:	4b0a      	ldr	r3, [pc, #40]	; (73c4 <RADIO_FrameRead+0x34>)
    739a:	4798      	blx	r3
    HAL_SPISend(offset);
    739c:	0020      	movs	r0, r4
    739e:	4b0a      	ldr	r3, [pc, #40]	; (73c8 <RADIO_FrameRead+0x38>)
    73a0:	4798      	blx	r3
    for (uint8_t i = 0; i < bufferLen; i++)
    73a2:	2d00      	cmp	r5, #0
    73a4:	d00b      	beq.n	73be <RADIO_FrameRead+0x2e>
    73a6:	0034      	movs	r4, r6
    73a8:	3d01      	subs	r5, #1
    73aa:	b2ed      	uxtb	r5, r5
    73ac:	3501      	adds	r5, #1
    73ae:	1975      	adds	r5, r6, r5
	    buffer[i] = HAL_SPISend(0xFF);
    73b0:	4e05      	ldr	r6, [pc, #20]	; (73c8 <RADIO_FrameRead+0x38>)
    73b2:	20ff      	movs	r0, #255	; 0xff
    73b4:	47b0      	blx	r6
    73b6:	7020      	strb	r0, [r4, #0]
    73b8:	3401      	adds	r4, #1
    for (uint8_t i = 0; i < bufferLen; i++)
    73ba:	42ac      	cmp	r4, r5
    73bc:	d1f9      	bne.n	73b2 <RADIO_FrameRead+0x22>
    HAL_SPICSDeassert();
    73be:	4b03      	ldr	r3, [pc, #12]	; (73cc <RADIO_FrameRead+0x3c>)
    73c0:	4798      	blx	r3
}
    73c2:	bd70      	pop	{r4, r5, r6, pc}
    73c4:	000070b5 	.word	0x000070b5
    73c8:	00006fe1 	.word	0x00006fe1
    73cc:	000070d1 	.word	0x000070d1

000073d0 <HAL_RegisterDioInterruptHandler>:
 * \param[in] dioPin  - DIO pin
 * \param[in] handler - function to be called upon given DIO interrupt
 */
void HAL_RegisterDioInterruptHandler(uint8_t dioPin, DioInterruptHandler_t handler)
{
  switch (dioPin)
    73d0:	2802      	cmp	r0, #2
    73d2:	d007      	beq.n	73e4 <HAL_RegisterDioInterruptHandler+0x14>
    73d4:	2804      	cmp	r0, #4
    73d6:	d008      	beq.n	73ea <HAL_RegisterDioInterruptHandler+0x1a>
    73d8:	2801      	cmp	r0, #1
    73da:	d000      	beq.n	73de <HAL_RegisterDioInterruptHandler+0xe>
#endif

    default:
      break;
  }
}
    73dc:	4770      	bx	lr
      interruptHandlerDio0 = handler;
    73de:	4b04      	ldr	r3, [pc, #16]	; (73f0 <HAL_RegisterDioInterruptHandler+0x20>)
    73e0:	6019      	str	r1, [r3, #0]
      break;
    73e2:	e7fb      	b.n	73dc <HAL_RegisterDioInterruptHandler+0xc>
      interruptHandlerDio1 = handler;
    73e4:	4b03      	ldr	r3, [pc, #12]	; (73f4 <HAL_RegisterDioInterruptHandler+0x24>)
    73e6:	6019      	str	r1, [r3, #0]
      break;
    73e8:	e7f8      	b.n	73dc <HAL_RegisterDioInterruptHandler+0xc>
      interruptHandlerDio2 = handler;
    73ea:	4b03      	ldr	r3, [pc, #12]	; (73f8 <HAL_RegisterDioInterruptHandler+0x28>)
    73ec:	6019      	str	r1, [r3, #0]
}
    73ee:	e7f5      	b.n	73dc <HAL_RegisterDioInterruptHandler+0xc>
    73f0:	200004cc 	.word	0x200004cc
    73f4:	200004d0 	.word	0x200004d0
    73f8:	200004d4 	.word	0x200004d4

000073fc <HAL_EnableRFCtrl>:

void HAL_EnableRFCtrl(RFCtrl1_t RFCtrl1, RFCtrl2_t RFCtrl2)
{
	/* In standard SAMR34_XPRO, Only RFO_HF and PA_BOOST needs to be controlled by a GPIO pin */
#ifdef RFSWITCH_ENABLE
   if (RFCtrl1 == RFO_HF)
    73fc:	2801      	cmp	r0, #1
    73fe:	d000      	beq.n	7402 <HAL_EnableRFCtrl+0x6>
   {
		port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_ACTIVE);		
   }
#endif	
}
    7400:	4770      	bx	lr
    7402:	2280      	movs	r2, #128	; 0x80
    7404:	0192      	lsls	r2, r2, #6
    7406:	4b01      	ldr	r3, [pc, #4]	; (740c <HAL_EnableRFCtrl+0x10>)
    7408:	619a      	str	r2, [r3, #24]
    740a:	e7f9      	b.n	7400 <HAL_EnableRFCtrl+0x4>
    740c:	40002800 	.word	0x40002800

00007410 <HAL_DisableRFCtrl>:

void HAL_DisableRFCtrl(RFCtrl1_t RFCtrl1, RFCtrl2_t RFCtrl2)
{
	/* In standard SAMR34_XPRO, Only RFO_HF and PA_BOOST needs to be controlled by a GPIO pin */
#ifdef RFSWITCH_ENABLE
	if (RFCtrl1 == RFO_HF)
    7410:	2801      	cmp	r0, #1
    7412:	d000      	beq.n	7416 <HAL_DisableRFCtrl+0x6>
	{
		port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_INACTIVE);	
	}
#endif	
}
    7414:	4770      	bx	lr
		port_base->OUTCLR.reg = pin_mask;
    7416:	2280      	movs	r2, #128	; 0x80
    7418:	0192      	lsls	r2, r2, #6
    741a:	4b01      	ldr	r3, [pc, #4]	; (7420 <HAL_DisableRFCtrl+0x10>)
    741c:	615a      	str	r2, [r3, #20]
    741e:	e7f9      	b.n	7414 <HAL_DisableRFCtrl+0x4>
    7420:	40002800 	.word	0x40002800

00007424 <HAL_GetRadioClkStabilizationDelay>:
 * \param[out] Time value in ms
 */
uint8_t HAL_GetRadioClkStabilizationDelay(void)
{
	return RADIO_CLK_STABILITATION_DELAY;
}
    7424:	2002      	movs	r0, #2
    7426:	4770      	bx	lr

00007428 <HAL_GetRadioClkSrc>:
 * \param[out] Type of clock source TCXO or XTAL
 */
RadioClockSources_t HAL_GetRadioClkSrc(void)
{
	return RADIO_CLK_SRC;
}
    7428:	2000      	movs	r0, #0
    742a:	4770      	bx	lr

0000742c <HAL_TCXOPowerOn>:
 *
 * \param[in] None
 * \param[out] None
 */
void HAL_TCXOPowerOn(void)
{
    742c:	b510      	push	{r4, lr}
		port_base->OUTSET.reg = pin_mask;
    742e:	2280      	movs	r2, #128	; 0x80
    7430:	0092      	lsls	r2, r2, #2
    7432:	4b03      	ldr	r3, [pc, #12]	; (7440 <HAL_TCXOPowerOn+0x14>)
    7434:	619a      	str	r2, [r3, #24]
#ifdef TCXO_ENABLE
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_ACTIVE);
	delay_ms(RADIO_CLK_STABILITATION_DELAY);
    7436:	2002      	movs	r0, #2
    7438:	4b02      	ldr	r3, [pc, #8]	; (7444 <HAL_TCXOPowerOn+0x18>)
    743a:	4798      	blx	r3
#endif
}
    743c:	bd10      	pop	{r4, pc}
    743e:	46c0      	nop			; (mov r8, r8)
    7440:	40002800 	.word	0x40002800
    7444:	00008305 	.word	0x00008305

00007448 <HAL_TCXOPowerOff>:
		port_base->OUTCLR.reg = pin_mask;
    7448:	2280      	movs	r2, #128	; 0x80
    744a:	0092      	lsls	r2, r2, #2
    744c:	4b01      	ldr	r3, [pc, #4]	; (7454 <HAL_TCXOPowerOff+0xc>)
    744e:	615a      	str	r2, [r3, #20]
void HAL_TCXOPowerOff(void)
{
#ifdef TCXO_ENABLE
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_INACTIVE);
#endif
}
    7450:	4770      	bx	lr
    7452:	46c0      	nop			; (mov r8, r8)
    7454:	40002800 	.word	0x40002800

00007458 <SystemBlockingWaitMs>:
 * waiting with the MCU in sleep.
 * Find out how long it takes the MCU to go to and wake up from sleep to see if
 * it makes sense to go to sleep at all 
 */
void SystemBlockingWaitMs(uint32_t ms)
{
    7458:	b510      	push	{r4, lr}
#ifndef UT
    delay_ms(ms);
    745a:	2800      	cmp	r0, #0
    745c:	d103      	bne.n	7466 <SystemBlockingWaitMs+0xe>
    745e:	2001      	movs	r0, #1
    7460:	4b02      	ldr	r3, [pc, #8]	; (746c <SystemBlockingWaitMs+0x14>)
    7462:	4798      	blx	r3
#endif
}
    7464:	bd10      	pop	{r4, pc}
    delay_ms(ms);
    7466:	4b02      	ldr	r3, [pc, #8]	; (7470 <SystemBlockingWaitMs+0x18>)
    7468:	4798      	blx	r3
    746a:	e7fb      	b.n	7464 <SystemBlockingWaitMs+0xc>
    746c:	000082d9 	.word	0x000082d9
    7470:	00008305 	.word	0x00008305

00007474 <system_enter_critical_section>:
{

}

void system_enter_critical_section(void)
{
    7474:	b510      	push	{r4, lr}
	cpu_irq_enter_critical();
    7476:	4b01      	ldr	r3, [pc, #4]	; (747c <system_enter_critical_section+0x8>)
    7478:	4798      	blx	r3
#ifndef UT
	system_interrupt_enter_critical_section();
#endif
}
    747a:	bd10      	pop	{r4, pc}
    747c:	000085c5 	.word	0x000085c5

00007480 <system_leave_critical_section>:

void system_leave_critical_section(void)
{
    7480:	b510      	push	{r4, lr}
	cpu_irq_leave_critical();
    7482:	4b01      	ldr	r3, [pc, #4]	; (7488 <system_leave_critical_section+0x8>)
    7484:	4798      	blx	r3
#ifndef UT
	system_interrupt_leave_critical_section();
#endif
}
    7486:	bd10      	pop	{r4, pc}
    7488:	00008605 	.word	0x00008605

0000748c <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    748c:	1c93      	adds	r3, r2, #2
    748e:	009b      	lsls	r3, r3, #2
    7490:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    7492:	2a02      	cmp	r2, #2
    7494:	d009      	beq.n	74aa <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    7496:	2a03      	cmp	r2, #3
    7498:	d00c      	beq.n	74b4 <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    749a:	2301      	movs	r3, #1
    749c:	4093      	lsls	r3, r2
    749e:	001a      	movs	r2, r3
    74a0:	7e03      	ldrb	r3, [r0, #24]
    74a2:	4313      	orrs	r3, r2
    74a4:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    74a6:	2000      	movs	r0, #0
    74a8:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    74aa:	7e03      	ldrb	r3, [r0, #24]
    74ac:	2210      	movs	r2, #16
    74ae:	4313      	orrs	r3, r2
    74b0:	7603      	strb	r3, [r0, #24]
    74b2:	e7f8      	b.n	74a6 <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    74b4:	7e03      	ldrb	r3, [r0, #24]
    74b6:	2220      	movs	r2, #32
    74b8:	4313      	orrs	r3, r2
    74ba:	7603      	strb	r3, [r0, #24]
    74bc:	e7f3      	b.n	74a6 <tc_register_callback+0x1a>
	...

000074c0 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    74c0:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    74c2:	0080      	lsls	r0, r0, #2
    74c4:	4b16      	ldr	r3, [pc, #88]	; (7520 <_tc_interrupt_handler+0x60>)
    74c6:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    74c8:	6823      	ldr	r3, [r4, #0]
    74ca:	7a9d      	ldrb	r5, [r3, #10]
    74cc:	7e22      	ldrb	r2, [r4, #24]
    74ce:	7e63      	ldrb	r3, [r4, #25]
    74d0:	4013      	ands	r3, r2
    74d2:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    74d4:	07eb      	lsls	r3, r5, #31
    74d6:	d406      	bmi.n	74e6 <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    74d8:	07ab      	lsls	r3, r5, #30
    74da:	d40b      	bmi.n	74f4 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    74dc:	06eb      	lsls	r3, r5, #27
    74de:	d410      	bmi.n	7502 <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    74e0:	06ab      	lsls	r3, r5, #26
    74e2:	d415      	bmi.n	7510 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    74e4:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    74e6:	0020      	movs	r0, r4
    74e8:	68a3      	ldr	r3, [r4, #8]
    74ea:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    74ec:	2301      	movs	r3, #1
    74ee:	6822      	ldr	r2, [r4, #0]
    74f0:	7293      	strb	r3, [r2, #10]
    74f2:	e7f1      	b.n	74d8 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    74f4:	0020      	movs	r0, r4
    74f6:	68e3      	ldr	r3, [r4, #12]
    74f8:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    74fa:	2302      	movs	r3, #2
    74fc:	6822      	ldr	r2, [r4, #0]
    74fe:	7293      	strb	r3, [r2, #10]
    7500:	e7ec      	b.n	74dc <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    7502:	0020      	movs	r0, r4
    7504:	6923      	ldr	r3, [r4, #16]
    7506:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    7508:	2310      	movs	r3, #16
    750a:	6822      	ldr	r2, [r4, #0]
    750c:	7293      	strb	r3, [r2, #10]
    750e:	e7e7      	b.n	74e0 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    7510:	0020      	movs	r0, r4
    7512:	6963      	ldr	r3, [r4, #20]
    7514:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    7516:	6823      	ldr	r3, [r4, #0]
    7518:	2220      	movs	r2, #32
    751a:	729a      	strb	r2, [r3, #10]
}
    751c:	e7e2      	b.n	74e4 <_tc_interrupt_handler+0x24>
    751e:	46c0      	nop			; (mov r8, r8)
    7520:	20000d84 	.word	0x20000d84

00007524 <TC0_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    7524:	b510      	push	{r4, lr}
    7526:	2000      	movs	r0, #0
    7528:	4b01      	ldr	r3, [pc, #4]	; (7530 <TC0_Handler+0xc>)
    752a:	4798      	blx	r3
    752c:	bd10      	pop	{r4, pc}
    752e:	46c0      	nop			; (mov r8, r8)
    7530:	000074c1 	.word	0x000074c1

00007534 <TC1_Handler>:
    7534:	b510      	push	{r4, lr}
    7536:	2001      	movs	r0, #1
    7538:	4b01      	ldr	r3, [pc, #4]	; (7540 <TC1_Handler+0xc>)
    753a:	4798      	blx	r3
    753c:	bd10      	pop	{r4, pc}
    753e:	46c0      	nop			; (mov r8, r8)
    7540:	000074c1 	.word	0x000074c1

00007544 <TC2_Handler>:
    7544:	b510      	push	{r4, lr}
    7546:	2002      	movs	r0, #2
    7548:	4b01      	ldr	r3, [pc, #4]	; (7550 <TC2_Handler+0xc>)
    754a:	4798      	blx	r3
    754c:	bd10      	pop	{r4, pc}
    754e:	46c0      	nop			; (mov r8, r8)
    7550:	000074c1 	.word	0x000074c1

00007554 <TC3_Handler>:
    7554:	b510      	push	{r4, lr}
    7556:	2003      	movs	r0, #3
    7558:	4b01      	ldr	r3, [pc, #4]	; (7560 <TC3_Handler+0xc>)
    755a:	4798      	blx	r3
    755c:	bd10      	pop	{r4, pc}
    755e:	46c0      	nop			; (mov r8, r8)
    7560:	000074c1 	.word	0x000074c1

00007564 <TC4_Handler>:
    7564:	b510      	push	{r4, lr}
    7566:	2004      	movs	r0, #4
    7568:	4b01      	ldr	r3, [pc, #4]	; (7570 <TC4_Handler+0xc>)
    756a:	4798      	blx	r3
    756c:	bd10      	pop	{r4, pc}
    756e:	46c0      	nop			; (mov r8, r8)
    7570:	000074c1 	.word	0x000074c1

00007574 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    7574:	b5f0      	push	{r4, r5, r6, r7, lr}
    7576:	46de      	mov	lr, fp
    7578:	4657      	mov	r7, sl
    757a:	464e      	mov	r6, r9
    757c:	4645      	mov	r5, r8
    757e:	b5e0      	push	{r5, r6, r7, lr}
    7580:	b091      	sub	sp, #68	; 0x44
    7582:	0005      	movs	r5, r0
    7584:	000c      	movs	r4, r1
    7586:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    7588:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    758a:	0008      	movs	r0, r1
    758c:	4bc4      	ldr	r3, [pc, #784]	; (78a0 <usart_init+0x32c>)
    758e:	4798      	blx	r3
    7590:	0002      	movs	r2, r0
	uint32_t pm_index, gclk_index; 
#if (SAML22) || (SAMC20) 
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30) || (SAMR34) || (SAMR35)
	if (sercom_index == 5) {
    7592:	2805      	cmp	r0, #5
    7594:	d00d      	beq.n	75b2 <usart_init+0x3e>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    7596:	0007      	movs	r7, r0
    7598:	3712      	adds	r7, #18
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
    759a:	0003      	movs	r3, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    759c:	6821      	ldr	r1, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    759e:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    75a0:	07c9      	lsls	r1, r1, #31
    75a2:	d509      	bpl.n	75b8 <usart_init+0x44>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    75a4:	b011      	add	sp, #68	; 0x44
    75a6:	bc3c      	pop	{r2, r3, r4, r5}
    75a8:	4690      	mov	r8, r2
    75aa:	4699      	mov	r9, r3
    75ac:	46a2      	mov	sl, r4
    75ae:	46ab      	mov	fp, r5
    75b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    75b2:	2718      	movs	r7, #24
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
    75b4:	2301      	movs	r3, #1
    75b6:	e7f1      	b.n	759c <usart_init+0x28>
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    75b8:	6821      	ldr	r1, [r4, #0]
		return STATUS_ERR_DENIED;
    75ba:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    75bc:	0789      	lsls	r1, r1, #30
    75be:	d4f1      	bmi.n	75a4 <usart_init+0x30>
	if (sercom_index == 5) {
    75c0:	2a05      	cmp	r2, #5
    75c2:	d047      	beq.n	7654 <usart_init+0xe0>
			MCLK->APBCMASK.reg |= mask;
    75c4:	49b7      	ldr	r1, [pc, #732]	; (78a4 <usart_init+0x330>)
    75c6:	69c8      	ldr	r0, [r1, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
    75c8:	2201      	movs	r2, #1
    75ca:	409a      	lsls	r2, r3
    75cc:	0013      	movs	r3, r2
    75ce:	4303      	orrs	r3, r0
    75d0:	61cb      	str	r3, [r1, #28]
	gclk_chan_conf.source_generator = config->generator_source;
    75d2:	a90f      	add	r1, sp, #60	; 0x3c
    75d4:	232d      	movs	r3, #45	; 0x2d
    75d6:	4698      	mov	r8, r3
    75d8:	5cf3      	ldrb	r3, [r6, r3]
    75da:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    75dc:	b2ff      	uxtb	r7, r7
    75de:	0038      	movs	r0, r7
    75e0:	4bb1      	ldr	r3, [pc, #708]	; (78a8 <usart_init+0x334>)
    75e2:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    75e4:	0038      	movs	r0, r7
    75e6:	4bb1      	ldr	r3, [pc, #708]	; (78ac <usart_init+0x338>)
    75e8:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    75ea:	4643      	mov	r3, r8
    75ec:	5cf0      	ldrb	r0, [r6, r3]
    75ee:	2100      	movs	r1, #0
    75f0:	4baf      	ldr	r3, [pc, #700]	; (78b0 <usart_init+0x33c>)
    75f2:	4798      	blx	r3
	module->character_size = config->character_size;
    75f4:	7af3      	ldrb	r3, [r6, #11]
    75f6:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    75f8:	2324      	movs	r3, #36	; 0x24
    75fa:	5cf3      	ldrb	r3, [r6, r3]
    75fc:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    75fe:	2325      	movs	r3, #37	; 0x25
    7600:	5cf3      	ldrb	r3, [r6, r3]
    7602:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    7604:	7ef3      	ldrb	r3, [r6, #27]
    7606:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    7608:	7f33      	ldrb	r3, [r6, #28]
    760a:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    760c:	682b      	ldr	r3, [r5, #0]
    760e:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    7610:	0018      	movs	r0, r3
    7612:	4ba3      	ldr	r3, [pc, #652]	; (78a0 <usart_init+0x32c>)
    7614:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    7616:	3012      	adds	r0, #18
	uint16_t baud  = 0;
    7618:	2200      	movs	r2, #0
    761a:	230e      	movs	r3, #14
    761c:	a906      	add	r1, sp, #24
    761e:	468c      	mov	ip, r1
    7620:	4463      	add	r3, ip
    7622:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    7624:	8a32      	ldrh	r2, [r6, #16]
    7626:	9202      	str	r2, [sp, #8]
    7628:	2380      	movs	r3, #128	; 0x80
    762a:	01db      	lsls	r3, r3, #7
    762c:	429a      	cmp	r2, r3
    762e:	d100      	bne.n	7632 <usart_init+0xbe>
    7630:	e0a9      	b.n	7786 <usart_init+0x212>
    7632:	d917      	bls.n	7664 <usart_init+0xf0>
    7634:	23c0      	movs	r3, #192	; 0xc0
    7636:	01db      	lsls	r3, r3, #7
    7638:	9a02      	ldr	r2, [sp, #8]
    763a:	429a      	cmp	r2, r3
    763c:	d100      	bne.n	7640 <usart_init+0xcc>
    763e:	e09d      	b.n	777c <usart_init+0x208>
    7640:	2380      	movs	r3, #128	; 0x80
    7642:	021b      	lsls	r3, r3, #8
    7644:	429a      	cmp	r2, r3
    7646:	d000      	beq.n	764a <usart_init+0xd6>
    7648:	e125      	b.n	7896 <usart_init+0x322>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    764a:	2303      	movs	r3, #3
    764c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    764e:	2300      	movs	r3, #0
    7650:	9307      	str	r3, [sp, #28]
    7652:	e010      	b.n	7676 <usart_init+0x102>
			MCLK->APBDMASK.reg |= mask;
    7654:	4993      	ldr	r1, [pc, #588]	; (78a4 <usart_init+0x330>)
    7656:	6a08      	ldr	r0, [r1, #32]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
    7658:	3a04      	subs	r2, #4
    765a:	409a      	lsls	r2, r3
    765c:	0013      	movs	r3, r2
    765e:	4303      	orrs	r3, r0
    7660:	620b      	str	r3, [r1, #32]
    7662:	e7b6      	b.n	75d2 <usart_init+0x5e>
	switch (config->sample_rate) {
    7664:	2380      	movs	r3, #128	; 0x80
    7666:	019b      	lsls	r3, r3, #6
    7668:	429a      	cmp	r2, r3
    766a:	d000      	beq.n	766e <usart_init+0xfa>
    766c:	e113      	b.n	7896 <usart_init+0x322>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    766e:	2310      	movs	r3, #16
    7670:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    7672:	3b0f      	subs	r3, #15
    7674:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    7676:	6833      	ldr	r3, [r6, #0]
    7678:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    767a:	68f3      	ldr	r3, [r6, #12]
    767c:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    767e:	6973      	ldr	r3, [r6, #20]
    7680:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    7682:	7e33      	ldrb	r3, [r6, #24]
    7684:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    7686:	2326      	movs	r3, #38	; 0x26
    7688:	5cf3      	ldrb	r3, [r6, r3]
    768a:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    768c:	6873      	ldr	r3, [r6, #4]
    768e:	4699      	mov	r9, r3
	switch (transfer_mode)
    7690:	2b00      	cmp	r3, #0
    7692:	d100      	bne.n	7696 <usart_init+0x122>
    7694:	e09f      	b.n	77d6 <usart_init+0x262>
    7696:	2380      	movs	r3, #128	; 0x80
    7698:	055b      	lsls	r3, r3, #21
    769a:	4599      	cmp	r9, r3
    769c:	d104      	bne.n	76a8 <usart_init+0x134>
			if (!config->use_external_clock) {
    769e:	2327      	movs	r3, #39	; 0x27
    76a0:	5cf3      	ldrb	r3, [r6, r3]
    76a2:	2b00      	cmp	r3, #0
    76a4:	d100      	bne.n	76a8 <usart_init+0x134>
    76a6:	e084      	b.n	77b2 <usart_init+0x23e>
	if(config->encoding_format_enable) {
    76a8:	7e73      	ldrb	r3, [r6, #25]
    76aa:	2b00      	cmp	r3, #0
    76ac:	d002      	beq.n	76b4 <usart_init+0x140>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    76ae:	7eb3      	ldrb	r3, [r6, #26]
    76b0:	4642      	mov	r2, r8
    76b2:	7393      	strb	r3, [r2, #14]
	SercomUsart *const usart_hw = &(module->hw->USART);
    76b4:	682a      	ldr	r2, [r5, #0]
    76b6:	9f02      	ldr	r7, [sp, #8]
	return (usart_hw->SYNCBUSY.reg);
    76b8:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    76ba:	2b00      	cmp	r3, #0
    76bc:	d1fc      	bne.n	76b8 <usart_init+0x144>
	usart_hw->BAUD.reg = baud;
    76be:	330e      	adds	r3, #14
    76c0:	aa06      	add	r2, sp, #24
    76c2:	4694      	mov	ip, r2
    76c4:	4463      	add	r3, ip
    76c6:	881b      	ldrh	r3, [r3, #0]
    76c8:	4642      	mov	r2, r8
    76ca:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    76cc:	9b05      	ldr	r3, [sp, #20]
    76ce:	9a03      	ldr	r2, [sp, #12]
    76d0:	4313      	orrs	r3, r2
    76d2:	9a04      	ldr	r2, [sp, #16]
    76d4:	4313      	orrs	r3, r2
    76d6:	464a      	mov	r2, r9
    76d8:	4313      	orrs	r3, r2
    76da:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    76dc:	465b      	mov	r3, fp
    76de:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    76e0:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    76e2:	4653      	mov	r3, sl
    76e4:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    76e6:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    76e8:	2327      	movs	r3, #39	; 0x27
    76ea:	5cf3      	ldrb	r3, [r6, r3]
    76ec:	2b00      	cmp	r3, #0
    76ee:	d101      	bne.n	76f4 <usart_init+0x180>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    76f0:	3304      	adds	r3, #4
    76f2:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    76f4:	7e73      	ldrb	r3, [r6, #25]
    76f6:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    76f8:	7f32      	ldrb	r2, [r6, #28]
    76fa:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    76fc:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    76fe:	7f72      	ldrb	r2, [r6, #29]
    7700:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    7702:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    7704:	2224      	movs	r2, #36	; 0x24
    7706:	5cb2      	ldrb	r2, [r6, r2]
    7708:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    770a:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    770c:	2225      	movs	r2, #37	; 0x25
    770e:	5cb2      	ldrb	r2, [r6, r2]
    7710:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    7712:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    7714:	7ab1      	ldrb	r1, [r6, #10]
    7716:	7af2      	ldrb	r2, [r6, #11]
    7718:	4311      	orrs	r1, r2
    771a:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    771c:	8933      	ldrh	r3, [r6, #8]
    771e:	2bff      	cmp	r3, #255	; 0xff
    7720:	d07d      	beq.n	781e <usart_init+0x2aa>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    7722:	2280      	movs	r2, #128	; 0x80
    7724:	0452      	lsls	r2, r2, #17
    7726:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    7728:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    772a:	232c      	movs	r3, #44	; 0x2c
    772c:	5cf3      	ldrb	r3, [r6, r3]
    772e:	2b00      	cmp	r3, #0
    7730:	d103      	bne.n	773a <usart_init+0x1c6>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    7732:	4b60      	ldr	r3, [pc, #384]	; (78b4 <usart_init+0x340>)
    7734:	789b      	ldrb	r3, [r3, #2]
    7736:	079b      	lsls	r3, r3, #30
    7738:	d501      	bpl.n	773e <usart_init+0x1ca>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    773a:	2380      	movs	r3, #128	; 0x80
    773c:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    773e:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    7740:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    7742:	2b00      	cmp	r3, #0
    7744:	d1fc      	bne.n	7740 <usart_init+0x1cc>
	usart_hw->CTRLB.reg = ctrlb;
    7746:	4643      	mov	r3, r8
    7748:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    774a:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    774c:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    774e:	2b00      	cmp	r3, #0
    7750:	d1fc      	bne.n	774c <usart_init+0x1d8>
	usart_hw->CTRLA.reg = ctrla;
    7752:	4643      	mov	r3, r8
    7754:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    7756:	ab0e      	add	r3, sp, #56	; 0x38
    7758:	2280      	movs	r2, #128	; 0x80
    775a:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    775c:	2200      	movs	r2, #0
    775e:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    7760:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    7762:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    7764:	6b33      	ldr	r3, [r6, #48]	; 0x30
    7766:	930a      	str	r3, [sp, #40]	; 0x28
    7768:	6b73      	ldr	r3, [r6, #52]	; 0x34
    776a:	930b      	str	r3, [sp, #44]	; 0x2c
    776c:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    776e:	930c      	str	r3, [sp, #48]	; 0x30
    7770:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    7772:	9302      	str	r3, [sp, #8]
    7774:	930d      	str	r3, [sp, #52]	; 0x34
    7776:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    7778:	ae0a      	add	r6, sp, #40	; 0x28
    777a:	e05e      	b.n	783a <usart_init+0x2c6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    777c:	2308      	movs	r3, #8
    777e:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    7780:	3b07      	subs	r3, #7
    7782:	9307      	str	r3, [sp, #28]
    7784:	e777      	b.n	7676 <usart_init+0x102>
	ctrla = (uint32_t)config->data_order |
    7786:	6833      	ldr	r3, [r6, #0]
    7788:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    778a:	68f3      	ldr	r3, [r6, #12]
    778c:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    778e:	6973      	ldr	r3, [r6, #20]
    7790:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    7792:	7e33      	ldrb	r3, [r6, #24]
    7794:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    7796:	2326      	movs	r3, #38	; 0x26
    7798:	5cf3      	ldrb	r3, [r6, r3]
    779a:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    779c:	6873      	ldr	r3, [r6, #4]
    779e:	4699      	mov	r9, r3
	switch (transfer_mode)
    77a0:	2b00      	cmp	r3, #0
    77a2:	d014      	beq.n	77ce <usart_init+0x25a>
    77a4:	2380      	movs	r3, #128	; 0x80
    77a6:	055b      	lsls	r3, r3, #21
    77a8:	4599      	cmp	r9, r3
    77aa:	d100      	bne.n	77ae <usart_init+0x23a>
    77ac:	e777      	b.n	769e <usart_init+0x12a>
	enum status_code status_code = STATUS_OK;
    77ae:	2000      	movs	r0, #0
    77b0:	e020      	b.n	77f4 <usart_init+0x280>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    77b2:	6a33      	ldr	r3, [r6, #32]
    77b4:	001f      	movs	r7, r3
    77b6:	b2c0      	uxtb	r0, r0
    77b8:	4b3f      	ldr	r3, [pc, #252]	; (78b8 <usart_init+0x344>)
    77ba:	4798      	blx	r3
    77bc:	0001      	movs	r1, r0
    77be:	220e      	movs	r2, #14
    77c0:	ab06      	add	r3, sp, #24
    77c2:	469c      	mov	ip, r3
    77c4:	4462      	add	r2, ip
    77c6:	0038      	movs	r0, r7
    77c8:	4b3c      	ldr	r3, [pc, #240]	; (78bc <usart_init+0x348>)
    77ca:	4798      	blx	r3
    77cc:	e012      	b.n	77f4 <usart_init+0x280>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    77ce:	2308      	movs	r3, #8
    77d0:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    77d2:	2300      	movs	r3, #0
    77d4:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    77d6:	2327      	movs	r3, #39	; 0x27
    77d8:	5cf3      	ldrb	r3, [r6, r3]
    77da:	2b00      	cmp	r3, #0
    77dc:	d00e      	beq.n	77fc <usart_init+0x288>
				status_code =
    77de:	9b06      	ldr	r3, [sp, #24]
    77e0:	9300      	str	r3, [sp, #0]
    77e2:	9b07      	ldr	r3, [sp, #28]
    77e4:	220e      	movs	r2, #14
    77e6:	a906      	add	r1, sp, #24
    77e8:	468c      	mov	ip, r1
    77ea:	4462      	add	r2, ip
    77ec:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    77ee:	6a30      	ldr	r0, [r6, #32]
    77f0:	4f33      	ldr	r7, [pc, #204]	; (78c0 <usart_init+0x34c>)
    77f2:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    77f4:	2800      	cmp	r0, #0
    77f6:	d000      	beq.n	77fa <usart_init+0x286>
    77f8:	e6d4      	b.n	75a4 <usart_init+0x30>
    77fa:	e755      	b.n	76a8 <usart_init+0x134>
						_sercom_get_async_baud_val(config->baudrate,
    77fc:	6a33      	ldr	r3, [r6, #32]
    77fe:	001f      	movs	r7, r3
    7800:	b2c0      	uxtb	r0, r0
    7802:	4b2d      	ldr	r3, [pc, #180]	; (78b8 <usart_init+0x344>)
    7804:	4798      	blx	r3
    7806:	0001      	movs	r1, r0
				status_code =
    7808:	9b06      	ldr	r3, [sp, #24]
    780a:	9300      	str	r3, [sp, #0]
    780c:	9b07      	ldr	r3, [sp, #28]
    780e:	220e      	movs	r2, #14
    7810:	a806      	add	r0, sp, #24
    7812:	4684      	mov	ip, r0
    7814:	4462      	add	r2, ip
    7816:	0038      	movs	r0, r7
    7818:	4f29      	ldr	r7, [pc, #164]	; (78c0 <usart_init+0x34c>)
    781a:	47b8      	blx	r7
    781c:	e7ea      	b.n	77f4 <usart_init+0x280>
		if(config->lin_slave_enable) {
    781e:	7ef3      	ldrb	r3, [r6, #27]
    7820:	2b00      	cmp	r3, #0
    7822:	d082      	beq.n	772a <usart_init+0x1b6>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    7824:	2380      	movs	r3, #128	; 0x80
    7826:	04db      	lsls	r3, r3, #19
    7828:	431f      	orrs	r7, r3
    782a:	e77e      	b.n	772a <usart_init+0x1b6>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    782c:	0020      	movs	r0, r4
    782e:	4b25      	ldr	r3, [pc, #148]	; (78c4 <usart_init+0x350>)
    7830:	4798      	blx	r3
    7832:	e007      	b.n	7844 <usart_init+0x2d0>
    7834:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    7836:	2f04      	cmp	r7, #4
    7838:	d00d      	beq.n	7856 <usart_init+0x2e2>
    783a:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    783c:	00bb      	lsls	r3, r7, #2
    783e:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    7840:	2800      	cmp	r0, #0
    7842:	d0f3      	beq.n	782c <usart_init+0x2b8>
		if (current_pinmux != PINMUX_UNUSED) {
    7844:	1c43      	adds	r3, r0, #1
    7846:	d0f5      	beq.n	7834 <usart_init+0x2c0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    7848:	a90e      	add	r1, sp, #56	; 0x38
    784a:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    784c:	0c00      	lsrs	r0, r0, #16
    784e:	b2c0      	uxtb	r0, r0
    7850:	4b1d      	ldr	r3, [pc, #116]	; (78c8 <usart_init+0x354>)
    7852:	4798      	blx	r3
    7854:	e7ee      	b.n	7834 <usart_init+0x2c0>
		module->callback[i]            = NULL;
    7856:	2300      	movs	r3, #0
    7858:	60eb      	str	r3, [r5, #12]
    785a:	612b      	str	r3, [r5, #16]
    785c:	616b      	str	r3, [r5, #20]
    785e:	61ab      	str	r3, [r5, #24]
    7860:	61eb      	str	r3, [r5, #28]
    7862:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    7864:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    7866:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    7868:	2200      	movs	r2, #0
    786a:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    786c:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    786e:	3330      	adds	r3, #48	; 0x30
    7870:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    7872:	3301      	adds	r3, #1
    7874:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    7876:	3301      	adds	r3, #1
    7878:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    787a:	3301      	adds	r3, #1
    787c:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    787e:	6828      	ldr	r0, [r5, #0]
    7880:	4b07      	ldr	r3, [pc, #28]	; (78a0 <usart_init+0x32c>)
    7882:	4798      	blx	r3
    7884:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    7886:	4911      	ldr	r1, [pc, #68]	; (78cc <usart_init+0x358>)
    7888:	4b11      	ldr	r3, [pc, #68]	; (78d0 <usart_init+0x35c>)
    788a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    788c:	00a4      	lsls	r4, r4, #2
    788e:	4b11      	ldr	r3, [pc, #68]	; (78d4 <usart_init+0x360>)
    7890:	50e5      	str	r5, [r4, r3]
	return status_code;
    7892:	2000      	movs	r0, #0
    7894:	e686      	b.n	75a4 <usart_init+0x30>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    7896:	2310      	movs	r3, #16
    7898:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    789a:	2300      	movs	r3, #0
    789c:	9307      	str	r3, [sp, #28]
    789e:	e6ea      	b.n	7676 <usart_init+0x102>
    78a0:	00000875 	.word	0x00000875
    78a4:	40000400 	.word	0x40000400
    78a8:	00008a35 	.word	0x00008a35
    78ac:	000089c5 	.word	0x000089c5
    78b0:	000006cd 	.word	0x000006cd
    78b4:	41002000 	.word	0x41002000
    78b8:	00008a59 	.word	0x00008a59
    78bc:	0000060f 	.word	0x0000060f
    78c0:	00000639 	.word	0x00000639
    78c4:	00000719 	.word	0x00000719
    78c8:	00008b31 	.word	0x00008b31
    78cc:	00007a0d 	.word	0x00007a0d
    78d0:	000080f1 	.word	0x000080f1
    78d4:	20000d9c 	.word	0x20000d9c

000078d8 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    78d8:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    78da:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    78dc:	2a00      	cmp	r2, #0
    78de:	d101      	bne.n	78e4 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    78e0:	0018      	movs	r0, r3
    78e2:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    78e4:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    78e6:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    78e8:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    78ea:	2a00      	cmp	r2, #0
    78ec:	d1f8      	bne.n	78e0 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    78ee:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    78f0:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    78f2:	2a00      	cmp	r2, #0
    78f4:	d1fc      	bne.n	78f0 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    78f6:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    78f8:	2102      	movs	r1, #2
    78fa:	7e1a      	ldrb	r2, [r3, #24]
    78fc:	420a      	tst	r2, r1
    78fe:	d0fc      	beq.n	78fa <usart_write_wait+0x22>
	return STATUS_OK;
    7900:	2300      	movs	r3, #0
    7902:	e7ed      	b.n	78e0 <usart_write_wait+0x8>

00007904 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    7904:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    7906:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    7908:	2a00      	cmp	r2, #0
    790a:	d101      	bne.n	7910 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    790c:	0018      	movs	r0, r3
    790e:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    7910:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    7912:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    7914:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    7916:	2a00      	cmp	r2, #0
    7918:	d1f8      	bne.n	790c <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    791a:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    791c:	7e10      	ldrb	r0, [r2, #24]
    791e:	0740      	lsls	r0, r0, #29
    7920:	d5f4      	bpl.n	790c <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    7922:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    7924:	2b00      	cmp	r3, #0
    7926:	d1fc      	bne.n	7922 <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    7928:	8b53      	ldrh	r3, [r2, #26]
    792a:	b2db      	uxtb	r3, r3
	if (error_code) {
    792c:	0698      	lsls	r0, r3, #26
    792e:	d01d      	beq.n	796c <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    7930:	0798      	lsls	r0, r3, #30
    7932:	d503      	bpl.n	793c <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    7934:	2302      	movs	r3, #2
    7936:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    7938:	3318      	adds	r3, #24
    793a:	e7e7      	b.n	790c <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    793c:	0758      	lsls	r0, r3, #29
    793e:	d503      	bpl.n	7948 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    7940:	2304      	movs	r3, #4
    7942:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    7944:	331a      	adds	r3, #26
    7946:	e7e1      	b.n	790c <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    7948:	07d8      	lsls	r0, r3, #31
    794a:	d503      	bpl.n	7954 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    794c:	2301      	movs	r3, #1
    794e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    7950:	3312      	adds	r3, #18
    7952:	e7db      	b.n	790c <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    7954:	06d8      	lsls	r0, r3, #27
    7956:	d503      	bpl.n	7960 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    7958:	2310      	movs	r3, #16
    795a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    795c:	3332      	adds	r3, #50	; 0x32
    795e:	e7d5      	b.n	790c <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    7960:	069b      	lsls	r3, r3, #26
    7962:	d503      	bpl.n	796c <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    7964:	2320      	movs	r3, #32
    7966:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    7968:	3321      	adds	r3, #33	; 0x21
    796a:	e7cf      	b.n	790c <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    796c:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    796e:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    7970:	2300      	movs	r3, #0
    7972:	e7cb      	b.n	790c <usart_read_wait+0x8>

00007974 <usart_read_buffer_wait>:
 */
enum status_code usart_read_buffer_wait(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    7974:	b5f0      	push	{r4, r5, r6, r7, lr}
    7976:	46d6      	mov	lr, sl
    7978:	b500      	push	{lr}
    797a:	b084      	sub	sp, #16
    797c:	0004      	movs	r4, r0
    797e:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    7980:	2017      	movs	r0, #23
	if (length == 0) {
    7982:	2a00      	cmp	r2, #0
    7984:	d103      	bne.n	798e <usart_read_buffer_wait+0x1a>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    7986:	b004      	add	sp, #16
    7988:	bc04      	pop	{r2}
    798a:	4692      	mov	sl, r2
    798c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
    798e:	79a3      	ldrb	r3, [r4, #6]
		return STATUS_ERR_DENIED;
    7990:	3005      	adds	r0, #5
	if (!(module->receiver_enabled)) {
    7992:	2b00      	cmp	r3, #0
    7994:	d0f7      	beq.n	7986 <usart_read_buffer_wait+0x12>
	SercomUsart *const usart_hw = &(module->hw->USART);
    7996:	6826      	ldr	r6, [r4, #0]
	while (length--) {
    7998:	3a01      	subs	r2, #1
    799a:	b293      	uxth	r3, r2
    799c:	469a      	mov	sl, r3
    799e:	2500      	movs	r5, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    79a0:	2704      	movs	r7, #4
    79a2:	e019      	b.n	79d8 <usart_read_buffer_wait+0x64>
		uint16_t received_data = 0;
    79a4:	2300      	movs	r3, #0
    79a6:	aa02      	add	r2, sp, #8
    79a8:	80d3      	strh	r3, [r2, #6]
		retval = usart_read_wait(module, &received_data);
    79aa:	1d91      	adds	r1, r2, #6
    79ac:	0020      	movs	r0, r4
    79ae:	4b15      	ldr	r3, [pc, #84]	; (7a04 <usart_read_buffer_wait+0x90>)
    79b0:	4798      	blx	r3
		if (retval != STATUS_OK) {
    79b2:	2800      	cmp	r0, #0
    79b4:	d1e7      	bne.n	7986 <usart_read_buffer_wait+0x12>
		rx_data[rx_pos++] = received_data;
    79b6:	1c69      	adds	r1, r5, #1
    79b8:	b289      	uxth	r1, r1
    79ba:	ab02      	add	r3, sp, #8
    79bc:	88db      	ldrh	r3, [r3, #6]
    79be:	9a01      	ldr	r2, [sp, #4]
    79c0:	5553      	strb	r3, [r2, r5]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    79c2:	7962      	ldrb	r2, [r4, #5]
    79c4:	2a01      	cmp	r2, #1
    79c6:	d014      	beq.n	79f2 <usart_read_buffer_wait+0x7e>
		rx_data[rx_pos++] = received_data;
    79c8:	000d      	movs	r5, r1
	while (length--) {
    79ca:	4653      	mov	r3, sl
    79cc:	3b01      	subs	r3, #1
    79ce:	b29b      	uxth	r3, r3
    79d0:	469a      	mov	sl, r3
    79d2:	4b0d      	ldr	r3, [pc, #52]	; (7a08 <usart_read_buffer_wait+0x94>)
    79d4:	459a      	cmp	sl, r3
    79d6:	d0d6      	beq.n	7986 <usart_read_buffer_wait+0x12>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    79d8:	7e33      	ldrb	r3, [r6, #24]
    79da:	423b      	tst	r3, r7
    79dc:	d1e2      	bne.n	79a4 <usart_read_buffer_wait+0x30>
    79de:	4b0a      	ldr	r3, [pc, #40]	; (7a08 <usart_read_buffer_wait+0x94>)
    79e0:	7e32      	ldrb	r2, [r6, #24]
    79e2:	423a      	tst	r2, r7
    79e4:	d1de      	bne.n	79a4 <usart_read_buffer_wait+0x30>
			} else if (i == USART_TIMEOUT) {
    79e6:	2b01      	cmp	r3, #1
    79e8:	d009      	beq.n	79fe <usart_read_buffer_wait+0x8a>
    79ea:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    79ec:	2b00      	cmp	r3, #0
    79ee:	d1f7      	bne.n	79e0 <usart_read_buffer_wait+0x6c>
    79f0:	e7d8      	b.n	79a4 <usart_read_buffer_wait+0x30>
			rx_data[rx_pos++] = (received_data >> 8);
    79f2:	3502      	adds	r5, #2
    79f4:	b2ad      	uxth	r5, r5
    79f6:	0a1b      	lsrs	r3, r3, #8
    79f8:	9a01      	ldr	r2, [sp, #4]
    79fa:	5453      	strb	r3, [r2, r1]
    79fc:	e7e5      	b.n	79ca <usart_read_buffer_wait+0x56>
				return STATUS_ERR_TIMEOUT;
    79fe:	2012      	movs	r0, #18
    7a00:	e7c1      	b.n	7986 <usart_read_buffer_wait+0x12>
    7a02:	46c0      	nop			; (mov r8, r8)
    7a04:	00007905 	.word	0x00007905
    7a08:	0000ffff 	.word	0x0000ffff

00007a0c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    7a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    7a0e:	0080      	lsls	r0, r0, #2
    7a10:	4b62      	ldr	r3, [pc, #392]	; (7b9c <_usart_interrupt_handler+0x190>)
    7a12:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    7a14:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    7a16:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    7a18:	2b00      	cmp	r3, #0
    7a1a:	d1fc      	bne.n	7a16 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    7a1c:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    7a1e:	7da6      	ldrb	r6, [r4, #22]
    7a20:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    7a22:	2330      	movs	r3, #48	; 0x30
    7a24:	5ceb      	ldrb	r3, [r5, r3]
    7a26:	2231      	movs	r2, #49	; 0x31
    7a28:	5caf      	ldrb	r7, [r5, r2]
    7a2a:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    7a2c:	07f3      	lsls	r3, r6, #31
    7a2e:	d522      	bpl.n	7a76 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    7a30:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    7a32:	b29b      	uxth	r3, r3
    7a34:	2b00      	cmp	r3, #0
    7a36:	d01c      	beq.n	7a72 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    7a38:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    7a3a:	7813      	ldrb	r3, [r2, #0]
    7a3c:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    7a3e:	1c51      	adds	r1, r2, #1
    7a40:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    7a42:	7969      	ldrb	r1, [r5, #5]
    7a44:	2901      	cmp	r1, #1
    7a46:	d00e      	beq.n	7a66 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    7a48:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    7a4a:	05db      	lsls	r3, r3, #23
    7a4c:	0ddb      	lsrs	r3, r3, #23
    7a4e:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    7a50:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    7a52:	3b01      	subs	r3, #1
    7a54:	b29b      	uxth	r3, r3
    7a56:	85eb      	strh	r3, [r5, #46]	; 0x2e
    7a58:	2b00      	cmp	r3, #0
    7a5a:	d10c      	bne.n	7a76 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    7a5c:	3301      	adds	r3, #1
    7a5e:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    7a60:	3301      	adds	r3, #1
    7a62:	75a3      	strb	r3, [r4, #22]
    7a64:	e007      	b.n	7a76 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    7a66:	7851      	ldrb	r1, [r2, #1]
    7a68:	0209      	lsls	r1, r1, #8
    7a6a:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    7a6c:	3202      	adds	r2, #2
    7a6e:	62aa      	str	r2, [r5, #40]	; 0x28
    7a70:	e7eb      	b.n	7a4a <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    7a72:	2301      	movs	r3, #1
    7a74:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    7a76:	07b3      	lsls	r3, r6, #30
    7a78:	d506      	bpl.n	7a88 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    7a7a:	2302      	movs	r3, #2
    7a7c:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    7a7e:	2200      	movs	r2, #0
    7a80:	3331      	adds	r3, #49	; 0x31
    7a82:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    7a84:	07fb      	lsls	r3, r7, #31
    7a86:	d41a      	bmi.n	7abe <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    7a88:	0773      	lsls	r3, r6, #29
    7a8a:	d565      	bpl.n	7b58 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    7a8c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    7a8e:	b29b      	uxth	r3, r3
    7a90:	2b00      	cmp	r3, #0
    7a92:	d05f      	beq.n	7b54 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    7a94:	8b63      	ldrh	r3, [r4, #26]
    7a96:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    7a98:	071a      	lsls	r2, r3, #28
    7a9a:	d414      	bmi.n	7ac6 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    7a9c:	223f      	movs	r2, #63	; 0x3f
    7a9e:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    7aa0:	2b00      	cmp	r3, #0
    7aa2:	d034      	beq.n	7b0e <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    7aa4:	079a      	lsls	r2, r3, #30
    7aa6:	d511      	bpl.n	7acc <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    7aa8:	221a      	movs	r2, #26
    7aaa:	2332      	movs	r3, #50	; 0x32
    7aac:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    7aae:	3b30      	subs	r3, #48	; 0x30
    7ab0:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    7ab2:	077b      	lsls	r3, r7, #29
    7ab4:	d550      	bpl.n	7b58 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    7ab6:	0028      	movs	r0, r5
    7ab8:	696b      	ldr	r3, [r5, #20]
    7aba:	4798      	blx	r3
    7abc:	e04c      	b.n	7b58 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    7abe:	0028      	movs	r0, r5
    7ac0:	68eb      	ldr	r3, [r5, #12]
    7ac2:	4798      	blx	r3
    7ac4:	e7e0      	b.n	7a88 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    7ac6:	2237      	movs	r2, #55	; 0x37
    7ac8:	4013      	ands	r3, r2
    7aca:	e7e9      	b.n	7aa0 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    7acc:	075a      	lsls	r2, r3, #29
    7ace:	d505      	bpl.n	7adc <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    7ad0:	221e      	movs	r2, #30
    7ad2:	2332      	movs	r3, #50	; 0x32
    7ad4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    7ad6:	3b2e      	subs	r3, #46	; 0x2e
    7ad8:	8363      	strh	r3, [r4, #26]
    7ada:	e7ea      	b.n	7ab2 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    7adc:	07da      	lsls	r2, r3, #31
    7ade:	d505      	bpl.n	7aec <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    7ae0:	2213      	movs	r2, #19
    7ae2:	2332      	movs	r3, #50	; 0x32
    7ae4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    7ae6:	3b31      	subs	r3, #49	; 0x31
    7ae8:	8363      	strh	r3, [r4, #26]
    7aea:	e7e2      	b.n	7ab2 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    7aec:	06da      	lsls	r2, r3, #27
    7aee:	d505      	bpl.n	7afc <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    7af0:	2242      	movs	r2, #66	; 0x42
    7af2:	2332      	movs	r3, #50	; 0x32
    7af4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    7af6:	3b22      	subs	r3, #34	; 0x22
    7af8:	8363      	strh	r3, [r4, #26]
    7afa:	e7da      	b.n	7ab2 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    7afc:	2220      	movs	r2, #32
    7afe:	421a      	tst	r2, r3
    7b00:	d0d7      	beq.n	7ab2 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    7b02:	3221      	adds	r2, #33	; 0x21
    7b04:	2332      	movs	r3, #50	; 0x32
    7b06:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    7b08:	3b12      	subs	r3, #18
    7b0a:	8363      	strh	r3, [r4, #26]
    7b0c:	e7d1      	b.n	7ab2 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    7b0e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    7b10:	05db      	lsls	r3, r3, #23
    7b12:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    7b14:	b2da      	uxtb	r2, r3
    7b16:	6a69      	ldr	r1, [r5, #36]	; 0x24
    7b18:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    7b1a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    7b1c:	1c51      	adds	r1, r2, #1
    7b1e:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    7b20:	7969      	ldrb	r1, [r5, #5]
    7b22:	2901      	cmp	r1, #1
    7b24:	d010      	beq.n	7b48 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    7b26:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    7b28:	3b01      	subs	r3, #1
    7b2a:	b29b      	uxth	r3, r3
    7b2c:	85ab      	strh	r3, [r5, #44]	; 0x2c
    7b2e:	2b00      	cmp	r3, #0
    7b30:	d112      	bne.n	7b58 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    7b32:	3304      	adds	r3, #4
    7b34:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    7b36:	2200      	movs	r2, #0
    7b38:	332e      	adds	r3, #46	; 0x2e
    7b3a:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    7b3c:	07bb      	lsls	r3, r7, #30
    7b3e:	d50b      	bpl.n	7b58 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    7b40:	0028      	movs	r0, r5
    7b42:	692b      	ldr	r3, [r5, #16]
    7b44:	4798      	blx	r3
    7b46:	e007      	b.n	7b58 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    7b48:	0a1b      	lsrs	r3, r3, #8
    7b4a:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    7b4c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    7b4e:	3301      	adds	r3, #1
    7b50:	626b      	str	r3, [r5, #36]	; 0x24
    7b52:	e7e8      	b.n	7b26 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    7b54:	2304      	movs	r3, #4
    7b56:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    7b58:	06f3      	lsls	r3, r6, #27
    7b5a:	d504      	bpl.n	7b66 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    7b5c:	2310      	movs	r3, #16
    7b5e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    7b60:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    7b62:	06fb      	lsls	r3, r7, #27
    7b64:	d40e      	bmi.n	7b84 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    7b66:	06b3      	lsls	r3, r6, #26
    7b68:	d504      	bpl.n	7b74 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    7b6a:	2320      	movs	r3, #32
    7b6c:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    7b6e:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    7b70:	073b      	lsls	r3, r7, #28
    7b72:	d40b      	bmi.n	7b8c <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    7b74:	0733      	lsls	r3, r6, #28
    7b76:	d504      	bpl.n	7b82 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    7b78:	2308      	movs	r3, #8
    7b7a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    7b7c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    7b7e:	06bb      	lsls	r3, r7, #26
    7b80:	d408      	bmi.n	7b94 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    7b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    7b84:	0028      	movs	r0, r5
    7b86:	69eb      	ldr	r3, [r5, #28]
    7b88:	4798      	blx	r3
    7b8a:	e7ec      	b.n	7b66 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    7b8c:	0028      	movs	r0, r5
    7b8e:	69ab      	ldr	r3, [r5, #24]
    7b90:	4798      	blx	r3
    7b92:	e7ef      	b.n	7b74 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    7b94:	6a2b      	ldr	r3, [r5, #32]
    7b96:	0028      	movs	r0, r5
    7b98:	4798      	blx	r3
}
    7b9a:	e7f2      	b.n	7b82 <_usart_interrupt_handler+0x176>
    7b9c:	20000d9c 	.word	0x20000d9c

00007ba0 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    7ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
    7ba2:	46c6      	mov	lr, r8
    7ba4:	b500      	push	{lr}
    7ba6:	b088      	sub	sp, #32
    7ba8:	0005      	movs	r5, r0
    7baa:	000c      	movs	r4, r1
    7bac:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    7bae:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    7bb0:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    7bb2:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    7bb4:	079b      	lsls	r3, r3, #30
    7bb6:	d503      	bpl.n	7bc0 <spi_init+0x20>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    7bb8:	b008      	add	sp, #32
    7bba:	bc04      	pop	{r2}
    7bbc:	4690      	mov	r8, r2
    7bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    7bc0:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    7bc2:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    7bc4:	07db      	lsls	r3, r3, #31
    7bc6:	d4f7      	bmi.n	7bb8 <spi_init+0x18>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    7bc8:	0008      	movs	r0, r1
    7bca:	4b75      	ldr	r3, [pc, #468]	; (7da0 <spi_init+0x200>)
    7bcc:	4798      	blx	r3
	if (sercom_index == 5) {
    7bce:	2805      	cmp	r0, #5
    7bd0:	d100      	bne.n	7bd4 <spi_init+0x34>
    7bd2:	e0dd      	b.n	7d90 <spi_init+0x1f0>
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    7bd4:	0007      	movs	r7, r0
    7bd6:	3712      	adds	r7, #18
			MCLK->APBCMASK.reg |= mask;
    7bd8:	4a72      	ldr	r2, [pc, #456]	; (7da4 <spi_init+0x204>)
    7bda:	69d1      	ldr	r1, [r2, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    7bdc:	2301      	movs	r3, #1
    7bde:	4083      	lsls	r3, r0
    7be0:	430b      	orrs	r3, r1
    7be2:	61d3      	str	r3, [r2, #28]
	gclk_chan_conf.source_generator = config->generator_source;
    7be4:	a907      	add	r1, sp, #28
    7be6:	2324      	movs	r3, #36	; 0x24
    7be8:	4698      	mov	r8, r3
    7bea:	5cf3      	ldrb	r3, [r6, r3]
    7bec:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    7bee:	b2ff      	uxtb	r7, r7
    7bf0:	0038      	movs	r0, r7
    7bf2:	4b6d      	ldr	r3, [pc, #436]	; (7da8 <spi_init+0x208>)
    7bf4:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    7bf6:	0038      	movs	r0, r7
    7bf8:	4b6c      	ldr	r3, [pc, #432]	; (7dac <spi_init+0x20c>)
    7bfa:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    7bfc:	4643      	mov	r3, r8
    7bfe:	5cf0      	ldrb	r0, [r6, r3]
    7c00:	2100      	movs	r1, #0
    7c02:	4b6b      	ldr	r3, [pc, #428]	; (7db0 <spi_init+0x210>)
    7c04:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    7c06:	7833      	ldrb	r3, [r6, #0]
    7c08:	2b01      	cmp	r3, #1
    7c0a:	d03f      	beq.n	7c8c <spi_init+0xec>
	if (config->mode == SPI_MODE_SLAVE) {
    7c0c:	7833      	ldrb	r3, [r6, #0]
    7c0e:	2b00      	cmp	r3, #0
    7c10:	d103      	bne.n	7c1a <spi_init+0x7a>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    7c12:	6823      	ldr	r3, [r4, #0]
    7c14:	2208      	movs	r2, #8
    7c16:	4313      	orrs	r3, r2
    7c18:	6023      	str	r3, [r4, #0]
    7c1a:	002b      	movs	r3, r5
    7c1c:	330c      	adds	r3, #12
    7c1e:	0029      	movs	r1, r5
    7c20:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
    7c22:	2200      	movs	r2, #0
    7c24:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    7c26:	4299      	cmp	r1, r3
    7c28:	d1fc      	bne.n	7c24 <spi_init+0x84>
	module->tx_buffer_ptr              = NULL;
    7c2a:	2300      	movs	r3, #0
    7c2c:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    7c2e:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    7c30:	2400      	movs	r4, #0
    7c32:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    7c34:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    7c36:	3336      	adds	r3, #54	; 0x36
    7c38:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
    7c3a:	3301      	adds	r3, #1
    7c3c:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
    7c3e:	3301      	adds	r3, #1
    7c40:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    7c42:	3b35      	subs	r3, #53	; 0x35
    7c44:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
    7c46:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    7c48:	6828      	ldr	r0, [r5, #0]
    7c4a:	4b55      	ldr	r3, [pc, #340]	; (7da0 <spi_init+0x200>)
    7c4c:	4798      	blx	r3
    7c4e:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    7c50:	4958      	ldr	r1, [pc, #352]	; (7db4 <spi_init+0x214>)
    7c52:	4b59      	ldr	r3, [pc, #356]	; (7db8 <spi_init+0x218>)
    7c54:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    7c56:	00bf      	lsls	r7, r7, #2
    7c58:	4b58      	ldr	r3, [pc, #352]	; (7dbc <spi_init+0x21c>)
    7c5a:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
    7c5c:	682f      	ldr	r7, [r5, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    7c5e:	ab02      	add	r3, sp, #8
    7c60:	2280      	movs	r2, #128	; 0x80
    7c62:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    7c64:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    7c66:	3a7f      	subs	r2, #127	; 0x7f
    7c68:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    7c6a:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    7c6c:	7833      	ldrb	r3, [r6, #0]
    7c6e:	2b00      	cmp	r3, #0
    7c70:	d102      	bne.n	7c78 <spi_init+0xd8>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    7c72:	2200      	movs	r2, #0
    7c74:	ab02      	add	r3, sp, #8
    7c76:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    7c78:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    7c7a:	9303      	str	r3, [sp, #12]
    7c7c:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    7c7e:	9304      	str	r3, [sp, #16]
    7c80:	6b33      	ldr	r3, [r6, #48]	; 0x30
    7c82:	9305      	str	r3, [sp, #20]
    7c84:	6b73      	ldr	r3, [r6, #52]	; 0x34
    7c86:	9306      	str	r3, [sp, #24]
    7c88:	2400      	movs	r4, #0
    7c8a:	e00b      	b.n	7ca4 <spi_init+0x104>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    7c8c:	6823      	ldr	r3, [r4, #0]
    7c8e:	220c      	movs	r2, #12
    7c90:	4313      	orrs	r3, r2
    7c92:	6023      	str	r3, [r4, #0]
    7c94:	e7ba      	b.n	7c0c <spi_init+0x6c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    7c96:	0038      	movs	r0, r7
    7c98:	4b49      	ldr	r3, [pc, #292]	; (7dc0 <spi_init+0x220>)
    7c9a:	4798      	blx	r3
    7c9c:	e00a      	b.n	7cb4 <spi_init+0x114>
    7c9e:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    7ca0:	2c04      	cmp	r4, #4
    7ca2:	d010      	beq.n	7cc6 <spi_init+0x126>
    7ca4:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
    7ca6:	00a3      	lsls	r3, r4, #2
    7ca8:	466a      	mov	r2, sp
    7caa:	200c      	movs	r0, #12
    7cac:	1812      	adds	r2, r2, r0
    7cae:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    7cb0:	2800      	cmp	r0, #0
    7cb2:	d0f0      	beq.n	7c96 <spi_init+0xf6>
		if (current_pinmux != PINMUX_UNUSED) {
    7cb4:	1c43      	adds	r3, r0, #1
    7cb6:	d0f2      	beq.n	7c9e <spi_init+0xfe>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    7cb8:	a902      	add	r1, sp, #8
    7cba:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    7cbc:	0c00      	lsrs	r0, r0, #16
    7cbe:	b2c0      	uxtb	r0, r0
    7cc0:	4b40      	ldr	r3, [pc, #256]	; (7dc4 <spi_init+0x224>)
    7cc2:	4798      	blx	r3
    7cc4:	e7eb      	b.n	7c9e <spi_init+0xfe>
	module->mode             = config->mode;
    7cc6:	7833      	ldrb	r3, [r6, #0]
    7cc8:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    7cca:	7c33      	ldrb	r3, [r6, #16]
    7ccc:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    7cce:	7cb3      	ldrb	r3, [r6, #18]
    7cd0:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    7cd2:	7d33      	ldrb	r3, [r6, #20]
    7cd4:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
    7cd6:	2200      	movs	r2, #0
    7cd8:	466b      	mov	r3, sp
    7cda:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    7cdc:	7833      	ldrb	r3, [r6, #0]
    7cde:	2b01      	cmp	r3, #1
    7ce0:	d012      	beq.n	7d08 <spi_init+0x168>
	if (config->mode == SPI_MODE_SLAVE) {
    7ce2:	7833      	ldrb	r3, [r6, #0]
    7ce4:	2b00      	cmp	r3, #0
    7ce6:	d126      	bne.n	7d36 <spi_init+0x196>
		ctrla = config->mode_specific.slave.frame_format;
    7ce8:	69b0      	ldr	r0, [r6, #24]
		ctrlb = config->mode_specific.slave.address_mode;
    7cea:	8bb2      	ldrh	r2, [r6, #28]
		spi_module->ADDR.reg |=
    7cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    7cee:	7ff1      	ldrb	r1, [r6, #31]
    7cf0:	0409      	lsls	r1, r1, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    7cf2:	7fb4      	ldrb	r4, [r6, #30]
    7cf4:	4321      	orrs	r1, r4
		spi_module->ADDR.reg |=
    7cf6:	4319      	orrs	r1, r3
    7cf8:	6279      	str	r1, [r7, #36]	; 0x24
		if (config->mode_specific.slave.preload_enable) {
    7cfa:	2320      	movs	r3, #32
    7cfc:	5cf3      	ldrb	r3, [r6, r3]
    7cfe:	2b00      	cmp	r3, #0
    7d00:	d01b      	beq.n	7d3a <spi_init+0x19a>
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    7d02:	2340      	movs	r3, #64	; 0x40
    7d04:	431a      	orrs	r2, r3
    7d06:	e018      	b.n	7d3a <spi_init+0x19a>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    7d08:	6828      	ldr	r0, [r5, #0]
    7d0a:	4b25      	ldr	r3, [pc, #148]	; (7da0 <spi_init+0x200>)
    7d0c:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    7d0e:	3012      	adds	r0, #18
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    7d10:	b2c0      	uxtb	r0, r0
    7d12:	4b2d      	ldr	r3, [pc, #180]	; (7dc8 <spi_init+0x228>)
    7d14:	4798      	blx	r3
    7d16:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    7d18:	466b      	mov	r3, sp
    7d1a:	1d9a      	adds	r2, r3, #6
    7d1c:	69b0      	ldr	r0, [r6, #24]
    7d1e:	4b2b      	ldr	r3, [pc, #172]	; (7dcc <spi_init+0x22c>)
    7d20:	4798      	blx	r3
    7d22:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    7d24:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    7d26:	2b00      	cmp	r3, #0
    7d28:	d000      	beq.n	7d2c <spi_init+0x18c>
    7d2a:	e745      	b.n	7bb8 <spi_init+0x18>
		spi_module->BAUD.reg = (uint8_t)baud;
    7d2c:	466b      	mov	r3, sp
    7d2e:	3306      	adds	r3, #6
    7d30:	781b      	ldrb	r3, [r3, #0]
    7d32:	733b      	strb	r3, [r7, #12]
    7d34:	e7d5      	b.n	7ce2 <spi_init+0x142>
	uint32_t ctrlb = 0;
    7d36:	2200      	movs	r2, #0
	uint32_t ctrla = 0;
    7d38:	2000      	movs	r0, #0
	ctrla |= config->mux_setting;
    7d3a:	6873      	ldr	r3, [r6, #4]
    7d3c:	68b1      	ldr	r1, [r6, #8]
    7d3e:	430b      	orrs	r3, r1
    7d40:	68f1      	ldr	r1, [r6, #12]
    7d42:	430b      	orrs	r3, r1
    7d44:	4303      	orrs	r3, r0
	ctrlb |= config->character_size;
    7d46:	7c31      	ldrb	r1, [r6, #16]
    7d48:	430a      	orrs	r2, r1
	if (config->run_in_standby || system_is_debugger_present()) {
    7d4a:	7c71      	ldrb	r1, [r6, #17]
    7d4c:	2900      	cmp	r1, #0
    7d4e:	d103      	bne.n	7d58 <spi_init+0x1b8>
    7d50:	491f      	ldr	r1, [pc, #124]	; (7dd0 <spi_init+0x230>)
    7d52:	7889      	ldrb	r1, [r1, #2]
    7d54:	0789      	lsls	r1, r1, #30
    7d56:	d501      	bpl.n	7d5c <spi_init+0x1bc>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    7d58:	2180      	movs	r1, #128	; 0x80
    7d5a:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    7d5c:	7cb1      	ldrb	r1, [r6, #18]
    7d5e:	2900      	cmp	r1, #0
    7d60:	d002      	beq.n	7d68 <spi_init+0x1c8>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    7d62:	2180      	movs	r1, #128	; 0x80
    7d64:	0289      	lsls	r1, r1, #10
    7d66:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    7d68:	7cf1      	ldrb	r1, [r6, #19]
    7d6a:	2900      	cmp	r1, #0
    7d6c:	d002      	beq.n	7d74 <spi_init+0x1d4>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    7d6e:	2180      	movs	r1, #128	; 0x80
    7d70:	0089      	lsls	r1, r1, #2
    7d72:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    7d74:	7d31      	ldrb	r1, [r6, #20]
    7d76:	2900      	cmp	r1, #0
    7d78:	d002      	beq.n	7d80 <spi_init+0x1e0>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    7d7a:	2180      	movs	r1, #128	; 0x80
    7d7c:	0189      	lsls	r1, r1, #6
    7d7e:	430a      	orrs	r2, r1
	spi_module->CTRLA.reg |= ctrla;
    7d80:	6839      	ldr	r1, [r7, #0]
    7d82:	430b      	orrs	r3, r1
    7d84:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
    7d86:	687b      	ldr	r3, [r7, #4]
    7d88:	431a      	orrs	r2, r3
    7d8a:	607a      	str	r2, [r7, #4]
	return STATUS_OK;
    7d8c:	2000      	movs	r0, #0
    7d8e:	e713      	b.n	7bb8 <spi_init+0x18>
			MCLK->APBDMASK.reg |= mask;
    7d90:	4a04      	ldr	r2, [pc, #16]	; (7da4 <spi_init+0x204>)
    7d92:	6a13      	ldr	r3, [r2, #32]
    7d94:	2102      	movs	r1, #2
    7d96:	430b      	orrs	r3, r1
    7d98:	6213      	str	r3, [r2, #32]
		gclk_index   =  SERCOM5_GCLK_ID_CORE;
    7d9a:	2718      	movs	r7, #24
    7d9c:	e722      	b.n	7be4 <spi_init+0x44>
    7d9e:	46c0      	nop			; (mov r8, r8)
    7da0:	00000875 	.word	0x00000875
    7da4:	40000400 	.word	0x40000400
    7da8:	00008a35 	.word	0x00008a35
    7dac:	000089c5 	.word	0x000089c5
    7db0:	000006cd 	.word	0x000006cd
    7db4:	00007ec9 	.word	0x00007ec9
    7db8:	000080f1 	.word	0x000080f1
    7dbc:	20000d9c 	.word	0x20000d9c
    7dc0:	00000719 	.word	0x00000719
    7dc4:	00008b31 	.word	0x00008b31
    7dc8:	00008a59 	.word	0x00008a59
    7dcc:	0000060f 	.word	0x0000060f
    7dd0:	41002000 	.word	0x41002000

00007dd4 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    7dd4:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    7dd6:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    7dd8:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    7dda:	2c01      	cmp	r4, #1
    7ddc:	d001      	beq.n	7de2 <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    7dde:	0018      	movs	r0, r3
    7de0:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    7de2:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    7de4:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    7de6:	2c00      	cmp	r4, #0
    7de8:	d1f9      	bne.n	7dde <spi_select_slave+0xa>
		if (select) {
    7dea:	2a00      	cmp	r2, #0
    7dec:	d058      	beq.n	7ea0 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    7dee:	784b      	ldrb	r3, [r1, #1]
    7df0:	2b00      	cmp	r3, #0
    7df2:	d044      	beq.n	7e7e <spi_select_slave+0xaa>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    7df4:	6803      	ldr	r3, [r0, #0]
    7df6:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    7df8:	07db      	lsls	r3, r3, #31
    7dfa:	d410      	bmi.n	7e1e <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    7dfc:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    7dfe:	09d1      	lsrs	r1, r2, #7
		return NULL;
    7e00:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    7e02:	2900      	cmp	r1, #0
    7e04:	d104      	bne.n	7e10 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    7e06:	0953      	lsrs	r3, r2, #5
    7e08:	01db      	lsls	r3, r3, #7
    7e0a:	492e      	ldr	r1, [pc, #184]	; (7ec4 <spi_select_slave+0xf0>)
    7e0c:	468c      	mov	ip, r1
    7e0e:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    7e10:	211f      	movs	r1, #31
    7e12:	4011      	ands	r1, r2
    7e14:	2201      	movs	r2, #1
    7e16:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    7e18:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    7e1a:	2305      	movs	r3, #5
    7e1c:	e7df      	b.n	7dde <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    7e1e:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    7e20:	09d4      	lsrs	r4, r2, #7
		return NULL;
    7e22:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    7e24:	2c00      	cmp	r4, #0
    7e26:	d104      	bne.n	7e32 <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    7e28:	0953      	lsrs	r3, r2, #5
    7e2a:	01db      	lsls	r3, r3, #7
    7e2c:	4c25      	ldr	r4, [pc, #148]	; (7ec4 <spi_select_slave+0xf0>)
    7e2e:	46a4      	mov	ip, r4
    7e30:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    7e32:	241f      	movs	r4, #31
    7e34:	4014      	ands	r4, r2
    7e36:	2201      	movs	r2, #1
    7e38:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    7e3a:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    7e3c:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    7e3e:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    7e40:	07d2      	lsls	r2, r2, #31
    7e42:	d501      	bpl.n	7e48 <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    7e44:	788a      	ldrb	r2, [r1, #2]
    7e46:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    7e48:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    7e4a:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    7e4c:	2a00      	cmp	r2, #0
    7e4e:	d1c6      	bne.n	7dde <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    7e50:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    7e52:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    7e54:	7e13      	ldrb	r3, [r2, #24]
    7e56:	420b      	tst	r3, r1
    7e58:	d0fc      	beq.n	7e54 <spi_select_slave+0x80>
    7e5a:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    7e5c:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
    7e5e:	0749      	lsls	r1, r1, #29
    7e60:	d5bd      	bpl.n	7dde <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    7e62:	8b53      	ldrh	r3, [r2, #26]
    7e64:	075b      	lsls	r3, r3, #29
    7e66:	d501      	bpl.n	7e6c <spi_select_slave+0x98>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    7e68:	2304      	movs	r3, #4
    7e6a:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    7e6c:	7983      	ldrb	r3, [r0, #6]
    7e6e:	2b01      	cmp	r3, #1
    7e70:	d002      	beq.n	7e78 <spi_select_slave+0xa4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    7e72:	6a93      	ldr	r3, [r2, #40]	; 0x28
    7e74:	2300      	movs	r3, #0
    7e76:	e7b2      	b.n	7dde <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    7e78:	6a93      	ldr	r3, [r2, #40]	; 0x28
    7e7a:	2300      	movs	r3, #0
    7e7c:	e7af      	b.n	7dde <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    7e7e:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    7e80:	09d1      	lsrs	r1, r2, #7
		return NULL;
    7e82:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    7e84:	2900      	cmp	r1, #0
    7e86:	d104      	bne.n	7e92 <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    7e88:	0953      	lsrs	r3, r2, #5
    7e8a:	01db      	lsls	r3, r3, #7
    7e8c:	490d      	ldr	r1, [pc, #52]	; (7ec4 <spi_select_slave+0xf0>)
    7e8e:	468c      	mov	ip, r1
    7e90:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    7e92:	211f      	movs	r1, #31
    7e94:	4011      	ands	r1, r2
    7e96:	2201      	movs	r2, #1
    7e98:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    7e9a:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    7e9c:	2300      	movs	r3, #0
    7e9e:	e79e      	b.n	7dde <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    7ea0:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    7ea2:	09d1      	lsrs	r1, r2, #7
		return NULL;
    7ea4:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    7ea6:	2900      	cmp	r1, #0
    7ea8:	d104      	bne.n	7eb4 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    7eaa:	0953      	lsrs	r3, r2, #5
    7eac:	01db      	lsls	r3, r3, #7
    7eae:	4905      	ldr	r1, [pc, #20]	; (7ec4 <spi_select_slave+0xf0>)
    7eb0:	468c      	mov	ip, r1
    7eb2:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    7eb4:	211f      	movs	r1, #31
    7eb6:	4011      	ands	r1, r2
    7eb8:	2201      	movs	r2, #1
    7eba:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    7ebc:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    7ebe:	2300      	movs	r3, #0
    7ec0:	e78d      	b.n	7dde <spi_select_slave+0xa>
    7ec2:	46c0      	nop			; (mov r8, r8)
    7ec4:	40002800 	.word	0x40002800

00007ec8 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    7ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    7eca:	0080      	lsls	r0, r0, #2
    7ecc:	4b85      	ldr	r3, [pc, #532]	; (80e4 <_spi_interrupt_handler+0x21c>)
    7ece:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    7ed0:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    7ed2:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
    7ed4:	5ce3      	ldrb	r3, [r4, r3]
    7ed6:	2236      	movs	r2, #54	; 0x36
    7ed8:	5ca7      	ldrb	r7, [r4, r2]
    7eda:	401f      	ands	r7, r3

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    7edc:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    7ede:	7db5      	ldrb	r5, [r6, #22]
    7ee0:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    7ee2:	07eb      	lsls	r3, r5, #31
    7ee4:	d52e      	bpl.n	7f44 <_spi_interrupt_handler+0x7c>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    7ee6:	7963      	ldrb	r3, [r4, #5]
    7ee8:	2b01      	cmp	r3, #1
    7eea:	d025      	beq.n	7f38 <_spi_interrupt_handler+0x70>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    7eec:	2b00      	cmp	r3, #0
    7eee:	d129      	bne.n	7f44 <_spi_interrupt_handler+0x7c>
			(module->dir != SPI_DIRECTION_READ))
    7ef0:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_SLAVE) &&
    7ef2:	2b00      	cmp	r3, #0
    7ef4:	d026      	beq.n	7f44 <_spi_interrupt_handler+0x7c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    7ef6:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    7ef8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    7efa:	7813      	ldrb	r3, [r2, #0]
    7efc:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
    7efe:	1c50      	adds	r0, r2, #1
    7f00:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    7f02:	79a0      	ldrb	r0, [r4, #6]
    7f04:	2801      	cmp	r0, #1
    7f06:	d100      	bne.n	7f0a <_spi_interrupt_handler+0x42>
    7f08:	e069      	b.n	7fde <_spi_interrupt_handler+0x116>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    7f0a:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    7f0c:	05db      	lsls	r3, r3, #23
    7f0e:	0ddb      	lsrs	r3, r3, #23
    7f10:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
    7f12:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    7f14:	3b01      	subs	r3, #1
    7f16:	b29b      	uxth	r3, r3
    7f18:	86a3      	strh	r3, [r4, #52]	; 0x34
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
			if (module->remaining_tx_buffer_length == 0) {
    7f1a:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    7f1c:	b29b      	uxth	r3, r3
    7f1e:	2b00      	cmp	r3, #0
    7f20:	d110      	bne.n	7f44 <_spi_interrupt_handler+0x7c>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    7f22:	3301      	adds	r3, #1
    7f24:	7533      	strb	r3, [r6, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    7f26:	7a63      	ldrb	r3, [r4, #9]
    7f28:	2b01      	cmp	r3, #1
    7f2a:	d10b      	bne.n	7f44 <_spi_interrupt_handler+0x7c>
    7f2c:	79e3      	ldrb	r3, [r4, #7]
    7f2e:	2b00      	cmp	r3, #0
    7f30:	d108      	bne.n	7f44 <_spi_interrupt_handler+0x7c>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    7f32:	3302      	adds	r3, #2
    7f34:	75b3      	strb	r3, [r6, #22]
    7f36:	e005      	b.n	7f44 <_spi_interrupt_handler+0x7c>
			(module->dir == SPI_DIRECTION_READ)) {
    7f38:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    7f3a:	2b00      	cmp	r3, #0
    7f3c:	d03e      	beq.n	7fbc <_spi_interrupt_handler+0xf4>
			(module->dir != SPI_DIRECTION_READ))
    7f3e:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    7f40:	2b00      	cmp	r3, #0
    7f42:	d1d8      	bne.n	7ef6 <_spi_interrupt_handler+0x2e>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    7f44:	076b      	lsls	r3, r5, #29
    7f46:	d511      	bpl.n	7f6c <_spi_interrupt_handler+0xa4>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    7f48:	8b73      	ldrh	r3, [r6, #26]
    7f4a:	075b      	lsls	r3, r3, #29
    7f4c:	d551      	bpl.n	7ff2 <_spi_interrupt_handler+0x12a>
			if (module->dir != SPI_DIRECTION_WRITE) {
    7f4e:	7a63      	ldrb	r3, [r4, #9]
    7f50:	2b01      	cmp	r3, #1
    7f52:	d008      	beq.n	7f66 <_spi_interrupt_handler+0x9e>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    7f54:	221e      	movs	r2, #30
    7f56:	2338      	movs	r3, #56	; 0x38
    7f58:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    7f5a:	3b35      	subs	r3, #53	; 0x35
    7f5c:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    7f5e:	3302      	adds	r3, #2
    7f60:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    7f62:	073b      	lsls	r3, r7, #28
    7f64:	d441      	bmi.n	7fea <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    7f66:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    7f68:	2304      	movs	r3, #4
    7f6a:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    7f6c:	07ab      	lsls	r3, r5, #30
    7f6e:	d515      	bpl.n	7f9c <_spi_interrupt_handler+0xd4>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    7f70:	7963      	ldrb	r3, [r4, #5]
    7f72:	2b00      	cmp	r3, #0
    7f74:	d10e      	bne.n	7f94 <_spi_interrupt_handler+0xcc>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
    7f76:	3307      	adds	r3, #7
    7f78:	7533      	strb	r3, [r6, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    7f7a:	3b05      	subs	r3, #5
    7f7c:	7633      	strb	r3, [r6, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
    7f7e:	3301      	adds	r3, #1
    7f80:	7263      	strb	r3, [r4, #9]
			module->remaining_tx_buffer_length = 0;
    7f82:	2300      	movs	r3, #0
    7f84:	86a3      	strh	r3, [r4, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
    7f86:	8623      	strh	r3, [r4, #48]	; 0x30
			module->status = STATUS_OK;
    7f88:	3338      	adds	r3, #56	; 0x38
    7f8a:	2200      	movs	r2, #0
    7f8c:	54e2      	strb	r2, [r4, r3]

			if (callback_mask &
    7f8e:	06fb      	lsls	r3, r7, #27
    7f90:	d500      	bpl.n	7f94 <_spi_interrupt_handler+0xcc>
    7f92:	e07f      	b.n	8094 <_spi_interrupt_handler+0x1cc>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    7f94:	7963      	ldrb	r3, [r4, #5]
    7f96:	2b01      	cmp	r3, #1
    7f98:	d100      	bne.n	7f9c <_spi_interrupt_handler+0xd4>
    7f9a:	e07f      	b.n	809c <_spi_interrupt_handler+0x1d4>
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
    7f9c:	072b      	lsls	r3, r5, #28
    7f9e:	d508      	bpl.n	7fb2 <_spi_interrupt_handler+0xea>
			if (module->mode == SPI_MODE_SLAVE) {
    7fa0:	7963      	ldrb	r3, [r4, #5]
    7fa2:	2b00      	cmp	r3, #0
    7fa4:	d105      	bne.n	7fb2 <_spi_interrupt_handler+0xea>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    7fa6:	3308      	adds	r3, #8
    7fa8:	7533      	strb	r3, [r6, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    7faa:	7633      	strb	r3, [r6, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
    7fac:	06bb      	lsls	r3, r7, #26
    7fae:	d500      	bpl.n	7fb2 <_spi_interrupt_handler+0xea>
    7fb0:	e08a      	b.n	80c8 <_spi_interrupt_handler+0x200>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    7fb2:	b26d      	sxtb	r5, r5
    7fb4:	2d00      	cmp	r5, #0
    7fb6:	da00      	bge.n	7fba <_spi_interrupt_handler+0xf2>
    7fb8:	e08a      	b.n	80d0 <_spi_interrupt_handler+0x208>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    7fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	spi_hw->DATA.reg = dummy_write;
    7fbc:	4b4a      	ldr	r3, [pc, #296]	; (80e8 <_spi_interrupt_handler+0x220>)
    7fbe:	881b      	ldrh	r3, [r3, #0]
    7fc0:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    7fc2:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    7fc4:	3b01      	subs	r3, #1
    7fc6:	b29b      	uxth	r3, r3
    7fc8:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
    7fca:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    7fcc:	b29b      	uxth	r3, r3
    7fce:	2b00      	cmp	r3, #0
    7fd0:	d101      	bne.n	7fd6 <_spi_interrupt_handler+0x10e>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    7fd2:	3301      	adds	r3, #1
    7fd4:	7533      	strb	r3, [r6, #20]
		|| ((module->mode == SPI_MODE_MASTER) &&
    7fd6:	7963      	ldrb	r3, [r4, #5]
		if (0
    7fd8:	2b01      	cmp	r3, #1
    7fda:	d0b0      	beq.n	7f3e <_spi_interrupt_handler+0x76>
    7fdc:	e786      	b.n	7eec <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    7fde:	7850      	ldrb	r0, [r2, #1]
    7fe0:	0200      	lsls	r0, r0, #8
    7fe2:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
    7fe4:	3202      	adds	r2, #2
    7fe6:	62e2      	str	r2, [r4, #44]	; 0x2c
    7fe8:	e790      	b.n	7f0c <_spi_interrupt_handler+0x44>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    7fea:	0020      	movs	r0, r4
    7fec:	69a3      	ldr	r3, [r4, #24]
    7fee:	4798      	blx	r3
    7ff0:	e7b9      	b.n	7f66 <_spi_interrupt_handler+0x9e>
			if (module->dir == SPI_DIRECTION_WRITE) {
    7ff2:	7a63      	ldrb	r3, [r4, #9]
    7ff4:	2b01      	cmp	r3, #1
    7ff6:	d027      	beq.n	8048 <_spi_interrupt_handler+0x180>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    7ff8:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    7ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7ffc:	05db      	lsls	r3, r3, #23
    7ffe:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    8000:	b2da      	uxtb	r2, r3
    8002:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    8004:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
    8006:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    8008:	1c51      	adds	r1, r2, #1
    800a:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    800c:	79a1      	ldrb	r1, [r4, #6]
    800e:	2901      	cmp	r1, #1
    8010:	d033      	beq.n	807a <_spi_interrupt_handler+0x1b2>
	module->remaining_rx_buffer_length--;
    8012:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    8014:	3b01      	subs	r3, #1
    8016:	b29b      	uxth	r3, r3
    8018:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    801a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    801c:	b29b      	uxth	r3, r3
    801e:	2b00      	cmp	r3, #0
    8020:	d1a4      	bne.n	7f6c <_spi_interrupt_handler+0xa4>
					module->status = STATUS_OK;
    8022:	2200      	movs	r2, #0
    8024:	3338      	adds	r3, #56	; 0x38
    8026:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    8028:	3b34      	subs	r3, #52	; 0x34
    802a:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    802c:	7a63      	ldrb	r3, [r4, #9]
    802e:	2b02      	cmp	r3, #2
    8030:	d029      	beq.n	8086 <_spi_interrupt_handler+0x1be>
					} else if (module->dir == SPI_DIRECTION_READ) {
    8032:	7a63      	ldrb	r3, [r4, #9]
    8034:	2b00      	cmp	r3, #0
    8036:	d000      	beq.n	803a <_spi_interrupt_handler+0x172>
    8038:	e798      	b.n	7f6c <_spi_interrupt_handler+0xa4>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    803a:	07bb      	lsls	r3, r7, #30
    803c:	d400      	bmi.n	8040 <_spi_interrupt_handler+0x178>
    803e:	e795      	b.n	7f6c <_spi_interrupt_handler+0xa4>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    8040:	0020      	movs	r0, r4
    8042:	6923      	ldr	r3, [r4, #16]
    8044:	4798      	blx	r3
    8046:	e791      	b.n	7f6c <_spi_interrupt_handler+0xa4>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    8048:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
    804a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    804c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    804e:	3b01      	subs	r3, #1
    8050:	b29b      	uxth	r3, r3
    8052:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
    8054:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    8056:	b29b      	uxth	r3, r3
    8058:	2b00      	cmp	r3, #0
    805a:	d000      	beq.n	805e <_spi_interrupt_handler+0x196>
    805c:	e786      	b.n	7f6c <_spi_interrupt_handler+0xa4>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    805e:	3304      	adds	r3, #4
    8060:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    8062:	2200      	movs	r2, #0
    8064:	3334      	adds	r3, #52	; 0x34
    8066:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    8068:	3b35      	subs	r3, #53	; 0x35
    806a:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    806c:	07fb      	lsls	r3, r7, #31
    806e:	d400      	bmi.n	8072 <_spi_interrupt_handler+0x1aa>
    8070:	e77c      	b.n	7f6c <_spi_interrupt_handler+0xa4>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    8072:	0020      	movs	r0, r4
    8074:	68e3      	ldr	r3, [r4, #12]
    8076:	4798      	blx	r3
    8078:	e778      	b.n	7f6c <_spi_interrupt_handler+0xa4>
		*(module->rx_buffer_ptr) = (received_data >> 8);
    807a:	0a1b      	lsrs	r3, r3, #8
    807c:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    807e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    8080:	3301      	adds	r3, #1
    8082:	62a3      	str	r3, [r4, #40]	; 0x28
    8084:	e7c5      	b.n	8012 <_spi_interrupt_handler+0x14a>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    8086:	077b      	lsls	r3, r7, #29
    8088:	d400      	bmi.n	808c <_spi_interrupt_handler+0x1c4>
    808a:	e76f      	b.n	7f6c <_spi_interrupt_handler+0xa4>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    808c:	0020      	movs	r0, r4
    808e:	6963      	ldr	r3, [r4, #20]
    8090:	4798      	blx	r3
    8092:	e76b      	b.n	7f6c <_spi_interrupt_handler+0xa4>
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
    8094:	0020      	movs	r0, r4
    8096:	69e3      	ldr	r3, [r4, #28]
    8098:	4798      	blx	r3
    809a:	e77b      	b.n	7f94 <_spi_interrupt_handler+0xcc>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    809c:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    809e:	2b01      	cmp	r3, #1
    80a0:	d000      	beq.n	80a4 <_spi_interrupt_handler+0x1dc>
    80a2:	e786      	b.n	7fb2 <_spi_interrupt_handler+0xea>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    80a4:	79e3      	ldrb	r3, [r4, #7]
    80a6:	2b00      	cmp	r3, #0
    80a8:	d000      	beq.n	80ac <_spi_interrupt_handler+0x1e4>
    80aa:	e782      	b.n	7fb2 <_spi_interrupt_handler+0xea>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    80ac:	3302      	adds	r3, #2
    80ae:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    80b0:	3301      	adds	r3, #1
    80b2:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    80b4:	2200      	movs	r2, #0
    80b6:	3335      	adds	r3, #53	; 0x35
    80b8:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    80ba:	07fb      	lsls	r3, r7, #31
    80bc:	d400      	bmi.n	80c0 <_spi_interrupt_handler+0x1f8>
    80be:	e76d      	b.n	7f9c <_spi_interrupt_handler+0xd4>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    80c0:	0020      	movs	r0, r4
    80c2:	68e3      	ldr	r3, [r4, #12]
    80c4:	4798      	blx	r3
    80c6:	e769      	b.n	7f9c <_spi_interrupt_handler+0xd4>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    80c8:	0020      	movs	r0, r4
    80ca:	6a23      	ldr	r3, [r4, #32]
    80cc:	4798      	blx	r3
    80ce:	e770      	b.n	7fb2 <_spi_interrupt_handler+0xea>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    80d0:	2380      	movs	r3, #128	; 0x80
    80d2:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    80d4:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    80d6:	067b      	lsls	r3, r7, #25
    80d8:	d400      	bmi.n	80dc <_spi_interrupt_handler+0x214>
    80da:	e76e      	b.n	7fba <_spi_interrupt_handler+0xf2>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    80dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    80de:	0020      	movs	r0, r4
    80e0:	4798      	blx	r3
}
    80e2:	e76a      	b.n	7fba <_spi_interrupt_handler+0xf2>
    80e4:	20000d9c 	.word	0x20000d9c
    80e8:	20000d98 	.word	0x20000d98

000080ec <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    80ec:	4770      	bx	lr
	...

000080f0 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    80f0:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    80f2:	4b0a      	ldr	r3, [pc, #40]	; (811c <_sercom_set_handler+0x2c>)
    80f4:	781b      	ldrb	r3, [r3, #0]
    80f6:	2b00      	cmp	r3, #0
    80f8:	d10c      	bne.n	8114 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    80fa:	4f09      	ldr	r7, [pc, #36]	; (8120 <_sercom_set_handler+0x30>)
    80fc:	4e09      	ldr	r6, [pc, #36]	; (8124 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    80fe:	4d0a      	ldr	r5, [pc, #40]	; (8128 <_sercom_set_handler+0x38>)
    8100:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    8102:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    8104:	195a      	adds	r2, r3, r5
    8106:	6014      	str	r4, [r2, #0]
    8108:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    810a:	2b18      	cmp	r3, #24
    810c:	d1f9      	bne.n	8102 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    810e:	2201      	movs	r2, #1
    8110:	4b02      	ldr	r3, [pc, #8]	; (811c <_sercom_set_handler+0x2c>)
    8112:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    8114:	0080      	lsls	r0, r0, #2
    8116:	4b02      	ldr	r3, [pc, #8]	; (8120 <_sercom_set_handler+0x30>)
    8118:	50c1      	str	r1, [r0, r3]
}
    811a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    811c:	20000514 	.word	0x20000514
    8120:	20000518 	.word	0x20000518
    8124:	000080ed 	.word	0x000080ed
    8128:	20000d9c 	.word	0x20000d9c

0000812c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    812c:	b500      	push	{lr}
    812e:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    8130:	2308      	movs	r3, #8
    8132:	466a      	mov	r2, sp
    8134:	7013      	strb	r3, [r2, #0]
    8136:	3301      	adds	r3, #1
    8138:	7053      	strb	r3, [r2, #1]
    813a:	3301      	adds	r3, #1
    813c:	7093      	strb	r3, [r2, #2]
    813e:	3301      	adds	r3, #1
    8140:	70d3      	strb	r3, [r2, #3]
    8142:	3301      	adds	r3, #1
    8144:	7113      	strb	r3, [r2, #4]
    8146:	3301      	adds	r3, #1
    8148:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    814a:	4b03      	ldr	r3, [pc, #12]	; (8158 <_sercom_get_interrupt_vector+0x2c>)
    814c:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    814e:	466b      	mov	r3, sp
    8150:	5618      	ldrsb	r0, [r3, r0]
}
    8152:	b003      	add	sp, #12
    8154:	bd00      	pop	{pc}
    8156:	46c0      	nop			; (mov r8, r8)
    8158:	00000875 	.word	0x00000875

0000815c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    815c:	b510      	push	{r4, lr}
    815e:	4b02      	ldr	r3, [pc, #8]	; (8168 <SERCOM0_Handler+0xc>)
    8160:	681b      	ldr	r3, [r3, #0]
    8162:	2000      	movs	r0, #0
    8164:	4798      	blx	r3
    8166:	bd10      	pop	{r4, pc}
    8168:	20000518 	.word	0x20000518

0000816c <SERCOM1_Handler>:
    816c:	b510      	push	{r4, lr}
    816e:	4b02      	ldr	r3, [pc, #8]	; (8178 <SERCOM1_Handler+0xc>)
    8170:	685b      	ldr	r3, [r3, #4]
    8172:	2001      	movs	r0, #1
    8174:	4798      	blx	r3
    8176:	bd10      	pop	{r4, pc}
    8178:	20000518 	.word	0x20000518

0000817c <SERCOM2_Handler>:
    817c:	b510      	push	{r4, lr}
    817e:	4b02      	ldr	r3, [pc, #8]	; (8188 <SERCOM2_Handler+0xc>)
    8180:	689b      	ldr	r3, [r3, #8]
    8182:	2002      	movs	r0, #2
    8184:	4798      	blx	r3
    8186:	bd10      	pop	{r4, pc}
    8188:	20000518 	.word	0x20000518

0000818c <SERCOM3_Handler>:
    818c:	b510      	push	{r4, lr}
    818e:	4b02      	ldr	r3, [pc, #8]	; (8198 <SERCOM3_Handler+0xc>)
    8190:	68db      	ldr	r3, [r3, #12]
    8192:	2003      	movs	r0, #3
    8194:	4798      	blx	r3
    8196:	bd10      	pop	{r4, pc}
    8198:	20000518 	.word	0x20000518

0000819c <SERCOM4_Handler>:
    819c:	b510      	push	{r4, lr}
    819e:	4b02      	ldr	r3, [pc, #8]	; (81a8 <SERCOM4_Handler+0xc>)
    81a0:	691b      	ldr	r3, [r3, #16]
    81a2:	2004      	movs	r0, #4
    81a4:	4798      	blx	r3
    81a6:	bd10      	pop	{r4, pc}
    81a8:	20000518 	.word	0x20000518

000081ac <SERCOM5_Handler>:
    81ac:	b510      	push	{r4, lr}
    81ae:	4b02      	ldr	r3, [pc, #8]	; (81b8 <SERCOM5_Handler+0xc>)
    81b0:	695b      	ldr	r3, [r3, #20]
    81b2:	2005      	movs	r0, #5
    81b4:	4798      	blx	r3
    81b6:	bd10      	pop	{r4, pc}
    81b8:	20000518 	.word	0x20000518

000081bc <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    81bc:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    81be:	2a00      	cmp	r2, #0
    81c0:	d001      	beq.n	81c6 <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    81c2:	0018      	movs	r0, r3
    81c4:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    81c6:	008b      	lsls	r3, r1, #2
    81c8:	4a06      	ldr	r2, [pc, #24]	; (81e4 <extint_register_callback+0x28>)
    81ca:	589b      	ldr	r3, [r3, r2]
    81cc:	2b00      	cmp	r3, #0
    81ce:	d003      	beq.n	81d8 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    81d0:	4283      	cmp	r3, r0
    81d2:	d005      	beq.n	81e0 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    81d4:	231d      	movs	r3, #29
    81d6:	e7f4      	b.n	81c2 <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    81d8:	0089      	lsls	r1, r1, #2
    81da:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    81dc:	2300      	movs	r3, #0
    81de:	e7f0      	b.n	81c2 <extint_register_callback+0x6>
		return STATUS_OK;
    81e0:	2300      	movs	r3, #0
    81e2:	e7ee      	b.n	81c2 <extint_register_callback+0x6>
    81e4:	200005b0 	.word	0x200005b0

000081e8 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    81e8:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    81ea:	2900      	cmp	r1, #0
    81ec:	d001      	beq.n	81f2 <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    81ee:	0018      	movs	r0, r3
    81f0:	4770      	bx	lr
		return NULL;
    81f2:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    81f4:	281f      	cmp	r0, #31
    81f6:	d800      	bhi.n	81fa <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    81f8:	4a02      	ldr	r2, [pc, #8]	; (8204 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    81fa:	2301      	movs	r3, #1
    81fc:	4083      	lsls	r3, r0
    81fe:	6113      	str	r3, [r2, #16]
	return STATUS_OK;
    8200:	2300      	movs	r3, #0
    8202:	e7f4      	b.n	81ee <extint_chan_enable_callback+0x6>
    8204:	40002400 	.word	0x40002400

00008208 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    8208:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    820a:	2200      	movs	r2, #0
    820c:	4b10      	ldr	r3, [pc, #64]	; (8250 <EIC_Handler+0x48>)
    820e:	701a      	strb	r2, [r3, #0]
    8210:	2300      	movs	r3, #0
    8212:	4910      	ldr	r1, [pc, #64]	; (8254 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    8214:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    8216:	4e10      	ldr	r6, [pc, #64]	; (8258 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    8218:	4c0d      	ldr	r4, [pc, #52]	; (8250 <EIC_Handler+0x48>)
    821a:	e00a      	b.n	8232 <EIC_Handler+0x2a>
		return eics[eic_index];
    821c:	490d      	ldr	r1, [pc, #52]	; (8254 <EIC_Handler+0x4c>)
    821e:	e008      	b.n	8232 <EIC_Handler+0x2a>
    8220:	7823      	ldrb	r3, [r4, #0]
    8222:	3301      	adds	r3, #1
    8224:	b2db      	uxtb	r3, r3
    8226:	7023      	strb	r3, [r4, #0]
    8228:	2b0f      	cmp	r3, #15
    822a:	d810      	bhi.n	824e <EIC_Handler+0x46>
		return NULL;
    822c:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    822e:	2b1f      	cmp	r3, #31
    8230:	d9f4      	bls.n	821c <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    8232:	0028      	movs	r0, r5
    8234:	4018      	ands	r0, r3
    8236:	2201      	movs	r2, #1
    8238:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    823a:	6948      	ldr	r0, [r1, #20]
		if (extint_chan_is_detected(_current_channel)) {
    823c:	4210      	tst	r0, r2
    823e:	d0ef      	beq.n	8220 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    8240:	614a      	str	r2, [r1, #20]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    8242:	009b      	lsls	r3, r3, #2
    8244:	599b      	ldr	r3, [r3, r6]
    8246:	2b00      	cmp	r3, #0
    8248:	d0ea      	beq.n	8220 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    824a:	4798      	blx	r3
    824c:	e7e8      	b.n	8220 <EIC_Handler+0x18>
			}
		}
	}
}
    824e:	bd70      	pop	{r4, r5, r6, pc}
    8250:	20000db4 	.word	0x20000db4
    8254:	40002400 	.word	0x40002400
    8258:	200005b0 	.word	0x200005b0

0000825c <AES_Handler>:

/**
* \internal The AES interrupt handler.
*/
void AES_Handler(void)
{
    825c:	b510      	push	{r4, lr}
	uint32_t status = AES->INTFLAG.reg;
    825e:	4b0c      	ldr	r3, [pc, #48]	; (8290 <AES_Handler+0x34>)
    8260:	79dc      	ldrb	r4, [r3, #7]
    8262:	b2e4      	uxtb	r4, r4

	if (status & AES_INTFLAG_ENCCMP) {
    8264:	07e3      	lsls	r3, r4, #31
    8266:	d507      	bpl.n	8278 <AES_Handler+0x1c>
		if (aes_callback_pointer[AES_CALLBACK_ENCRYPTION_COMPLETE]) {
    8268:	4b0a      	ldr	r3, [pc, #40]	; (8294 <AES_Handler+0x38>)
    826a:	681b      	ldr	r3, [r3, #0]
    826c:	2b00      	cmp	r3, #0
    826e:	d00d      	beq.n	828c <AES_Handler+0x30>
			AES->INTFLAG.reg = AES_INTFLAG_ENCCMP;
    8270:	2101      	movs	r1, #1
    8272:	4a07      	ldr	r2, [pc, #28]	; (8290 <AES_Handler+0x34>)
    8274:	71d1      	strb	r1, [r2, #7]
			aes_callback_pointer[AES_CALLBACK_ENCRYPTION_COMPLETE]();
    8276:	4798      	blx	r3
		}
	}

	if (status & AES_INTFLAG_GFMCMP) {
    8278:	07a3      	lsls	r3, r4, #30
    827a:	d507      	bpl.n	828c <AES_Handler+0x30>
		if (aes_callback_pointer[AES_CALLBACK_ENCRYPTION_COMPLETE]) {
    827c:	4b05      	ldr	r3, [pc, #20]	; (8294 <AES_Handler+0x38>)
    827e:	681b      	ldr	r3, [r3, #0]
    8280:	2b00      	cmp	r3, #0
    8282:	d003      	beq.n	828c <AES_Handler+0x30>
			AES->INTFLAG.reg = AES_INTFLAG_GFMCMP;
    8284:	2102      	movs	r1, #2
    8286:	4a02      	ldr	r2, [pc, #8]	; (8290 <AES_Handler+0x34>)
    8288:	71d1      	strb	r1, [r2, #7]
			aes_callback_pointer[AES_CALLBACK_ENCRYPTION_COMPLETE]();
    828a:	4798      	blx	r3
		}
	}
}
    828c:	bd10      	pop	{r4, pc}
    828e:	46c0      	nop			; (mov r8, r8)
    8290:	42003400 	.word	0x42003400
    8294:	20000530 	.word	0x20000530

00008298 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    8298:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    829a:	2000      	movs	r0, #0
    829c:	4b08      	ldr	r3, [pc, #32]	; (82c0 <delay_init+0x28>)
    829e:	4798      	blx	r3
    82a0:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    82a2:	4c08      	ldr	r4, [pc, #32]	; (82c4 <delay_init+0x2c>)
    82a4:	21fa      	movs	r1, #250	; 0xfa
    82a6:	0089      	lsls	r1, r1, #2
    82a8:	47a0      	blx	r4
    82aa:	4b07      	ldr	r3, [pc, #28]	; (82c8 <delay_init+0x30>)
    82ac:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    82ae:	4907      	ldr	r1, [pc, #28]	; (82cc <delay_init+0x34>)
    82b0:	0028      	movs	r0, r5
    82b2:	47a0      	blx	r4
    82b4:	4b06      	ldr	r3, [pc, #24]	; (82d0 <delay_init+0x38>)
    82b6:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    82b8:	2205      	movs	r2, #5
    82ba:	4b06      	ldr	r3, [pc, #24]	; (82d4 <delay_init+0x3c>)
    82bc:	601a      	str	r2, [r3, #0]
}
    82be:	bd70      	pop	{r4, r5, r6, pc}
    82c0:	00008959 	.word	0x00008959
    82c4:	0000ef0d 	.word	0x0000ef0d
    82c8:	20000000 	.word	0x20000000
    82cc:	000f4240 	.word	0x000f4240
    82d0:	20000004 	.word	0x20000004
    82d4:	e000e010 	.word	0xe000e010

000082d8 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
    82d8:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
    82da:	4b08      	ldr	r3, [pc, #32]	; (82fc <delay_cycles_us+0x24>)
    82dc:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    82de:	4a08      	ldr	r2, [pc, #32]	; (8300 <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
    82e0:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    82e2:	2180      	movs	r1, #128	; 0x80
    82e4:	0249      	lsls	r1, r1, #9
	while (n--) {
    82e6:	3801      	subs	r0, #1
    82e8:	d307      	bcc.n	82fa <delay_cycles_us+0x22>
	if (n > 0) {
    82ea:	2c00      	cmp	r4, #0
    82ec:	d0fb      	beq.n	82e6 <delay_cycles_us+0xe>
		SysTick->LOAD = n;
    82ee:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    82f0:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    82f2:	6813      	ldr	r3, [r2, #0]
    82f4:	420b      	tst	r3, r1
    82f6:	d0fc      	beq.n	82f2 <delay_cycles_us+0x1a>
    82f8:	e7f5      	b.n	82e6 <delay_cycles_us+0xe>
	}
}
    82fa:	bd30      	pop	{r4, r5, pc}
    82fc:	20000004 	.word	0x20000004
    8300:	e000e010 	.word	0xe000e010

00008304 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    8304:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    8306:	4b08      	ldr	r3, [pc, #32]	; (8328 <delay_cycles_ms+0x24>)
    8308:	681c      	ldr	r4, [r3, #0]
		SysTick->LOAD = n;
    830a:	4a08      	ldr	r2, [pc, #32]	; (832c <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    830c:	2500      	movs	r5, #0
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    830e:	2180      	movs	r1, #128	; 0x80
    8310:	0249      	lsls	r1, r1, #9
	while (n--) {
    8312:	3801      	subs	r0, #1
    8314:	d307      	bcc.n	8326 <delay_cycles_ms+0x22>
	if (n > 0) {
    8316:	2c00      	cmp	r4, #0
    8318:	d0fb      	beq.n	8312 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    831a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    831c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    831e:	6813      	ldr	r3, [r2, #0]
    8320:	420b      	tst	r3, r1
    8322:	d0fc      	beq.n	831e <delay_cycles_ms+0x1a>
    8324:	e7f5      	b.n	8312 <delay_cycles_ms+0xe>
	}
}
    8326:	bd30      	pop	{r4, r5, pc}
    8328:	20000000 	.word	0x20000000
    832c:	e000e010 	.word	0xe000e010

00008330 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
    8330:	b530      	push	{r4, r5, lr}
    8332:	0004      	movs	r4, r0
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
    8334:	4a25      	ldr	r2, [pc, #148]	; (83cc <nvm_execute_command+0x9c>)
    8336:	8810      	ldrh	r0, [r2, #0]
    8338:	8853      	ldrh	r3, [r2, #2]
    833a:	4343      	muls	r3, r0
    833c:	428b      	cmp	r3, r1
    833e:	d20b      	bcs.n	8358 <nvm_execute_command+0x28>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    8340:	2280      	movs	r2, #128	; 0x80
    8342:	0192      	lsls	r2, r2, #6
    8344:	4b22      	ldr	r3, [pc, #136]	; (83d0 <nvm_execute_command+0xa0>)
    8346:	18cb      	adds	r3, r1, r3
    8348:	4293      	cmp	r3, r2
    834a:	d905      	bls.n	8358 <nvm_execute_command+0x28>
#ifdef FEATURE_NVM_RWWEE
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    834c:	4a21      	ldr	r2, [pc, #132]	; (83d4 <nvm_execute_command+0xa4>)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
    834e:	2018      	movs	r0, #24
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    8350:	4b21      	ldr	r3, [pc, #132]	; (83d8 <nvm_execute_command+0xa8>)
    8352:	18cb      	adds	r3, r1, r3
    8354:	4293      	cmp	r3, r2
    8356:	d80e      	bhi.n	8376 <nvm_execute_command+0x46>

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
    8358:	4b20      	ldr	r3, [pc, #128]	; (83dc <nvm_execute_command+0xac>)
    835a:	685d      	ldr	r5, [r3, #4]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2))))
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
    835c:	2280      	movs	r2, #128	; 0x80
    835e:	02d2      	lsls	r2, r2, #11
    8360:	432a      	orrs	r2, r5
    8362:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    8364:	2220      	movs	r2, #32
    8366:	32ff      	adds	r2, #255	; 0xff
    8368:	831a      	strh	r2, [r3, #24]
    836a:	7d1b      	ldrb	r3, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    836c:	07db      	lsls	r3, r3, #31
    836e:	d403      	bmi.n	8378 <nvm_execute_command+0x48>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
    8370:	4b1a      	ldr	r3, [pc, #104]	; (83dc <nvm_execute_command+0xac>)
    8372:	605d      	str	r5, [r3, #4]
		return STATUS_BUSY;
    8374:	2005      	movs	r0, #5

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;

	return STATUS_OK;
}
    8376:	bd30      	pop	{r4, r5, pc}
	switch (command) {
    8378:	2c45      	cmp	r4, #69	; 0x45
    837a:	d822      	bhi.n	83c2 <nvm_execute_command+0x92>
    837c:	00a3      	lsls	r3, r4, #2
    837e:	4a18      	ldr	r2, [pc, #96]	; (83e0 <nvm_execute_command+0xb0>)
    8380:	58d3      	ldr	r3, [r2, r3]
    8382:	469f      	mov	pc, r3
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    8384:	4b15      	ldr	r3, [pc, #84]	; (83dc <nvm_execute_command+0xac>)
    8386:	8b1b      	ldrh	r3, [r3, #24]
    8388:	05db      	lsls	r3, r3, #23
    838a:	d503      	bpl.n	8394 <nvm_execute_command+0x64>
				nvm_module->CTRLB.reg = ctrlb_bak;
    838c:	4b13      	ldr	r3, [pc, #76]	; (83dc <nvm_execute_command+0xac>)
    838e:	605d      	str	r5, [r3, #4]
				return STATUS_ERR_IO;
    8390:	2010      	movs	r0, #16
    8392:	e7f0      	b.n	8376 <nvm_execute_command+0x46>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    8394:	0889      	lsrs	r1, r1, #2
    8396:	0049      	lsls	r1, r1, #1
    8398:	4b10      	ldr	r3, [pc, #64]	; (83dc <nvm_execute_command+0xac>)
    839a:	61d9      	str	r1, [r3, #28]
			break;
    839c:	e003      	b.n	83a6 <nvm_execute_command+0x76>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    839e:	0889      	lsrs	r1, r1, #2
    83a0:	0049      	lsls	r1, r1, #1
    83a2:	4b0e      	ldr	r3, [pc, #56]	; (83dc <nvm_execute_command+0xac>)
    83a4:	61d9      	str	r1, [r3, #28]
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
    83a6:	20a5      	movs	r0, #165	; 0xa5
    83a8:	0200      	lsls	r0, r0, #8
    83aa:	4304      	orrs	r4, r0
    83ac:	4b0b      	ldr	r3, [pc, #44]	; (83dc <nvm_execute_command+0xac>)
    83ae:	801c      	strh	r4, [r3, #0]
    83b0:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
    83b2:	2201      	movs	r2, #1
    83b4:	7d0b      	ldrb	r3, [r1, #20]
    83b6:	4213      	tst	r3, r2
    83b8:	d0fc      	beq.n	83b4 <nvm_execute_command+0x84>
	nvm_module->CTRLB.reg = ctrlb_bak;
    83ba:	4b08      	ldr	r3, [pc, #32]	; (83dc <nvm_execute_command+0xac>)
    83bc:	605d      	str	r5, [r3, #4]
	return STATUS_OK;
    83be:	2000      	movs	r0, #0
    83c0:	e7d9      	b.n	8376 <nvm_execute_command+0x46>
			nvm_module->CTRLB.reg = ctrlb_bak;
    83c2:	4b06      	ldr	r3, [pc, #24]	; (83dc <nvm_execute_command+0xac>)
    83c4:	605d      	str	r5, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
    83c6:	2017      	movs	r0, #23
    83c8:	e7d5      	b.n	8376 <nvm_execute_command+0x46>
    83ca:	46c0      	nop			; (mov r8, r8)
    83cc:	20000538 	.word	0x20000538
    83d0:	ff7fc000 	.word	0xff7fc000
    83d4:	00001fff 	.word	0x00001fff
    83d8:	ffc00000 	.word	0xffc00000
    83dc:	41004000 	.word	0x41004000
    83e0:	00012a58 	.word	0x00012a58

000083e4 <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
    83e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    83e6:	4b2f      	ldr	r3, [pc, #188]	; (84a4 <nvm_write_buffer+0xc0>)
    83e8:	881c      	ldrh	r4, [r3, #0]
    83ea:	885b      	ldrh	r3, [r3, #2]
    83ec:	4363      	muls	r3, r4
	if (destination_address >
    83ee:	4283      	cmp	r3, r0
    83f0:	d207      	bcs.n	8402 <nvm_write_buffer+0x1e>
#ifdef FEATURE_NVM_RWWEE
		if (destination_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    83f2:	4e2d      	ldr	r6, [pc, #180]	; (84a8 <nvm_write_buffer+0xc4>)
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
    83f4:	2518      	movs	r5, #24
		if (destination_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    83f6:	4b2d      	ldr	r3, [pc, #180]	; (84ac <nvm_write_buffer+0xc8>)
    83f8:	18c3      	adds	r3, r0, r3
    83fa:	42b3      	cmp	r3, r6
    83fc:	d806      	bhi.n	840c <nvm_write_buffer+0x28>
		}
		is_rww_eeprom = true;
    83fe:	2601      	movs	r6, #1
    8400:	e000      	b.n	8404 <nvm_write_buffer+0x20>
	bool is_rww_eeprom = false;
    8402:	2600      	movs	r6, #0
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
    8404:	1e63      	subs	r3, r4, #1
		return STATUS_ERR_BAD_ADDRESS;
    8406:	2518      	movs	r5, #24
	if (destination_address & (_nvm_dev.page_size - 1)) {
    8408:	4218      	tst	r0, r3
    840a:	d001      	beq.n	8410 <nvm_write_buffer+0x2c>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
}
    840c:	0028      	movs	r0, r5
    840e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    8410:	3d01      	subs	r5, #1
	if (length > _nvm_dev.page_size) {
    8412:	4294      	cmp	r4, r2
    8414:	d3fa      	bcc.n	840c <nvm_write_buffer+0x28>
    8416:	4b26      	ldr	r3, [pc, #152]	; (84b0 <nvm_write_buffer+0xcc>)
    8418:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    841a:	3d12      	subs	r5, #18
	if (!nvm_is_ready()) {
    841c:	07db      	lsls	r3, r3, #31
    841e:	d5f5      	bpl.n	840c <nvm_write_buffer+0x28>
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
    8420:	4c24      	ldr	r4, [pc, #144]	; (84b4 <nvm_write_buffer+0xd0>)
    8422:	4b23      	ldr	r3, [pc, #140]	; (84b0 <nvm_write_buffer+0xcc>)
    8424:	801c      	strh	r4, [r3, #0]
    8426:	001d      	movs	r5, r3
	while (!nvm_is_ready()) {
    8428:	2401      	movs	r4, #1
    842a:	7d2b      	ldrb	r3, [r5, #20]
    842c:	4223      	tst	r3, r4
    842e:	d0fc      	beq.n	842a <nvm_write_buffer+0x46>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    8430:	2420      	movs	r4, #32
    8432:	34ff      	adds	r4, #255	; 0xff
    8434:	4b1e      	ldr	r3, [pc, #120]	; (84b0 <nvm_write_buffer+0xcc>)
    8436:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
    8438:	2a00      	cmp	r2, #0
    843a:	d02c      	beq.n	8496 <nvm_write_buffer+0xb2>
    843c:	2301      	movs	r3, #1
    843e:	0005      	movs	r5, r0
    8440:	439d      	bics	r5, r3
    8442:	2300      	movs	r3, #0
		if (i < (length - 1)) {
    8444:	1e54      	subs	r4, r2, #1
    8446:	46a4      	mov	ip, r4
    8448:	e009      	b.n	845e <nvm_write_buffer+0x7a>
			data |= (buffer[i + 1] << 8);
    844a:	18cf      	adds	r7, r1, r3
    844c:	787f      	ldrb	r7, [r7, #1]
    844e:	023f      	lsls	r7, r7, #8
    8450:	433c      	orrs	r4, r7
		NVM_MEMORY[nvm_address++] = data;
    8452:	802c      	strh	r4, [r5, #0]
	for (uint16_t i = 0; i < length; i += 2) {
    8454:	3302      	adds	r3, #2
    8456:	b29b      	uxth	r3, r3
    8458:	3502      	adds	r5, #2
    845a:	429a      	cmp	r2, r3
    845c:	d904      	bls.n	8468 <nvm_write_buffer+0x84>
		data = buffer[i];
    845e:	5ccc      	ldrb	r4, [r1, r3]
		if (i < (length - 1)) {
    8460:	4563      	cmp	r3, ip
    8462:	dbf2      	blt.n	844a <nvm_write_buffer+0x66>
		data = buffer[i];
    8464:	b2a4      	uxth	r4, r4
    8466:	e7f4      	b.n	8452 <nvm_write_buffer+0x6e>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    8468:	4b0e      	ldr	r3, [pc, #56]	; (84a4 <nvm_write_buffer+0xc0>)
    846a:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    846c:	2500      	movs	r5, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    846e:	2b00      	cmp	r3, #0
    8470:	d1cc      	bne.n	840c <nvm_write_buffer+0x28>
    8472:	2a3f      	cmp	r2, #63	; 0x3f
    8474:	d8ca      	bhi.n	840c <nvm_write_buffer+0x28>
				(nvm_execute_command(NVM_COMMAND_RWWEE_WRITE_PAGE,destination_address, 0)):
    8476:	2e00      	cmp	r6, #0
    8478:	d106      	bne.n	8488 <nvm_write_buffer+0xa4>
    847a:	2200      	movs	r2, #0
    847c:	0001      	movs	r1, r0
    847e:	2004      	movs	r0, #4
    8480:	4b0d      	ldr	r3, [pc, #52]	; (84b8 <nvm_write_buffer+0xd4>)
    8482:	4798      	blx	r3
    8484:	0005      	movs	r5, r0
    8486:	e7c1      	b.n	840c <nvm_write_buffer+0x28>
    8488:	2200      	movs	r2, #0
    848a:	0001      	movs	r1, r0
    848c:	201c      	movs	r0, #28
    848e:	4b0a      	ldr	r3, [pc, #40]	; (84b8 <nvm_write_buffer+0xd4>)
    8490:	4798      	blx	r3
    8492:	0005      	movs	r5, r0
    8494:	e7ba      	b.n	840c <nvm_write_buffer+0x28>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    8496:	4b03      	ldr	r3, [pc, #12]	; (84a4 <nvm_write_buffer+0xc0>)
    8498:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    849a:	2500      	movs	r5, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    849c:	2b00      	cmp	r3, #0
    849e:	d0ea      	beq.n	8476 <nvm_write_buffer+0x92>
    84a0:	e7b4      	b.n	840c <nvm_write_buffer+0x28>
    84a2:	46c0      	nop			; (mov r8, r8)
    84a4:	20000538 	.word	0x20000538
    84a8:	00001fff 	.word	0x00001fff
    84ac:	ffc00000 	.word	0xffc00000
    84b0:	41004000 	.word	0x41004000
    84b4:	ffffa544 	.word	0xffffa544
    84b8:	00008331 	.word	0x00008331

000084bc <nvm_read_buffer>:
 */
enum status_code nvm_read_buffer(
		const uint32_t source_address,
		uint8_t *const buffer,
		uint16_t length)
{
    84bc:	b570      	push	{r4, r5, r6, lr}
	/* Check if the source address is valid */
	if (source_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    84be:	4b1b      	ldr	r3, [pc, #108]	; (852c <nvm_read_buffer+0x70>)
    84c0:	881c      	ldrh	r4, [r3, #0]
    84c2:	885b      	ldrh	r3, [r3, #2]
    84c4:	4363      	muls	r3, r4
	if (source_address >
    84c6:	4283      	cmp	r3, r0
    84c8:	d205      	bcs.n	84d6 <nvm_read_buffer+0x1a>
#ifdef FEATURE_NVM_RWWEE
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    84ca:	4e19      	ldr	r6, [pc, #100]	; (8530 <nvm_read_buffer+0x74>)
			|| source_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
    84cc:	2518      	movs	r5, #24
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    84ce:	4b19      	ldr	r3, [pc, #100]	; (8534 <nvm_read_buffer+0x78>)
    84d0:	18c3      	adds	r3, r0, r3
    84d2:	42b3      	cmp	r3, r6
    84d4:	d803      	bhi.n	84de <nvm_read_buffer+0x22>
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the read address is not aligned to the start of a page */
	if (source_address & (_nvm_dev.page_size - 1)) {
    84d6:	1e63      	subs	r3, r4, #1
		return STATUS_ERR_BAD_ADDRESS;
    84d8:	2518      	movs	r5, #24
	if (source_address & (_nvm_dev.page_size - 1)) {
    84da:	4218      	tst	r0, r3
    84dc:	d001      	beq.n	84e2 <nvm_read_buffer+0x26>
			buffer[i + 1] = (data >> 8);
		}
	}

	return STATUS_OK;
}
    84de:	0028      	movs	r0, r5
    84e0:	bd70      	pop	{r4, r5, r6, pc}
		return STATUS_ERR_INVALID_ARG;
    84e2:	3d01      	subs	r5, #1
	if (length > _nvm_dev.page_size) {
    84e4:	4294      	cmp	r4, r2
    84e6:	d3fa      	bcc.n	84de <nvm_read_buffer+0x22>
    84e8:	4b13      	ldr	r3, [pc, #76]	; (8538 <nvm_read_buffer+0x7c>)
    84ea:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    84ec:	3d12      	subs	r5, #18
	if (!nvm_is_ready()) {
    84ee:	07db      	lsls	r3, r3, #31
    84f0:	d5f5      	bpl.n	84de <nvm_read_buffer+0x22>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    84f2:	2420      	movs	r4, #32
    84f4:	34ff      	adds	r4, #255	; 0xff
    84f6:	4b10      	ldr	r3, [pc, #64]	; (8538 <nvm_read_buffer+0x7c>)
    84f8:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
    84fa:	2a00      	cmp	r2, #0
    84fc:	d014      	beq.n	8528 <nvm_read_buffer+0x6c>
    84fe:	2301      	movs	r3, #1
    8500:	4398      	bics	r0, r3
    8502:	2300      	movs	r3, #0
		if (i < (length - 1)) {
    8504:	1e56      	subs	r6, r2, #1
    8506:	e004      	b.n	8512 <nvm_read_buffer+0x56>
	for (uint16_t i = 0; i < length; i += 2) {
    8508:	3302      	adds	r3, #2
    850a:	b29b      	uxth	r3, r3
    850c:	3002      	adds	r0, #2
    850e:	429a      	cmp	r2, r3
    8510:	d908      	bls.n	8524 <nvm_read_buffer+0x68>
		uint16_t data = NVM_MEMORY[page_address++];
    8512:	8804      	ldrh	r4, [r0, #0]
    8514:	b2a4      	uxth	r4, r4
		buffer[i] = (data & 0xFF);
    8516:	54cc      	strb	r4, [r1, r3]
		if (i < (length - 1)) {
    8518:	42b3      	cmp	r3, r6
    851a:	daf5      	bge.n	8508 <nvm_read_buffer+0x4c>
			buffer[i + 1] = (data >> 8);
    851c:	18cd      	adds	r5, r1, r3
    851e:	0a24      	lsrs	r4, r4, #8
    8520:	706c      	strb	r4, [r5, #1]
    8522:	e7f1      	b.n	8508 <nvm_read_buffer+0x4c>
	return STATUS_OK;
    8524:	2500      	movs	r5, #0
    8526:	e7da      	b.n	84de <nvm_read_buffer+0x22>
    8528:	2500      	movs	r5, #0
    852a:	e7d8      	b.n	84de <nvm_read_buffer+0x22>
    852c:	20000538 	.word	0x20000538
    8530:	00001fff 	.word	0x00001fff
    8534:	ffc00000 	.word	0xffc00000
    8538:	41004000 	.word	0x41004000

0000853c <nvm_erase_row>:
 *                                 not aligned to the start of a row
 * \retval STATUS_ABORTED          NVM erased error
 */
enum status_code nvm_erase_row(
		const uint32_t row_address)
{
    853c:	b510      	push	{r4, lr}
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    853e:	4a1b      	ldr	r2, [pc, #108]	; (85ac <nvm_erase_row+0x70>)
    8540:	8813      	ldrh	r3, [r2, #0]
    8542:	8852      	ldrh	r2, [r2, #2]
    8544:	435a      	muls	r2, r3
	if (row_address >
    8546:	4282      	cmp	r2, r0
    8548:	d207      	bcs.n	855a <nvm_erase_row+0x1e>
#ifdef FEATURE_NVM_RWWEE
		if (row_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    854a:	4c19      	ldr	r4, [pc, #100]	; (85b0 <nvm_erase_row+0x74>)
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
    854c:	2218      	movs	r2, #24
		if (row_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    854e:	4919      	ldr	r1, [pc, #100]	; (85b4 <nvm_erase_row+0x78>)
    8550:	1841      	adds	r1, r0, r1
    8552:	42a1      	cmp	r1, r4
    8554:	d807      	bhi.n	8566 <nvm_erase_row+0x2a>
		}
		is_rww_eeprom = true;
    8556:	2101      	movs	r1, #1
    8558:	e000      	b.n	855c <nvm_erase_row+0x20>
		bool is_rww_eeprom = false;
    855a:	2100      	movs	r1, #0
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    855c:	009b      	lsls	r3, r3, #2
    855e:	3b01      	subs	r3, #1
		return STATUS_ERR_BAD_ADDRESS;
    8560:	2218      	movs	r2, #24
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    8562:	4218      	tst	r0, r3
    8564:	d001      	beq.n	856a <nvm_erase_row+0x2e>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
		return STATUS_ABORTED;
	}

	return STATUS_OK;
}
    8566:	0010      	movs	r0, r2
    8568:	bd10      	pop	{r4, pc}
    856a:	4b13      	ldr	r3, [pc, #76]	; (85b8 <nvm_erase_row+0x7c>)
    856c:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    856e:	3a13      	subs	r2, #19
	if (!nvm_is_ready()) {
    8570:	07db      	lsls	r3, r3, #31
    8572:	d5f8      	bpl.n	8566 <nvm_erase_row+0x2a>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    8574:	4b10      	ldr	r3, [pc, #64]	; (85b8 <nvm_erase_row+0x7c>)
    8576:	2220      	movs	r2, #32
    8578:	32ff      	adds	r2, #255	; 0xff
    857a:	831a      	strh	r2, [r3, #24]
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
    857c:	0880      	lsrs	r0, r0, #2
    857e:	0040      	lsls	r0, r0, #1
    8580:	61d8      	str	r0, [r3, #28]
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
    8582:	2900      	cmp	r1, #0
    8584:	d10f      	bne.n	85a6 <nvm_erase_row+0x6a>
    8586:	4a0d      	ldr	r2, [pc, #52]	; (85bc <nvm_erase_row+0x80>)
    8588:	4b0b      	ldr	r3, [pc, #44]	; (85b8 <nvm_erase_row+0x7c>)
    858a:	801a      	strh	r2, [r3, #0]
    858c:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
    858e:	2201      	movs	r2, #1
    8590:	7d0b      	ldrb	r3, [r1, #20]
    8592:	4213      	tst	r3, r2
    8594:	d0fc      	beq.n	8590 <nvm_erase_row+0x54>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
    8596:	4b08      	ldr	r3, [pc, #32]	; (85b8 <nvm_erase_row+0x7c>)
    8598:	8b1a      	ldrh	r2, [r3, #24]
    859a:	201c      	movs	r0, #28
    859c:	4002      	ands	r2, r0
	return STATUS_OK;
    859e:	1e50      	subs	r0, r2, #1
    85a0:	4182      	sbcs	r2, r0
    85a2:	0092      	lsls	r2, r2, #2
    85a4:	e7df      	b.n	8566 <nvm_erase_row+0x2a>
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
    85a6:	4a06      	ldr	r2, [pc, #24]	; (85c0 <nvm_erase_row+0x84>)
    85a8:	e7ee      	b.n	8588 <nvm_erase_row+0x4c>
    85aa:	46c0      	nop			; (mov r8, r8)
    85ac:	20000538 	.word	0x20000538
    85b0:	00001fff 	.word	0x00001fff
    85b4:	ffc00000 	.word	0xffc00000
    85b8:	41004000 	.word	0x41004000
    85bc:	0000a502 	.word	0x0000a502
    85c0:	0000a51a 	.word	0x0000a51a

000085c4 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    85c4:	4b0c      	ldr	r3, [pc, #48]	; (85f8 <cpu_irq_enter_critical+0x34>)
    85c6:	681b      	ldr	r3, [r3, #0]
    85c8:	2b00      	cmp	r3, #0
    85ca:	d106      	bne.n	85da <cpu_irq_enter_critical+0x16>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    85cc:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    85d0:	2b00      	cmp	r3, #0
    85d2:	d007      	beq.n	85e4 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    85d4:	2200      	movs	r2, #0
    85d6:	4b09      	ldr	r3, [pc, #36]	; (85fc <cpu_irq_enter_critical+0x38>)
    85d8:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    85da:	4a07      	ldr	r2, [pc, #28]	; (85f8 <cpu_irq_enter_critical+0x34>)
    85dc:	6813      	ldr	r3, [r2, #0]
    85de:	3301      	adds	r3, #1
    85e0:	6013      	str	r3, [r2, #0]
}
    85e2:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    85e4:	b672      	cpsid	i
    85e6:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    85ea:	2200      	movs	r2, #0
    85ec:	4b04      	ldr	r3, [pc, #16]	; (8600 <cpu_irq_enter_critical+0x3c>)
    85ee:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    85f0:	3201      	adds	r2, #1
    85f2:	4b02      	ldr	r3, [pc, #8]	; (85fc <cpu_irq_enter_critical+0x38>)
    85f4:	701a      	strb	r2, [r3, #0]
    85f6:	e7f0      	b.n	85da <cpu_irq_enter_critical+0x16>
    85f8:	20000540 	.word	0x20000540
    85fc:	20000544 	.word	0x20000544
    8600:	20000008 	.word	0x20000008

00008604 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    8604:	4b08      	ldr	r3, [pc, #32]	; (8628 <cpu_irq_leave_critical+0x24>)
    8606:	681a      	ldr	r2, [r3, #0]
    8608:	3a01      	subs	r2, #1
    860a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    860c:	681b      	ldr	r3, [r3, #0]
    860e:	2b00      	cmp	r3, #0
    8610:	d109      	bne.n	8626 <cpu_irq_leave_critical+0x22>
    8612:	4b06      	ldr	r3, [pc, #24]	; (862c <cpu_irq_leave_critical+0x28>)
    8614:	781b      	ldrb	r3, [r3, #0]
    8616:	2b00      	cmp	r3, #0
    8618:	d005      	beq.n	8626 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    861a:	2201      	movs	r2, #1
    861c:	4b04      	ldr	r3, [pc, #16]	; (8630 <cpu_irq_leave_critical+0x2c>)
    861e:	701a      	strb	r2, [r3, #0]
    8620:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    8624:	b662      	cpsie	i
	}
}
    8626:	4770      	bx	lr
    8628:	20000540 	.word	0x20000540
    862c:	20000544 	.word	0x20000544
    8630:	20000008 	.word	0x20000008

00008634 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    8634:	b5f0      	push	{r4, r5, r6, r7, lr}
    8636:	46c6      	mov	lr, r8
    8638:	b500      	push	{lr}
    863a:	b082      	sub	sp, #8
	config->input_pull = PORT_PIN_PULL_UP;
    863c:	ac01      	add	r4, sp, #4
    863e:	2501      	movs	r5, #1
    8640:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    8642:	2300      	movs	r3, #0
    8644:	4698      	mov	r8, r3
    8646:	70a3      	strb	r3, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    8648:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    864a:	0021      	movs	r1, r4
    864c:	2013      	movs	r0, #19
    864e:	4e12      	ldr	r6, [pc, #72]	; (8698 <system_board_init+0x64>)
    8650:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    8652:	4f12      	ldr	r7, [pc, #72]	; (869c <system_board_init+0x68>)
    8654:	2380      	movs	r3, #128	; 0x80
    8656:	031b      	lsls	r3, r3, #12
    8658:	61bb      	str	r3, [r7, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
	
	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    865a:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_1_PIN, &pin_conf);
    865c:	0021      	movs	r1, r4
    865e:	2012      	movs	r0, #18
    8660:	47b0      	blx	r6
    8662:	2380      	movs	r3, #128	; 0x80
    8664:	02db      	lsls	r3, r3, #11
    8666:	61bb      	str	r3, [r7, #24]
	port_pin_set_output_level(LED_1_PIN, LED_1_INACTIVE);
#ifdef RFSWITCH_ENABLE
	/* Configure RFSWITCH as output */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    8668:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(RF_SWITCH_PIN, &pin_conf);
    866a:	0021      	movs	r1, r4
    866c:	200d      	movs	r0, #13
    866e:	47b0      	blx	r6
		port_base->OUTCLR.reg = pin_mask;
    8670:	2380      	movs	r3, #128	; 0x80
    8672:	019b      	lsls	r3, r3, #6
    8674:	617b      	str	r3, [r7, #20]
	port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_INACTIVE);	
#endif

#ifdef TCXO_ENABLE
	/* Configure TXPO PWR as output */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    8676:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(TCXO_PWR_PIN, &pin_conf);
    8678:	0021      	movs	r1, r4
    867a:	2009      	movs	r0, #9
    867c:	47b0      	blx	r6
    867e:	2380      	movs	r3, #128	; 0x80
    8680:	009b      	lsls	r3, r3, #2
    8682:	617b      	str	r3, [r7, #20]
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_INACTIVE);
#endif
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    8684:	4643      	mov	r3, r8
    8686:	7023      	strb	r3, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    8688:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    868a:	0021      	movs	r1, r4
    868c:	201c      	movs	r0, #28
    868e:	47b0      	blx	r6
		
}
    8690:	b002      	add	sp, #8
    8692:	bc04      	pop	{r2}
    8694:	4690      	mov	r8, r2
    8696:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8698:	000086a1 	.word	0x000086a1
    869c:	40002800 	.word	0x40002800

000086a0 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    86a0:	b500      	push	{lr}
    86a2:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    86a4:	ab01      	add	r3, sp, #4
    86a6:	2280      	movs	r2, #128	; 0x80
    86a8:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    86aa:	780a      	ldrb	r2, [r1, #0]
    86ac:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    86ae:	784a      	ldrb	r2, [r1, #1]
    86b0:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    86b2:	788a      	ldrb	r2, [r1, #2]
    86b4:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    86b6:	0019      	movs	r1, r3
    86b8:	4b01      	ldr	r3, [pc, #4]	; (86c0 <port_pin_set_config+0x20>)
    86ba:	4798      	blx	r3
}
    86bc:	b003      	add	sp, #12
    86be:	bd00      	pop	{pc}
    86c0:	00008b31 	.word	0x00008b31

000086c4 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    86c4:	b510      	push	{r4, lr}
	switch (clock_source) {
    86c6:	2808      	cmp	r0, #8
    86c8:	d803      	bhi.n	86d2 <system_clock_source_get_hz+0xe>
    86ca:	0080      	lsls	r0, r0, #2
    86cc:	4b1c      	ldr	r3, [pc, #112]	; (8740 <system_clock_source_get_hz+0x7c>)
    86ce:	581b      	ldr	r3, [r3, r0]
    86d0:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
    86d2:	2000      	movs	r0, #0
    86d4:	e032      	b.n	873c <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    86d6:	4b1b      	ldr	r3, [pc, #108]	; (8744 <system_clock_source_get_hz+0x80>)
    86d8:	6918      	ldr	r0, [r3, #16]
    86da:	e02f      	b.n	873c <system_clock_source_get_hz+0x78>
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
    86dc:	4b1a      	ldr	r3, [pc, #104]	; (8748 <system_clock_source_get_hz+0x84>)
    86de:	7d18      	ldrb	r0, [r3, #20]
    86e0:	0700      	lsls	r0, r0, #28
    86e2:	0f80      	lsrs	r0, r0, #30
    86e4:	1c43      	adds	r3, r0, #1
    86e6:	4819      	ldr	r0, [pc, #100]	; (874c <system_clock_source_get_hz+0x88>)
    86e8:	4358      	muls	r0, r3
    86ea:	e027      	b.n	873c <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    86ec:	4b15      	ldr	r3, [pc, #84]	; (8744 <system_clock_source_get_hz+0x80>)
    86ee:	6958      	ldr	r0, [r3, #20]
    86f0:	e024      	b.n	873c <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    86f2:	4b14      	ldr	r3, [pc, #80]	; (8744 <system_clock_source_get_hz+0x80>)
    86f4:	681b      	ldr	r3, [r3, #0]
			return 0;
    86f6:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    86f8:	079b      	lsls	r3, r3, #30
    86fa:	d51f      	bpl.n	873c <system_clock_source_get_hz+0x78>
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    86fc:	4912      	ldr	r1, [pc, #72]	; (8748 <system_clock_source_get_hz+0x84>)
    86fe:	2280      	movs	r2, #128	; 0x80
    8700:	0052      	lsls	r2, r2, #1
    8702:	68cb      	ldr	r3, [r1, #12]
    8704:	4213      	tst	r3, r2
    8706:	d0fc      	beq.n	8702 <system_clock_source_get_hz+0x3e>
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
    8708:	4b0e      	ldr	r3, [pc, #56]	; (8744 <system_clock_source_get_hz+0x80>)
    870a:	681b      	ldr	r3, [r3, #0]
    870c:	075b      	lsls	r3, r3, #29
    870e:	d401      	bmi.n	8714 <system_clock_source_get_hz+0x50>
		return 48000000UL;
    8710:	480f      	ldr	r0, [pc, #60]	; (8750 <system_clock_source_get_hz+0x8c>)
    8712:	e013      	b.n	873c <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    8714:	2000      	movs	r0, #0
    8716:	4b0f      	ldr	r3, [pc, #60]	; (8754 <system_clock_source_get_hz+0x90>)
    8718:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    871a:	4b0a      	ldr	r3, [pc, #40]	; (8744 <system_clock_source_get_hz+0x80>)
    871c:	689b      	ldr	r3, [r3, #8]
    871e:	041b      	lsls	r3, r3, #16
    8720:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    8722:	4358      	muls	r0, r3
    8724:	e00a      	b.n	873c <system_clock_source_get_hz+0x78>
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    8726:	2328      	movs	r3, #40	; 0x28
    8728:	4a07      	ldr	r2, [pc, #28]	; (8748 <system_clock_source_get_hz+0x84>)
    872a:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    872c:	2000      	movs	r0, #0
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    872e:	079b      	lsls	r3, r3, #30
    8730:	d504      	bpl.n	873c <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    8732:	4b04      	ldr	r3, [pc, #16]	; (8744 <system_clock_source_get_hz+0x80>)
    8734:	68d8      	ldr	r0, [r3, #12]
    8736:	e001      	b.n	873c <system_clock_source_get_hz+0x78>
		return 32768UL;
    8738:	2080      	movs	r0, #128	; 0x80
    873a:	0200      	lsls	r0, r0, #8
	}
}
    873c:	bd10      	pop	{r4, pc}
    873e:	46c0      	nop			; (mov r8, r8)
    8740:	00012b70 	.word	0x00012b70
    8744:	20000548 	.word	0x20000548
    8748:	40000c00 	.word	0x40000c00
    874c:	003d0900 	.word	0x003d0900
    8750:	02dc6c00 	.word	0x02dc6c00
    8754:	00008a59 	.word	0x00008a59

00008758 <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    8758:	b510      	push	{r4, lr}
    875a:	b084      	sub	sp, #16
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
    875c:	2280      	movs	r2, #128	; 0x80
    875e:	0052      	lsls	r2, r2, #1
    8760:	4b2f      	ldr	r3, [pc, #188]	; (8820 <system_clock_init+0xc8>)
    8762:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
    8764:	3afd      	subs	r2, #253	; 0xfd
    8766:	4b2f      	ldr	r3, [pc, #188]	; (8824 <system_clock_init+0xcc>)
    8768:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    876a:	4a2f      	ldr	r2, [pc, #188]	; (8828 <system_clock_init+0xd0>)
    876c:	6853      	ldr	r3, [r2, #4]
    876e:	211e      	movs	r1, #30
    8770:	438b      	bics	r3, r1
    8772:	6053      	str	r3, [r2, #4]
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    8774:	2380      	movs	r3, #128	; 0x80
    8776:	05db      	lsls	r3, r3, #23
    8778:	789b      	ldrb	r3, [r3, #2]
    877a:	2b02      	cmp	r3, #2
    877c:	d00f      	beq.n	879e <system_clock_init+0x46>
		return STATUS_OK;
	}

#if SAML22 || SAML21XXXB || SAMR34J || SAMR35J
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    877e:	2380      	movs	r3, #128	; 0x80
    8780:	05db      	lsls	r3, r3, #23
    8782:	789b      	ldrb	r3, [r3, #2]
    8784:	b25b      	sxtb	r3, r3
    8786:	2b00      	cmp	r3, #0
    8788:	db09      	blt.n	879e <system_clock_init+0x46>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    878a:	2380      	movs	r3, #128	; 0x80
    878c:	05db      	lsls	r3, r3, #23
    878e:	2201      	movs	r2, #1
    8790:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    8792:	3201      	adds	r2, #1
    8794:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    8796:	001a      	movs	r2, r3
    8798:	7993      	ldrb	r3, [r2, #6]
    879a:	2b00      	cmp	r3, #0
    879c:	d0fc      	beq.n	8798 <system_clock_init+0x40>
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
#endif

	/* OSC16M */
	if (CONF_CLOCK_OSC16M_FREQ_SEL == SYSTEM_OSC16M_4M){
		OSCCTRL->OSC16MCTRL.bit.ONDEMAND = CONF_CLOCK_OSC16M_ON_DEMAND ;
    879e:	4b20      	ldr	r3, [pc, #128]	; (8820 <system_clock_init+0xc8>)
    87a0:	7d19      	ldrb	r1, [r3, #20]
    87a2:	2280      	movs	r2, #128	; 0x80
    87a4:	4252      	negs	r2, r2
    87a6:	430a      	orrs	r2, r1
    87a8:	751a      	strb	r2, [r3, #20]
		OSCCTRL->OSC16MCTRL.bit.RUNSTDBY = CONF_CLOCK_OSC16M_RUN_IN_STANDBY;
    87aa:	7d1a      	ldrb	r2, [r3, #20]
    87ac:	2140      	movs	r1, #64	; 0x40
    87ae:	438a      	bics	r2, r1
    87b0:	751a      	strb	r2, [r3, #20]
	system_clock_source_dfll_set_config(&dfll_conf);
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    87b2:	4b1e      	ldr	r3, [pc, #120]	; (882c <system_clock_init+0xd4>)
    87b4:	4798      	blx	r3
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
    87b6:	4c1e      	ldr	r4, [pc, #120]	; (8830 <system_clock_init+0xd8>)
    87b8:	2301      	movs	r3, #1
    87ba:	71a3      	strb	r3, [r4, #6]
	MCLK->LPDIV.reg = MCLK_LPDIV_LPDIV(1 << divider);
    87bc:	7163      	strb	r3, [r4, #5]
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    87be:	7123      	strb	r3, [r4, #4]
	config->division_factor    = 1;
    87c0:	a901      	add	r1, sp, #4
    87c2:	604b      	str	r3, [r1, #4]
	config->high_when_disabled = false;
    87c4:	2300      	movs	r3, #0
    87c6:	704b      	strb	r3, [r1, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
    87c8:	2206      	movs	r2, #6
    87ca:	700a      	strb	r2, [r1, #0]
	config->run_in_standby     = false;
    87cc:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    87ce:	724b      	strb	r3, [r1, #9]
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    87d0:	2000      	movs	r0, #0
    87d2:	4b18      	ldr	r3, [pc, #96]	; (8834 <system_clock_init+0xdc>)
    87d4:	4798      	blx	r3
    87d6:	2000      	movs	r0, #0
    87d8:	4b17      	ldr	r3, [pc, #92]	; (8838 <system_clock_init+0xe0>)
    87da:	4798      	blx	r3
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) / MCLK->CPUDIV.reg);
    87dc:	2000      	movs	r0, #0
    87de:	4b17      	ldr	r3, [pc, #92]	; (883c <system_clock_init+0xe4>)
    87e0:	4798      	blx	r3
    87e2:	7921      	ldrb	r1, [r4, #4]
    87e4:	b2c9      	uxtb	r1, r1
    87e6:	4b16      	ldr	r3, [pc, #88]	; (8840 <system_clock_init+0xe8>)
    87e8:	4798      	blx	r3
#endif

	/* If CPU frequency is less than 12MHz, scale down performance level to PL0 */
	uint32_t cpu_freq = system_cpu_clock_get_hz();
	if (cpu_freq <= 12000000) {
    87ea:	4b16      	ldr	r3, [pc, #88]	; (8844 <system_clock_init+0xec>)
    87ec:	4298      	cmp	r0, r3
    87ee:	d814      	bhi.n	881a <system_clock_init+0xc2>
	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    87f0:	2380      	movs	r3, #128	; 0x80
    87f2:	05db      	lsls	r3, r3, #23
    87f4:	789b      	ldrb	r3, [r3, #2]
    87f6:	2b00      	cmp	r3, #0
    87f8:	d00f      	beq.n	881a <system_clock_init+0xc2>
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    87fa:	2380      	movs	r3, #128	; 0x80
    87fc:	05db      	lsls	r3, r3, #23
    87fe:	789b      	ldrb	r3, [r3, #2]
    8800:	b25b      	sxtb	r3, r3
    8802:	2b00      	cmp	r3, #0
    8804:	db09      	blt.n	881a <system_clock_init+0xc2>
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    8806:	2380      	movs	r3, #128	; 0x80
    8808:	05db      	lsls	r3, r3, #23
    880a:	2201      	movs	r2, #1
    880c:	719a      	strb	r2, [r3, #6]
	PM->PLCFG.reg = performance_level;
    880e:	2200      	movs	r2, #0
    8810:	709a      	strb	r2, [r3, #2]
	while (!PM->INTFLAG.reg) {
    8812:	001a      	movs	r2, r3
    8814:	7993      	ldrb	r3, [r2, #6]
    8816:	2b00      	cmp	r3, #0
    8818:	d0fc      	beq.n	8814 <system_clock_init+0xbc>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
	}
}
    881a:	b004      	add	sp, #16
    881c:	bd10      	pop	{r4, pc}
    881e:	46c0      	nop			; (mov r8, r8)
    8820:	40000c00 	.word	0x40000c00
    8824:	40001400 	.word	0x40001400
    8828:	41004000 	.word	0x41004000
    882c:	00008849 	.word	0x00008849
    8830:	40000400 	.word	0x40000400
    8834:	0000886d 	.word	0x0000886d
    8838:	00008919 	.word	0x00008919
    883c:	00008959 	.word	0x00008959
    8840:	0000ef0d 	.word	0x0000ef0d
    8844:	00b71b00 	.word	0x00b71b00

00008848 <system_gclk_init>:
			MCLK->APBAMASK.reg |= mask;
    8848:	4a06      	ldr	r2, [pc, #24]	; (8864 <system_gclk_init+0x1c>)
    884a:	6953      	ldr	r3, [r2, #20]
    884c:	2140      	movs	r1, #64	; 0x40
    884e:	430b      	orrs	r3, r1
    8850:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    8852:	2201      	movs	r2, #1
    8854:	4b04      	ldr	r3, [pc, #16]	; (8868 <system_gclk_init+0x20>)
    8856:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    8858:	0019      	movs	r1, r3
    885a:	780b      	ldrb	r3, [r1, #0]
    885c:	4213      	tst	r3, r2
    885e:	d1fc      	bne.n	885a <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    8860:	4770      	bx	lr
    8862:	46c0      	nop			; (mov r8, r8)
    8864:	40000400 	.word	0x40000400
    8868:	40001800 	.word	0x40001800

0000886c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    886c:	b570      	push	{r4, r5, r6, lr}
    886e:	0004      	movs	r4, r0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    8870:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    8872:	784b      	ldrb	r3, [r1, #1]
    8874:	2b00      	cmp	r3, #0
    8876:	d002      	beq.n	887e <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    8878:	2380      	movs	r3, #128	; 0x80
    887a:	00db      	lsls	r3, r3, #3
    887c:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    887e:	7a4b      	ldrb	r3, [r1, #9]
    8880:	2b00      	cmp	r3, #0
    8882:	d002      	beq.n	888a <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    8884:	2380      	movs	r3, #128	; 0x80
    8886:	011b      	lsls	r3, r3, #4
    8888:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    888a:	6848      	ldr	r0, [r1, #4]
    888c:	2801      	cmp	r0, #1
    888e:	d90f      	bls.n	88b0 <system_gclk_gen_set_config+0x44>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    8890:	1e43      	subs	r3, r0, #1
    8892:	4218      	tst	r0, r3
    8894:	d131      	bne.n	88fa <system_gclk_gen_set_config+0x8e>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    8896:	2802      	cmp	r0, #2
    8898:	d92d      	bls.n	88f6 <system_gclk_gen_set_config+0x8a>
    889a:	2302      	movs	r3, #2
    889c:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    889e:	3201      	adds	r2, #1
						mask <<= 1) {
    88a0:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    88a2:	4298      	cmp	r0, r3
    88a4:	d8fb      	bhi.n	889e <system_gclk_gen_set_config+0x32>
    88a6:	2380      	movs	r3, #128	; 0x80
    88a8:	015b      	lsls	r3, r3, #5
    88aa:	431d      	orrs	r5, r3
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
    88ac:	0412      	lsls	r2, r2, #16
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    88ae:	4315      	orrs	r5, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    88b0:	7a0b      	ldrb	r3, [r1, #8]
    88b2:	2b00      	cmp	r3, #0
    88b4:	d002      	beq.n	88bc <system_gclk_gen_set_config+0x50>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    88b6:	2380      	movs	r3, #128	; 0x80
    88b8:	019b      	lsls	r3, r3, #6
    88ba:	431d      	orrs	r5, r3
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    88bc:	2604      	movs	r6, #4
    88be:	40a6      	lsls	r6, r4
    88c0:	4911      	ldr	r1, [pc, #68]	; (8908 <system_gclk_gen_set_config+0x9c>)
    88c2:	4a12      	ldr	r2, [pc, #72]	; (890c <system_gclk_gen_set_config+0xa0>)
    88c4:	684b      	ldr	r3, [r1, #4]
    88c6:	4013      	ands	r3, r2
	}

	while (system_gclk_is_syncing(generator)) {
    88c8:	421e      	tst	r6, r3
    88ca:	d1fb      	bne.n	88c4 <system_gclk_gen_set_config+0x58>
	cpu_irq_enter_critical();
    88cc:	4b10      	ldr	r3, [pc, #64]	; (8910 <system_gclk_gen_set_config+0xa4>)
    88ce:	4798      	blx	r3
    88d0:	00a4      	lsls	r4, r4, #2
    88d2:	4b0d      	ldr	r3, [pc, #52]	; (8908 <system_gclk_gen_set_config+0x9c>)
    88d4:	469c      	mov	ip, r3
    88d6:	4464      	add	r4, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    88d8:	6a22      	ldr	r2, [r4, #32]
    88da:	2380      	movs	r3, #128	; 0x80
    88dc:	005b      	lsls	r3, r3, #1
    88de:	401a      	ands	r2, r3
    88e0:	432a      	orrs	r2, r5
    88e2:	6222      	str	r2, [r4, #32]
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    88e4:	4661      	mov	r1, ip
    88e6:	4a09      	ldr	r2, [pc, #36]	; (890c <system_gclk_gen_set_config+0xa0>)
    88e8:	684b      	ldr	r3, [r1, #4]
    88ea:	4013      	ands	r3, r2

	while (system_gclk_is_syncing(generator)) {
    88ec:	421e      	tst	r6, r3
    88ee:	d1fb      	bne.n	88e8 <system_gclk_gen_set_config+0x7c>
	cpu_irq_leave_critical();
    88f0:	4b08      	ldr	r3, [pc, #32]	; (8914 <system_gclk_gen_set_config+0xa8>)
    88f2:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
    88f4:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    88f6:	2200      	movs	r2, #0
    88f8:	e7d5      	b.n	88a6 <system_gclk_gen_set_config+0x3a>
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
    88fa:	0400      	lsls	r0, r0, #16
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    88fc:	2380      	movs	r3, #128	; 0x80
    88fe:	009b      	lsls	r3, r3, #2
    8900:	4318      	orrs	r0, r3
    8902:	4305      	orrs	r5, r0
    8904:	e7d4      	b.n	88b0 <system_gclk_gen_set_config+0x44>
    8906:	46c0      	nop			; (mov r8, r8)
    8908:	40001800 	.word	0x40001800
    890c:	000007fc 	.word	0x000007fc
    8910:	000085c5 	.word	0x000085c5
    8914:	00008605 	.word	0x00008605

00008918 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    8918:	b510      	push	{r4, lr}
    891a:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    891c:	2204      	movs	r2, #4
    891e:	4082      	lsls	r2, r0
    8920:	4809      	ldr	r0, [pc, #36]	; (8948 <system_gclk_gen_enable+0x30>)
    8922:	490a      	ldr	r1, [pc, #40]	; (894c <system_gclk_gen_enable+0x34>)
    8924:	6843      	ldr	r3, [r0, #4]
    8926:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    8928:	421a      	tst	r2, r3
    892a:	d1fb      	bne.n	8924 <system_gclk_gen_enable+0xc>
	cpu_irq_enter_critical();
    892c:	4b08      	ldr	r3, [pc, #32]	; (8950 <system_gclk_gen_enable+0x38>)
    892e:	4798      	blx	r3
    8930:	00a4      	lsls	r4, r4, #2
    8932:	4b05      	ldr	r3, [pc, #20]	; (8948 <system_gclk_gen_enable+0x30>)
    8934:	469c      	mov	ip, r3
    8936:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    8938:	6a22      	ldr	r2, [r4, #32]
    893a:	2380      	movs	r3, #128	; 0x80
    893c:	005b      	lsls	r3, r3, #1
    893e:	4313      	orrs	r3, r2
    8940:	6223      	str	r3, [r4, #32]
	cpu_irq_leave_critical();
    8942:	4b04      	ldr	r3, [pc, #16]	; (8954 <system_gclk_gen_enable+0x3c>)
    8944:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    8946:	bd10      	pop	{r4, pc}
    8948:	40001800 	.word	0x40001800
    894c:	000007fc 	.word	0x000007fc
    8950:	000085c5 	.word	0x000085c5
    8954:	00008605 	.word	0x00008605

00008958 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    8958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    895a:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    895c:	2204      	movs	r2, #4
    895e:	4082      	lsls	r2, r0
    8960:	4812      	ldr	r0, [pc, #72]	; (89ac <system_gclk_gen_get_hz+0x54>)
    8962:	4913      	ldr	r1, [pc, #76]	; (89b0 <system_gclk_gen_get_hz+0x58>)
    8964:	6843      	ldr	r3, [r0, #4]
    8966:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    8968:	421a      	tst	r2, r3
    896a:	d1fb      	bne.n	8964 <system_gclk_gen_get_hz+0xc>
	cpu_irq_enter_critical();
    896c:	4b11      	ldr	r3, [pc, #68]	; (89b4 <system_gclk_gen_get_hz+0x5c>)
    896e:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    8970:	4f0e      	ldr	r7, [pc, #56]	; (89ac <system_gclk_gen_get_hz+0x54>)
    8972:	3408      	adds	r4, #8
    8974:	00a4      	lsls	r4, r4, #2
    8976:	59e0      	ldr	r0, [r4, r7]
    8978:	0700      	lsls	r0, r0, #28
    897a:	0f00      	lsrs	r0, r0, #28
	uint32_t gen_input_hz = system_clock_source_get_hz(
    897c:	4b0e      	ldr	r3, [pc, #56]	; (89b8 <system_gclk_gen_get_hz+0x60>)
    897e:	4798      	blx	r3
    8980:	0006      	movs	r6, r0

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    8982:	59e5      	ldr	r5, [r4, r7]
    8984:	04ed      	lsls	r5, r5, #19
    8986:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    8988:	59e4      	ldr	r4, [r4, r7]
    898a:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    898c:	4b0b      	ldr	r3, [pc, #44]	; (89bc <system_gclk_gen_get_hz+0x64>)
    898e:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    8990:	2d00      	cmp	r5, #0
    8992:	d107      	bne.n	89a4 <system_gclk_gen_get_hz+0x4c>
    8994:	2c01      	cmp	r4, #1
    8996:	d907      	bls.n	89a8 <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
    8998:	0021      	movs	r1, r4
    899a:	0030      	movs	r0, r6
    899c:	4b08      	ldr	r3, [pc, #32]	; (89c0 <system_gclk_gen_get_hz+0x68>)
    899e:	4798      	blx	r3
    89a0:	0006      	movs	r6, r0
    89a2:	e001      	b.n	89a8 <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    89a4:	3401      	adds	r4, #1
    89a6:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    89a8:	0030      	movs	r0, r6
    89aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    89ac:	40001800 	.word	0x40001800
    89b0:	000007fc 	.word	0x000007fc
    89b4:	000085c5 	.word	0x000085c5
    89b8:	000086c5 	.word	0x000086c5
    89bc:	00008605 	.word	0x00008605
    89c0:	0000ef0d 	.word	0x0000ef0d

000089c4 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    89c4:	b510      	push	{r4, lr}
    89c6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    89c8:	4b09      	ldr	r3, [pc, #36]	; (89f0 <system_gclk_chan_enable+0x2c>)
    89ca:	4798      	blx	r3
    89cc:	00a0      	lsls	r0, r4, #2
    89ce:	4b09      	ldr	r3, [pc, #36]	; (89f4 <system_gclk_chan_enable+0x30>)
    89d0:	469c      	mov	ip, r3
    89d2:	4460      	add	r0, ip
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    89d4:	2280      	movs	r2, #128	; 0x80
    89d6:	5883      	ldr	r3, [r0, r2]
    89d8:	2140      	movs	r1, #64	; 0x40
    89da:	430b      	orrs	r3, r1
    89dc:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    89de:	3140      	adds	r1, #64	; 0x40
    89e0:	3a40      	subs	r2, #64	; 0x40
    89e2:	5843      	ldr	r3, [r0, r1]
    89e4:	421a      	tst	r2, r3
    89e6:	d0fc      	beq.n	89e2 <system_gclk_chan_enable+0x1e>
	cpu_irq_leave_critical();
    89e8:	4b03      	ldr	r3, [pc, #12]	; (89f8 <system_gclk_chan_enable+0x34>)
    89ea:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    89ec:	bd10      	pop	{r4, pc}
    89ee:	46c0      	nop			; (mov r8, r8)
    89f0:	000085c5 	.word	0x000085c5
    89f4:	40001800 	.word	0x40001800
    89f8:	00008605 	.word	0x00008605

000089fc <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    89fc:	b510      	push	{r4, lr}
    89fe:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    8a00:	4b09      	ldr	r3, [pc, #36]	; (8a28 <system_gclk_chan_disable+0x2c>)
    8a02:	4798      	blx	r3
    8a04:	00a0      	lsls	r0, r4, #2
    8a06:	4b09      	ldr	r3, [pc, #36]	; (8a2c <system_gclk_chan_disable+0x30>)
    8a08:	469c      	mov	ip, r3
    8a0a:	4460      	add	r0, ip

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    8a0c:	2280      	movs	r2, #128	; 0x80
    8a0e:	5883      	ldr	r3, [r0, r2]
    8a10:	2140      	movs	r1, #64	; 0x40
    8a12:	438b      	bics	r3, r1
    8a14:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    8a16:	3140      	adds	r1, #64	; 0x40
    8a18:	3a40      	subs	r2, #64	; 0x40
    8a1a:	5843      	ldr	r3, [r0, r1]
    8a1c:	421a      	tst	r2, r3
    8a1e:	d1fc      	bne.n	8a1a <system_gclk_chan_disable+0x1e>
	cpu_irq_leave_critical();
    8a20:	4b03      	ldr	r3, [pc, #12]	; (8a30 <system_gclk_chan_disable+0x34>)
    8a22:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    8a24:	bd10      	pop	{r4, pc}
    8a26:	46c0      	nop			; (mov r8, r8)
    8a28:	000085c5 	.word	0x000085c5
    8a2c:	40001800 	.word	0x40001800
    8a30:	00008605 	.word	0x00008605

00008a34 <system_gclk_chan_set_config>:
{
    8a34:	b570      	push	{r4, r5, r6, lr}
    8a36:	0004      	movs	r4, r0
    8a38:	000d      	movs	r5, r1
	system_gclk_chan_disable(channel);
    8a3a:	4b05      	ldr	r3, [pc, #20]	; (8a50 <system_gclk_chan_set_config+0x1c>)
    8a3c:	4798      	blx	r3
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    8a3e:	782a      	ldrb	r2, [r5, #0]
    8a40:	230f      	movs	r3, #15
    8a42:	4013      	ands	r3, r2
    8a44:	3420      	adds	r4, #32
    8a46:	00a4      	lsls	r4, r4, #2
    8a48:	4a02      	ldr	r2, [pc, #8]	; (8a54 <system_gclk_chan_set_config+0x20>)
    8a4a:	50a3      	str	r3, [r4, r2]
}
    8a4c:	bd70      	pop	{r4, r5, r6, pc}
    8a4e:	46c0      	nop			; (mov r8, r8)
    8a50:	000089fd 	.word	0x000089fd
    8a54:	40001800 	.word	0x40001800

00008a58 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    8a58:	b510      	push	{r4, lr}
    8a5a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    8a5c:	4b06      	ldr	r3, [pc, #24]	; (8a78 <system_gclk_chan_get_hz+0x20>)
    8a5e:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    8a60:	3420      	adds	r4, #32
    8a62:	00a4      	lsls	r4, r4, #2
    8a64:	4b05      	ldr	r3, [pc, #20]	; (8a7c <system_gclk_chan_get_hz+0x24>)
    8a66:	58e4      	ldr	r4, [r4, r3]
    8a68:	0724      	lsls	r4, r4, #28
    8a6a:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    8a6c:	4b04      	ldr	r3, [pc, #16]	; (8a80 <system_gclk_chan_get_hz+0x28>)
    8a6e:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    8a70:	0020      	movs	r0, r4
    8a72:	4b04      	ldr	r3, [pc, #16]	; (8a84 <system_gclk_chan_get_hz+0x2c>)
    8a74:	4798      	blx	r3
}
    8a76:	bd10      	pop	{r4, pc}
    8a78:	000085c5 	.word	0x000085c5
    8a7c:	40001800 	.word	0x40001800
    8a80:	00008605 	.word	0x00008605
    8a84:	00008959 	.word	0x00008959

00008a88 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    8a88:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    8a8a:	78d3      	ldrb	r3, [r2, #3]
    8a8c:	2b00      	cmp	r3, #0
    8a8e:	d135      	bne.n	8afc <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    8a90:	7813      	ldrb	r3, [r2, #0]
    8a92:	2b80      	cmp	r3, #128	; 0x80
    8a94:	d029      	beq.n	8aea <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    8a96:	061b      	lsls	r3, r3, #24
    8a98:	2480      	movs	r4, #128	; 0x80
    8a9a:	0264      	lsls	r4, r4, #9
    8a9c:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    8a9e:	7854      	ldrb	r4, [r2, #1]
    8aa0:	2502      	movs	r5, #2
    8aa2:	43ac      	bics	r4, r5
    8aa4:	d106      	bne.n	8ab4 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    8aa6:	7894      	ldrb	r4, [r2, #2]
    8aa8:	2c00      	cmp	r4, #0
    8aaa:	d120      	bne.n	8aee <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    8aac:	2480      	movs	r4, #128	; 0x80
    8aae:	02a4      	lsls	r4, r4, #10
    8ab0:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    8ab2:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    8ab4:	7854      	ldrb	r4, [r2, #1]
    8ab6:	3c01      	subs	r4, #1
    8ab8:	2c01      	cmp	r4, #1
    8aba:	d91c      	bls.n	8af6 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    8abc:	040d      	lsls	r5, r1, #16
    8abe:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    8ac0:	24a0      	movs	r4, #160	; 0xa0
    8ac2:	05e4      	lsls	r4, r4, #23
    8ac4:	432c      	orrs	r4, r5
    8ac6:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    8ac8:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    8aca:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    8acc:	24d0      	movs	r4, #208	; 0xd0
    8ace:	0624      	lsls	r4, r4, #24
    8ad0:	432c      	orrs	r4, r5
    8ad2:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    8ad4:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    8ad6:	78d4      	ldrb	r4, [r2, #3]
    8ad8:	2c00      	cmp	r4, #0
    8ada:	d122      	bne.n	8b22 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    8adc:	035b      	lsls	r3, r3, #13
    8ade:	d51c      	bpl.n	8b1a <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    8ae0:	7893      	ldrb	r3, [r2, #2]
    8ae2:	2b01      	cmp	r3, #1
    8ae4:	d01e      	beq.n	8b24 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    8ae6:	6141      	str	r1, [r0, #20]
    8ae8:	e017      	b.n	8b1a <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    8aea:	2300      	movs	r3, #0
    8aec:	e7d7      	b.n	8a9e <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    8aee:	24c0      	movs	r4, #192	; 0xc0
    8af0:	02e4      	lsls	r4, r4, #11
    8af2:	4323      	orrs	r3, r4
    8af4:	e7dd      	b.n	8ab2 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    8af6:	4c0d      	ldr	r4, [pc, #52]	; (8b2c <_system_pinmux_config+0xa4>)
    8af8:	4023      	ands	r3, r4
    8afa:	e7df      	b.n	8abc <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    8afc:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    8afe:	040c      	lsls	r4, r1, #16
    8b00:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    8b02:	23a0      	movs	r3, #160	; 0xa0
    8b04:	05db      	lsls	r3, r3, #23
    8b06:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    8b08:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    8b0a:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    8b0c:	23d0      	movs	r3, #208	; 0xd0
    8b0e:	061b      	lsls	r3, r3, #24
    8b10:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    8b12:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    8b14:	78d3      	ldrb	r3, [r2, #3]
    8b16:	2b00      	cmp	r3, #0
    8b18:	d103      	bne.n	8b22 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    8b1a:	7853      	ldrb	r3, [r2, #1]
    8b1c:	3b01      	subs	r3, #1
    8b1e:	2b01      	cmp	r3, #1
    8b20:	d902      	bls.n	8b28 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    8b22:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    8b24:	6181      	str	r1, [r0, #24]
    8b26:	e7f8      	b.n	8b1a <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    8b28:	6081      	str	r1, [r0, #8]
}
    8b2a:	e7fa      	b.n	8b22 <_system_pinmux_config+0x9a>
    8b2c:	fffbffff 	.word	0xfffbffff

00008b30 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    8b30:	b510      	push	{r4, lr}
    8b32:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    8b34:	09c1      	lsrs	r1, r0, #7
		return NULL;
    8b36:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    8b38:	2900      	cmp	r1, #0
    8b3a:	d104      	bne.n	8b46 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    8b3c:	0943      	lsrs	r3, r0, #5
    8b3e:	01db      	lsls	r3, r3, #7
    8b40:	4905      	ldr	r1, [pc, #20]	; (8b58 <system_pinmux_pin_set_config+0x28>)
    8b42:	468c      	mov	ip, r1
    8b44:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    8b46:	241f      	movs	r4, #31
    8b48:	4020      	ands	r0, r4
    8b4a:	2101      	movs	r1, #1
    8b4c:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    8b4e:	0018      	movs	r0, r3
    8b50:	4b02      	ldr	r3, [pc, #8]	; (8b5c <system_pinmux_pin_set_config+0x2c>)
    8b52:	4798      	blx	r3
}
    8b54:	bd10      	pop	{r4, pc}
    8b56:	46c0      	nop			; (mov r8, r8)
    8b58:	40002800 	.word	0x40002800
    8b5c:	00008a89 	.word	0x00008a89

00008b60 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    8b60:	4770      	bx	lr
	...

00008b64 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    8b64:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    8b66:	4b05      	ldr	r3, [pc, #20]	; (8b7c <system_init+0x18>)
    8b68:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    8b6a:	4b05      	ldr	r3, [pc, #20]	; (8b80 <system_init+0x1c>)
    8b6c:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    8b6e:	4b05      	ldr	r3, [pc, #20]	; (8b84 <system_init+0x20>)
    8b70:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    8b72:	4b05      	ldr	r3, [pc, #20]	; (8b88 <system_init+0x24>)
    8b74:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    8b76:	4b05      	ldr	r3, [pc, #20]	; (8b8c <system_init+0x28>)
    8b78:	4798      	blx	r3
}
    8b7a:	bd10      	pop	{r4, pc}
    8b7c:	00008759 	.word	0x00008759
    8b80:	00008635 	.word	0x00008635
    8b84:	00008b61 	.word	0x00008b61
    8b88:	000002f9 	.word	0x000002f9
    8b8c:	00008b61 	.word	0x00008b61

00008b90 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    8b90:	e7fe      	b.n	8b90 <Dummy_Handler>
	...

00008b94 <Reset_Handler>:
{
    8b94:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    8b96:	4a1a      	ldr	r2, [pc, #104]	; (8c00 <Reset_Handler+0x6c>)
    8b98:	4b1a      	ldr	r3, [pc, #104]	; (8c04 <Reset_Handler+0x70>)
    8b9a:	429a      	cmp	r2, r3
    8b9c:	d011      	beq.n	8bc2 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    8b9e:	001a      	movs	r2, r3
    8ba0:	4b19      	ldr	r3, [pc, #100]	; (8c08 <Reset_Handler+0x74>)
    8ba2:	429a      	cmp	r2, r3
    8ba4:	d20d      	bcs.n	8bc2 <Reset_Handler+0x2e>
    8ba6:	4a19      	ldr	r2, [pc, #100]	; (8c0c <Reset_Handler+0x78>)
    8ba8:	3303      	adds	r3, #3
    8baa:	1a9b      	subs	r3, r3, r2
    8bac:	089b      	lsrs	r3, r3, #2
    8bae:	3301      	adds	r3, #1
    8bb0:	009b      	lsls	r3, r3, #2
    8bb2:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    8bb4:	4813      	ldr	r0, [pc, #76]	; (8c04 <Reset_Handler+0x70>)
    8bb6:	4912      	ldr	r1, [pc, #72]	; (8c00 <Reset_Handler+0x6c>)
    8bb8:	588c      	ldr	r4, [r1, r2]
    8bba:	5084      	str	r4, [r0, r2]
    8bbc:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    8bbe:	429a      	cmp	r2, r3
    8bc0:	d1fa      	bne.n	8bb8 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    8bc2:	4a13      	ldr	r2, [pc, #76]	; (8c10 <Reset_Handler+0x7c>)
    8bc4:	4b13      	ldr	r3, [pc, #76]	; (8c14 <Reset_Handler+0x80>)
    8bc6:	429a      	cmp	r2, r3
    8bc8:	d20a      	bcs.n	8be0 <Reset_Handler+0x4c>
    8bca:	43d3      	mvns	r3, r2
    8bcc:	4911      	ldr	r1, [pc, #68]	; (8c14 <Reset_Handler+0x80>)
    8bce:	185b      	adds	r3, r3, r1
    8bd0:	2103      	movs	r1, #3
    8bd2:	438b      	bics	r3, r1
    8bd4:	3304      	adds	r3, #4
    8bd6:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    8bd8:	2100      	movs	r1, #0
    8bda:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    8bdc:	4293      	cmp	r3, r2
    8bde:	d1fc      	bne.n	8bda <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    8be0:	4a0d      	ldr	r2, [pc, #52]	; (8c18 <Reset_Handler+0x84>)
    8be2:	21ff      	movs	r1, #255	; 0xff
    8be4:	4b0d      	ldr	r3, [pc, #52]	; (8c1c <Reset_Handler+0x88>)
    8be6:	438b      	bics	r3, r1
    8be8:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
    8bea:	4a0d      	ldr	r2, [pc, #52]	; (8c20 <Reset_Handler+0x8c>)
    8bec:	6853      	ldr	r3, [r2, #4]
    8bee:	397f      	subs	r1, #127	; 0x7f
    8bf0:	430b      	orrs	r3, r1
    8bf2:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    8bf4:	4b0b      	ldr	r3, [pc, #44]	; (8c24 <Reset_Handler+0x90>)
    8bf6:	4798      	blx	r3
        main();
    8bf8:	4b0b      	ldr	r3, [pc, #44]	; (8c28 <Reset_Handler+0x94>)
    8bfa:	4798      	blx	r3
    8bfc:	e7fe      	b.n	8bfc <Reset_Handler+0x68>
    8bfe:	46c0      	nop			; (mov r8, r8)
    8c00:	000131ec 	.word	0x000131ec
    8c04:	20000000 	.word	0x20000000
    8c08:	20000070 	.word	0x20000070
    8c0c:	20000004 	.word	0x20000004
    8c10:	20000070 	.word	0x20000070
    8c14:	20001270 	.word	0x20001270
    8c18:	e000ed00 	.word	0xe000ed00
    8c1c:	00000000 	.word	0x00000000
    8c20:	41004000 	.word	0x41004000
    8c24:	0001128d 	.word	0x0001128d
    8c28:	00008ea9 	.word	0x00008ea9

00008c2c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    8c2c:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    8c2e:	4a06      	ldr	r2, [pc, #24]	; (8c48 <_sbrk+0x1c>)
    8c30:	6812      	ldr	r2, [r2, #0]
    8c32:	2a00      	cmp	r2, #0
    8c34:	d004      	beq.n	8c40 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    8c36:	4a04      	ldr	r2, [pc, #16]	; (8c48 <_sbrk+0x1c>)
    8c38:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    8c3a:	18c3      	adds	r3, r0, r3
    8c3c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    8c3e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    8c40:	4902      	ldr	r1, [pc, #8]	; (8c4c <_sbrk+0x20>)
    8c42:	4a01      	ldr	r2, [pc, #4]	; (8c48 <_sbrk+0x1c>)
    8c44:	6011      	str	r1, [r2, #0]
    8c46:	e7f6      	b.n	8c36 <_sbrk+0xa>
    8c48:	20000560 	.word	0x20000560
    8c4c:	20003270 	.word	0x20003270

00008c50 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    8c50:	2001      	movs	r0, #1
    8c52:	4240      	negs	r0, r0
    8c54:	4770      	bx	lr

00008c56 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    8c56:	2380      	movs	r3, #128	; 0x80
    8c58:	019b      	lsls	r3, r3, #6
    8c5a:	604b      	str	r3, [r1, #4]

	return 0;
}
    8c5c:	2000      	movs	r0, #0
    8c5e:	4770      	bx	lr

00008c60 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    8c60:	2001      	movs	r0, #1
    8c62:	4770      	bx	lr

00008c64 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    8c64:	2000      	movs	r0, #0
    8c66:	4770      	bx	lr

00008c68 <configure_led>:
		SYSTEM_RunTasks() ;
	}
}

static void configure_led(void)
{
    8c68:	b500      	push	{lr}
    8c6a:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    8c6c:	a901      	add	r1, sp, #4
    8c6e:	2301      	movs	r3, #1
    8c70:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
    8c72:	2200      	movs	r2, #0
    8c74:	708a      	strb	r2, [r1, #2]
	struct port_config pin_conf ;
	port_get_config_defaults(&pin_conf) ;
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT ;
    8c76:	700b      	strb	r3, [r1, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf) ;
    8c78:	2013      	movs	r0, #19
    8c7a:	4b04      	ldr	r3, [pc, #16]	; (8c8c <configure_led+0x24>)
    8c7c:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    8c7e:	2280      	movs	r2, #128	; 0x80
    8c80:	0312      	lsls	r2, r2, #12
    8c82:	4b03      	ldr	r3, [pc, #12]	; (8c90 <configure_led+0x28>)
    8c84:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE) ;
}
    8c86:	b003      	add	sp, #12
    8c88:	bd00      	pop	{pc}
    8c8a:	46c0      	nop			; (mov r8, r8)
    8c8c:	000086a1 	.word	0x000086a1
    8c90:	40002800 	.word	0x40002800

00008c94 <extint_callback>:
	);
	extint_chan_enable_callback(BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
}

static void extint_callback(void)
{
    8c94:	b570      	push	{r4, r5, r6, lr}
	return (port_base->IN.reg & pin_mask);
    8c96:	4b0e      	ldr	r3, [pc, #56]	; (8cd0 <extint_callback+0x3c>)
    8c98:	6a1b      	ldr	r3, [r3, #32]
	/* Read the button level */
	if (port_pin_get_input_level(BUTTON_0_PIN) == BUTTON_0_ACTIVE)
    8c9a:	00db      	lsls	r3, r3, #3
    8c9c:	d500      	bpl.n	8ca0 <extint_callback+0xc>
		}
		buttonPressed = true;
		/* Post task to application handler on button press */
		SYSTEM_PostTask(APP_TASK_ID);
	}
}
    8c9e:	bd70      	pop	{r4, r5, r6, pc}
		delay_ms(APP_DEBOUNCE_TIME);
    8ca0:	2032      	movs	r0, #50	; 0x32
    8ca2:	4b0c      	ldr	r3, [pc, #48]	; (8cd4 <extint_callback+0x40>)
    8ca4:	4798      	blx	r3
    8ca6:	4b0a      	ldr	r3, [pc, #40]	; (8cd0 <extint_callback+0x3c>)
    8ca8:	6a1b      	ldr	r3, [r3, #32]
		while(port_pin_get_input_level(BUTTON_0_PIN) == BUTTON_0_ACTIVE)
    8caa:	00db      	lsls	r3, r3, #3
    8cac:	d408      	bmi.n	8cc0 <extint_callback+0x2c>
			delay_ms(500);
    8cae:	26fa      	movs	r6, #250	; 0xfa
    8cb0:	0076      	lsls	r6, r6, #1
    8cb2:	4d08      	ldr	r5, [pc, #32]	; (8cd4 <extint_callback+0x40>)
    8cb4:	4c06      	ldr	r4, [pc, #24]	; (8cd0 <extint_callback+0x3c>)
    8cb6:	0030      	movs	r0, r6
    8cb8:	47a8      	blx	r5
    8cba:	6a23      	ldr	r3, [r4, #32]
		while(port_pin_get_input_level(BUTTON_0_PIN) == BUTTON_0_ACTIVE)
    8cbc:	00db      	lsls	r3, r3, #3
    8cbe:	d5fa      	bpl.n	8cb6 <extint_callback+0x22>
		buttonPressed = true;
    8cc0:	2201      	movs	r2, #1
    8cc2:	4b05      	ldr	r3, [pc, #20]	; (8cd8 <extint_callback+0x44>)
    8cc4:	701a      	strb	r2, [r3, #0]
		SYSTEM_PostTask(APP_TASK_ID);
    8cc6:	2010      	movs	r0, #16
    8cc8:	4b04      	ldr	r3, [pc, #16]	; (8cdc <extint_callback+0x48>)
    8cca:	4798      	blx	r3
}
    8ccc:	e7e7      	b.n	8c9e <extint_callback+0xa>
    8cce:	46c0      	nop			; (mov r8, r8)
    8cd0:	40002800 	.word	0x40002800
    8cd4:	00008305 	.word	0x00008305
    8cd8:	20000565 	.word	0x20000565
    8cdc:	000015d1 	.word	0x000015d1

00008ce0 <print_menu>:
{
    8ce0:	b510      	push	{r4, lr}
	printf("\r\n-- ATSAMR34 LoRa P2P Simple Application --\r\n") ;	
    8ce2:	4805      	ldr	r0, [pc, #20]	; (8cf8 <print_menu+0x18>)
    8ce4:	4c05      	ldr	r4, [pc, #20]	; (8cfc <print_menu+0x1c>)
    8ce6:	47a0      	blx	r4
	printf("- Press SW0 button to transmit counter value [%d]\r\n", buttonCounter) ;
    8ce8:	4b05      	ldr	r3, [pc, #20]	; (8d00 <print_menu+0x20>)
    8cea:	7819      	ldrb	r1, [r3, #0]
    8cec:	4805      	ldr	r0, [pc, #20]	; (8d04 <print_menu+0x24>)
    8cee:	4b06      	ldr	r3, [pc, #24]	; (8d08 <print_menu+0x28>)
    8cf0:	4798      	blx	r3
	printf("- Type any character to transmit over LoRa Radio\r\n") ;
    8cf2:	4806      	ldr	r0, [pc, #24]	; (8d0c <print_menu+0x2c>)
    8cf4:	47a0      	blx	r4
}
    8cf6:	bd10      	pop	{r4, pc}
    8cf8:	00012dc0 	.word	0x00012dc0
    8cfc:	000113ed 	.word	0x000113ed
    8d00:	20000564 	.word	0x20000564
    8d04:	00012df0 	.word	0x00012df0
    8d08:	000112f9 	.word	0x000112f9
    8d0c:	00012e24 	.word	0x00012e24

00008d10 <radio_enter_receive_mode>:
	}
}

/* LoRa Radio enter into Receive Mode */
void radio_enter_receive_mode(void)
{
    8d10:	b500      	push	{lr}
    8d12:	b083      	sub	sp, #12
	RadioReceiveParam_t radioReceiveParam ;
	uint32_t rxTimeout = 0 ;	// forever
	radioReceiveParam.action = RECEIVE_START ;
    8d14:	a801      	add	r0, sp, #4
    8d16:	2300      	movs	r3, #0
    8d18:	7003      	strb	r3, [r0, #0]
	radioReceiveParam.rxWindowSize = rxTimeout ;
    8d1a:	8043      	strh	r3, [r0, #2]
	if (RADIO_Receive(&radioReceiveParam) == 0)
    8d1c:	4b04      	ldr	r3, [pc, #16]	; (8d30 <radio_enter_receive_mode+0x20>)
    8d1e:	4798      	blx	r3
    8d20:	2800      	cmp	r0, #0
    8d22:	d001      	beq.n	8d28 <radio_enter_receive_mode+0x18>
	{
		printf("Radio in Receive mode\r\n") ;
	}
}
    8d24:	b003      	add	sp, #12
    8d26:	bd00      	pop	{pc}
		printf("Radio in Receive mode\r\n") ;
    8d28:	4802      	ldr	r0, [pc, #8]	; (8d34 <radio_enter_receive_mode+0x24>)
    8d2a:	4b03      	ldr	r3, [pc, #12]	; (8d38 <radio_enter_receive_mode+0x28>)
    8d2c:	4798      	blx	r3
}
    8d2e:	e7f9      	b.n	8d24 <radio_enter_receive_mode+0x14>
    8d30:	0000e8c9 	.word	0x0000e8c9
    8d34:	00012e58 	.word	0x00012e58
    8d38:	000113ed 	.word	0x000113ed

00008d3c <radio_exit_receive_mode>:

/* LoRa Radio exit from Receive Mode */
void radio_exit_receive_mode(void)
{
    8d3c:	b500      	push	{lr}
    8d3e:	b083      	sub	sp, #12
	RadioReceiveParam_t radioReceiveParam ;
	radioReceiveParam.action = RECEIVE_STOP ;
    8d40:	a801      	add	r0, sp, #4
    8d42:	2301      	movs	r3, #1
    8d44:	7003      	strb	r3, [r0, #0]
	if (RADIO_Receive(&radioReceiveParam) == 0)
    8d46:	4b05      	ldr	r3, [pc, #20]	; (8d5c <radio_exit_receive_mode+0x20>)
    8d48:	4798      	blx	r3
    8d4a:	2800      	cmp	r0, #0
    8d4c:	d001      	beq.n	8d52 <radio_exit_receive_mode+0x16>
	{
		printf("Radio Exit Receive mode\r\n") ;
	}	
}
    8d4e:	b003      	add	sp, #12
    8d50:	bd00      	pop	{pc}
		printf("Radio Exit Receive mode\r\n") ;
    8d52:	4803      	ldr	r0, [pc, #12]	; (8d60 <radio_exit_receive_mode+0x24>)
    8d54:	4b03      	ldr	r3, [pc, #12]	; (8d64 <radio_exit_receive_mode+0x28>)
    8d56:	4798      	blx	r3
}
    8d58:	e7f9      	b.n	8d4e <radio_exit_receive_mode+0x12>
    8d5a:	46c0      	nop			; (mov r8, r8)
    8d5c:	0000e8c9 	.word	0x0000e8c9
    8d60:	00012e70 	.word	0x00012e70
    8d64:	000113ed 	.word	0x000113ed

00008d68 <print_array>:
 \brief      Function to Print array of characters
 \param[in]  *array  - Pointer of the array to be printed
 \param[in]   length - Length of the array
 ************************************************************************/
void print_array(uint8_t *array, uint8_t length)
{
    8d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8d6a:	0004      	movs	r4, r0
    8d6c:	000d      	movs	r5, r1
	printf("0x") ;
    8d6e:	480a      	ldr	r0, [pc, #40]	; (8d98 <print_array+0x30>)
    8d70:	4b0a      	ldr	r3, [pc, #40]	; (8d9c <print_array+0x34>)
    8d72:	4798      	blx	r3
	for (uint8_t i = 0; i < length; i++)
    8d74:	2d00      	cmp	r5, #0
    8d76:	d00b      	beq.n	8d90 <print_array+0x28>
    8d78:	3d01      	subs	r5, #1
    8d7a:	b2ed      	uxtb	r5, r5
    8d7c:	3501      	adds	r5, #1
    8d7e:	1965      	adds	r5, r4, r5
	{
		printf("%02x", *array) ;
    8d80:	4e07      	ldr	r6, [pc, #28]	; (8da0 <print_array+0x38>)
    8d82:	4f06      	ldr	r7, [pc, #24]	; (8d9c <print_array+0x34>)
    8d84:	7821      	ldrb	r1, [r4, #0]
    8d86:	0030      	movs	r0, r6
    8d88:	47b8      	blx	r7
		array++ ;
    8d8a:	3401      	adds	r4, #1
	for (uint8_t i = 0; i < length; i++)
    8d8c:	42ac      	cmp	r4, r5
    8d8e:	d1f9      	bne.n	8d84 <print_array+0x1c>
	}
	printf("\n\r") ;
    8d90:	4804      	ldr	r0, [pc, #16]	; (8da4 <print_array+0x3c>)
    8d92:	4b02      	ldr	r3, [pc, #8]	; (8d9c <print_array+0x34>)
    8d94:	4798      	blx	r3
}
    8d96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8d98:	00012db4 	.word	0x00012db4
    8d9c:	000112f9 	.word	0x000112f9
    8da0:	00012db8 	.word	0x00012db8
    8da4:	00012c40 	.word	0x00012c40

00008da8 <radio_transmit_uplink>:
{
    8da8:	b530      	push	{r4, r5, lr}
    8daa:	b083      	sub	sp, #12
    8dac:	0005      	movs	r5, r0
    8dae:	000c      	movs	r4, r1
	printf("[Transmit Uplink] ") ;
    8db0:	480e      	ldr	r0, [pc, #56]	; (8dec <radio_transmit_uplink+0x44>)
    8db2:	4b0f      	ldr	r3, [pc, #60]	; (8df0 <radio_transmit_uplink+0x48>)
    8db4:	4798      	blx	r3
	print_array(data, len) ;
    8db6:	b2e4      	uxtb	r4, r4
    8db8:	0021      	movs	r1, r4
    8dba:	0028      	movs	r0, r5
    8dbc:	4b0d      	ldr	r3, [pc, #52]	; (8df4 <radio_transmit_uplink+0x4c>)
    8dbe:	4798      	blx	r3
	RadioTransmitParam.bufferLen = len ;
    8dc0:	466b      	mov	r3, sp
    8dc2:	701c      	strb	r4, [r3, #0]
	RadioTransmitParam.bufferPtr = data ;
    8dc4:	9501      	str	r5, [sp, #4]
	radioStatus = RADIO_Transmit(&RadioTransmitParam) ;
    8dc6:	4668      	mov	r0, sp
    8dc8:	4b0b      	ldr	r3, [pc, #44]	; (8df8 <radio_transmit_uplink+0x50>)
    8dca:	4798      	blx	r3
	switch(radioStatus)
    8dcc:	2800      	cmp	r0, #0
    8dce:	d005      	beq.n	8ddc <radio_transmit_uplink+0x34>
    8dd0:	2802      	cmp	r0, #2
    8dd2:	d008      	beq.n	8de6 <radio_transmit_uplink+0x3e>
			printf("Radio busy \r\n") ;
    8dd4:	4809      	ldr	r0, [pc, #36]	; (8dfc <radio_transmit_uplink+0x54>)
    8dd6:	4b0a      	ldr	r3, [pc, #40]	; (8e00 <radio_transmit_uplink+0x58>)
    8dd8:	4798      	blx	r3
}
    8dda:	e004      	b.n	8de6 <radio_transmit_uplink+0x3e>
			printf("Radio Transmit Success \r\n") ;
    8ddc:	4809      	ldr	r0, [pc, #36]	; (8e04 <radio_transmit_uplink+0x5c>)
    8dde:	4b08      	ldr	r3, [pc, #32]	; (8e00 <radio_transmit_uplink+0x58>)
    8de0:	4798      	blx	r3
			print_menu() ;
    8de2:	4b09      	ldr	r3, [pc, #36]	; (8e08 <radio_transmit_uplink+0x60>)
    8de4:	4798      	blx	r3
}
    8de6:	b003      	add	sp, #12
    8de8:	bd30      	pop	{r4, r5, pc}
    8dea:	46c0      	nop			; (mov r8, r8)
    8dec:	00012e8c 	.word	0x00012e8c
    8df0:	000112f9 	.word	0x000112f9
    8df4:	00008d69 	.word	0x00008d69
    8df8:	0000dee9 	.word	0x0000dee9
    8dfc:	00012ebc 	.word	0x00012ebc
    8e00:	000113ed 	.word	0x000113ed
    8e04:	00012ea0 	.word	0x00012ea0
    8e08:	00008ce1 	.word	0x00008ce1

00008e0c <APP_TaskHandler>:
{
    8e0c:	b510      	push	{r4, lr}
	if (buttonPressed == true)
    8e0e:	4b0d      	ldr	r3, [pc, #52]	; (8e44 <APP_TaskHandler+0x38>)
    8e10:	781b      	ldrb	r3, [r3, #0]
    8e12:	2b01      	cmp	r3, #1
    8e14:	d001      	beq.n	8e1a <APP_TaskHandler+0xe>
}
    8e16:	2000      	movs	r0, #0
    8e18:	bd10      	pop	{r4, pc}
		buttonPressed = false ;
    8e1a:	2200      	movs	r2, #0
    8e1c:	4b09      	ldr	r3, [pc, #36]	; (8e44 <APP_TaskHandler+0x38>)
    8e1e:	701a      	strb	r2, [r3, #0]
		buttonCounter++ ;
    8e20:	4c09      	ldr	r4, [pc, #36]	; (8e48 <APP_TaskHandler+0x3c>)
    8e22:	7821      	ldrb	r1, [r4, #0]
    8e24:	3101      	adds	r1, #1
    8e26:	b2c9      	uxtb	r1, r1
    8e28:	7021      	strb	r1, [r4, #0]
		printf("Button pressed %d times\r\n", buttonCounter) ;
    8e2a:	4808      	ldr	r0, [pc, #32]	; (8e4c <APP_TaskHandler+0x40>)
    8e2c:	4b08      	ldr	r3, [pc, #32]	; (8e50 <APP_TaskHandler+0x44>)
    8e2e:	4798      	blx	r3
		radio_exit_receive_mode() ;
    8e30:	4b08      	ldr	r3, [pc, #32]	; (8e54 <APP_TaskHandler+0x48>)
    8e32:	4798      	blx	r3
		buffer[0] = buttonCounter ;
    8e34:	4808      	ldr	r0, [pc, #32]	; (8e58 <APP_TaskHandler+0x4c>)
    8e36:	7823      	ldrb	r3, [r4, #0]
    8e38:	7003      	strb	r3, [r0, #0]
		radio_transmit_uplink(buffer, 1) ;
    8e3a:	2101      	movs	r1, #1
    8e3c:	4b07      	ldr	r3, [pc, #28]	; (8e5c <APP_TaskHandler+0x50>)
    8e3e:	4798      	blx	r3
    8e40:	e7e9      	b.n	8e16 <APP_TaskHandler+0xa>
    8e42:	46c0      	nop			; (mov r8, r8)
    8e44:	20000565 	.word	0x20000565
    8e48:	20000564 	.word	0x20000564
    8e4c:	00012bc0 	.word	0x00012bc0
    8e50:	000112f9 	.word	0x000112f9
    8e54:	00008d3d 	.word	0x00008d3d
    8e58:	20000db8 	.word	0x20000db8
    8e5c:	00008da9 	.word	0x00008da9

00008e60 <serial_data_handler>:
{
    8e60:	b510      	push	{r4, lr}
	if((-1) != (rxChar = sio2host_getchar_nowait()))
    8e62:	4b0b      	ldr	r3, [pc, #44]	; (8e90 <serial_data_handler+0x30>)
    8e64:	4798      	blx	r3
    8e66:	1c43      	adds	r3, r0, #1
    8e68:	d011      	beq.n	8e8e <serial_data_handler+0x2e>
		serialData = (char)rxChar;
    8e6a:	b2c4      	uxtb	r4, r0
		if((serialData != '\r') && (serialData != '\n') && (serialData != '\b'))
    8e6c:	2c0d      	cmp	r4, #13
    8e6e:	d00e      	beq.n	8e8e <serial_data_handler+0x2e>
    8e70:	2302      	movs	r3, #2
    8e72:	0022      	movs	r2, r4
    8e74:	439a      	bics	r2, r3
    8e76:	2a08      	cmp	r2, #8
    8e78:	d009      	beq.n	8e8e <serial_data_handler+0x2e>
			printf("\r\n") ;
    8e7a:	4806      	ldr	r0, [pc, #24]	; (8e94 <serial_data_handler+0x34>)
    8e7c:	4b06      	ldr	r3, [pc, #24]	; (8e98 <serial_data_handler+0x38>)
    8e7e:	4798      	blx	r3
			radio_exit_receive_mode() ;
    8e80:	4b06      	ldr	r3, [pc, #24]	; (8e9c <serial_data_handler+0x3c>)
    8e82:	4798      	blx	r3
			buffer[0] = serialData ;
    8e84:	4806      	ldr	r0, [pc, #24]	; (8ea0 <serial_data_handler+0x40>)
    8e86:	7004      	strb	r4, [r0, #0]
			radio_transmit_uplink(buffer, 1) ;
    8e88:	2101      	movs	r1, #1
    8e8a:	4b06      	ldr	r3, [pc, #24]	; (8ea4 <serial_data_handler+0x44>)
    8e8c:	4798      	blx	r3
}
    8e8e:	bd10      	pop	{r4, pc}
    8e90:	00000fbd 	.word	0x00000fbd
    8e94:	00012dec 	.word	0x00012dec
    8e98:	000113ed 	.word	0x000113ed
    8e9c:	00008d3d 	.word	0x00008d3d
    8ea0:	20000db8 	.word	0x20000db8
    8ea4:	00008da9 	.word	0x00008da9

00008ea8 <main>:
{
    8ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
    8eaa:	b085      	sub	sp, #20
	system_init() ;
    8eac:	4b32      	ldr	r3, [pc, #200]	; (8f78 <main+0xd0>)
    8eae:	4798      	blx	r3
	delay_init() ;
    8eb0:	4b32      	ldr	r3, [pc, #200]	; (8f7c <main+0xd4>)
    8eb2:	4798      	blx	r3
	board_init() ;
    8eb4:	4b32      	ldr	r3, [pc, #200]	; (8f80 <main+0xd8>)
    8eb6:	4798      	blx	r3
	configure_led() ;
    8eb8:	4c32      	ldr	r4, [pc, #200]	; (8f84 <main+0xdc>)
    8eba:	47a0      	blx	r4
	sio2host_init() ;
    8ebc:	4b32      	ldr	r3, [pc, #200]	; (8f88 <main+0xe0>)
    8ebe:	4798      	blx	r3
	INTERRUPT_GlobalInterruptEnable() ;
    8ec0:	2501      	movs	r5, #1
    8ec2:	4b32      	ldr	r3, [pc, #200]	; (8f8c <main+0xe4>)
    8ec4:	701d      	strb	r5, [r3, #0]
    8ec6:	f3bf 8f5f 	dmb	sy
    8eca:	b662      	cpsie	i
	HAL_RadioInit() ;
    8ecc:	4b30      	ldr	r3, [pc, #192]	; (8f90 <main+0xe8>)
    8ece:	4798      	blx	r3
	AESInit() ;
    8ed0:	4b30      	ldr	r3, [pc, #192]	; (8f94 <main+0xec>)
    8ed2:	4798      	blx	r3
	SystemTimerInit() ;
    8ed4:	4b30      	ldr	r3, [pc, #192]	; (8f98 <main+0xf0>)
    8ed6:	4798      	blx	r3
	Stack_Init() ;
    8ed8:	4b30      	ldr	r3, [pc, #192]	; (8f9c <main+0xf4>)
    8eda:	4798      	blx	r3
	LORAWAN_Init(appData_callback, NULL) ;
    8edc:	2100      	movs	r1, #0
    8ede:	4830      	ldr	r0, [pc, #192]	; (8fa0 <main+0xf8>)
    8ee0:	4b30      	ldr	r3, [pc, #192]	; (8fa4 <main+0xfc>)
    8ee2:	4798      	blx	r3
	configure_led() ;
    8ee4:	47a0      	blx	r4
	extint_chan_get_config_defaults(&eint_chan_conf);
    8ee6:	ac01      	add	r4, sp, #4
    8ee8:	0020      	movs	r0, r4
    8eea:	4b2f      	ldr	r3, [pc, #188]	; (8fa8 <main+0x100>)
    8eec:	4798      	blx	r3
	eint_chan_conf.gpio_pin           = BUTTON_0_EIC_PIN;
    8eee:	231c      	movs	r3, #28
    8ef0:	9301      	str	r3, [sp, #4]
	eint_chan_conf.gpio_pin_mux       = BUTTON_0_EIC_MUX;
    8ef2:	2300      	movs	r3, #0
    8ef4:	6063      	str	r3, [r4, #4]
	eint_chan_conf.detection_criteria = EXTINT_DETECT_FALLING;
    8ef6:	3302      	adds	r3, #2
    8ef8:	72e3      	strb	r3, [r4, #11]
	eint_chan_conf.filter_input_signal = true;
    8efa:	72a5      	strb	r5, [r4, #10]
	extint_chan_set_config(BUTTON_0_EIC_LINE, &eint_chan_conf);
    8efc:	0021      	movs	r1, r4
    8efe:	2008      	movs	r0, #8
    8f00:	4b2a      	ldr	r3, [pc, #168]	; (8fac <main+0x104>)
    8f02:	4798      	blx	r3
	extint_register_callback(
    8f04:	2200      	movs	r2, #0
    8f06:	2108      	movs	r1, #8
    8f08:	4829      	ldr	r0, [pc, #164]	; (8fb0 <main+0x108>)
    8f0a:	4b2a      	ldr	r3, [pc, #168]	; (8fb4 <main+0x10c>)
    8f0c:	4798      	blx	r3
	extint_chan_enable_callback(BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    8f0e:	2100      	movs	r1, #0
    8f10:	2008      	movs	r0, #8
    8f12:	4b29      	ldr	r3, [pc, #164]	; (8fb8 <main+0x110>)
    8f14:	4798      	blx	r3
	LORAWAN_Reset(ISM_EU868) ;	// see stack_common.h for the definition of IsmBand_t
    8f16:	2000      	movs	r0, #0
    8f18:	4b28      	ldr	r3, [pc, #160]	; (8fbc <main+0x114>)
    8f1a:	4798      	blx	r3
	uint32_t time_ms = LORAWAN_Pause() ;
    8f1c:	4b28      	ldr	r3, [pc, #160]	; (8fc0 <main+0x118>)
    8f1e:	4798      	blx	r3
    8f20:	0001      	movs	r1, r0
	printf("MAC Pause %ld\r\n", time_ms) ;
    8f22:	4828      	ldr	r0, [pc, #160]	; (8fc4 <main+0x11c>)
    8f24:	4d28      	ldr	r5, [pc, #160]	; (8fc8 <main+0x120>)
    8f26:	47a8      	blx	r5
	int16_t outputPwr = 15 ;
    8f28:	230f      	movs	r3, #15
    8f2a:	466a      	mov	r2, sp
    8f2c:	8013      	strh	r3, [r2, #0]
	RADIO_SetAttr(OUTPUT_POWER,(void *)&outputPwr) ;
    8f2e:	4669      	mov	r1, sp
    8f30:	2004      	movs	r0, #4
    8f32:	4e26      	ldr	r6, [pc, #152]	; (8fcc <main+0x124>)
    8f34:	47b0      	blx	r6
	printf("Configuring Radio Output Power %d\r\n", outputPwr) ;
    8f36:	466b      	mov	r3, sp
    8f38:	2100      	movs	r1, #0
    8f3a:	5e59      	ldrsh	r1, [r3, r1]
    8f3c:	4824      	ldr	r0, [pc, #144]	; (8fd0 <main+0x128>)
    8f3e:	47a8      	blx	r5
	int16_t sf = SF_12 ;
    8f40:	466b      	mov	r3, sp
    8f42:	1c9f      	adds	r7, r3, #2
    8f44:	230c      	movs	r3, #12
    8f46:	803b      	strh	r3, [r7, #0]
	RADIO_SetAttr(OUTPUT_POWER,(void *)&sf) ;
    8f48:	0039      	movs	r1, r7
    8f4a:	2004      	movs	r0, #4
    8f4c:	47b0      	blx	r6
	printf("Configuring Radio SF %d\r\n", sf) ;
    8f4e:	2300      	movs	r3, #0
    8f50:	5ef9      	ldrsh	r1, [r7, r3]
    8f52:	4820      	ldr	r0, [pc, #128]	; (8fd4 <main+0x12c>)
    8f54:	47a8      	blx	r5
	uint32_t wdt = 60000 ;
    8f56:	4b20      	ldr	r3, [pc, #128]	; (8fd8 <main+0x130>)
    8f58:	9301      	str	r3, [sp, #4]
	RADIO_SetAttr(WATCHDOG_TIMEOUT,(void *)&wdt) ;
    8f5a:	0021      	movs	r1, r4
    8f5c:	200c      	movs	r0, #12
    8f5e:	47b0      	blx	r6
	printf("Configuring Radio Watch Dog Timeout %ld\r\n", wdt) ;
    8f60:	9901      	ldr	r1, [sp, #4]
    8f62:	481e      	ldr	r0, [pc, #120]	; (8fdc <main+0x134>)
    8f64:	47a8      	blx	r5
	radio_enter_receive_mode() ;
    8f66:	4b1e      	ldr	r3, [pc, #120]	; (8fe0 <main+0x138>)
    8f68:	4798      	blx	r3
	print_menu() ;
    8f6a:	4b1e      	ldr	r3, [pc, #120]	; (8fe4 <main+0x13c>)
    8f6c:	4798      	blx	r3
		serial_data_handler() ;
    8f6e:	4d1e      	ldr	r5, [pc, #120]	; (8fe8 <main+0x140>)
		SYSTEM_RunTasks() ;
    8f70:	4c1e      	ldr	r4, [pc, #120]	; (8fec <main+0x144>)
		serial_data_handler() ;
    8f72:	47a8      	blx	r5
		SYSTEM_RunTasks() ;
    8f74:	47a0      	blx	r4
    8f76:	e7fc      	b.n	8f72 <main+0xca>
    8f78:	00008b65 	.word	0x00008b65
    8f7c:	00008299 	.word	0x00008299
    8f80:	00008635 	.word	0x00008635
    8f84:	00008c69 	.word	0x00008c69
    8f88:	00000dd9 	.word	0x00000dd9
    8f8c:	20000008 	.word	0x20000008
    8f90:	000070ed 	.word	0x000070ed
    8f94:	00002581 	.word	0x00002581
    8f98:	00001855 	.word	0x00001855
    8f9c:	00001555 	.word	0x00001555
    8fa0:	00008ff1 	.word	0x00008ff1
    8fa4:	000097e5 	.word	0x000097e5
    8fa8:	00000379 	.word	0x00000379
    8fac:	0000038d 	.word	0x0000038d
    8fb0:	00008c95 	.word	0x00008c95
    8fb4:	000081bd 	.word	0x000081bd
    8fb8:	000081e9 	.word	0x000081e9
    8fbc:	0000c9dd 	.word	0x0000c9dd
    8fc0:	00009a95 	.word	0x00009a95
    8fc4:	00012d38 	.word	0x00012d38
    8fc8:	000112f9 	.word	0x000112f9
    8fcc:	0000d599 	.word	0x0000d599
    8fd0:	00012d48 	.word	0x00012d48
    8fd4:	00012d6c 	.word	0x00012d6c
    8fd8:	0000ea60 	.word	0x0000ea60
    8fdc:	00012d88 	.word	0x00012d88
    8fe0:	00008d11 	.word	0x00008d11
    8fe4:	00008ce1 	.word	0x00008ce1
    8fe8:	00008e61 	.word	0x00008e61
    8fec:	00001565 	.word	0x00001565

00008ff0 <appData_callback>:
{
    8ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
    8ff2:	46c6      	mov	lr, r8
    8ff4:	b500      	push	{lr}
    8ff6:	b082      	sub	sp, #8
	if (appdata->evt == LORAWAN_EVT_RX_DATA_AVAILABLE)
    8ff8:	780b      	ldrb	r3, [r1, #0]
    8ffa:	2b02      	cmp	r3, #2
    8ffc:	d005      	beq.n	900a <appData_callback+0x1a>
	else if(appdata->evt == LORAWAN_EVT_TRANSACTION_COMPLETE)
    8ffe:	2b04      	cmp	r3, #4
    9000:	d061      	beq.n	90c6 <appData_callback+0xd6>
}
    9002:	b002      	add	sp, #8
    9004:	bc04      	pop	{r2}
    9006:	4690      	mov	r8, r2
    9008:	bdf0      	pop	{r4, r5, r6, r7, pc}
		status = appdata->param.rxData.status ;
    900a:	7b4a      	ldrb	r2, [r1, #13]
		switch(status)
    900c:	2a0a      	cmp	r2, #10
    900e:	d855      	bhi.n	90bc <appData_callback+0xcc>
    9010:	0093      	lsls	r3, r2, #2
    9012:	4839      	ldr	r0, [pc, #228]	; (90f8 <appData_callback+0x108>)
    9014:	58c3      	ldr	r3, [r0, r3]
    9016:	469f      	mov	pc, r3
				uint8_t dataLength = appdata->param.rxData.dataLength ;
    9018:	7b0c      	ldrb	r4, [r1, #12]
				if((dataLength > 0U) && (NULL != pData))
    901a:	2c00      	cmp	r4, #0
    901c:	d0f1      	beq.n	9002 <appData_callback+0x12>
				uint8_t *pData = appdata->param.rxData.pData ;
    901e:	688d      	ldr	r5, [r1, #8]
				if((dataLength > 0U) && (NULL != pData))
    9020:	2d00      	cmp	r5, #0
    9022:	d0ee      	beq.n	9002 <appData_callback+0x12>
					RADIO_GetAttr(PACKET_RSSI_VALUE, &rssi_value) ;
    9024:	2306      	movs	r3, #6
    9026:	446b      	add	r3, sp
    9028:	4698      	mov	r8, r3
    902a:	0019      	movs	r1, r3
    902c:	201f      	movs	r0, #31
    902e:	4e33      	ldr	r6, [pc, #204]	; (90fc <appData_callback+0x10c>)
    9030:	47b0      	blx	r6
					RADIO_GetAttr(PACKET_SNR, &snr_value) ;
    9032:	466b      	mov	r3, sp
    9034:	1ddf      	adds	r7, r3, #7
    9036:	0039      	movs	r1, r7
    9038:	200e      	movs	r0, #14
    903a:	47b0      	blx	r6
					printf(">> Payload received: ") ;
    903c:	4830      	ldr	r0, [pc, #192]	; (9100 <appData_callback+0x110>)
    903e:	4e31      	ldr	r6, [pc, #196]	; (9104 <appData_callback+0x114>)
    9040:	47b0      	blx	r6
					print_array(pData, dataLength) ;
    9042:	0021      	movs	r1, r4
    9044:	0028      	movs	r0, r5
    9046:	4b30      	ldr	r3, [pc, #192]	; (9108 <appData_callback+0x118>)
    9048:	4798      	blx	r3
					printf("RSSI Value: %d\r\n", rssi_value) ;
    904a:	4643      	mov	r3, r8
    904c:	2100      	movs	r1, #0
    904e:	5659      	ldrsb	r1, [r3, r1]
    9050:	482e      	ldr	r0, [pc, #184]	; (910c <appData_callback+0x11c>)
    9052:	47b0      	blx	r6
					printf("SNR Value: %d", snr_value) ;
    9054:	2100      	movs	r1, #0
    9056:	5679      	ldrsb	r1, [r7, r1]
    9058:	482d      	ldr	r0, [pc, #180]	; (9110 <appData_callback+0x120>)
    905a:	47b0      	blx	r6
					printf("\r\n*******************\r\n") ;
    905c:	482d      	ldr	r0, [pc, #180]	; (9114 <appData_callback+0x124>)
    905e:	4b2e      	ldr	r3, [pc, #184]	; (9118 <appData_callback+0x128>)
    9060:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
    9062:	4c2e      	ldr	r4, [pc, #184]	; (911c <appData_callback+0x12c>)
    9064:	2580      	movs	r5, #128	; 0x80
    9066:	032d      	lsls	r5, r5, #12
    9068:	6165      	str	r5, [r4, #20]
					delay_ms(50) ;
    906a:	2032      	movs	r0, #50	; 0x32
    906c:	4b2c      	ldr	r3, [pc, #176]	; (9120 <appData_callback+0x130>)
    906e:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    9070:	61a5      	str	r5, [r4, #24]
					radio_enter_receive_mode() ;
    9072:	4b2c      	ldr	r3, [pc, #176]	; (9124 <appData_callback+0x134>)
    9074:	4798      	blx	r3
					print_menu() ;
    9076:	4b2c      	ldr	r3, [pc, #176]	; (9128 <appData_callback+0x138>)
    9078:	4798      	blx	r3
    907a:	e7c2      	b.n	9002 <appData_callback+0x12>
				printf("\n\rRADIO_NO_DATA \n\r");
    907c:	482b      	ldr	r0, [pc, #172]	; (912c <appData_callback+0x13c>)
    907e:	4b21      	ldr	r3, [pc, #132]	; (9104 <appData_callback+0x114>)
    9080:	4798      	blx	r3
			break;
    9082:	e7be      	b.n	9002 <appData_callback+0x12>
				printf("\n\rRADIO_DATA_SIZE \n\r");
    9084:	482a      	ldr	r0, [pc, #168]	; (9130 <appData_callback+0x140>)
    9086:	4b1f      	ldr	r3, [pc, #124]	; (9104 <appData_callback+0x114>)
    9088:	4798      	blx	r3
			break;
    908a:	e7ba      	b.n	9002 <appData_callback+0x12>
				printf("\n\rRADIO_INVALID_REQ \n\r");
    908c:	4829      	ldr	r0, [pc, #164]	; (9134 <appData_callback+0x144>)
    908e:	4b1d      	ldr	r3, [pc, #116]	; (9104 <appData_callback+0x114>)
    9090:	4798      	blx	r3
			break;
    9092:	e7b6      	b.n	9002 <appData_callback+0x12>
				printf("\n\rRADIO_BUSY \n\r");
    9094:	4828      	ldr	r0, [pc, #160]	; (9138 <appData_callback+0x148>)
    9096:	4b1b      	ldr	r3, [pc, #108]	; (9104 <appData_callback+0x114>)
    9098:	4798      	blx	r3
			break;
    909a:	e7b2      	b.n	9002 <appData_callback+0x12>
				printf("\n\rRADIO_OUT_OF_RANGE \n\r");
    909c:	4827      	ldr	r0, [pc, #156]	; (913c <appData_callback+0x14c>)
    909e:	4b19      	ldr	r3, [pc, #100]	; (9104 <appData_callback+0x114>)
    90a0:	4798      	blx	r3
			break;
    90a2:	e7ae      	b.n	9002 <appData_callback+0x12>
				printf("\n\rRADIO_UNSUPPORTED_ATTR \n\r");
    90a4:	4826      	ldr	r0, [pc, #152]	; (9140 <appData_callback+0x150>)
    90a6:	4b17      	ldr	r3, [pc, #92]	; (9104 <appData_callback+0x114>)
    90a8:	4798      	blx	r3
			break;
    90aa:	e7aa      	b.n	9002 <appData_callback+0x12>
				printf("\n\rRADIO_CHANNEL_BUSY \n\r");
    90ac:	4825      	ldr	r0, [pc, #148]	; (9144 <appData_callback+0x154>)
    90ae:	4b15      	ldr	r3, [pc, #84]	; (9104 <appData_callback+0x114>)
    90b0:	4798      	blx	r3
			break;
    90b2:	e7a6      	b.n	9002 <appData_callback+0x12>
				printf("\n\rINVALID_PARAMETER \n\r");
    90b4:	4824      	ldr	r0, [pc, #144]	; (9148 <appData_callback+0x158>)
    90b6:	4b13      	ldr	r3, [pc, #76]	; (9104 <appData_callback+0x114>)
    90b8:	4798      	blx	r3
			break;
    90ba:	e7a2      	b.n	9002 <appData_callback+0x12>
				printf("UNKNOWN ERROR %d\r\n", status) ;
    90bc:	0011      	movs	r1, r2
    90be:	4823      	ldr	r0, [pc, #140]	; (914c <appData_callback+0x15c>)
    90c0:	4b10      	ldr	r3, [pc, #64]	; (9104 <appData_callback+0x114>)
    90c2:	4798      	blx	r3
			break ;
    90c4:	e79d      	b.n	9002 <appData_callback+0x12>
		switch(status = appdata->param.transCmpl.status)
    90c6:	790b      	ldrb	r3, [r1, #4]
    90c8:	2b01      	cmp	r3, #1
    90ca:	d00c      	beq.n	90e6 <appData_callback+0xf6>
    90cc:	2b00      	cmp	r3, #0
    90ce:	d004      	beq.n	90da <appData_callback+0xea>
    90d0:	2b04      	cmp	r3, #4
    90d2:	d00c      	beq.n	90ee <appData_callback+0xfe>
    90d4:	2b08      	cmp	r3, #8
    90d6:	d000      	beq.n	90da <appData_callback+0xea>
    90d8:	e793      	b.n	9002 <appData_callback+0x12>
				printf("Transmission success\r\n") ;
    90da:	481d      	ldr	r0, [pc, #116]	; (9150 <appData_callback+0x160>)
    90dc:	4b0e      	ldr	r3, [pc, #56]	; (9118 <appData_callback+0x128>)
    90de:	4798      	blx	r3
				radio_enter_receive_mode() ;
    90e0:	4b10      	ldr	r3, [pc, #64]	; (9124 <appData_callback+0x134>)
    90e2:	4798      	blx	r3
				break ;
    90e4:	e78d      	b.n	9002 <appData_callback+0x12>
				printf("\r\nRADIO_NO_DATA\r\n") ;
    90e6:	481b      	ldr	r0, [pc, #108]	; (9154 <appData_callback+0x164>)
    90e8:	4b0b      	ldr	r3, [pc, #44]	; (9118 <appData_callback+0x128>)
    90ea:	4798      	blx	r3
				break ;
    90ec:	e789      	b.n	9002 <appData_callback+0x12>
				printf("\r\nRADIO_BUSY\r\n") ;
    90ee:	481a      	ldr	r0, [pc, #104]	; (9158 <appData_callback+0x168>)
    90f0:	4b09      	ldr	r3, [pc, #36]	; (9118 <appData_callback+0x128>)
    90f2:	4798      	blx	r3
}
    90f4:	e785      	b.n	9002 <appData_callback+0x12>
    90f6:	46c0      	nop			; (mov r8, r8)
    90f8:	00012b94 	.word	0x00012b94
    90fc:	0000d4ad 	.word	0x0000d4ad
    9100:	00012bdc 	.word	0x00012bdc
    9104:	000112f9 	.word	0x000112f9
    9108:	00008d69 	.word	0x00008d69
    910c:	00012bf4 	.word	0x00012bf4
    9110:	00012c08 	.word	0x00012c08
    9114:	00012c18 	.word	0x00012c18
    9118:	000113ed 	.word	0x000113ed
    911c:	40002800 	.word	0x40002800
    9120:	00008305 	.word	0x00008305
    9124:	00008d11 	.word	0x00008d11
    9128:	00008ce1 	.word	0x00008ce1
    912c:	00012c30 	.word	0x00012c30
    9130:	00012c44 	.word	0x00012c44
    9134:	00012c5c 	.word	0x00012c5c
    9138:	00012c74 	.word	0x00012c74
    913c:	00012c84 	.word	0x00012c84
    9140:	00012c9c 	.word	0x00012c9c
    9144:	00012cb8 	.word	0x00012cb8
    9148:	00012cd0 	.word	0x00012cd0
    914c:	00012ce8 	.word	0x00012ce8
    9150:	00012cfc 	.word	0x00012cfc
    9154:	00012d14 	.word	0x00012d14
    9158:	00012d28 	.word	0x00012d28

0000915c <common_tc_read_count>:
    915c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    915e:	4b0d      	ldr	r3, [pc, #52]	; (9194 <common_tc_read_count+0x38>)
    9160:	4798      	blx	r3
    9162:	4b0d      	ldr	r3, [pc, #52]	; (9198 <common_tc_read_count+0x3c>)
    9164:	781b      	ldrb	r3, [r3, #0]
    9166:	2b00      	cmp	r3, #0
    9168:	d00e      	beq.n	9188 <common_tc_read_count+0x2c>
    916a:	4b0c      	ldr	r3, [pc, #48]	; (919c <common_tc_read_count+0x40>)
    916c:	781d      	ldrb	r5, [r3, #0]
    916e:	4b0a      	ldr	r3, [pc, #40]	; (9198 <common_tc_read_count+0x3c>)
    9170:	781f      	ldrb	r7, [r3, #0]
    9172:	4c0b      	ldr	r4, [pc, #44]	; (91a0 <common_tc_read_count+0x44>)
    9174:	1c29      	adds	r1, r5, #0
    9176:	47a0      	blx	r4
    9178:	1c06      	adds	r6, r0, #0
    917a:	480a      	ldr	r0, [pc, #40]	; (91a4 <common_tc_read_count+0x48>)
    917c:	1c29      	adds	r1, r5, #0
    917e:	47a0      	blx	r4
    9180:	4378      	muls	r0, r7
    9182:	1830      	adds	r0, r6, r0
    9184:	b280      	uxth	r0, r0
    9186:	e004      	b.n	9192 <common_tc_read_count+0x36>
    9188:	4b04      	ldr	r3, [pc, #16]	; (919c <common_tc_read_count+0x40>)
    918a:	7819      	ldrb	r1, [r3, #0]
    918c:	4b04      	ldr	r3, [pc, #16]	; (91a0 <common_tc_read_count+0x44>)
    918e:	4798      	blx	r3
    9190:	b280      	uxth	r0, r0
    9192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9194:	00001169 	.word	0x00001169
    9198:	20000568 	.word	0x20000568
    919c:	20000dea 	.word	0x20000dea
    91a0:	0000f021 	.word	0x0000f021
    91a4:	0000ffff 	.word	0x0000ffff

000091a8 <common_tc_compare_stop>:
    91a8:	b508      	push	{r3, lr}
    91aa:	4b05      	ldr	r3, [pc, #20]	; (91c0 <common_tc_compare_stop+0x18>)
    91ac:	4798      	blx	r3
    91ae:	4b05      	ldr	r3, [pc, #20]	; (91c4 <common_tc_compare_stop+0x1c>)
    91b0:	4798      	blx	r3
    91b2:	4b05      	ldr	r3, [pc, #20]	; (91c8 <common_tc_compare_stop+0x20>)
    91b4:	2200      	movs	r2, #0
    91b6:	605a      	str	r2, [r3, #4]
    91b8:	811a      	strh	r2, [r3, #8]
    91ba:	4b04      	ldr	r3, [pc, #16]	; (91cc <common_tc_compare_stop+0x24>)
    91bc:	4798      	blx	r3
    91be:	bd08      	pop	{r3, pc}
    91c0:	0000117d 	.word	0x0000117d
    91c4:	000011e5 	.word	0x000011e5
    91c8:	20000568 	.word	0x20000568
    91cc:	00001209 	.word	0x00001209

000091d0 <common_tc_delay>:
    91d0:	b510      	push	{r4, lr}
    91d2:	1c04      	adds	r4, r0, #0
    91d4:	4b13      	ldr	r3, [pc, #76]	; (9224 <common_tc_delay+0x54>)
    91d6:	4798      	blx	r3
    91d8:	4b13      	ldr	r3, [pc, #76]	; (9228 <common_tc_delay+0x58>)
    91da:	781a      	ldrb	r2, [r3, #0]
    91dc:	4362      	muls	r2, r4
    91de:	1881      	adds	r1, r0, r2
    91e0:	4b12      	ldr	r3, [pc, #72]	; (922c <common_tc_delay+0x5c>)
    91e2:	6059      	str	r1, [r3, #4]
    91e4:	6859      	ldr	r1, [r3, #4]
    91e6:	0c09      	lsrs	r1, r1, #16
    91e8:	6059      	str	r1, [r3, #4]
    91ea:	685b      	ldr	r3, [r3, #4]
    91ec:	2b00      	cmp	r3, #0
    91ee:	d007      	beq.n	9200 <common_tc_delay+0x30>
    91f0:	4b0e      	ldr	r3, [pc, #56]	; (922c <common_tc_delay+0x5c>)
    91f2:	6859      	ldr	r1, [r3, #4]
    91f4:	3201      	adds	r2, #1
    91f6:	1880      	adds	r0, r0, r2
    91f8:	8118      	strh	r0, [r3, #8]
    91fa:	4b0d      	ldr	r3, [pc, #52]	; (9230 <common_tc_delay+0x60>)
    91fc:	4798      	blx	r3
    91fe:	e004      	b.n	920a <common_tc_delay+0x3a>
    9200:	1882      	adds	r2, r0, r2
    9202:	4b0a      	ldr	r3, [pc, #40]	; (922c <common_tc_delay+0x5c>)
    9204:	811a      	strh	r2, [r3, #8]
    9206:	4b0b      	ldr	r3, [pc, #44]	; (9234 <common_tc_delay+0x64>)
    9208:	4798      	blx	r3
    920a:	4b08      	ldr	r3, [pc, #32]	; (922c <common_tc_delay+0x5c>)
    920c:	891b      	ldrh	r3, [r3, #8]
    920e:	2b63      	cmp	r3, #99	; 0x63
    9210:	d802      	bhi.n	9218 <common_tc_delay+0x48>
    9212:	3364      	adds	r3, #100	; 0x64
    9214:	4a05      	ldr	r2, [pc, #20]	; (922c <common_tc_delay+0x5c>)
    9216:	8113      	strh	r3, [r2, #8]
    9218:	4b04      	ldr	r3, [pc, #16]	; (922c <common_tc_delay+0x5c>)
    921a:	8918      	ldrh	r0, [r3, #8]
    921c:	4b06      	ldr	r3, [pc, #24]	; (9238 <common_tc_delay+0x68>)
    921e:	4798      	blx	r3
    9220:	bd10      	pop	{r4, pc}
    9222:	46c0      	nop			; (mov r8, r8)
    9224:	00001169 	.word	0x00001169
    9228:	20000dea 	.word	0x20000dea
    922c:	20000568 	.word	0x20000568
    9230:	0000117d 	.word	0x0000117d
    9234:	00001191 	.word	0x00001191
    9238:	000011cd 	.word	0x000011cd

0000923c <common_tc_init>:
    923c:	b508      	push	{r3, lr}
    923e:	2200      	movs	r2, #0
    9240:	4b03      	ldr	r3, [pc, #12]	; (9250 <common_tc_init+0x14>)
    9242:	701a      	strb	r2, [r3, #0]
    9244:	4b03      	ldr	r3, [pc, #12]	; (9254 <common_tc_init+0x18>)
    9246:	4798      	blx	r3
    9248:	4b03      	ldr	r3, [pc, #12]	; (9258 <common_tc_init+0x1c>)
    924a:	7018      	strb	r0, [r3, #0]
    924c:	bd08      	pop	{r3, pc}
    924e:	46c0      	nop			; (mov r8, r8)
    9250:	20000568 	.word	0x20000568
    9254:	00001221 	.word	0x00001221
    9258:	20000dea 	.word	0x20000dea

0000925c <tmr_ovf_callback>:
    925c:	b508      	push	{r3, lr}
    925e:	4b0e      	ldr	r3, [pc, #56]	; (9298 <tmr_ovf_callback+0x3c>)
    9260:	685b      	ldr	r3, [r3, #4]
    9262:	2b00      	cmp	r3, #0
    9264:	d007      	beq.n	9276 <tmr_ovf_callback+0x1a>
    9266:	4a0c      	ldr	r2, [pc, #48]	; (9298 <tmr_ovf_callback+0x3c>)
    9268:	6853      	ldr	r3, [r2, #4]
    926a:	3b01      	subs	r3, #1
    926c:	6053      	str	r3, [r2, #4]
    926e:	2b00      	cmp	r3, #0
    9270:	d101      	bne.n	9276 <tmr_ovf_callback+0x1a>
    9272:	4b0a      	ldr	r3, [pc, #40]	; (929c <tmr_ovf_callback+0x40>)
    9274:	4798      	blx	r3
    9276:	4a08      	ldr	r2, [pc, #32]	; (9298 <tmr_ovf_callback+0x3c>)
    9278:	7813      	ldrb	r3, [r2, #0]
    927a:	3301      	adds	r3, #1
    927c:	b2db      	uxtb	r3, r3
    927e:	7013      	strb	r3, [r2, #0]
    9280:	4a07      	ldr	r2, [pc, #28]	; (92a0 <tmr_ovf_callback+0x44>)
    9282:	7812      	ldrb	r2, [r2, #0]
    9284:	429a      	cmp	r2, r3
    9286:	d806      	bhi.n	9296 <tmr_ovf_callback+0x3a>
    9288:	4b03      	ldr	r3, [pc, #12]	; (9298 <tmr_ovf_callback+0x3c>)
    928a:	2200      	movs	r2, #0
    928c:	701a      	strb	r2, [r3, #0]
    928e:	68db      	ldr	r3, [r3, #12]
    9290:	2b00      	cmp	r3, #0
    9292:	d000      	beq.n	9296 <tmr_ovf_callback+0x3a>
    9294:	4798      	blx	r3
    9296:	bd08      	pop	{r3, pc}
    9298:	20000568 	.word	0x20000568
    929c:	00001191 	.word	0x00001191
    92a0:	20000dea 	.word	0x20000dea

000092a4 <tmr_cca_callback>:
    92a4:	b508      	push	{r3, lr}
    92a6:	4b04      	ldr	r3, [pc, #16]	; (92b8 <tmr_cca_callback+0x14>)
    92a8:	4798      	blx	r3
    92aa:	4b04      	ldr	r3, [pc, #16]	; (92bc <tmr_cca_callback+0x18>)
    92ac:	691b      	ldr	r3, [r3, #16]
    92ae:	2b00      	cmp	r3, #0
    92b0:	d000      	beq.n	92b4 <tmr_cca_callback+0x10>
    92b2:	4798      	blx	r3
    92b4:	bd08      	pop	{r3, pc}
    92b6:	46c0      	nop			; (mov r8, r8)
    92b8:	0000117d 	.word	0x0000117d
    92bc:	20000568 	.word	0x20000568

000092c0 <set_common_tc_overflow_callback>:
    92c0:	4b01      	ldr	r3, [pc, #4]	; (92c8 <set_common_tc_overflow_callback+0x8>)
    92c2:	60d8      	str	r0, [r3, #12]
    92c4:	4770      	bx	lr
    92c6:	46c0      	nop			; (mov r8, r8)
    92c8:	20000568 	.word	0x20000568

000092cc <set_common_tc_expiry_callback>:
    92cc:	4b01      	ldr	r3, [pc, #4]	; (92d4 <set_common_tc_expiry_callback+0x8>)
    92ce:	6118      	str	r0, [r3, #16]
    92d0:	4770      	bx	lr
    92d2:	46c0      	nop			; (mov r8, r8)
    92d4:	20000568 	.word	0x20000568

000092d8 <MacClearCommands>:
    92d8:	490e      	ldr	r1, [pc, #56]	; (9314 <MacClearCommands+0x3c>)
    92da:	b570      	push	{r4, r5, r6, lr}
    92dc:	000b      	movs	r3, r1
    92de:	33ac      	adds	r3, #172	; 0xac
    92e0:	7818      	ldrb	r0, [r3, #0]
    92e2:	2303      	movs	r3, #3
    92e4:	25a4      	movs	r5, #164	; 0xa4
    92e6:	4343      	muls	r3, r0
    92e8:	2401      	movs	r4, #1
    92ea:	20ff      	movs	r0, #255	; 0xff
    92ec:	3366      	adds	r3, #102	; 0x66
    92ee:	4a0a      	ldr	r2, [pc, #40]	; (9318 <MacClearCommands+0x40>)
    92f0:	185b      	adds	r3, r3, r1
    92f2:	00ed      	lsls	r5, r5, #3
    92f4:	429a      	cmp	r2, r3
    92f6:	d100      	bne.n	92fa <MacClearCommands+0x22>
    92f8:	bd70      	pop	{r4, r5, r6, pc}
    92fa:	7811      	ldrb	r1, [r2, #0]
    92fc:	29ff      	cmp	r1, #255	; 0xff
    92fe:	d006      	beq.n	930e <MacClearCommands+0x36>
    9300:	290a      	cmp	r1, #10
    9302:	d803      	bhi.n	930c <MacClearCommands+0x34>
    9304:	0026      	movs	r6, r4
    9306:	408e      	lsls	r6, r1
    9308:	422e      	tst	r6, r5
    930a:	d100      	bne.n	930e <MacClearCommands+0x36>
    930c:	7010      	strb	r0, [r2, #0]
    930e:	3203      	adds	r2, #3
    9310:	e7f0      	b.n	92f4 <MacClearCommands+0x1c>
    9312:	46c0      	nop			; (mov r8, r8)
    9314:	20000f10 	.word	0x20000f10
    9318:	20000f76 	.word	0x20000f76

0000931c <CountfOptsLength>:
    931c:	2200      	movs	r2, #0
    931e:	490d      	ldr	r1, [pc, #52]	; (9354 <CountfOptsLength+0x38>)
    9320:	b570      	push	{r4, r5, r6, lr}
    9322:	000b      	movs	r3, r1
    9324:	0010      	movs	r0, r2
    9326:	2503      	movs	r5, #3
    9328:	33ac      	adds	r3, #172	; 0xac
    932a:	781c      	ldrb	r4, [r3, #0]
    932c:	4e0a      	ldr	r6, [pc, #40]	; (9358 <CountfOptsLength+0x3c>)
    932e:	b2d3      	uxtb	r3, r2
    9330:	429c      	cmp	r4, r3
    9332:	d800      	bhi.n	9336 <CountfOptsLength+0x1a>
    9334:	bd70      	pop	{r4, r5, r6, pc}
    9336:	002b      	movs	r3, r5
    9338:	4353      	muls	r3, r2
    933a:	3366      	adds	r3, #102	; 0x66
    933c:	5ccb      	ldrb	r3, [r1, r3]
    933e:	2bff      	cmp	r3, #255	; 0xff
    9340:	d006      	beq.n	9350 <CountfOptsLength+0x34>
    9342:	18f3      	adds	r3, r6, r3
    9344:	3b02      	subs	r3, #2
    9346:	781b      	ldrb	r3, [r3, #0]
    9348:	18c3      	adds	r3, r0, r3
    934a:	2b0f      	cmp	r3, #15
    934c:	dcf2      	bgt.n	9334 <CountfOptsLength+0x18>
    934e:	b2d8      	uxtb	r0, r3
    9350:	3201      	adds	r2, #1
    9352:	e7ec      	b.n	932e <CountfOptsLength+0x12>
    9354:	20000f10 	.word	0x20000f10
    9358:	00012ecc 	.word	0x00012ecc

0000935c <StopAllSoftwareTimers>:
    935c:	b570      	push	{r4, r5, r6, lr}
    935e:	4c17      	ldr	r4, [pc, #92]	; (93bc <StopAllSoftwareTimers+0x60>)
    9360:	4d17      	ldr	r5, [pc, #92]	; (93c0 <StopAllSoftwareTimers+0x64>)
    9362:	0023      	movs	r3, r4
    9364:	33b6      	adds	r3, #182	; 0xb6
    9366:	7818      	ldrb	r0, [r3, #0]
    9368:	47a8      	blx	r5
    936a:	0023      	movs	r3, r4
    936c:	33b7      	adds	r3, #183	; 0xb7
    936e:	7818      	ldrb	r0, [r3, #0]
    9370:	47a8      	blx	r5
    9372:	0023      	movs	r3, r4
    9374:	33bb      	adds	r3, #187	; 0xbb
    9376:	7818      	ldrb	r0, [r3, #0]
    9378:	47a8      	blx	r5
    937a:	0023      	movs	r3, r4
    937c:	33b8      	adds	r3, #184	; 0xb8
    937e:	7818      	ldrb	r0, [r3, #0]
    9380:	47a8      	blx	r5
    9382:	0023      	movs	r3, r4
    9384:	33b9      	adds	r3, #185	; 0xb9
    9386:	7818      	ldrb	r0, [r3, #0]
    9388:	47a8      	blx	r5
    938a:	0023      	movs	r3, r4
    938c:	33bc      	adds	r3, #188	; 0xbc
    938e:	7818      	ldrb	r0, [r3, #0]
    9390:	47a8      	blx	r5
    9392:	0023      	movs	r3, r4
    9394:	33ba      	adds	r3, #186	; 0xba
    9396:	7818      	ldrb	r0, [r3, #0]
    9398:	47a8      	blx	r5
    939a:	0023      	movs	r3, r4
    939c:	33bd      	adds	r3, #189	; 0xbd
    939e:	7818      	ldrb	r0, [r3, #0]
    93a0:	47a8      	blx	r5
    93a2:	0023      	movs	r3, r4
    93a4:	33c6      	adds	r3, #198	; 0xc6
    93a6:	7818      	ldrb	r0, [r3, #0]
    93a8:	47a8      	blx	r5
    93aa:	0023      	movs	r3, r4
    93ac:	33c7      	adds	r3, #199	; 0xc7
    93ae:	7818      	ldrb	r0, [r3, #0]
    93b0:	34f0      	adds	r4, #240	; 0xf0
    93b2:	47a8      	blx	r5
    93b4:	7820      	ldrb	r0, [r4, #0]
    93b6:	47a8      	blx	r5
    93b8:	bd70      	pop	{r4, r5, r6, pc}
    93ba:	46c0      	nop			; (mov r8, r8)
    93bc:	20000f10 	.word	0x20000f10
    93c0:	00001bf5 	.word	0x00001bf5

000093c4 <LorawanGetMaxPayloadSize>:
    93c4:	b513      	push	{r0, r1, r4, lr}
    93c6:	466b      	mov	r3, sp
    93c8:	1ddc      	adds	r4, r3, #7
    93ca:	2300      	movs	r3, #0
    93cc:	0022      	movs	r2, r4
    93ce:	7023      	strb	r3, [r4, #0]
    93d0:	4902      	ldr	r1, [pc, #8]	; (93dc <LorawanGetMaxPayloadSize+0x18>)
    93d2:	4b03      	ldr	r3, [pc, #12]	; (93e0 <LorawanGetMaxPayloadSize+0x1c>)
    93d4:	2005      	movs	r0, #5
    93d6:	4798      	blx	r3
    93d8:	7820      	ldrb	r0, [r4, #0]
    93da:	bd16      	pop	{r1, r2, r4, pc}
    93dc:	20000fc3 	.word	0x20000fc3
    93e0:	00006d79 	.word	0x00006d79

000093e4 <UpdateReceiveDelays>:
    93e4:	23fa      	movs	r3, #250	; 0xfa
    93e6:	b570      	push	{r4, r5, r6, lr}
    93e8:	009b      	lsls	r3, r3, #2
    93ea:	4c0b      	ldr	r4, [pc, #44]	; (9418 <UpdateReceiveDelays+0x34>)
    93ec:	2800      	cmp	r0, #0
    93ee:	d000      	beq.n	93f2 <UpdateReceiveDelays+0xe>
    93f0:	4343      	muls	r3, r0
    93f2:	0022      	movs	r2, r4
    93f4:	4d09      	ldr	r5, [pc, #36]	; (941c <UpdateReceiveDelays+0x38>)
    93f6:	329c      	adds	r2, #156	; 0x9c
    93f8:	210c      	movs	r1, #12
    93fa:	2000      	movs	r0, #0
    93fc:	8013      	strh	r3, [r2, #0]
    93fe:	47a8      	blx	r5
    9400:	0023      	movs	r3, r4
    9402:	22fa      	movs	r2, #250	; 0xfa
    9404:	339c      	adds	r3, #156	; 0x9c
    9406:	881b      	ldrh	r3, [r3, #0]
    9408:	0092      	lsls	r2, r2, #2
    940a:	189b      	adds	r3, r3, r2
    940c:	349e      	adds	r4, #158	; 0x9e
    940e:	210d      	movs	r1, #13
    9410:	2000      	movs	r0, #0
    9412:	8023      	strh	r3, [r4, #0]
    9414:	47a8      	blx	r5
    9416:	bd70      	pop	{r4, r5, r6, pc}
    9418:	20000f10 	.word	0x20000f10
    941c:	00001e65 	.word	0x00001e65

00009420 <IncludeMacCommandsResponse>:
    9420:	b5f0      	push	{r4, r5, r6, r7, lr}
    9422:	0005      	movs	r5, r0
    9424:	2600      	movs	r6, #0
    9426:	b087      	sub	sp, #28
    9428:	880c      	ldrh	r4, [r1, #0]
    942a:	9101      	str	r1, [sp, #4]
    942c:	9203      	str	r2, [sp, #12]
    942e:	4a67      	ldr	r2, [pc, #412]	; (95cc <IncludeMacCommandsResponse+0x1ac>)
    9430:	0013      	movs	r3, r2
    9432:	33ac      	adds	r3, #172	; 0xac
    9434:	781b      	ldrb	r3, [r3, #0]
    9436:	42b3      	cmp	r3, r6
    9438:	d913      	bls.n	9462 <IncludeMacCommandsResponse+0x42>
    943a:	9b03      	ldr	r3, [sp, #12]
    943c:	2b00      	cmp	r3, #0
    943e:	d019      	beq.n	9474 <IncludeMacCommandsResponse+0x54>
    9440:	2303      	movs	r3, #3
    9442:	4373      	muls	r3, r6
    9444:	18d3      	adds	r3, r2, r3
    9446:	3366      	adds	r3, #102	; 0x66
    9448:	7818      	ldrb	r0, [r3, #0]
    944a:	28ff      	cmp	r0, #255	; 0xff
    944c:	d012      	beq.n	9474 <IncludeMacCommandsResponse+0x54>
    944e:	9b01      	ldr	r3, [sp, #4]
    9450:	8819      	ldrh	r1, [r3, #0]
    9452:	4b5f      	ldr	r3, [pc, #380]	; (95d0 <IncludeMacCommandsResponse+0x1b0>)
    9454:	1a61      	subs	r1, r4, r1
    9456:	181b      	adds	r3, r3, r0
    9458:	3b02      	subs	r3, #2
    945a:	781b      	ldrb	r3, [r3, #0]
    945c:	18cb      	adds	r3, r1, r3
    945e:	2b0f      	cmp	r3, #15
    9460:	dd08      	ble.n	9474 <IncludeMacCommandsResponse+0x54>
    9462:	2207      	movs	r2, #7
    9464:	2100      	movs	r1, #0
    9466:	4b5b      	ldr	r3, [pc, #364]	; (95d4 <IncludeMacCommandsResponse+0x1b4>)
    9468:	485b      	ldr	r0, [pc, #364]	; (95d8 <IncludeMacCommandsResponse+0x1b8>)
    946a:	4798      	blx	r3
    946c:	9b01      	ldr	r3, [sp, #4]
    946e:	801c      	strh	r4, [r3, #0]
    9470:	b007      	add	sp, #28
    9472:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9474:	2303      	movs	r3, #3
    9476:	4373      	muls	r3, r6
    9478:	18d3      	adds	r3, r2, r3
    947a:	3366      	adds	r3, #102	; 0x66
    947c:	7819      	ldrb	r1, [r3, #0]
    947e:	1e88      	subs	r0, r1, #2
    9480:	2808      	cmp	r0, #8
    9482:	d862      	bhi.n	954a <IncludeMacCommandsResponse+0x12a>
    9484:	1c63      	adds	r3, r4, #1
    9486:	f005 fd2d 	bl	eee4 <__gnu_thumb1_case_uqi>
    948a:	0594      	.short	0x0594
    948c:	6646269e 	.word	0x6646269e
    9490:	7b9e      	.short	0x7b9e
    9492:	7f          	.byte	0x7f
    9493:	00          	.byte	0x00
    9494:	2203      	movs	r2, #3
    9496:	2024      	movs	r0, #36	; 0x24
    9498:	552a      	strb	r2, [r5, r4]
    949a:	2200      	movs	r2, #0
    949c:	b29b      	uxth	r3, r3
    949e:	18eb      	adds	r3, r5, r3
    94a0:	4f4a      	ldr	r7, [pc, #296]	; (95cc <IncludeMacCommandsResponse+0x1ac>)
    94a2:	701a      	strb	r2, [r3, #0]
    94a4:	30ff      	adds	r0, #255	; 0xff
    94a6:	5c39      	ldrb	r1, [r7, r0]
    94a8:	3201      	adds	r2, #1
    94aa:	4011      	ands	r1, r2
    94ac:	466a      	mov	r2, sp
    94ae:	9102      	str	r1, [sp, #8]
    94b0:	7a12      	ldrb	r2, [r2, #8]
    94b2:	701a      	strb	r2, [r3, #0]
    94b4:	5c3a      	ldrb	r2, [r7, r0]
    94b6:	4694      	mov	ip, r2
    94b8:	2202      	movs	r2, #2
    94ba:	4661      	mov	r1, ip
    94bc:	4211      	tst	r1, r2
    94be:	d002      	beq.n	94c6 <IncludeMacCommandsResponse+0xa6>
    94c0:	9902      	ldr	r1, [sp, #8]
    94c2:	430a      	orrs	r2, r1
    94c4:	701a      	strb	r2, [r3, #0]
    94c6:	2204      	movs	r2, #4
    94c8:	5c39      	ldrb	r1, [r7, r0]
    94ca:	4211      	tst	r1, r2
    94cc:	d06e      	beq.n	95ac <IncludeMacCommandsResponse+0x18c>
    94ce:	7819      	ldrb	r1, [r3, #0]
    94d0:	430a      	orrs	r2, r1
    94d2:	701a      	strb	r2, [r3, #0]
    94d4:	e06a      	b.n	95ac <IncludeMacCommandsResponse+0x18c>
    94d6:	2205      	movs	r2, #5
    94d8:	2103      	movs	r1, #3
    94da:	552a      	strb	r2, [r5, r4]
    94dc:	2200      	movs	r2, #0
    94de:	b29b      	uxth	r3, r3
    94e0:	4371      	muls	r1, r6
    94e2:	18eb      	adds	r3, r5, r3
    94e4:	701a      	strb	r2, [r3, #0]
    94e6:	4a39      	ldr	r2, [pc, #228]	; (95cc <IncludeMacCommandsResponse+0x1ac>)
    94e8:	1851      	adds	r1, r2, r1
    94ea:	3160      	adds	r1, #96	; 0x60
    94ec:	79c8      	ldrb	r0, [r1, #7]
    94ee:	0700      	lsls	r0, r0, #28
    94f0:	0fc0      	lsrs	r0, r0, #31
    94f2:	7018      	strb	r0, [r3, #0]
    94f4:	79c9      	ldrb	r1, [r1, #7]
    94f6:	b2c7      	uxtb	r7, r0
    94f8:	06c9      	lsls	r1, r1, #27
    94fa:	d502      	bpl.n	9502 <IncludeMacCommandsResponse+0xe2>
    94fc:	2102      	movs	r1, #2
    94fe:	4339      	orrs	r1, r7
    9500:	7019      	strb	r1, [r3, #0]
    9502:	2103      	movs	r1, #3
    9504:	4371      	muls	r1, r6
    9506:	1852      	adds	r2, r2, r1
    9508:	3260      	adds	r2, #96	; 0x60
    950a:	79d2      	ldrb	r2, [r2, #7]
    950c:	0692      	lsls	r2, r2, #26
    950e:	d54d      	bpl.n	95ac <IncludeMacCommandsResponse+0x18c>
    9510:	7819      	ldrb	r1, [r3, #0]
    9512:	2204      	movs	r2, #4
    9514:	e7dc      	b.n	94d0 <IncludeMacCommandsResponse+0xb0>
    9516:	ab04      	add	r3, sp, #16
    9518:	1ddf      	adds	r7, r3, #7
    951a:	0039      	movs	r1, r7
    951c:	4b2f      	ldr	r3, [pc, #188]	; (95dc <IncludeMacCommandsResponse+0x1bc>)
    951e:	200e      	movs	r0, #14
    9520:	4798      	blx	r3
    9522:	2306      	movs	r3, #6
    9524:	4a29      	ldr	r2, [pc, #164]	; (95cc <IncludeMacCommandsResponse+0x1ac>)
    9526:	552b      	strb	r3, [r5, r4]
    9528:	32b4      	adds	r2, #180	; 0xb4
    952a:	7811      	ldrb	r1, [r2, #0]
    952c:	1c62      	adds	r2, r4, #1
    952e:	b292      	uxth	r2, r2
    9530:	54a9      	strb	r1, [r5, r2]
    9532:	783a      	ldrb	r2, [r7, #0]
    9534:	1ca3      	adds	r3, r4, #2
    9536:	0011      	movs	r1, r2
    9538:	3120      	adds	r1, #32
    953a:	3403      	adds	r4, #3
    953c:	b2c9      	uxtb	r1, r1
    953e:	b29b      	uxth	r3, r3
    9540:	b2a4      	uxth	r4, r4
    9542:	293f      	cmp	r1, #63	; 0x3f
    9544:	d904      	bls.n	9550 <IncludeMacCommandsResponse+0x130>
    9546:	2220      	movs	r2, #32
    9548:	54ea      	strb	r2, [r5, r3]
    954a:	3601      	adds	r6, #1
    954c:	b2f6      	uxtb	r6, r6
    954e:	e76e      	b.n	942e <IncludeMacCommandsResponse+0xe>
    9550:	213f      	movs	r1, #63	; 0x3f
    9552:	400a      	ands	r2, r1
    9554:	e7f8      	b.n	9548 <IncludeMacCommandsResponse+0x128>
    9556:	2207      	movs	r2, #7
    9558:	2103      	movs	r1, #3
    955a:	552a      	strb	r2, [r5, r4]
    955c:	2200      	movs	r2, #0
    955e:	4371      	muls	r1, r6
    9560:	b29b      	uxth	r3, r3
    9562:	18eb      	adds	r3, r5, r3
    9564:	701a      	strb	r2, [r3, #0]
    9566:	4a19      	ldr	r2, [pc, #100]	; (95cc <IncludeMacCommandsResponse+0x1ac>)
    9568:	1852      	adds	r2, r2, r1
    956a:	3260      	adds	r2, #96	; 0x60
    956c:	79d1      	ldrb	r1, [r2, #7]
    956e:	09c9      	lsrs	r1, r1, #7
    9570:	7019      	strb	r1, [r3, #0]
    9572:	79d2      	ldrb	r2, [r2, #7]
    9574:	b2c8      	uxtb	r0, r1
    9576:	0652      	lsls	r2, r2, #25
    9578:	d518      	bpl.n	95ac <IncludeMacCommandsResponse+0x18c>
    957a:	2202      	movs	r2, #2
    957c:	4302      	orrs	r2, r0
    957e:	e7a8      	b.n	94d2 <IncludeMacCommandsResponse+0xb2>
    9580:	2209      	movs	r2, #9
    9582:	552a      	strb	r2, [r5, r4]
    9584:	b29c      	uxth	r4, r3
    9586:	e7e0      	b.n	954a <IncludeMacCommandsResponse+0x12a>
    9588:	220a      	movs	r2, #10
    958a:	2103      	movs	r1, #3
    958c:	552a      	strb	r2, [r5, r4]
    958e:	2200      	movs	r2, #0
    9590:	4371      	muls	r1, r6
    9592:	b29b      	uxth	r3, r3
    9594:	18eb      	adds	r3, r5, r3
    9596:	701a      	strb	r2, [r3, #0]
    9598:	4a0c      	ldr	r2, [pc, #48]	; (95cc <IncludeMacCommandsResponse+0x1ac>)
    959a:	1852      	adds	r2, r2, r1
    959c:	3260      	adds	r2, #96	; 0x60
    959e:	79d1      	ldrb	r1, [r2, #7]
    95a0:	09c9      	lsrs	r1, r1, #7
    95a2:	7019      	strb	r1, [r3, #0]
    95a4:	7a12      	ldrb	r2, [r2, #8]
    95a6:	b2c8      	uxtb	r0, r1
    95a8:	07d2      	lsls	r2, r2, #31
    95aa:	d4e6      	bmi.n	957a <IncludeMacCommandsResponse+0x15a>
    95ac:	3402      	adds	r4, #2
    95ae:	b2a4      	uxth	r4, r4
    95b0:	e7cb      	b.n	954a <IncludeMacCommandsResponse+0x12a>
    95b2:	0013      	movs	r3, r2
    95b4:	21ff      	movs	r1, #255	; 0xff
    95b6:	33b1      	adds	r3, #177	; 0xb1
    95b8:	7019      	strb	r1, [r3, #0]
    95ba:	2300      	movs	r3, #0
    95bc:	32b2      	adds	r2, #178	; 0xb2
    95be:	7013      	strb	r3, [r2, #0]
    95c0:	1c63      	adds	r3, r4, #1
    95c2:	2202      	movs	r2, #2
    95c4:	e7dd      	b.n	9582 <IncludeMacCommandsResponse+0x162>
    95c6:	5529      	strb	r1, [r5, r4]
    95c8:	e7dc      	b.n	9584 <IncludeMacCommandsResponse+0x164>
    95ca:	46c0      	nop			; (mov r8, r8)
    95cc:	20000f10 	.word	0x20000f10
    95d0:	00012ecc 	.word	0x00012ecc
    95d4:	000112e7 	.word	0x000112e7
    95d8:	20001033 	.word	0x20001033
    95dc:	0000d4ad 	.word	0x0000d4ad

000095e0 <UpdateJoinSuccessState>:
    95e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    95e2:	4c22      	ldr	r4, [pc, #136]	; (966c <UpdateJoinSuccessState+0x8c>)
    95e4:	2104      	movs	r1, #4
    95e6:	0022      	movs	r2, r4
    95e8:	0026      	movs	r6, r4
    95ea:	2701      	movs	r7, #1
    95ec:	2500      	movs	r5, #0
    95ee:	3260      	adds	r2, #96	; 0x60
    95f0:	7813      	ldrb	r3, [r2, #0]
    95f2:	3650      	adds	r6, #80	; 0x50
    95f4:	438b      	bics	r3, r1
    95f6:	7013      	strb	r3, [r2, #0]
    95f8:	7833      	ldrb	r3, [r6, #0]
    95fa:	3107      	adds	r1, #7
    95fc:	433b      	orrs	r3, r7
    95fe:	7033      	strb	r3, [r6, #0]
    9600:	0038      	movs	r0, r7
    9602:	4b1b      	ldr	r3, [pc, #108]	; (9670 <UpdateJoinSuccessState+0x90>)
    9604:	4798      	blx	r3
    9606:	2116      	movs	r1, #22
    9608:	4b19      	ldr	r3, [pc, #100]	; (9670 <UpdateJoinSuccessState+0x90>)
    960a:	0028      	movs	r0, r5
    960c:	6565      	str	r5, [r4, #84]	; 0x54
    960e:	4798      	blx	r3
    9610:	4b17      	ldr	r3, [pc, #92]	; (9670 <UpdateJoinSuccessState+0x90>)
    9612:	210a      	movs	r1, #10
    9614:	0038      	movs	r0, r7
    9616:	65a5      	str	r5, [r4, #88]	; 0x58
    9618:	4798      	blx	r3
    961a:	0023      	movs	r3, r4
    961c:	3396      	adds	r3, #150	; 0x96
    961e:	801d      	strh	r5, [r3, #0]
    9620:	0023      	movs	r3, r4
    9622:	220e      	movs	r2, #14
    9624:	33c1      	adds	r3, #193	; 0xc1
    9626:	701d      	strb	r5, [r3, #0]
    9628:	7833      	ldrb	r3, [r6, #0]
    962a:	4393      	bics	r3, r2
    962c:	7033      	strb	r3, [r6, #0]
    962e:	0023      	movs	r3, r4
    9630:	3351      	adds	r3, #81	; 0x51
    9632:	781b      	ldrb	r3, [r3, #0]
    9634:	079b      	lsls	r3, r3, #30
    9636:	d50a      	bpl.n	964e <UpdateJoinSuccessState+0x6e>
    9638:	21fa      	movs	r1, #250	; 0xfa
    963a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    963c:	0089      	lsls	r1, r1, #2
    963e:	34bb      	adds	r4, #187	; 0xbb
    9640:	7820      	ldrb	r0, [r4, #0]
    9642:	4359      	muls	r1, r3
    9644:	9500      	str	r5, [sp, #0]
    9646:	4b0b      	ldr	r3, [pc, #44]	; (9674 <UpdateJoinSuccessState+0x94>)
    9648:	002a      	movs	r2, r5
    964a:	4c0b      	ldr	r4, [pc, #44]	; (9678 <UpdateJoinSuccessState+0x98>)
    964c:	47a0      	blx	r4
    964e:	490b      	ldr	r1, [pc, #44]	; (967c <UpdateJoinSuccessState+0x9c>)
    9650:	794a      	ldrb	r2, [r1, #5]
    9652:	790b      	ldrb	r3, [r1, #4]
    9654:	0212      	lsls	r2, r2, #8
    9656:	431a      	orrs	r2, r3
    9658:	798b      	ldrb	r3, [r1, #6]
    965a:	041b      	lsls	r3, r3, #16
    965c:	431a      	orrs	r2, r3
    965e:	79cb      	ldrb	r3, [r1, #7]
    9660:	061b      	lsls	r3, r3, #24
    9662:	4313      	orrs	r3, r2
    9664:	d001      	beq.n	966a <UpdateJoinSuccessState+0x8a>
    9666:	2001      	movs	r0, #1
    9668:	4798      	blx	r3
    966a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    966c:	20000f10 	.word	0x20000f10
    9670:	00001e65 	.word	0x00001e65
    9674:	0000977d 	.word	0x0000977d
    9678:	000018f1 	.word	0x000018f1
    967c:	20001150 	.word	0x20001150

00009680 <PrepareSessionKeys>:
    9680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9682:	0004      	movs	r4, r0
    9684:	2603      	movs	r6, #3
    9686:	000d      	movs	r5, r1
    9688:	0017      	movs	r7, r2
    968a:	4b09      	ldr	r3, [pc, #36]	; (96b0 <PrepareSessionKeys+0x30>)
    968c:	2210      	movs	r2, #16
    968e:	2100      	movs	r1, #0
    9690:	4798      	blx	r3
    9692:	0032      	movs	r2, r6
    9694:	0029      	movs	r1, r5
    9696:	1c60      	adds	r0, r4, #1
    9698:	4d06      	ldr	r5, [pc, #24]	; (96b4 <PrepareSessionKeys+0x34>)
    969a:	47a8      	blx	r5
    969c:	0032      	movs	r2, r6
    969e:	0039      	movs	r1, r7
    96a0:	1d20      	adds	r0, r4, #4
    96a2:	47a8      	blx	r5
    96a4:	1de0      	adds	r0, r4, #7
    96a6:	2202      	movs	r2, #2
    96a8:	4903      	ldr	r1, [pc, #12]	; (96b8 <PrepareSessionKeys+0x38>)
    96aa:	47a8      	blx	r5
    96ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    96ae:	46c0      	nop			; (mov r8, r8)
    96b0:	000112e7 	.word	0x000112e7
    96b4:	000112d5 	.word	0x000112d5
    96b8:	20000fa8 	.word	0x20000fa8

000096bc <AssembleEncryptionBlock>:
    96bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    96be:	001e      	movs	r6, r3
    96c0:	4c0b      	ldr	r4, [pc, #44]	; (96f0 <AssembleEncryptionBlock+0x34>)
    96c2:	0017      	movs	r7, r2
    96c4:	4b0b      	ldr	r3, [pc, #44]	; (96f4 <AssembleEncryptionBlock+0x38>)
    96c6:	0005      	movs	r5, r0
    96c8:	9101      	str	r1, [sp, #4]
    96ca:	2210      	movs	r2, #16
    96cc:	2100      	movs	r1, #0
    96ce:	0020      	movs	r0, r4
    96d0:	4798      	blx	r3
    96d2:	7026      	strb	r6, [r4, #0]
    96d4:	2604      	movs	r6, #4
    96d6:	7165      	strb	r5, [r4, #5]
    96d8:	0032      	movs	r2, r6
    96da:	4d07      	ldr	r5, [pc, #28]	; (96f8 <AssembleEncryptionBlock+0x3c>)
    96dc:	a908      	add	r1, sp, #32
    96de:	1da0      	adds	r0, r4, #6
    96e0:	47a8      	blx	r5
    96e2:	0020      	movs	r0, r4
    96e4:	0032      	movs	r2, r6
    96e6:	a901      	add	r1, sp, #4
    96e8:	300a      	adds	r0, #10
    96ea:	47a8      	blx	r5
    96ec:	73e7      	strb	r7, [r4, #15]
    96ee:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    96f0:	2000057c 	.word	0x2000057c
    96f4:	000112e7 	.word	0x000112e7
    96f8:	000112d5 	.word	0x000112d5

000096fc <ConfigureRadio>:
    96fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    96fe:	0001      	movs	r1, r0
    9700:	0005      	movs	r5, r0
    9702:	4c11      	ldr	r4, [pc, #68]	; (9748 <ConfigureRadio+0x4c>)
    9704:	3109      	adds	r1, #9
    9706:	2009      	movs	r0, #9
    9708:	47a0      	blx	r4
    970a:	0029      	movs	r1, r5
    970c:	2001      	movs	r0, #1
    970e:	47a0      	blx	r4
    9710:	1d29      	adds	r1, r5, #4
    9712:	200a      	movs	r0, #10
    9714:	47a0      	blx	r4
    9716:	7a6b      	ldrb	r3, [r5, #9]
    9718:	2b01      	cmp	r3, #1
    971a:	d10b      	bne.n	9734 <ConfigureRadio+0x38>
    971c:	0029      	movs	r1, r5
    971e:	2016      	movs	r0, #22
    9720:	310b      	adds	r1, #11
    9722:	47a0      	blx	r4
    9724:	0029      	movs	r1, r5
    9726:	2007      	movs	r0, #7
    9728:	310a      	adds	r1, #10
    972a:	47a0      	blx	r4
    972c:	2000      	movs	r0, #0
    972e:	4907      	ldr	r1, [pc, #28]	; (974c <ConfigureRadio+0x50>)
    9730:	47a0      	blx	r4
    9732:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    9734:	466b      	mov	r3, sp
    9736:	1dd9      	adds	r1, r3, #7
    9738:	2303      	movs	r3, #3
    973a:	2013      	movs	r0, #19
    973c:	700b      	strb	r3, [r1, #0]
    973e:	47a0      	blx	r4
    9740:	4903      	ldr	r1, [pc, #12]	; (9750 <ConfigureRadio+0x54>)
    9742:	2012      	movs	r0, #18
    9744:	e7f4      	b.n	9730 <ConfigureRadio+0x34>
    9746:	46c0      	nop			; (mov r8, r8)
    9748:	0000d599 	.word	0x0000d599
    974c:	20000fdb 	.word	0x20000fdb
    9750:	00012ec9 	.word	0x00012ec9

00009754 <LorawanLinkCheckCallback.part.1>:
    9754:	b513      	push	{r0, r1, r4, lr}
    9756:	21fa      	movs	r1, #250	; 0xfa
    9758:	4b05      	ldr	r3, [pc, #20]	; (9770 <LorawanLinkCheckCallback.part.1+0x1c>)
    975a:	0089      	lsls	r1, r1, #2
    975c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    975e:	33bb      	adds	r3, #187	; 0xbb
    9760:	4351      	muls	r1, r2
    9762:	2200      	movs	r2, #0
    9764:	7818      	ldrb	r0, [r3, #0]
    9766:	4c03      	ldr	r4, [pc, #12]	; (9774 <LorawanLinkCheckCallback.part.1+0x20>)
    9768:	9200      	str	r2, [sp, #0]
    976a:	4b03      	ldr	r3, [pc, #12]	; (9778 <LorawanLinkCheckCallback.part.1+0x24>)
    976c:	47a0      	blx	r4
    976e:	bd13      	pop	{r0, r1, r4, pc}
    9770:	20000f10 	.word	0x20000f10
    9774:	000018f1 	.word	0x000018f1
    9778:	0000977d 	.word	0x0000977d

0000977c <LorawanLinkCheckCallback>:
    977c:	4b17      	ldr	r3, [pc, #92]	; (97dc <LorawanLinkCheckCallback+0x60>)
    977e:	20a0      	movs	r0, #160	; 0xa0
    9780:	001a      	movs	r2, r3
    9782:	2180      	movs	r1, #128	; 0x80
    9784:	b510      	push	{r4, lr}
    9786:	3250      	adds	r2, #80	; 0x50
    9788:	8812      	ldrh	r2, [r2, #0]
    978a:	0080      	lsls	r0, r0, #2
    978c:	0089      	lsls	r1, r1, #2
    978e:	4002      	ands	r2, r0
    9790:	428a      	cmp	r2, r1
    9792:	d11c      	bne.n	97ce <LorawanLinkCheckCallback+0x52>
    9794:	001a      	movs	r2, r3
    9796:	32ac      	adds	r2, #172	; 0xac
    9798:	7810      	ldrb	r0, [r2, #0]
    979a:	2403      	movs	r4, #3
    979c:	2200      	movs	r2, #0
    979e:	b2d1      	uxtb	r1, r2
    97a0:	4281      	cmp	r1, r0
    97a2:	d30d      	bcc.n	97c0 <LorawanLinkCheckCallback+0x44>
    97a4:	d113      	bne.n	97ce <LorawanLinkCheckCallback+0x52>
    97a6:	2203      	movs	r2, #3
    97a8:	434a      	muls	r2, r1
    97aa:	2102      	movs	r1, #2
    97ac:	189a      	adds	r2, r3, r2
    97ae:	3266      	adds	r2, #102	; 0x66
    97b0:	7011      	strb	r1, [r2, #0]
    97b2:	280f      	cmp	r0, #15
    97b4:	d80b      	bhi.n	97ce <LorawanLinkCheckCallback+0x52>
    97b6:	001a      	movs	r2, r3
    97b8:	3001      	adds	r0, #1
    97ba:	32ac      	adds	r2, #172	; 0xac
    97bc:	7010      	strb	r0, [r2, #0]
    97be:	e006      	b.n	97ce <LorawanLinkCheckCallback+0x52>
    97c0:	0021      	movs	r1, r4
    97c2:	3201      	adds	r2, #1
    97c4:	4351      	muls	r1, r2
    97c6:	3163      	adds	r1, #99	; 0x63
    97c8:	5c59      	ldrb	r1, [r3, r1]
    97ca:	2902      	cmp	r1, #2
    97cc:	d1e7      	bne.n	979e <LorawanLinkCheckCallback+0x22>
    97ce:	3351      	adds	r3, #81	; 0x51
    97d0:	781b      	ldrb	r3, [r3, #0]
    97d2:	079b      	lsls	r3, r3, #30
    97d4:	d501      	bpl.n	97da <LorawanLinkCheckCallback+0x5e>
    97d6:	4b02      	ldr	r3, [pc, #8]	; (97e0 <LorawanLinkCheckCallback+0x64>)
    97d8:	4798      	blx	r3
    97da:	bd10      	pop	{r4, pc}
    97dc:	20000f10 	.word	0x20000f10
    97e0:	00009755 	.word	0x00009755

000097e4 <LORAWAN_Init>:
    97e4:	2270      	movs	r2, #112	; 0x70
    97e6:	b5f0      	push	{r4, r5, r6, r7, lr}
    97e8:	4b3e      	ldr	r3, [pc, #248]	; (98e4 <LORAWAN_Init+0x100>)
    97ea:	b087      	sub	sp, #28
    97ec:	781b      	ldrb	r3, [r3, #0]
    97ee:	0005      	movs	r5, r0
    97f0:	011b      	lsls	r3, r3, #4
    97f2:	4013      	ands	r3, r2
    97f4:	4a3c      	ldr	r2, [pc, #240]	; (98e8 <LORAWAN_Init+0x104>)
    97f6:	000e      	movs	r6, r1
    97f8:	7812      	ldrb	r2, [r2, #0]
    97fa:	0912      	lsrs	r2, r2, #4
    97fc:	4313      	orrs	r3, r2
    97fe:	2b1f      	cmp	r3, #31
    9800:	d000      	beq.n	9804 <LORAWAN_Init+0x20>
    9802:	e7fe      	b.n	9802 <LORAWAN_Init+0x1e>
    9804:	4f39      	ldr	r7, [pc, #228]	; (98ec <LORAWAN_Init+0x108>)
    9806:	003b      	movs	r3, r7
    9808:	33c3      	adds	r3, #195	; 0xc3
    980a:	781b      	ldrb	r3, [r3, #0]
    980c:	2b00      	cmp	r3, #0
    980e:	d166      	bne.n	98de <LORAWAN_Init+0xfa>
    9810:	4837      	ldr	r0, [pc, #220]	; (98f0 <LORAWAN_Init+0x10c>)
    9812:	4c38      	ldr	r4, [pc, #224]	; (98f4 <LORAWAN_Init+0x110>)
    9814:	47a0      	blx	r4
    9816:	2808      	cmp	r0, #8
    9818:	d034      	beq.n	9884 <LORAWAN_Init+0xa0>
    981a:	4b37      	ldr	r3, [pc, #220]	; (98f8 <LORAWAN_Init+0x114>)
    981c:	4798      	blx	r3
    981e:	37c3      	adds	r7, #195	; 0xc3
    9820:	783b      	ldrb	r3, [r7, #0]
    9822:	2b00      	cmp	r3, #0
    9824:	d018      	beq.n	9858 <LORAWAN_Init+0x74>
    9826:	4b35      	ldr	r3, [pc, #212]	; (98fc <LORAWAN_Init+0x118>)
    9828:	0a2a      	lsrs	r2, r5, #8
    982a:	705a      	strb	r2, [r3, #1]
    982c:	0c2a      	lsrs	r2, r5, #16
    982e:	709a      	strb	r2, [r3, #2]
    9830:	0a32      	lsrs	r2, r6, #8
    9832:	701d      	strb	r5, [r3, #0]
    9834:	711e      	strb	r6, [r3, #4]
    9836:	715a      	strb	r2, [r3, #5]
    9838:	0e2d      	lsrs	r5, r5, #24
    983a:	0c32      	lsrs	r2, r6, #16
    983c:	0e36      	lsrs	r6, r6, #24
    983e:	719a      	strb	r2, [r3, #6]
    9840:	70dd      	strb	r5, [r3, #3]
    9842:	71de      	strb	r6, [r3, #7]
    9844:	4b2e      	ldr	r3, [pc, #184]	; (9900 <LORAWAN_Init+0x11c>)
    9846:	4798      	blx	r3
    9848:	492e      	ldr	r1, [pc, #184]	; (9904 <LORAWAN_Init+0x120>)
    984a:	4b2f      	ldr	r3, [pc, #188]	; (9908 <LORAWAN_Init+0x124>)
    984c:	201a      	movs	r0, #26
    984e:	4798      	blx	r3
    9850:	4b2e      	ldr	r3, [pc, #184]	; (990c <LORAWAN_Init+0x128>)
    9852:	4798      	blx	r3
    9854:	4b2e      	ldr	r3, [pc, #184]	; (9910 <LORAWAN_Init+0x12c>)
    9856:	4798      	blx	r3
    9858:	2317      	movs	r3, #23
    985a:	ac02      	add	r4, sp, #8
    985c:	7123      	strb	r3, [r4, #4]
    985e:	4b2d      	ldr	r3, [pc, #180]	; (9914 <LORAWAN_Init+0x130>)
    9860:	9a03      	ldr	r2, [sp, #12]
    9862:	9300      	str	r3, [sp, #0]
    9864:	4d2c      	ldr	r5, [pc, #176]	; (9918 <LORAWAN_Init+0x134>)
    9866:	492d      	ldr	r1, [pc, #180]	; (991c <LORAWAN_Init+0x138>)
    9868:	4b2d      	ldr	r3, [pc, #180]	; (9920 <LORAWAN_Init+0x13c>)
    986a:	2000      	movs	r0, #0
    986c:	47a8      	blx	r5
    986e:	230d      	movs	r3, #13
    9870:	7123      	strb	r3, [r4, #4]
    9872:	4b2c      	ldr	r3, [pc, #176]	; (9924 <LORAWAN_Init+0x140>)
    9874:	492c      	ldr	r1, [pc, #176]	; (9928 <LORAWAN_Init+0x144>)
    9876:	9300      	str	r3, [sp, #0]
    9878:	6862      	ldr	r2, [r4, #4]
    987a:	4b2c      	ldr	r3, [pc, #176]	; (992c <LORAWAN_Init+0x148>)
    987c:	2001      	movs	r0, #1
    987e:	47a8      	blx	r5
    9880:	b007      	add	sp, #28
    9882:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9884:	482a      	ldr	r0, [pc, #168]	; (9930 <LORAWAN_Init+0x14c>)
    9886:	47a0      	blx	r4
    9888:	2808      	cmp	r0, #8
    988a:	d1c6      	bne.n	981a <LORAWAN_Init+0x36>
    988c:	4829      	ldr	r0, [pc, #164]	; (9934 <LORAWAN_Init+0x150>)
    988e:	47a0      	blx	r4
    9890:	2808      	cmp	r0, #8
    9892:	d1c2      	bne.n	981a <LORAWAN_Init+0x36>
    9894:	4828      	ldr	r0, [pc, #160]	; (9938 <LORAWAN_Init+0x154>)
    9896:	47a0      	blx	r4
    9898:	2808      	cmp	r0, #8
    989a:	d1be      	bne.n	981a <LORAWAN_Init+0x36>
    989c:	4827      	ldr	r0, [pc, #156]	; (993c <LORAWAN_Init+0x158>)
    989e:	47a0      	blx	r4
    98a0:	2808      	cmp	r0, #8
    98a2:	d1ba      	bne.n	981a <LORAWAN_Init+0x36>
    98a4:	4826      	ldr	r0, [pc, #152]	; (9940 <LORAWAN_Init+0x15c>)
    98a6:	47a0      	blx	r4
    98a8:	2808      	cmp	r0, #8
    98aa:	d1b6      	bne.n	981a <LORAWAN_Init+0x36>
    98ac:	4825      	ldr	r0, [pc, #148]	; (9944 <LORAWAN_Init+0x160>)
    98ae:	47a0      	blx	r4
    98b0:	2808      	cmp	r0, #8
    98b2:	d1b2      	bne.n	981a <LORAWAN_Init+0x36>
    98b4:	4824      	ldr	r0, [pc, #144]	; (9948 <LORAWAN_Init+0x164>)
    98b6:	47a0      	blx	r4
    98b8:	2808      	cmp	r0, #8
    98ba:	d1ae      	bne.n	981a <LORAWAN_Init+0x36>
    98bc:	4823      	ldr	r0, [pc, #140]	; (994c <LORAWAN_Init+0x168>)
    98be:	47a0      	blx	r4
    98c0:	2808      	cmp	r0, #8
    98c2:	d1aa      	bne.n	981a <LORAWAN_Init+0x36>
    98c4:	4822      	ldr	r0, [pc, #136]	; (9950 <LORAWAN_Init+0x16c>)
    98c6:	47a0      	blx	r4
    98c8:	2808      	cmp	r0, #8
    98ca:	d1a6      	bne.n	981a <LORAWAN_Init+0x36>
    98cc:	4821      	ldr	r0, [pc, #132]	; (9954 <LORAWAN_Init+0x170>)
    98ce:	47a0      	blx	r4
    98d0:	2808      	cmp	r0, #8
    98d2:	d1a2      	bne.n	981a <LORAWAN_Init+0x36>
    98d4:	003b      	movs	r3, r7
    98d6:	2201      	movs	r2, #1
    98d8:	33c3      	adds	r3, #195	; 0xc3
    98da:	701a      	strb	r2, [r3, #0]
    98dc:	e79f      	b.n	981e <LORAWAN_Init+0x3a>
    98de:	4b1e      	ldr	r3, [pc, #120]	; (9958 <LORAWAN_Init+0x174>)
    98e0:	4798      	blx	r3
    98e2:	e79c      	b.n	981e <LORAWAN_Init+0x3a>
    98e4:	41003fe8 	.word	0x41003fe8
    98e8:	41003fe4 	.word	0x41003fe4
    98ec:	20000f10 	.word	0x20000f10
    98f0:	20000fc6 	.word	0x20000fc6
    98f4:	000018bd 	.word	0x000018bd
    98f8:	00001801 	.word	0x00001801
    98fc:	20001150 	.word	0x20001150
    9900:	0000d7b5 	.word	0x0000d7b5
    9904:	0000b2a1 	.word	0x0000b2a1
    9908:	0000d599 	.word	0x0000d599
    990c:	0000146d 	.word	0x0000146d
    9910:	00011401 	.word	0x00011401
    9914:	0000d21d 	.word	0x0000d21d
    9918:	00001ec9 	.word	0x00001ec9
    991c:	20000ef9 	.word	0x20000ef9
    9920:	00012ee8 	.word	0x00012ee8
    9924:	0000d235 	.word	0x0000d235
    9928:	20000dec 	.word	0x20000dec
    992c:	00012fa0 	.word	0x00012fa0
    9930:	20000fc7 	.word	0x20000fc7
    9934:	20000fc8 	.word	0x20000fc8
    9938:	20000fc9 	.word	0x20000fc9
    993c:	20000fcb 	.word	0x20000fcb
    9940:	20000fcc 	.word	0x20000fcc
    9944:	20000fca 	.word	0x20000fca
    9948:	20000fcd 	.word	0x20000fcd
    994c:	20000fd6 	.word	0x20000fd6
    9950:	20000fd7 	.word	0x20000fd7
    9954:	20001000 	.word	0x20001000
    9958:	0000935d 	.word	0x0000935d

0000995c <LORAWAN_Send>:
    995c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    995e:	4c36      	ldr	r4, [pc, #216]	; (9a38 <LORAWAN_Send+0xdc>)
    9960:	0006      	movs	r6, r0
    9962:	0023      	movs	r3, r4
    9964:	3350      	adds	r3, #80	; 0x50
    9966:	781b      	ldrb	r3, [r3, #0]
    9968:	250f      	movs	r5, #15
    996a:	b25a      	sxtb	r2, r3
    996c:	2a00      	cmp	r2, #0
    996e:	db0b      	blt.n	9988 <LORAWAN_Send+0x2c>
    9970:	3d03      	subs	r5, #3
    9972:	065a      	lsls	r2, r3, #25
    9974:	d408      	bmi.n	9988 <LORAWAN_Send+0x2c>
    9976:	3d03      	subs	r5, #3
    9978:	07db      	lsls	r3, r3, #31
    997a:	d505      	bpl.n	9988 <LORAWAN_Send+0x2c>
    997c:	2390      	movs	r3, #144	; 0x90
    997e:	005b      	lsls	r3, r3, #1
    9980:	5ce7      	ldrb	r7, [r4, r3]
    9982:	2f00      	cmp	r7, #0
    9984:	d102      	bne.n	998c <LORAWAN_Send+0x30>
    9986:	2511      	movs	r5, #17
    9988:	0028      	movs	r0, r5
    998a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    998c:	2800      	cmp	r0, #0
    998e:	d10d      	bne.n	99ac <LORAWAN_Send+0x50>
    9990:	2700      	movs	r7, #0
    9992:	6d63      	ldr	r3, [r4, #84]	; 0x54
    9994:	3301      	adds	r3, #1
    9996:	d123      	bne.n	99e0 <LORAWAN_Send+0x84>
    9998:	2001      	movs	r0, #1
    999a:	3450      	adds	r4, #80	; 0x50
    999c:	78a3      	ldrb	r3, [r4, #2]
    999e:	210b      	movs	r1, #11
    99a0:	4303      	orrs	r3, r0
    99a2:	70a3      	strb	r3, [r4, #2]
    99a4:	4b25      	ldr	r3, [pc, #148]	; (9a3c <LORAWAN_Send+0xe0>)
    99a6:	4798      	blx	r3
    99a8:	250d      	movs	r5, #13
    99aa:	e7ed      	b.n	9988 <LORAWAN_Send+0x2c>
    99ac:	7843      	ldrb	r3, [r0, #1]
    99ae:	7a02      	ldrb	r2, [r0, #8]
    99b0:	3b01      	subs	r3, #1
    99b2:	b2db      	uxtb	r3, r3
    99b4:	9201      	str	r2, [sp, #4]
    99b6:	2bdf      	cmp	r3, #223	; 0xdf
    99b8:	d902      	bls.n	99c0 <LORAWAN_Send+0x64>
    99ba:	250a      	movs	r5, #10
    99bc:	2a00      	cmp	r2, #0
    99be:	d1e3      	bne.n	9988 <LORAWAN_Send+0x2c>
    99c0:	4b1f      	ldr	r3, [pc, #124]	; (9a40 <LORAWAN_Send+0xe4>)
    99c2:	4798      	blx	r3
    99c4:	4684      	mov	ip, r0
    99c6:	9b01      	ldr	r3, [sp, #4]
    99c8:	9000      	str	r0, [sp, #0]
    99ca:	4463      	add	r3, ip
    99cc:	001d      	movs	r5, r3
    99ce:	4b1d      	ldr	r3, [pc, #116]	; (9a44 <LORAWAN_Send+0xe8>)
    99d0:	4798      	blx	r3
    99d2:	4285      	cmp	r5, r0
    99d4:	dddc      	ble.n	9990 <LORAWAN_Send+0x34>
    99d6:	9b00      	ldr	r3, [sp, #0]
    99d8:	250e      	movs	r5, #14
    99da:	2b00      	cmp	r3, #0
    99dc:	d0d4      	beq.n	9988 <LORAWAN_Send+0x2c>
    99de:	e7d8      	b.n	9992 <LORAWAN_Send+0x36>
    99e0:	0023      	movs	r3, r4
    99e2:	33c8      	adds	r3, #200	; 0xc8
    99e4:	781b      	ldrb	r3, [r3, #0]
    99e6:	2b04      	cmp	r3, #4
    99e8:	d01d      	beq.n	9a26 <LORAWAN_Send+0xca>
    99ea:	0023      	movs	r3, r4
    99ec:	33c8      	adds	r3, #200	; 0xc8
    99ee:	781b      	ldrb	r3, [r3, #0]
    99f0:	2b01      	cmp	r3, #1
    99f2:	d105      	bne.n	9a00 <LORAWAN_Send+0xa4>
    99f4:	0023      	movs	r3, r4
    99f6:	3350      	adds	r3, #80	; 0x50
    99f8:	781a      	ldrb	r2, [r3, #0]
    99fa:	230e      	movs	r3, #14
    99fc:	421a      	tst	r2, r3
    99fe:	d1c2      	bne.n	9986 <LORAWAN_Send+0x2a>
    9a00:	0023      	movs	r3, r4
    9a02:	33d0      	adds	r3, #208	; 0xd0
    9a04:	2f00      	cmp	r7, #0
    9a06:	d113      	bne.n	9a30 <LORAWAN_Send+0xd4>
    9a08:	2508      	movs	r5, #8
    9a0a:	601e      	str	r6, [r3, #0]
    9a0c:	2390      	movs	r3, #144	; 0x90
    9a0e:	2200      	movs	r2, #0
    9a10:	005b      	lsls	r3, r3, #1
    9a12:	54e2      	strb	r2, [r4, r3]
    9a14:	2001      	movs	r0, #1
    9a16:	4b0c      	ldr	r3, [pc, #48]	; (9a48 <LORAWAN_Send+0xec>)
    9a18:	4798      	blx	r3
    9a1a:	2320      	movs	r3, #32
    9a1c:	3460      	adds	r4, #96	; 0x60
    9a1e:	7822      	ldrb	r2, [r4, #0]
    9a20:	4313      	orrs	r3, r2
    9a22:	7023      	strb	r3, [r4, #0]
    9a24:	e7b0      	b.n	9988 <LORAWAN_Send+0x2c>
    9a26:	4b09      	ldr	r3, [pc, #36]	; (9a4c <LORAWAN_Send+0xf0>)
    9a28:	4798      	blx	r3
    9a2a:	2808      	cmp	r0, #8
    9a2c:	d1ab      	bne.n	9986 <LORAWAN_Send+0x2a>
    9a2e:	e7dc      	b.n	99ea <LORAWAN_Send+0x8e>
    9a30:	2200      	movs	r2, #0
    9a32:	2511      	movs	r5, #17
    9a34:	601a      	str	r2, [r3, #0]
    9a36:	e7e9      	b.n	9a0c <LORAWAN_Send+0xb0>
    9a38:	20000f10 	.word	0x20000f10
    9a3c:	00001e65 	.word	0x00001e65
    9a40:	0000931d 	.word	0x0000931d
    9a44:	000093c5 	.word	0x000093c5
    9a48:	0000d429 	.word	0x0000d429
    9a4c:	0000ce19 	.word	0x0000ce19

00009a50 <AutomaticReplyCallback>:
    9a50:	b510      	push	{r4, lr}
    9a52:	4c0d      	ldr	r4, [pc, #52]	; (9a88 <AutomaticReplyCallback+0x38>)
    9a54:	0023      	movs	r3, r4
    9a56:	33c8      	adds	r3, #200	; 0xc8
    9a58:	781b      	ldrb	r3, [r3, #0]
    9a5a:	2b01      	cmp	r3, #1
    9a5c:	d10e      	bne.n	9a7c <AutomaticReplyCallback+0x2c>
    9a5e:	0022      	movs	r2, r4
    9a60:	210e      	movs	r1, #14
    9a62:	3250      	adds	r2, #80	; 0x50
    9a64:	7813      	ldrb	r3, [r2, #0]
    9a66:	438b      	bics	r3, r1
    9a68:	7013      	strb	r3, [r2, #0]
    9a6a:	4b08      	ldr	r3, [pc, #32]	; (9a8c <AutomaticReplyCallback+0x3c>)
    9a6c:	2000      	movs	r0, #0
    9a6e:	4798      	blx	r3
    9a70:	2208      	movs	r2, #8
    9a72:	3460      	adds	r4, #96	; 0x60
    9a74:	7823      	ldrb	r3, [r4, #0]
    9a76:	4393      	bics	r3, r2
    9a78:	7023      	strb	r3, [r4, #0]
    9a7a:	bd10      	pop	{r4, pc}
    9a7c:	2b04      	cmp	r3, #4
    9a7e:	d1f4      	bne.n	9a6a <AutomaticReplyCallback+0x1a>
    9a80:	4b03      	ldr	r3, [pc, #12]	; (9a90 <AutomaticReplyCallback+0x40>)
    9a82:	4798      	blx	r3
    9a84:	e7f1      	b.n	9a6a <AutomaticReplyCallback+0x1a>
    9a86:	46c0      	nop			; (mov r8, r8)
    9a88:	20000f10 	.word	0x20000f10
    9a8c:	0000995d 	.word	0x0000995d
    9a90:	0000decd 	.word	0x0000decd

00009a94 <LORAWAN_Pause>:
    9a94:	b510      	push	{r4, lr}
    9a96:	4c2c      	ldr	r4, [pc, #176]	; (9b48 <LORAWAN_Pause+0xb4>)
    9a98:	0023      	movs	r3, r4
    9a9a:	33c8      	adds	r3, #200	; 0xc8
    9a9c:	781b      	ldrb	r3, [r3, #0]
    9a9e:	2b04      	cmp	r3, #4
    9aa0:	d110      	bne.n	9ac4 <LORAWAN_Pause+0x30>
    9aa2:	0023      	movs	r3, r4
    9aa4:	3350      	adds	r3, #80	; 0x50
    9aa6:	781b      	ldrb	r3, [r3, #0]
    9aa8:	07db      	lsls	r3, r3, #31
    9aaa:	d50b      	bpl.n	9ac4 <LORAWAN_Pause+0x30>
    9aac:	4b27      	ldr	r3, [pc, #156]	; (9b4c <LORAWAN_Pause+0xb8>)
    9aae:	4798      	blx	r3
    9ab0:	28c7      	cmp	r0, #199	; 0xc7
    9ab2:	d942      	bls.n	9b3a <LORAWAN_Pause+0xa6>
    9ab4:	2380      	movs	r3, #128	; 0x80
    9ab6:	3450      	adds	r4, #80	; 0x50
    9ab8:	7822      	ldrb	r2, [r4, #0]
    9aba:	425b      	negs	r3, r3
    9abc:	4313      	orrs	r3, r2
    9abe:	3832      	subs	r0, #50	; 0x32
    9ac0:	7023      	strb	r3, [r4, #0]
    9ac2:	bd10      	pop	{r4, pc}
    9ac4:	0023      	movs	r3, r4
    9ac6:	3350      	adds	r3, #80	; 0x50
    9ac8:	7818      	ldrb	r0, [r3, #0]
    9aca:	0700      	lsls	r0, r0, #28
    9acc:	0f40      	lsrs	r0, r0, #29
    9ace:	2806      	cmp	r0, #6
    9ad0:	d833      	bhi.n	9b3a <LORAWAN_Pause+0xa6>
    9ad2:	f005 fa07 	bl	eee4 <__gnu_thumb1_case_uqi>
    9ad6:	322f      	.short	0x322f
    9ad8:	321b3204 	.word	0x321b3204
    9adc:	2c          	.byte	0x2c
    9add:	00          	.byte	0x00
    9ade:	0023      	movs	r3, r4
    9ae0:	3360      	adds	r3, #96	; 0x60
    9ae2:	781b      	ldrb	r3, [r3, #0]
    9ae4:	075b      	lsls	r3, r3, #29
    9ae6:	d509      	bpl.n	9afc <LORAWAN_Pause+0x68>
    9ae8:	0023      	movs	r3, r4
    9aea:	33b6      	adds	r3, #182	; 0xb6
    9aec:	7818      	ldrb	r0, [r3, #0]
    9aee:	4b18      	ldr	r3, [pc, #96]	; (9b50 <LORAWAN_Pause+0xbc>)
    9af0:	4798      	blx	r3
    9af2:	21fa      	movs	r1, #250	; 0xfa
    9af4:	4b17      	ldr	r3, [pc, #92]	; (9b54 <LORAWAN_Pause+0xc0>)
    9af6:	0089      	lsls	r1, r1, #2
    9af8:	4798      	blx	r3
    9afa:	e7d9      	b.n	9ab0 <LORAWAN_Pause+0x1c>
    9afc:	0023      	movs	r3, r4
    9afe:	3350      	adds	r3, #80	; 0x50
    9b00:	781b      	ldrb	r3, [r3, #0]
    9b02:	07db      	lsls	r3, r3, #31
    9b04:	d519      	bpl.n	9b3a <LORAWAN_Pause+0xa6>
    9b06:	0023      	movs	r3, r4
    9b08:	33b8      	adds	r3, #184	; 0xb8
    9b0a:	e7ef      	b.n	9aec <LORAWAN_Pause+0x58>
    9b0c:	0023      	movs	r3, r4
    9b0e:	3360      	adds	r3, #96	; 0x60
    9b10:	7818      	ldrb	r0, [r3, #0]
    9b12:	2304      	movs	r3, #4
    9b14:	4018      	ands	r0, r3
    9b16:	0023      	movs	r3, r4
    9b18:	2800      	cmp	r0, #0
    9b1a:	d001      	beq.n	9b20 <LORAWAN_Pause+0x8c>
    9b1c:	33b7      	adds	r3, #183	; 0xb7
    9b1e:	e7e5      	b.n	9aec <LORAWAN_Pause+0x58>
    9b20:	3350      	adds	r3, #80	; 0x50
    9b22:	781b      	ldrb	r3, [r3, #0]
    9b24:	07db      	lsls	r3, r3, #31
    9b26:	d5e4      	bpl.n	9af2 <LORAWAN_Pause+0x5e>
    9b28:	0023      	movs	r3, r4
    9b2a:	33b9      	adds	r3, #185	; 0xb9
    9b2c:	e7de      	b.n	9aec <LORAWAN_Pause+0x58>
    9b2e:	0023      	movs	r3, r4
    9b30:	33bc      	adds	r3, #188	; 0xbc
    9b32:	e7db      	b.n	9aec <LORAWAN_Pause+0x58>
    9b34:	2001      	movs	r0, #1
    9b36:	4240      	negs	r0, r0
    9b38:	e7bc      	b.n	9ab4 <LORAWAN_Pause+0x20>
    9b3a:	227f      	movs	r2, #127	; 0x7f
    9b3c:	3450      	adds	r4, #80	; 0x50
    9b3e:	7823      	ldrb	r3, [r4, #0]
    9b40:	2000      	movs	r0, #0
    9b42:	4013      	ands	r3, r2
    9b44:	7023      	strb	r3, [r4, #0]
    9b46:	e7bc      	b.n	9ac2 <LORAWAN_Pause+0x2e>
    9b48:	20000f10 	.word	0x20000f10
    9b4c:	0000ce51 	.word	0x0000ce51
    9b50:	00001a9d 	.word	0x00001a9d
    9b54:	0000ef0d 	.word	0x0000ef0d

00009b58 <LorawanLinkCheckConfigure>:
    9b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9b5a:	23fa      	movs	r3, #250	; 0xfa
    9b5c:	4c20      	ldr	r4, [pc, #128]	; (9be0 <LorawanLinkCheckConfigure+0x88>)
    9b5e:	009b      	lsls	r3, r3, #2
    9b60:	0025      	movs	r5, r4
    9b62:	4343      	muls	r3, r0
    9b64:	0006      	movs	r6, r0
    9b66:	2102      	movs	r1, #2
    9b68:	2000      	movs	r0, #0
    9b6a:	4f1e      	ldr	r7, [pc, #120]	; (9be4 <LorawanLinkCheckConfigure+0x8c>)
    9b6c:	65e3      	str	r3, [r4, #92]	; 0x5c
    9b6e:	3550      	adds	r5, #80	; 0x50
    9b70:	47b8      	blx	r7
    9b72:	2e00      	cmp	r6, #0
    9b74:	d127      	bne.n	9bc6 <LorawanLinkCheckConfigure+0x6e>
    9b76:	0023      	movs	r3, r4
    9b78:	33bb      	adds	r3, #187	; 0xbb
    9b7a:	7818      	ldrb	r0, [r3, #0]
    9b7c:	4b1a      	ldr	r3, [pc, #104]	; (9be8 <LorawanLinkCheckConfigure+0x90>)
    9b7e:	4798      	blx	r3
    9b80:	2202      	movs	r2, #2
    9b82:	786b      	ldrb	r3, [r5, #1]
    9b84:	210b      	movs	r1, #11
    9b86:	4393      	bics	r3, r2
    9b88:	706b      	strb	r3, [r5, #1]
    9b8a:	2001      	movs	r0, #1
    9b8c:	47b8      	blx	r7
    9b8e:	0023      	movs	r3, r4
    9b90:	2701      	movs	r7, #1
    9b92:	33ac      	adds	r3, #172	; 0xac
    9b94:	781b      	ldrb	r3, [r3, #0]
    9b96:	0030      	movs	r0, r6
    9b98:	0032      	movs	r2, r6
    9b9a:	36ff      	adds	r6, #255	; 0xff
    9b9c:	429a      	cmp	r2, r3
    9b9e:	d304      	bcc.n	9baa <LorawanLinkCheckConfigure+0x52>
    9ba0:	2800      	cmp	r0, #0
    9ba2:	d001      	beq.n	9ba8 <LorawanLinkCheckConfigure+0x50>
    9ba4:	34ac      	adds	r4, #172	; 0xac
    9ba6:	7023      	strb	r3, [r4, #0]
    9ba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9baa:	2103      	movs	r1, #3
    9bac:	4351      	muls	r1, r2
    9bae:	1861      	adds	r1, r4, r1
    9bb0:	3166      	adds	r1, #102	; 0x66
    9bb2:	780d      	ldrb	r5, [r1, #0]
    9bb4:	2d02      	cmp	r5, #2
    9bb6:	d103      	bne.n	9bc0 <LorawanLinkCheckConfigure+0x68>
    9bb8:	0038      	movs	r0, r7
    9bba:	3b01      	subs	r3, #1
    9bbc:	700e      	strb	r6, [r1, #0]
    9bbe:	b2db      	uxtb	r3, r3
    9bc0:	3201      	adds	r2, #1
    9bc2:	b2d2      	uxtb	r2, r2
    9bc4:	e7ea      	b.n	9b9c <LorawanLinkCheckConfigure+0x44>
    9bc6:	2302      	movs	r3, #2
    9bc8:	786a      	ldrb	r2, [r5, #1]
    9bca:	210b      	movs	r1, #11
    9bcc:	4313      	orrs	r3, r2
    9bce:	706b      	strb	r3, [r5, #1]
    9bd0:	2001      	movs	r0, #1
    9bd2:	47b8      	blx	r7
    9bd4:	782b      	ldrb	r3, [r5, #0]
    9bd6:	07db      	lsls	r3, r3, #31
    9bd8:	d5e6      	bpl.n	9ba8 <LorawanLinkCheckConfigure+0x50>
    9bda:	4b04      	ldr	r3, [pc, #16]	; (9bec <LorawanLinkCheckConfigure+0x94>)
    9bdc:	4798      	blx	r3
    9bde:	e7e3      	b.n	9ba8 <LorawanLinkCheckConfigure+0x50>
    9be0:	20000f10 	.word	0x20000f10
    9be4:	00001e65 	.word	0x00001e65
    9be8:	00001bf5 	.word	0x00001bf5
    9bec:	00009755 	.word	0x00009755

00009bf0 <UpdateCurrentDataRate>:
    9bf0:	b510      	push	{r4, lr}
    9bf2:	4b04      	ldr	r3, [pc, #16]	; (9c04 <UpdateCurrentDataRate+0x14>)
    9bf4:	210c      	movs	r1, #12
    9bf6:	33b3      	adds	r3, #179	; 0xb3
    9bf8:	7018      	strb	r0, [r3, #0]
    9bfa:	2001      	movs	r0, #1
    9bfc:	4b02      	ldr	r3, [pc, #8]	; (9c08 <UpdateCurrentDataRate+0x18>)
    9bfe:	4798      	blx	r3
    9c00:	bd10      	pop	{r4, pc}
    9c02:	46c0      	nop			; (mov r8, r8)
    9c04:	20000f10 	.word	0x20000f10
    9c08:	00001e65 	.word	0x00001e65

00009c0c <UpdateDLSettings>:
    9c0c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    9c0e:	466b      	mov	r3, sp
    9c10:	1dde      	adds	r6, r3, #7
    9c12:	1d9c      	adds	r4, r3, #6
    9c14:	71d8      	strb	r0, [r3, #7]
    9c16:	7021      	strb	r1, [r4, #0]
    9c18:	2017      	movs	r0, #23
    9c1a:	0031      	movs	r1, r6
    9c1c:	4d0c      	ldr	r5, [pc, #48]	; (9c50 <UpdateDLSettings+0x44>)
    9c1e:	47a8      	blx	r5
    9c20:	2808      	cmp	r0, #8
    9c22:	d107      	bne.n	9c34 <UpdateDLSettings+0x28>
    9c24:	4b0b      	ldr	r3, [pc, #44]	; (9c54 <UpdateDLSettings+0x48>)
    9c26:	7832      	ldrb	r2, [r6, #0]
    9c28:	334e      	adds	r3, #78	; 0x4e
    9c2a:	701a      	strb	r2, [r3, #0]
    9c2c:	2100      	movs	r1, #0
    9c2e:	3807      	subs	r0, #7
    9c30:	4b09      	ldr	r3, [pc, #36]	; (9c58 <UpdateDLSettings+0x4c>)
    9c32:	4798      	blx	r3
    9c34:	0021      	movs	r1, r4
    9c36:	2018      	movs	r0, #24
    9c38:	47a8      	blx	r5
    9c3a:	2808      	cmp	r0, #8
    9c3c:	d107      	bne.n	9c4e <UpdateDLSettings+0x42>
    9c3e:	2101      	movs	r1, #1
    9c40:	4b04      	ldr	r3, [pc, #16]	; (9c54 <UpdateDLSettings+0x48>)
    9c42:	7822      	ldrb	r2, [r4, #0]
    9c44:	33c2      	adds	r3, #194	; 0xc2
    9c46:	701a      	strb	r2, [r3, #0]
    9c48:	0008      	movs	r0, r1
    9c4a:	4b03      	ldr	r3, [pc, #12]	; (9c58 <UpdateDLSettings+0x4c>)
    9c4c:	4798      	blx	r3
    9c4e:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    9c50:	00006d95 	.word	0x00006d95
    9c54:	20000f10 	.word	0x20000f10
    9c58:	00001e65 	.word	0x00001e65

00009c5c <UpdateTxPower>:
    9c5c:	b510      	push	{r4, lr}
    9c5e:	4b04      	ldr	r3, [pc, #16]	; (9c70 <UpdateTxPower+0x14>)
    9c60:	210a      	movs	r1, #10
    9c62:	33b5      	adds	r3, #181	; 0xb5
    9c64:	7018      	strb	r0, [r3, #0]
    9c66:	2000      	movs	r0, #0
    9c68:	4b02      	ldr	r3, [pc, #8]	; (9c74 <UpdateTxPower+0x18>)
    9c6a:	4798      	blx	r3
    9c6c:	bd10      	pop	{r4, pc}
    9c6e:	46c0      	nop			; (mov r8, r8)
    9c70:	20000f10 	.word	0x20000f10
    9c74:	00001e65 	.word	0x00001e65

00009c78 <UpdateRetransmissionAckTimeoutState>:
    9c78:	4b10      	ldr	r3, [pc, #64]	; (9cbc <UpdateRetransmissionAckTimeoutState+0x44>)
    9c7a:	b513      	push	{r0, r1, r4, lr}
    9c7c:	001a      	movs	r2, r3
    9c7e:	32c8      	adds	r2, #200	; 0xc8
    9c80:	7812      	ldrb	r2, [r2, #0]
    9c82:	2a01      	cmp	r2, #1
    9c84:	d108      	bne.n	9c98 <UpdateRetransmissionAckTimeoutState+0x20>
    9c86:	0018      	movs	r0, r3
    9c88:	210e      	movs	r1, #14
    9c8a:	3050      	adds	r0, #80	; 0x50
    9c8c:	7802      	ldrb	r2, [r0, #0]
    9c8e:	438a      	bics	r2, r1
    9c90:	0011      	movs	r1, r2
    9c92:	220c      	movs	r2, #12
    9c94:	430a      	orrs	r2, r1
    9c96:	7002      	strb	r2, [r0, #0]
    9c98:	001a      	movs	r2, r3
    9c9a:	32a6      	adds	r2, #166	; 0xa6
    9c9c:	8811      	ldrh	r1, [r2, #0]
    9c9e:	222c      	movs	r2, #44	; 0x2c
    9ca0:	32ff      	adds	r2, #255	; 0xff
    9ca2:	5c9a      	ldrb	r2, [r3, r2]
    9ca4:	33bc      	adds	r3, #188	; 0xbc
    9ca6:	1a8a      	subs	r2, r1, r2
    9ca8:	21fa      	movs	r1, #250	; 0xfa
    9caa:	0089      	lsls	r1, r1, #2
    9cac:	4351      	muls	r1, r2
    9cae:	2200      	movs	r2, #0
    9cb0:	7818      	ldrb	r0, [r3, #0]
    9cb2:	4c03      	ldr	r4, [pc, #12]	; (9cc0 <UpdateRetransmissionAckTimeoutState+0x48>)
    9cb4:	9200      	str	r2, [sp, #0]
    9cb6:	4b03      	ldr	r3, [pc, #12]	; (9cc4 <UpdateRetransmissionAckTimeoutState+0x4c>)
    9cb8:	47a0      	blx	r4
    9cba:	bd13      	pop	{r0, r1, r4, pc}
    9cbc:	20000f10 	.word	0x20000f10
    9cc0:	000018f1 	.word	0x000018f1
    9cc4:	0000b3f5 	.word	0x0000b3f5

00009cc8 <UpdateReceiveWindow2Parameters>:
    9cc8:	4b06      	ldr	r3, [pc, #24]	; (9ce4 <UpdateReceiveWindow2Parameters+0x1c>)
    9cca:	b510      	push	{r4, lr}
    9ccc:	001a      	movs	r2, r3
    9cce:	334a      	adds	r3, #74	; 0x4a
    9cd0:	8018      	strh	r0, [r3, #0]
    9cd2:	324e      	adds	r2, #78	; 0x4e
    9cd4:	0c00      	lsrs	r0, r0, #16
    9cd6:	8058      	strh	r0, [r3, #2]
    9cd8:	7011      	strb	r1, [r2, #0]
    9cda:	2001      	movs	r0, #1
    9cdc:	2100      	movs	r1, #0
    9cde:	4b02      	ldr	r3, [pc, #8]	; (9ce8 <UpdateReceiveWindow2Parameters+0x20>)
    9ce0:	4798      	blx	r3
    9ce2:	bd10      	pop	{r4, pc}
    9ce4:	20000f10 	.word	0x20000f10
    9ce8:	00001e65 	.word	0x00001e65

00009cec <ResetParametersForConfirmedTransmission>:
    9cec:	4b0a      	ldr	r3, [pc, #40]	; (9d18 <ResetParametersForConfirmedTransmission+0x2c>)
    9cee:	001a      	movs	r2, r3
    9cf0:	32c8      	adds	r2, #200	; 0xc8
    9cf2:	7812      	ldrb	r2, [r2, #0]
    9cf4:	2a01      	cmp	r2, #1
    9cf6:	d105      	bne.n	9d04 <ResetParametersForConfirmedTransmission+0x18>
    9cf8:	0019      	movs	r1, r3
    9cfa:	200e      	movs	r0, #14
    9cfc:	3150      	adds	r1, #80	; 0x50
    9cfe:	780a      	ldrb	r2, [r1, #0]
    9d00:	4382      	bics	r2, r0
    9d02:	700a      	strb	r2, [r1, #0]
    9d04:	001a      	movs	r2, r3
    9d06:	2100      	movs	r1, #0
    9d08:	3360      	adds	r3, #96	; 0x60
    9d0a:	32b0      	adds	r2, #176	; 0xb0
    9d0c:	7011      	strb	r1, [r2, #0]
    9d0e:	781a      	ldrb	r2, [r3, #0]
    9d10:	3101      	adds	r1, #1
    9d12:	438a      	bics	r2, r1
    9d14:	701a      	strb	r2, [r3, #0]
    9d16:	4770      	bx	lr
    9d18:	20000f10 	.word	0x20000f10

00009d1c <ResetParametersForUnconfirmedTransmission>:
    9d1c:	4b07      	ldr	r3, [pc, #28]	; (9d3c <ResetParametersForUnconfirmedTransmission+0x20>)
    9d1e:	001a      	movs	r2, r3
    9d20:	32c8      	adds	r2, #200	; 0xc8
    9d22:	7812      	ldrb	r2, [r2, #0]
    9d24:	2a01      	cmp	r2, #1
    9d26:	d105      	bne.n	9d34 <ResetParametersForUnconfirmedTransmission+0x18>
    9d28:	0019      	movs	r1, r3
    9d2a:	200e      	movs	r0, #14
    9d2c:	3150      	adds	r1, #80	; 0x50
    9d2e:	780a      	ldrb	r2, [r1, #0]
    9d30:	4382      	bics	r2, r0
    9d32:	700a      	strb	r2, [r1, #0]
    9d34:	2200      	movs	r2, #0
    9d36:	33af      	adds	r3, #175	; 0xaf
    9d38:	701a      	strb	r2, [r3, #0]
    9d3a:	4770      	bx	lr
    9d3c:	20000f10 	.word	0x20000f10

00009d40 <SetJoinFailState>:
    9d40:	b570      	push	{r4, r5, r6, lr}
    9d42:	4c11      	ldr	r4, [pc, #68]	; (9d88 <SetJoinFailState+0x48>)
    9d44:	2504      	movs	r5, #4
    9d46:	0020      	movs	r0, r4
    9d48:	3060      	adds	r0, #96	; 0x60
    9d4a:	7802      	ldrb	r2, [r0, #0]
    9d4c:	0021      	movs	r1, r4
    9d4e:	43aa      	bics	r2, r5
    9d50:	7002      	strb	r2, [r0, #0]
    9d52:	22f0      	movs	r2, #240	; 0xf0
    9d54:	3150      	adds	r1, #80	; 0x50
    9d56:	780b      	ldrb	r3, [r1, #0]
    9d58:	4013      	ands	r3, r2
    9d5a:	700b      	strb	r3, [r1, #0]
    9d5c:	490b      	ldr	r1, [pc, #44]	; (9d8c <SetJoinFailState+0x4c>)
    9d5e:	794a      	ldrb	r2, [r1, #5]
    9d60:	790b      	ldrb	r3, [r1, #4]
    9d62:	0212      	lsls	r2, r2, #8
    9d64:	431a      	orrs	r2, r3
    9d66:	798b      	ldrb	r3, [r1, #6]
    9d68:	041b      	lsls	r3, r3, #16
    9d6a:	431a      	orrs	r2, r3
    9d6c:	79cb      	ldrb	r3, [r1, #7]
    9d6e:	061b      	lsls	r3, r3, #24
    9d70:	4313      	orrs	r3, r2
    9d72:	d001      	beq.n	9d78 <SetJoinFailState+0x38>
    9d74:	2000      	movs	r0, #0
    9d76:	4798      	blx	r3
    9d78:	2300      	movs	r3, #0
    9d7a:	34c4      	adds	r4, #196	; 0xc4
    9d7c:	7023      	strb	r3, [r4, #0]
    9d7e:	210b      	movs	r1, #11
    9d80:	4b03      	ldr	r3, [pc, #12]	; (9d90 <SetJoinFailState+0x50>)
    9d82:	2001      	movs	r0, #1
    9d84:	4798      	blx	r3
    9d86:	bd70      	pop	{r4, r5, r6, pc}
    9d88:	20000f10 	.word	0x20000f10
    9d8c:	20001150 	.word	0x20001150
    9d90:	00001e65 	.word	0x00001e65

00009d94 <ExecuteRxParamSetupReq>:
    9d94:	b5f0      	push	{r4, r5, r6, r7, lr}
    9d96:	b085      	sub	sp, #20
    9d98:	7805      	ldrb	r5, [r0, #0]
    9d9a:	0004      	movs	r4, r0
    9d9c:	1c41      	adds	r1, r0, #1
    9d9e:	2204      	movs	r2, #4
    9da0:	4b36      	ldr	r3, [pc, #216]	; (9e7c <ExecuteRxParamSetupReq+0xe8>)
    9da2:	a803      	add	r0, sp, #12
    9da4:	4798      	blx	r3
    9da6:	2264      	movs	r2, #100	; 0x64
    9da8:	9b03      	ldr	r3, [sp, #12]
    9daa:	a903      	add	r1, sp, #12
    9dac:	021b      	lsls	r3, r3, #8
    9dae:	0a1b      	lsrs	r3, r3, #8
    9db0:	4353      	muls	r3, r2
    9db2:	9303      	str	r3, [sp, #12]
    9db4:	1d23      	adds	r3, r4, #4
    9db6:	9301      	str	r3, [sp, #4]
    9db8:	072b      	lsls	r3, r5, #28
    9dba:	0f1b      	lsrs	r3, r3, #28
    9dbc:	b2da      	uxtb	r2, r3
    9dbe:	9200      	str	r2, [sp, #0]
    9dc0:	aa02      	add	r2, sp, #8
    9dc2:	1c96      	adds	r6, r2, #2
    9dc4:	066d      	lsls	r5, r5, #25
    9dc6:	7033      	strb	r3, [r6, #0]
    9dc8:	1cd7      	adds	r7, r2, #3
    9dca:	0f6d      	lsrs	r5, r5, #29
    9dcc:	2001      	movs	r0, #1
    9dce:	4b2c      	ldr	r3, [pc, #176]	; (9e80 <ExecuteRxParamSetupReq+0xec>)
    9dd0:	703d      	strb	r5, [r7, #0]
    9dd2:	4798      	blx	r3
    9dd4:	4c2b      	ldr	r4, [pc, #172]	; (9e84 <ExecuteRxParamSetupReq+0xf0>)
    9dd6:	2808      	cmp	r0, #8
    9dd8:	d109      	bne.n	9dee <ExecuteRxParamSetupReq+0x5a>
    9dda:	0023      	movs	r3, r4
    9ddc:	33ac      	adds	r3, #172	; 0xac
    9dde:	781a      	ldrb	r2, [r3, #0]
    9de0:	2303      	movs	r3, #3
    9de2:	4353      	muls	r3, r2
    9de4:	18e3      	adds	r3, r4, r3
    9de6:	3360      	adds	r3, #96	; 0x60
    9de8:	79da      	ldrb	r2, [r3, #7]
    9dea:	4310      	orrs	r0, r2
    9dec:	71d8      	strb	r0, [r3, #7]
    9dee:	0031      	movs	r1, r6
    9df0:	200f      	movs	r0, #15
    9df2:	4e23      	ldr	r6, [pc, #140]	; (9e80 <ExecuteRxParamSetupReq+0xec>)
    9df4:	47b0      	blx	r6
    9df6:	2808      	cmp	r0, #8
    9df8:	d10a      	bne.n	9e10 <ExecuteRxParamSetupReq+0x7c>
    9dfa:	0023      	movs	r3, r4
    9dfc:	33ac      	adds	r3, #172	; 0xac
    9dfe:	781a      	ldrb	r2, [r3, #0]
    9e00:	2303      	movs	r3, #3
    9e02:	4353      	muls	r3, r2
    9e04:	2210      	movs	r2, #16
    9e06:	18e3      	adds	r3, r4, r3
    9e08:	3360      	adds	r3, #96	; 0x60
    9e0a:	79d9      	ldrb	r1, [r3, #7]
    9e0c:	430a      	orrs	r2, r1
    9e0e:	71da      	strb	r2, [r3, #7]
    9e10:	0039      	movs	r1, r7
    9e12:	2018      	movs	r0, #24
    9e14:	47b0      	blx	r6
    9e16:	2808      	cmp	r0, #8
    9e18:	d10a      	bne.n	9e30 <ExecuteRxParamSetupReq+0x9c>
    9e1a:	0023      	movs	r3, r4
    9e1c:	33ac      	adds	r3, #172	; 0xac
    9e1e:	781a      	ldrb	r2, [r3, #0]
    9e20:	2303      	movs	r3, #3
    9e22:	4353      	muls	r3, r2
    9e24:	2220      	movs	r2, #32
    9e26:	18e3      	adds	r3, r4, r3
    9e28:	3360      	adds	r3, #96	; 0x60
    9e2a:	79d9      	ldrb	r1, [r3, #7]
    9e2c:	430a      	orrs	r2, r1
    9e2e:	71da      	strb	r2, [r3, #7]
    9e30:	0023      	movs	r3, r4
    9e32:	33ac      	adds	r3, #172	; 0xac
    9e34:	781a      	ldrb	r2, [r3, #0]
    9e36:	2303      	movs	r3, #3
    9e38:	4353      	muls	r3, r2
    9e3a:	18e3      	adds	r3, r4, r3
    9e3c:	3360      	adds	r3, #96	; 0x60
    9e3e:	79de      	ldrb	r6, [r3, #7]
    9e40:	06f3      	lsls	r3, r6, #27
    9e42:	d518      	bpl.n	9e76 <ExecuteRxParamSetupReq+0xe2>
    9e44:	0733      	lsls	r3, r6, #28
    9e46:	d516      	bpl.n	9e76 <ExecuteRxParamSetupReq+0xe2>
    9e48:	06b6      	lsls	r6, r6, #26
    9e4a:	0ff6      	lsrs	r6, r6, #31
    9e4c:	2e01      	cmp	r6, #1
    9e4e:	d112      	bne.n	9e76 <ExecuteRxParamSetupReq+0xe2>
    9e50:	0023      	movs	r3, r4
    9e52:	33c2      	adds	r3, #194	; 0xc2
    9e54:	701d      	strb	r5, [r3, #0]
    9e56:	0031      	movs	r1, r6
    9e58:	0030      	movs	r0, r6
    9e5a:	4d0b      	ldr	r5, [pc, #44]	; (9e88 <ExecuteRxParamSetupReq+0xf4>)
    9e5c:	47a8      	blx	r5
    9e5e:	9900      	ldr	r1, [sp, #0]
    9e60:	9803      	ldr	r0, [sp, #12]
    9e62:	4b0a      	ldr	r3, [pc, #40]	; (9e8c <ExecuteRxParamSetupReq+0xf8>)
    9e64:	4798      	blx	r3
    9e66:	2340      	movs	r3, #64	; 0x40
    9e68:	3450      	adds	r4, #80	; 0x50
    9e6a:	7862      	ldrb	r2, [r4, #1]
    9e6c:	210b      	movs	r1, #11
    9e6e:	4313      	orrs	r3, r2
    9e70:	7063      	strb	r3, [r4, #1]
    9e72:	0030      	movs	r0, r6
    9e74:	47a8      	blx	r5
    9e76:	9801      	ldr	r0, [sp, #4]
    9e78:	b005      	add	sp, #20
    9e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9e7c:	000112d5 	.word	0x000112d5
    9e80:	00006d95 	.word	0x00006d95
    9e84:	20000f10 	.word	0x20000f10
    9e88:	00001e65 	.word	0x00001e65
    9e8c:	00009cc9 	.word	0x00009cc9

00009e90 <ExecuteDutyCycle>:
    9e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9e92:	7803      	ldrb	r3, [r0, #0]
    9e94:	1c47      	adds	r7, r0, #1
    9e96:	2b0e      	cmp	r3, #14
    9e98:	d814      	bhi.n	9ec4 <ExecuteDutyCycle+0x34>
    9e9a:	2601      	movs	r6, #1
    9e9c:	0032      	movs	r2, r6
    9e9e:	4c10      	ldr	r4, [pc, #64]	; (9ee0 <ExecuteDutyCycle+0x50>)
    9ea0:	409a      	lsls	r2, r3
    9ea2:	0023      	movs	r3, r4
    9ea4:	210b      	movs	r1, #11
    9ea6:	3364      	adds	r3, #100	; 0x64
    9ea8:	2000      	movs	r0, #0
    9eaa:	4d0e      	ldr	r5, [pc, #56]	; (9ee4 <ExecuteDutyCycle+0x54>)
    9eac:	801a      	strh	r2, [r3, #0]
    9eae:	47a8      	blx	r5
    9eb0:	2320      	movs	r3, #32
    9eb2:	3450      	adds	r4, #80	; 0x50
    9eb4:	7862      	ldrb	r2, [r4, #1]
    9eb6:	210b      	movs	r1, #11
    9eb8:	4313      	orrs	r3, r2
    9eba:	7063      	strb	r3, [r4, #1]
    9ebc:	0030      	movs	r0, r6
    9ebe:	47a8      	blx	r5
    9ec0:	0038      	movs	r0, r7
    9ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9ec4:	2bff      	cmp	r3, #255	; 0xff
    9ec6:	d1fb      	bne.n	9ec0 <ExecuteDutyCycle+0x30>
    9ec8:	2240      	movs	r2, #64	; 0x40
    9eca:	4b05      	ldr	r3, [pc, #20]	; (9ee0 <ExecuteDutyCycle+0x50>)
    9ecc:	2001      	movs	r0, #1
    9ece:	3350      	adds	r3, #80	; 0x50
    9ed0:	7819      	ldrb	r1, [r3, #0]
    9ed2:	430a      	orrs	r2, r1
    9ed4:	701a      	strb	r2, [r3, #0]
    9ed6:	210b      	movs	r1, #11
    9ed8:	4b02      	ldr	r3, [pc, #8]	; (9ee4 <ExecuteDutyCycle+0x54>)
    9eda:	4798      	blx	r3
    9edc:	e7f0      	b.n	9ec0 <ExecuteDutyCycle+0x30>
    9ede:	46c0      	nop			; (mov r8, r8)
    9ee0:	20000f10 	.word	0x20000f10
    9ee4:	00001e65 	.word	0x00001e65

00009ee8 <ExecuteDlChannel>:
    9ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
    9eea:	b089      	sub	sp, #36	; 0x24
    9eec:	7805      	ldrb	r5, [r0, #0]
    9eee:	ab02      	add	r3, sp, #8
    9ef0:	1c41      	adds	r1, r0, #1
    9ef2:	0007      	movs	r7, r0
    9ef4:	719d      	strb	r5, [r3, #6]
    9ef6:	1d9e      	adds	r6, r3, #6
    9ef8:	2204      	movs	r2, #4
    9efa:	4b23      	ldr	r3, [pc, #140]	; (9f88 <ExecuteDlChannel+0xa0>)
    9efc:	a805      	add	r0, sp, #20
    9efe:	4798      	blx	r3
    9f00:	9b05      	ldr	r3, [sp, #20]
    9f02:	a904      	add	r1, sp, #16
    9f04:	021c      	lsls	r4, r3, #8
    9f06:	2364      	movs	r3, #100	; 0x64
    9f08:	0a24      	lsrs	r4, r4, #8
    9f0a:	435c      	muls	r4, r3
    9f0c:	1d3b      	adds	r3, r7, #4
    9f0e:	9301      	str	r3, [sp, #4]
    9f10:	2301      	movs	r3, #1
    9f12:	2015      	movs	r0, #21
    9f14:	704b      	strb	r3, [r1, #1]
    9f16:	4b1d      	ldr	r3, [pc, #116]	; (9f8c <ExecuteDlChannel+0xa4>)
    9f18:	9405      	str	r4, [sp, #20]
    9f1a:	700d      	strb	r5, [r1, #0]
    9f1c:	4798      	blx	r3
    9f1e:	2808      	cmp	r0, #8
    9f20:	d12f      	bne.n	9f82 <ExecuteDlChannel+0x9a>
    9f22:	ab02      	add	r3, sp, #8
    9f24:	1ddd      	adds	r5, r3, #7
    9f26:	2300      	movs	r3, #0
    9f28:	702b      	strb	r3, [r5, #0]
    9f2a:	7833      	ldrb	r3, [r6, #0]
    9f2c:	af06      	add	r7, sp, #24
    9f2e:	713b      	strb	r3, [r7, #4]
    9f30:	002a      	movs	r2, r5
    9f32:	0031      	movs	r1, r6
    9f34:	300e      	adds	r0, #14
    9f36:	4b16      	ldr	r3, [pc, #88]	; (9f90 <ExecuteDlChannel+0xa8>)
    9f38:	9406      	str	r4, [sp, #24]
    9f3a:	4798      	blx	r3
    9f3c:	280a      	cmp	r0, #10
    9f3e:	d00d      	beq.n	9f5c <ExecuteDlChannel+0x74>
    9f40:	782a      	ldrb	r2, [r5, #0]
    9f42:	2a01      	cmp	r2, #1
    9f44:	d10a      	bne.n	9f5c <ExecuteDlChannel+0x74>
    9f46:	4b13      	ldr	r3, [pc, #76]	; (9f94 <ExecuteDlChannel+0xac>)
    9f48:	0019      	movs	r1, r3
    9f4a:	31ac      	adds	r1, #172	; 0xac
    9f4c:	7808      	ldrb	r0, [r1, #0]
    9f4e:	2103      	movs	r1, #3
    9f50:	4341      	muls	r1, r0
    9f52:	185b      	adds	r3, r3, r1
    9f54:	3360      	adds	r3, #96	; 0x60
    9f56:	7a19      	ldrb	r1, [r3, #8]
    9f58:	430a      	orrs	r2, r1
    9f5a:	721a      	strb	r2, [r3, #8]
    9f5c:	0039      	movs	r1, r7
    9f5e:	2032      	movs	r0, #50	; 0x32
    9f60:	4b0d      	ldr	r3, [pc, #52]	; (9f98 <ExecuteDlChannel+0xb0>)
    9f62:	4798      	blx	r3
    9f64:	2808      	cmp	r0, #8
    9f66:	d10c      	bne.n	9f82 <ExecuteDlChannel+0x9a>
    9f68:	4b0a      	ldr	r3, [pc, #40]	; (9f94 <ExecuteDlChannel+0xac>)
    9f6a:	001a      	movs	r2, r3
    9f6c:	32ac      	adds	r2, #172	; 0xac
    9f6e:	7811      	ldrb	r1, [r2, #0]
    9f70:	2203      	movs	r2, #3
    9f72:	434a      	muls	r2, r1
    9f74:	189b      	adds	r3, r3, r2
    9f76:	2280      	movs	r2, #128	; 0x80
    9f78:	3360      	adds	r3, #96	; 0x60
    9f7a:	79d9      	ldrb	r1, [r3, #7]
    9f7c:	4252      	negs	r2, r2
    9f7e:	430a      	orrs	r2, r1
    9f80:	71da      	strb	r2, [r3, #7]
    9f82:	9801      	ldr	r0, [sp, #4]
    9f84:	b009      	add	sp, #36	; 0x24
    9f86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9f88:	000112d5 	.word	0x000112d5
    9f8c:	00006d95 	.word	0x00006d95
    9f90:	00006d79 	.word	0x00006d79
    9f94:	20000f10 	.word	0x20000f10
    9f98:	00006db1 	.word	0x00006db1

00009f9c <ExecuteTxParamSetup>:
    9f9c:	220f      	movs	r2, #15
    9f9e:	b513      	push	{r0, r1, r4, lr}
    9fa0:	7803      	ldrb	r3, [r0, #0]
    9fa2:	4c0f      	ldr	r4, [pc, #60]	; (9fe0 <ExecuteTxParamSetup+0x44>)
    9fa4:	401a      	ands	r2, r3
    9fa6:	5ca2      	ldrb	r2, [r4, r2]
    9fa8:	2401      	movs	r4, #1
    9faa:	a901      	add	r1, sp, #4
    9fac:	700a      	strb	r2, [r1, #0]
    9fae:	111a      	asrs	r2, r3, #4
    9fb0:	115b      	asrs	r3, r3, #5
    9fb2:	4023      	ands	r3, r4
    9fb4:	40a3      	lsls	r3, r4
    9fb6:	4022      	ands	r2, r4
    9fb8:	4313      	orrs	r3, r2
    9fba:	704b      	strb	r3, [r1, #1]
    9fbc:	1904      	adds	r4, r0, r4
    9fbe:	4b09      	ldr	r3, [pc, #36]	; (9fe4 <ExecuteTxParamSetup+0x48>)
    9fc0:	2033      	movs	r0, #51	; 0x33
    9fc2:	4798      	blx	r3
    9fc4:	2808      	cmp	r0, #8
    9fc6:	d009      	beq.n	9fdc <ExecuteTxParamSetup+0x40>
    9fc8:	4b07      	ldr	r3, [pc, #28]	; (9fe8 <ExecuteTxParamSetup+0x4c>)
    9fca:	001a      	movs	r2, r3
    9fcc:	32ac      	adds	r2, #172	; 0xac
    9fce:	7811      	ldrb	r1, [r2, #0]
    9fd0:	2203      	movs	r2, #3
    9fd2:	434a      	muls	r2, r1
    9fd4:	189b      	adds	r3, r3, r2
    9fd6:	22ff      	movs	r2, #255	; 0xff
    9fd8:	3366      	adds	r3, #102	; 0x66
    9fda:	701a      	strb	r2, [r3, #0]
    9fdc:	0020      	movs	r0, r4
    9fde:	bd16      	pop	{r1, r2, r4, pc}
    9fe0:	00012ed5 	.word	0x00012ed5
    9fe4:	00006db1 	.word	0x00006db1
    9fe8:	20000f10 	.word	0x20000f10

00009fec <ExecuteLinkAdr>:
    9fec:	220f      	movs	r2, #15
    9fee:	b5f0      	push	{r4, r5, r6, r7, lr}
    9ff0:	0005      	movs	r5, r0
    9ff2:	7803      	ldrb	r3, [r0, #0]
    9ff4:	b087      	sub	sp, #28
    9ff6:	401a      	ands	r2, r3
    9ff8:	a903      	add	r1, sp, #12
    9ffa:	700a      	strb	r2, [r1, #0]
    9ffc:	aa02      	add	r2, sp, #8
    9ffe:	1d94      	adds	r4, r2, #6
    a000:	1d57      	adds	r7, r2, #5
    a002:	091b      	lsrs	r3, r3, #4
    a004:	1c41      	adds	r1, r0, #1
    a006:	703b      	strb	r3, [r7, #0]
    a008:	2202      	movs	r2, #2
    a00a:	0020      	movs	r0, r4
    a00c:	4b3e      	ldr	r3, [pc, #248]	; (a108 <ExecuteLinkAdr+0x11c>)
    a00e:	4798      	blx	r3
    a010:	466a      	mov	r2, sp
    a012:	1d2b      	adds	r3, r5, #4
    a014:	9301      	str	r3, [sp, #4]
    a016:	8823      	ldrh	r3, [r4, #0]
    a018:	2424      	movs	r4, #36	; 0x24
    a01a:	2101      	movs	r1, #1
    a01c:	9300      	str	r3, [sp, #0]
    a01e:	8812      	ldrh	r2, [r2, #0]
    a020:	ab02      	add	r3, sp, #8
    a022:	815a      	strh	r2, [r3, #10]
    a024:	78ea      	ldrb	r2, [r5, #3]
    a026:	4e39      	ldr	r6, [pc, #228]	; (a10c <ExecuteLinkAdr+0x120>)
    a028:	0652      	lsls	r2, r2, #25
    a02a:	0f52      	lsrs	r2, r2, #29
    a02c:	34ff      	adds	r4, #255	; 0xff
    a02e:	721a      	strb	r2, [r3, #8]
    a030:	5d33      	ldrb	r3, [r6, r4]
    a032:	2036      	movs	r0, #54	; 0x36
    a034:	438b      	bics	r3, r1
    a036:	1849      	adds	r1, r1, r1
    a038:	438b      	bics	r3, r1
    a03a:	3102      	adds	r1, #2
    a03c:	438b      	bics	r3, r1
    a03e:	5533      	strb	r3, [r6, r4]
    a040:	466b      	mov	r3, sp
    a042:	881b      	ldrh	r3, [r3, #0]
    a044:	a905      	add	r1, sp, #20
    a046:	804b      	strh	r3, [r1, #2]
    a048:	4b31      	ldr	r3, [pc, #196]	; (a110 <ExecuteLinkAdr+0x124>)
    a04a:	700a      	strb	r2, [r1, #0]
    a04c:	4798      	blx	r3
    a04e:	2808      	cmp	r0, #8
    a050:	d11c      	bne.n	a08c <ExecuteLinkAdr+0xa0>
    a052:	2201      	movs	r2, #1
    a054:	5d33      	ldrb	r3, [r6, r4]
    a056:	a904      	add	r1, sp, #16
    a058:	4313      	orrs	r3, r2
    a05a:	5533      	strb	r3, [r6, r4]
    a05c:	aa02      	add	r2, sp, #8
    a05e:	4b2d      	ldr	r3, [pc, #180]	; (a114 <ExecuteLinkAdr+0x128>)
    a060:	300b      	adds	r0, #11
    a062:	4798      	blx	r3
    a064:	0039      	movs	r1, r7
    a066:	2010      	movs	r0, #16
    a068:	4b29      	ldr	r3, [pc, #164]	; (a110 <ExecuteLinkAdr+0x124>)
    a06a:	4798      	blx	r3
    a06c:	2808      	cmp	r0, #8
    a06e:	d10d      	bne.n	a08c <ExecuteLinkAdr+0xa0>
    a070:	ab02      	add	r3, sp, #8
    a072:	781b      	ldrb	r3, [r3, #0]
    a074:	7839      	ldrb	r1, [r7, #0]
    a076:	071a      	lsls	r2, r3, #28
    a078:	0f12      	lsrs	r2, r2, #28
    a07a:	4291      	cmp	r1, r2
    a07c:	db06      	blt.n	a08c <ExecuteLinkAdr+0xa0>
    a07e:	091b      	lsrs	r3, r3, #4
    a080:	4299      	cmp	r1, r3
    a082:	dc03      	bgt.n	a08c <ExecuteLinkAdr+0xa0>
    a084:	2202      	movs	r2, #2
    a086:	5d33      	ldrb	r3, [r6, r4]
    a088:	4313      	orrs	r3, r2
    a08a:	5533      	strb	r3, [r6, r4]
    a08c:	ae03      	add	r6, sp, #12
    a08e:	4b20      	ldr	r3, [pc, #128]	; (a110 <ExecuteLinkAdr+0x124>)
    a090:	0031      	movs	r1, r6
    a092:	201d      	movs	r0, #29
    a094:	4798      	blx	r3
    a096:	4b1d      	ldr	r3, [pc, #116]	; (a10c <ExecuteLinkAdr+0x120>)
    a098:	2808      	cmp	r0, #8
    a09a:	d103      	bne.n	a0a4 <ExecuteLinkAdr+0xb8>
    a09c:	2204      	movs	r2, #4
    a09e:	5d19      	ldrb	r1, [r3, r4]
    a0a0:	430a      	orrs	r2, r1
    a0a2:	551a      	strb	r2, [r3, r4]
    a0a4:	2207      	movs	r2, #7
    a0a6:	5d18      	ldrb	r0, [r3, r4]
    a0a8:	4010      	ands	r0, r2
    a0aa:	4290      	cmp	r0, r2
    a0ac:	d122      	bne.n	a0f4 <ExecuteLinkAdr+0x108>
    a0ae:	001a      	movs	r2, r3
    a0b0:	4669      	mov	r1, sp
    a0b2:	3228      	adds	r2, #40	; 0x28
    a0b4:	7809      	ldrb	r1, [r1, #0]
    a0b6:	32ff      	adds	r2, #255	; 0xff
    a0b8:	7011      	strb	r1, [r2, #0]
    a0ba:	9900      	ldr	r1, [sp, #0]
    a0bc:	2470      	movs	r4, #112	; 0x70
    a0be:	0a09      	lsrs	r1, r1, #8
    a0c0:	7051      	strb	r1, [r2, #1]
    a0c2:	2292      	movs	r2, #146	; 0x92
    a0c4:	7839      	ldrb	r1, [r7, #0]
    a0c6:	0052      	lsls	r2, r2, #1
    a0c8:	5499      	strb	r1, [r3, r2]
    a0ca:	212a      	movs	r1, #42	; 0x2a
    a0cc:	78ea      	ldrb	r2, [r5, #3]
    a0ce:	31ff      	adds	r1, #255	; 0xff
    a0d0:	0912      	lsrs	r2, r2, #4
    a0d2:	4002      	ands	r2, r0
    a0d4:	5c58      	ldrb	r0, [r3, r1]
    a0d6:	0112      	lsls	r2, r2, #4
    a0d8:	43a0      	bics	r0, r4
    a0da:	4302      	orrs	r2, r0
    a0dc:	545a      	strb	r2, [r3, r1]
    a0de:	78e8      	ldrb	r0, [r5, #3]
    a0e0:	3c61      	subs	r4, #97	; 0x61
    a0e2:	b2d2      	uxtb	r2, r2
    a0e4:	4020      	ands	r0, r4
    a0e6:	43a2      	bics	r2, r4
    a0e8:	4302      	orrs	r2, r0
    a0ea:	545a      	strb	r2, [r3, r1]
    a0ec:	2226      	movs	r2, #38	; 0x26
    a0ee:	7831      	ldrb	r1, [r6, #0]
    a0f0:	32ff      	adds	r2, #255	; 0xff
    a0f2:	5499      	strb	r1, [r3, r2]
    a0f4:	2293      	movs	r2, #147	; 0x93
    a0f6:	4905      	ldr	r1, [pc, #20]	; (a10c <ExecuteLinkAdr+0x120>)
    a0f8:	0052      	lsls	r2, r2, #1
    a0fa:	5c8b      	ldrb	r3, [r1, r2]
    a0fc:	9801      	ldr	r0, [sp, #4]
    a0fe:	3301      	adds	r3, #1
    a100:	548b      	strb	r3, [r1, r2]
    a102:	b007      	add	sp, #28
    a104:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a106:	46c0      	nop			; (mov r8, r8)
    a108:	000112d5 	.word	0x000112d5
    a10c:	20000f10 	.word	0x20000f10
    a110:	00006d95 	.word	0x00006d95
    a114:	00006d79 	.word	0x00006d79

0000a118 <PrepareJoinRequestFrame>:
    a118:	2210      	movs	r2, #16
    a11a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    a11c:	4d1b      	ldr	r5, [pc, #108]	; (a18c <PrepareJoinRequestFrame+0x74>)
    a11e:	4b1c      	ldr	r3, [pc, #112]	; (a190 <PrepareJoinRequestFrame+0x78>)
    a120:	32ff      	adds	r2, #255	; 0xff
    a122:	2100      	movs	r1, #0
    a124:	0028      	movs	r0, r5
    a126:	4798      	blx	r3
    a128:	2300      	movs	r3, #0
    a12a:	203c      	movs	r0, #60	; 0x3c
    a12c:	4c19      	ldr	r4, [pc, #100]	; (a194 <PrepareJoinRequestFrame+0x7c>)
    a12e:	702b      	strb	r3, [r5, #0]
    a130:	1ac1      	subs	r1, r0, r3
    a132:	5c61      	ldrb	r1, [r4, r1]
    a134:	18ea      	adds	r2, r5, r3
    a136:	3301      	adds	r3, #1
    a138:	7051      	strb	r1, [r2, #1]
    a13a:	2b08      	cmp	r3, #8
    a13c:	d1f8      	bne.n	a130 <PrepareJoinRequestFrame+0x18>
    a13e:	2300      	movs	r3, #0
    a140:	2044      	movs	r0, #68	; 0x44
    a142:	1ac1      	subs	r1, r0, r3
    a144:	5c61      	ldrb	r1, [r4, r1]
    a146:	18ea      	adds	r2, r5, r3
    a148:	3301      	adds	r3, #1
    a14a:	7251      	strb	r1, [r2, #9]
    a14c:	2b08      	cmp	r3, #8
    a14e:	d1f8      	bne.n	a142 <PrepareJoinRequestFrame+0x2a>
    a150:	4b11      	ldr	r3, [pc, #68]	; (a198 <PrepareJoinRequestFrame+0x80>)
    a152:	4798      	blx	r3
    a154:	4b11      	ldr	r3, [pc, #68]	; (a19c <PrepareJoinRequestFrame+0x84>)
    a156:	4912      	ldr	r1, [pc, #72]	; (a1a0 <PrepareJoinRequestFrame+0x88>)
    a158:	4798      	blx	r3
    a15a:	3498      	adds	r4, #152	; 0x98
    a15c:	8021      	strh	r1, [r4, #0]
    a15e:	2202      	movs	r2, #2
    a160:	0021      	movs	r1, r4
    a162:	4810      	ldr	r0, [pc, #64]	; (a1a4 <PrepareJoinRequestFrame+0x8c>)
    a164:	4c10      	ldr	r4, [pc, #64]	; (a1a8 <PrepareJoinRequestFrame+0x90>)
    a166:	47a0      	blx	r4
    a168:	4e10      	ldr	r6, [pc, #64]	; (a1ac <PrepareJoinRequestFrame+0x94>)
    a16a:	2313      	movs	r3, #19
    a16c:	0031      	movs	r1, r6
    a16e:	002a      	movs	r2, r5
    a170:	480f      	ldr	r0, [pc, #60]	; (a1b0 <PrepareJoinRequestFrame+0x98>)
    a172:	4d10      	ldr	r5, [pc, #64]	; (a1b4 <PrepareJoinRequestFrame+0x9c>)
    a174:	47a8      	blx	r5
    a176:	0031      	movs	r1, r6
    a178:	2204      	movs	r2, #4
    a17a:	a801      	add	r0, sp, #4
    a17c:	47a0      	blx	r4
    a17e:	2204      	movs	r2, #4
    a180:	a901      	add	r1, sp, #4
    a182:	480d      	ldr	r0, [pc, #52]	; (a1b8 <PrepareJoinRequestFrame+0xa0>)
    a184:	47a0      	blx	r4
    a186:	2017      	movs	r0, #23
    a188:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    a18a:	46c0      	nop			; (mov r8, r8)
    a18c:	2000103d 	.word	0x2000103d
    a190:	000112e7 	.word	0x000112e7
    a194:	20000f10 	.word	0x20000f10
    a198:	0001145d 	.word	0x0001145d
    a19c:	0000f1ed 	.word	0x0000f1ed
    a1a0:	0000ffff 	.word	0x0000ffff
    a1a4:	2000104e 	.word	0x2000104e
    a1a8:	000112d5 	.word	0x000112d5
    a1ac:	2000057c 	.word	0x2000057c
    a1b0:	20000f35 	.word	0x20000f35
    a1b4:	0000cc89 	.word	0x0000cc89
    a1b8:	20001050 	.word	0x20001050

0000a1bc <ConfigureRadioRx>:
    a1bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    a1be:	b087      	sub	sp, #28
    a1c0:	466b      	mov	r3, sp
    a1c2:	2600      	movs	r6, #0
    a1c4:	1ddc      	adds	r4, r3, #7
    a1c6:	71d8      	strb	r0, [r3, #7]
    a1c8:	729e      	strb	r6, [r3, #10]
    a1ca:	466a      	mov	r2, sp
    a1cc:	2301      	movs	r3, #1
    a1ce:	72d3      	strb	r3, [r2, #11]
    a1d0:	2215      	movs	r2, #21
    a1d2:	ad03      	add	r5, sp, #12
    a1d4:	4f11      	ldr	r7, [pc, #68]	; (a21c <ConfigureRadioRx+0x60>)
    a1d6:	9100      	str	r1, [sp, #0]
    a1d8:	446a      	add	r2, sp
    a1da:	0021      	movs	r1, r4
    a1dc:	2021      	movs	r0, #33	; 0x21
    a1de:	80ae      	strh	r6, [r5, #4]
    a1e0:	47b8      	blx	r7
    a1e2:	2216      	movs	r2, #22
    a1e4:	0021      	movs	r1, r4
    a1e6:	446a      	add	r2, sp
    a1e8:	2022      	movs	r0, #34	; 0x22
    a1ea:	47b8      	blx	r7
    a1ec:	2217      	movs	r2, #23
    a1ee:	0021      	movs	r1, r4
    a1f0:	446a      	add	r2, sp
    a1f2:	2023      	movs	r0, #35	; 0x23
    a1f4:	47b8      	blx	r7
    a1f6:	9b00      	ldr	r3, [sp, #0]
    a1f8:	0028      	movs	r0, r5
    a1fa:	9303      	str	r3, [sp, #12]
    a1fc:	4b08      	ldr	r3, [pc, #32]	; (a220 <ConfigureRadioRx+0x64>)
    a1fe:	80ae      	strh	r6, [r5, #4]
    a200:	4798      	blx	r3
    a202:	230a      	movs	r3, #10
    a204:	446b      	add	r3, sp
    a206:	0019      	movs	r1, r3
    a208:	4c06      	ldr	r4, [pc, #24]	; (a224 <ConfigureRadioRx+0x68>)
    a20a:	2014      	movs	r0, #20
    a20c:	47a0      	blx	r4
    a20e:	230b      	movs	r3, #11
    a210:	446b      	add	r3, sp
    a212:	0019      	movs	r1, r3
    a214:	2006      	movs	r0, #6
    a216:	47a0      	blx	r4
    a218:	b007      	add	sp, #28
    a21a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a21c:	00006d79 	.word	0x00006d79
    a220:	000096fd 	.word	0x000096fd
    a224:	0000d599 	.word	0x0000d599

0000a228 <LorawanReceiveWindow1Callback>:
    a228:	b537      	push	{r0, r1, r2, r4, r5, lr}
    a22a:	4c18      	ldr	r4, [pc, #96]	; (a28c <LorawanReceiveWindow1Callback+0x64>)
    a22c:	0023      	movs	r3, r4
    a22e:	3350      	adds	r3, #80	; 0x50
    a230:	781b      	ldrb	r3, [r3, #0]
    a232:	b25a      	sxtb	r2, r3
    a234:	2a00      	cmp	r2, #0
    a236:	db28      	blt.n	a28a <LorawanReceiveWindow1Callback+0x62>
    a238:	0022      	movs	r2, r4
    a23a:	32c8      	adds	r2, #200	; 0xc8
    a23c:	7812      	ldrb	r2, [r2, #0]
    a23e:	2a04      	cmp	r2, #4
    a240:	d103      	bne.n	a24a <LorawanReceiveWindow1Callback+0x22>
    a242:	07db      	lsls	r3, r3, #31
    a244:	d501      	bpl.n	a24a <LorawanReceiveWindow1Callback+0x22>
    a246:	4b12      	ldr	r3, [pc, #72]	; (a290 <LorawanReceiveWindow1Callback+0x68>)
    a248:	4798      	blx	r3
    a24a:	0021      	movs	r1, r4
    a24c:	220e      	movs	r2, #14
    a24e:	3150      	adds	r1, #80	; 0x50
    a250:	780b      	ldrb	r3, [r1, #0]
    a252:	ad01      	add	r5, sp, #4
    a254:	4393      	bics	r3, r2
    a256:	001a      	movs	r2, r3
    a258:	2306      	movs	r3, #6
    a25a:	4313      	orrs	r3, r2
    a25c:	0022      	movs	r2, r4
    a25e:	700b      	strb	r3, [r1, #0]
    a260:	3248      	adds	r2, #72	; 0x48
    a262:	6c63      	ldr	r3, [r4, #68]	; 0x44
    a264:	7811      	ldrb	r1, [r2, #0]
    a266:	0a1b      	lsrs	r3, r3, #8
    a268:	3449      	adds	r4, #73	; 0x49
    a26a:	0609      	lsls	r1, r1, #24
    a26c:	4319      	orrs	r1, r3
    a26e:	7820      	ldrb	r0, [r4, #0]
    a270:	4b08      	ldr	r3, [pc, #32]	; (a294 <LorawanReceiveWindow1Callback+0x6c>)
    a272:	4798      	blx	r3
    a274:	2300      	movs	r3, #0
    a276:	702b      	strb	r3, [r5, #0]
    a278:	466b      	mov	r3, sp
    a27a:	0021      	movs	r1, r4
    a27c:	1d9a      	adds	r2, r3, #6
    a27e:	2003      	movs	r0, #3
    a280:	4b05      	ldr	r3, [pc, #20]	; (a298 <LorawanReceiveWindow1Callback+0x70>)
    a282:	4798      	blx	r3
    a284:	0028      	movs	r0, r5
    a286:	4b05      	ldr	r3, [pc, #20]	; (a29c <LorawanReceiveWindow1Callback+0x74>)
    a288:	4798      	blx	r3
    a28a:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    a28c:	20000f10 	.word	0x20000f10
    a290:	0000ceb9 	.word	0x0000ceb9
    a294:	0000a1bd 	.word	0x0000a1bd
    a298:	00006d79 	.word	0x00006d79
    a29c:	0000e8c9 	.word	0x0000e8c9

0000a2a0 <ConfigureRadioTx>:
    a2a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    a2a2:	2517      	movs	r5, #23
    a2a4:	2300      	movs	r3, #0
    a2a6:	2616      	movs	r6, #22
    a2a8:	2701      	movs	r7, #1
    a2aa:	b087      	sub	sp, #28
    a2ac:	ac01      	add	r4, sp, #4
    a2ae:	446d      	add	r5, sp
    a2b0:	9001      	str	r0, [sp, #4]
    a2b2:	702b      	strb	r3, [r5, #0]
    a2b4:	0020      	movs	r0, r4
    a2b6:	4b10      	ldr	r3, [pc, #64]	; (a2f8 <ConfigureRadioTx+0x58>)
    a2b8:	446e      	add	r6, sp
    a2ba:	9102      	str	r1, [sp, #8]
    a2bc:	9203      	str	r2, [sp, #12]
    a2be:	7037      	strb	r7, [r6, #0]
    a2c0:	4798      	blx	r3
    a2c2:	79e3      	ldrb	r3, [r4, #7]
    a2c4:	4c0d      	ldr	r4, [pc, #52]	; (a2fc <ConfigureRadioTx+0x5c>)
    a2c6:	2b00      	cmp	r3, #0
    a2c8:	d00b      	beq.n	a2e2 <ConfigureRadioTx+0x42>
    a2ca:	2391      	movs	r3, #145	; 0x91
    a2cc:	4a0c      	ldr	r2, [pc, #48]	; (a300 <ConfigureRadioTx+0x60>)
    a2ce:	005b      	lsls	r3, r3, #1
    a2d0:	54d7      	strb	r7, [r2, r3]
    a2d2:	490c      	ldr	r1, [pc, #48]	; (a304 <ConfigureRadioTx+0x64>)
    a2d4:	200b      	movs	r0, #11
    a2d6:	4b0c      	ldr	r3, [pc, #48]	; (a308 <ConfigureRadioTx+0x68>)
    a2d8:	4798      	blx	r3
    a2da:	210a      	movs	r1, #10
    a2dc:	200b      	movs	r0, #11
    a2de:	4469      	add	r1, sp
    a2e0:	47a0      	blx	r4
    a2e2:	a903      	add	r1, sp, #12
    a2e4:	2004      	movs	r0, #4
    a2e6:	47a0      	blx	r4
    a2e8:	0031      	movs	r1, r6
    a2ea:	2014      	movs	r0, #20
    a2ec:	47a0      	blx	r4
    a2ee:	0029      	movs	r1, r5
    a2f0:	2006      	movs	r0, #6
    a2f2:	47a0      	blx	r4
    a2f4:	b007      	add	sp, #28
    a2f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a2f8:	000096fd 	.word	0x000096fd
    a2fc:	0000d599 	.word	0x0000d599
    a300:	20000f10 	.word	0x20000f10
    a304:	20001031 	.word	0x20001031
    a308:	0000d4ad 	.word	0x0000d4ad

0000a30c <LorawanGetChAndInitiateRadioTransmit>:
    a30c:	2301      	movs	r3, #1
    a30e:	b530      	push	{r4, r5, lr}
    a310:	4c46      	ldr	r4, [pc, #280]	; (a42c <LorawanGetChAndInitiateRadioTransmit+0x120>)
    a312:	b089      	sub	sp, #36	; 0x24
    a314:	a902      	add	r1, sp, #8
    a316:	700b      	strb	r3, [r1, #0]
    a318:	0023      	movs	r3, r4
    a31a:	33b5      	adds	r3, #181	; 0xb5
    a31c:	781b      	ldrb	r3, [r3, #0]
    a31e:	704b      	strb	r3, [r1, #1]
    a320:	0023      	movs	r3, r4
    a322:	33b3      	adds	r3, #179	; 0xb3
    a324:	781b      	ldrb	r3, [r3, #0]
    a326:	708b      	strb	r3, [r1, #2]
    a328:	0023      	movs	r3, r4
    a32a:	33c8      	adds	r3, #200	; 0xc8
    a32c:	781b      	ldrb	r3, [r3, #0]
    a32e:	2b01      	cmp	r3, #1
    a330:	d108      	bne.n	a344 <LorawanGetChAndInitiateRadioTransmit+0x38>
    a332:	0020      	movs	r0, r4
    a334:	220e      	movs	r2, #14
    a336:	3050      	adds	r0, #80	; 0x50
    a338:	7803      	ldrb	r3, [r0, #0]
    a33a:	4393      	bics	r3, r2
    a33c:	001a      	movs	r2, r3
    a33e:	230c      	movs	r3, #12
    a340:	4313      	orrs	r3, r2
    a342:	7003      	strb	r3, [r0, #0]
    a344:	aa05      	add	r2, sp, #20
    a346:	202d      	movs	r0, #45	; 0x2d
    a348:	4d39      	ldr	r5, [pc, #228]	; (a430 <LorawanGetChAndInitiateRadioTransmit+0x124>)
    a34a:	47a8      	blx	r5
    a34c:	0023      	movs	r3, r4
    a34e:	2808      	cmp	r0, #8
    a350:	d132      	bne.n	a3b8 <LorawanGetChAndInitiateRadioTransmit+0xac>
    a352:	33c8      	adds	r3, #200	; 0xc8
    a354:	781b      	ldrb	r3, [r3, #0]
    a356:	ad03      	add	r5, sp, #12
    a358:	2b04      	cmp	r3, #4
    a35a:	d104      	bne.n	a366 <LorawanGetChAndInitiateRadioTransmit+0x5a>
    a35c:	3b03      	subs	r3, #3
    a35e:	702b      	strb	r3, [r5, #0]
    a360:	0028      	movs	r0, r5
    a362:	4b34      	ldr	r3, [pc, #208]	; (a434 <LorawanGetChAndInitiateRadioTransmit+0x128>)
    a364:	4798      	blx	r3
    a366:	9805      	ldr	r0, [sp, #20]
    a368:	4b33      	ldr	r3, [pc, #204]	; (a438 <LorawanGetChAndInitiateRadioTransmit+0x12c>)
    a36a:	9906      	ldr	r1, [sp, #24]
    a36c:	9a07      	ldr	r2, [sp, #28]
    a36e:	4798      	blx	r3
    a370:	0023      	movs	r3, r4
    a372:	339a      	adds	r3, #154	; 0x9a
    a374:	881b      	ldrh	r3, [r3, #0]
    a376:	0028      	movs	r0, r5
    a378:	702b      	strb	r3, [r5, #0]
    a37a:	4b30      	ldr	r3, [pc, #192]	; (a43c <LorawanGetChAndInitiateRadioTransmit+0x130>)
    a37c:	606b      	str	r3, [r5, #4]
    a37e:	4b30      	ldr	r3, [pc, #192]	; (a440 <LorawanGetChAndInitiateRadioTransmit+0x134>)
    a380:	4798      	blx	r3
    a382:	2800      	cmp	r0, #0
    a384:	d109      	bne.n	a39a <LorawanGetChAndInitiateRadioTransmit+0x8e>
    a386:	220e      	movs	r2, #14
    a388:	3450      	adds	r4, #80	; 0x50
    a38a:	7823      	ldrb	r3, [r4, #0]
    a38c:	4393      	bics	r3, r2
    a38e:	001a      	movs	r2, r3
    a390:	2302      	movs	r3, #2
    a392:	4313      	orrs	r3, r2
    a394:	7023      	strb	r3, [r4, #0]
    a396:	b009      	add	sp, #36	; 0x24
    a398:	bd30      	pop	{r4, r5, pc}
    a39a:	232c      	movs	r3, #44	; 0x2c
    a39c:	2200      	movs	r2, #0
    a39e:	33ff      	adds	r3, #255	; 0xff
    a3a0:	5ce3      	ldrb	r3, [r4, r3]
    a3a2:	4928      	ldr	r1, [pc, #160]	; (a444 <LorawanGetChAndInitiateRadioTransmit+0x138>)
    a3a4:	34c7      	adds	r4, #199	; 0xc7
    a3a6:	4359      	muls	r1, r3
    a3a8:	4b27      	ldr	r3, [pc, #156]	; (a448 <LorawanGetChAndInitiateRadioTransmit+0x13c>)
    a3aa:	7820      	ldrb	r0, [r4, #0]
    a3ac:	18c9      	adds	r1, r1, r3
    a3ae:	4b27      	ldr	r3, [pc, #156]	; (a44c <LorawanGetChAndInitiateRadioTransmit+0x140>)
    a3b0:	9200      	str	r2, [sp, #0]
    a3b2:	4c27      	ldr	r4, [pc, #156]	; (a450 <LorawanGetChAndInitiateRadioTransmit+0x144>)
    a3b4:	47a0      	blx	r4
    a3b6:	e7ee      	b.n	a396 <LorawanGetChAndInitiateRadioTransmit+0x8a>
    a3b8:	33e4      	adds	r3, #228	; 0xe4
    a3ba:	781b      	ldrb	r3, [r3, #0]
    a3bc:	079a      	lsls	r2, r3, #30
    a3be:	d516      	bpl.n	a3ee <LorawanGetChAndInitiateRadioTransmit+0xe2>
    a3c0:	aa03      	add	r2, sp, #12
    a3c2:	4924      	ldr	r1, [pc, #144]	; (a454 <LorawanGetChAndInitiateRadioTransmit+0x148>)
    a3c4:	2024      	movs	r0, #36	; 0x24
    a3c6:	47a8      	blx	r5
    a3c8:	9b03      	ldr	r3, [sp, #12]
    a3ca:	1c5a      	adds	r2, r3, #1
    a3cc:	d001      	beq.n	a3d2 <LorawanGetChAndInitiateRadioTransmit+0xc6>
    a3ce:	3314      	adds	r3, #20
    a3d0:	9303      	str	r3, [sp, #12]
    a3d2:	232c      	movs	r3, #44	; 0x2c
    a3d4:	21fa      	movs	r1, #250	; 0xfa
    a3d6:	33ff      	adds	r3, #255	; 0xff
    a3d8:	5ce3      	ldrb	r3, [r4, r3]
    a3da:	9a03      	ldr	r2, [sp, #12]
    a3dc:	0089      	lsls	r1, r1, #2
    a3de:	1ad3      	subs	r3, r2, r3
    a3e0:	2200      	movs	r2, #0
    a3e2:	4359      	muls	r1, r3
    a3e4:	34bd      	adds	r4, #189	; 0xbd
    a3e6:	7820      	ldrb	r0, [r4, #0]
    a3e8:	9200      	str	r2, [sp, #0]
    a3ea:	4b1b      	ldr	r3, [pc, #108]	; (a458 <LorawanGetChAndInitiateRadioTransmit+0x14c>)
    a3ec:	e7e1      	b.n	a3b2 <LorawanGetChAndInitiateRadioTransmit+0xa6>
    a3ee:	075b      	lsls	r3, r3, #29
    a3f0:	d508      	bpl.n	a404 <LorawanGetChAndInitiateRadioTransmit+0xf8>
    a3f2:	aa03      	add	r2, sp, #12
    a3f4:	4917      	ldr	r1, [pc, #92]	; (a454 <LorawanGetChAndInitiateRadioTransmit+0x148>)
    a3f6:	2031      	movs	r0, #49	; 0x31
    a3f8:	47a8      	blx	r5
    a3fa:	9b03      	ldr	r3, [sp, #12]
    a3fc:	1c5a      	adds	r2, r3, #1
    a3fe:	d0e8      	beq.n	a3d2 <LorawanGetChAndInitiateRadioTransmit+0xc6>
    a400:	3301      	adds	r3, #1
    a402:	e7e5      	b.n	a3d0 <LorawanGetChAndInitiateRadioTransmit+0xc4>
    a404:	0023      	movs	r3, r4
    a406:	2201      	movs	r2, #1
    a408:	3360      	adds	r3, #96	; 0x60
    a40a:	781b      	ldrb	r3, [r3, #0]
    a40c:	401a      	ands	r2, r3
    a40e:	d109      	bne.n	a424 <LorawanGetChAndInitiateRadioTransmit+0x118>
    a410:	232c      	movs	r3, #44	; 0x2c
    a412:	33ff      	adds	r3, #255	; 0xff
    a414:	5ce3      	ldrb	r3, [r4, r3]
    a416:	490b      	ldr	r1, [pc, #44]	; (a444 <LorawanGetChAndInitiateRadioTransmit+0x138>)
    a418:	34bd      	adds	r4, #189	; 0xbd
    a41a:	4359      	muls	r1, r3
    a41c:	4b0a      	ldr	r3, [pc, #40]	; (a448 <LorawanGetChAndInitiateRadioTransmit+0x13c>)
    a41e:	7820      	ldrb	r0, [r4, #0]
    a420:	18c9      	adds	r1, r1, r3
    a422:	e7e1      	b.n	a3e8 <LorawanGetChAndInitiateRadioTransmit+0xdc>
    a424:	4b0d      	ldr	r3, [pc, #52]	; (a45c <LorawanGetChAndInitiateRadioTransmit+0x150>)
    a426:	4798      	blx	r3
    a428:	e7b5      	b.n	a396 <LorawanGetChAndInitiateRadioTransmit+0x8a>
    a42a:	46c0      	nop			; (mov r8, r8)
    a42c:	20000f10 	.word	0x20000f10
    a430:	00006d79 	.word	0x00006d79
    a434:	0000e8c9 	.word	0x0000e8c9
    a438:	0000a2a1 	.word	0x0000a2a1
    a43c:	2000104d 	.word	0x2000104d
    a440:	0000dee9 	.word	0x0000dee9
    a444:	fffffc18 	.word	0xfffffc18
    a448:	001e8480 	.word	0x001e8480
    a44c:	0000a461 	.word	0x0000a461
    a450:	000018f1 	.word	0x000018f1
    a454:	20000fc3 	.word	0x20000fc3
    a458:	0000a515 	.word	0x0000a515
    a45c:	00009c79 	.word	0x00009c79

0000a460 <TransmissionErrorCallback>:
    a460:	b530      	push	{r4, r5, lr}
    a462:	4c22      	ldr	r4, [pc, #136]	; (a4ec <TransmissionErrorCallback+0x8c>)
    a464:	2501      	movs	r5, #1
    a466:	0023      	movs	r3, r4
    a468:	b08b      	sub	sp, #44	; 0x2c
    a46a:	a903      	add	r1, sp, #12
    a46c:	700d      	strb	r5, [r1, #0]
    a46e:	33b5      	adds	r3, #181	; 0xb5
    a470:	781b      	ldrb	r3, [r3, #0]
    a472:	aa07      	add	r2, sp, #28
    a474:	704b      	strb	r3, [r1, #1]
    a476:	0023      	movs	r3, r4
    a478:	33b3      	adds	r3, #179	; 0xb3
    a47a:	781b      	ldrb	r3, [r3, #0]
    a47c:	202d      	movs	r0, #45	; 0x2d
    a47e:	708b      	strb	r3, [r1, #2]
    a480:	4b1b      	ldr	r3, [pc, #108]	; (a4f0 <TransmissionErrorCallback+0x90>)
    a482:	4798      	blx	r3
    a484:	2808      	cmp	r0, #8
    a486:	d121      	bne.n	a4cc <TransmissionErrorCallback+0x6c>
    a488:	a804      	add	r0, sp, #16
    a48a:	4b1a      	ldr	r3, [pc, #104]	; (a4f4 <TransmissionErrorCallback+0x94>)
    a48c:	7005      	strb	r5, [r0, #0]
    a48e:	4798      	blx	r3
    a490:	9807      	ldr	r0, [sp, #28]
    a492:	4b19      	ldr	r3, [pc, #100]	; (a4f8 <TransmissionErrorCallback+0x98>)
    a494:	9908      	ldr	r1, [sp, #32]
    a496:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a498:	4798      	blx	r3
    a49a:	0023      	movs	r3, r4
    a49c:	339a      	adds	r3, #154	; 0x9a
    a49e:	881b      	ldrh	r3, [r3, #0]
    a4a0:	a805      	add	r0, sp, #20
    a4a2:	7003      	strb	r3, [r0, #0]
    a4a4:	4b15      	ldr	r3, [pc, #84]	; (a4fc <TransmissionErrorCallback+0x9c>)
    a4a6:	6043      	str	r3, [r0, #4]
    a4a8:	4b15      	ldr	r3, [pc, #84]	; (a500 <TransmissionErrorCallback+0xa0>)
    a4aa:	4798      	blx	r3
    a4ac:	2800      	cmp	r0, #0
    a4ae:	d01b      	beq.n	a4e8 <TransmissionErrorCallback+0x88>
    a4b0:	0023      	movs	r3, r4
    a4b2:	33c8      	adds	r3, #200	; 0xc8
    a4b4:	781b      	ldrb	r3, [r3, #0]
    a4b6:	42ab      	cmp	r3, r5
    a4b8:	d108      	bne.n	a4cc <TransmissionErrorCallback+0x6c>
    a4ba:	0021      	movs	r1, r4
    a4bc:	220e      	movs	r2, #14
    a4be:	3150      	adds	r1, #80	; 0x50
    a4c0:	780b      	ldrb	r3, [r1, #0]
    a4c2:	4393      	bics	r3, r2
    a4c4:	001a      	movs	r2, r3
    a4c6:	230c      	movs	r3, #12
    a4c8:	4313      	orrs	r3, r2
    a4ca:	700b      	strb	r3, [r1, #0]
    a4cc:	232c      	movs	r3, #44	; 0x2c
    a4ce:	2200      	movs	r2, #0
    a4d0:	33ff      	adds	r3, #255	; 0xff
    a4d2:	5ce3      	ldrb	r3, [r4, r3]
    a4d4:	490b      	ldr	r1, [pc, #44]	; (a504 <TransmissionErrorCallback+0xa4>)
    a4d6:	34c7      	adds	r4, #199	; 0xc7
    a4d8:	4359      	muls	r1, r3
    a4da:	4b0b      	ldr	r3, [pc, #44]	; (a508 <TransmissionErrorCallback+0xa8>)
    a4dc:	7820      	ldrb	r0, [r4, #0]
    a4de:	18c9      	adds	r1, r1, r3
    a4e0:	9200      	str	r2, [sp, #0]
    a4e2:	4b0a      	ldr	r3, [pc, #40]	; (a50c <TransmissionErrorCallback+0xac>)
    a4e4:	4c0a      	ldr	r4, [pc, #40]	; (a510 <TransmissionErrorCallback+0xb0>)
    a4e6:	47a0      	blx	r4
    a4e8:	b00b      	add	sp, #44	; 0x2c
    a4ea:	bd30      	pop	{r4, r5, pc}
    a4ec:	20000f10 	.word	0x20000f10
    a4f0:	00006d79 	.word	0x00006d79
    a4f4:	0000e8c9 	.word	0x0000e8c9
    a4f8:	0000a2a1 	.word	0x0000a2a1
    a4fc:	2000104d 	.word	0x2000104d
    a500:	0000dee9 	.word	0x0000dee9
    a504:	fffffc18 	.word	0xfffffc18
    a508:	001e8480 	.word	0x001e8480
    a50c:	0000a461 	.word	0x0000a461
    a510:	000018f1 	.word	0x000018f1

0000a514 <UnconfirmedTransmissionCallback>:
    a514:	b5f0      	push	{r4, r5, r6, r7, lr}
    a516:	4c38      	ldr	r4, [pc, #224]	; (a5f8 <UnconfirmedTransmissionCallback+0xe4>)
    a518:	b08b      	sub	sp, #44	; 0x2c
    a51a:	0023      	movs	r3, r4
    a51c:	339a      	adds	r3, #154	; 0x9a
    a51e:	881b      	ldrh	r3, [r3, #0]
    a520:	af05      	add	r7, sp, #20
    a522:	703b      	strb	r3, [r7, #0]
    a524:	4b35      	ldr	r3, [pc, #212]	; (a5fc <UnconfirmedTransmissionCallback+0xe8>)
    a526:	a903      	add	r1, sp, #12
    a528:	9306      	str	r3, [sp, #24]
    a52a:	2301      	movs	r3, #1
    a52c:	700b      	strb	r3, [r1, #0]
    a52e:	0023      	movs	r3, r4
    a530:	0026      	movs	r6, r4
    a532:	33b5      	adds	r3, #181	; 0xb5
    a534:	781b      	ldrb	r3, [r3, #0]
    a536:	36b3      	adds	r6, #179	; 0xb3
    a538:	704b      	strb	r3, [r1, #1]
    a53a:	7833      	ldrb	r3, [r6, #0]
    a53c:	aa07      	add	r2, sp, #28
    a53e:	202d      	movs	r0, #45	; 0x2d
    a540:	4d2f      	ldr	r5, [pc, #188]	; (a600 <UnconfirmedTransmissionCallback+0xec>)
    a542:	708b      	strb	r3, [r1, #2]
    a544:	47a8      	blx	r5
    a546:	2808      	cmp	r0, #8
    a548:	d12c      	bne.n	a5a4 <UnconfirmedTransmissionCallback+0x90>
    a54a:	2301      	movs	r3, #1
    a54c:	a804      	add	r0, sp, #16
    a54e:	7003      	strb	r3, [r0, #0]
    a550:	4b2c      	ldr	r3, [pc, #176]	; (a604 <UnconfirmedTransmissionCallback+0xf0>)
    a552:	4798      	blx	r3
    a554:	9807      	ldr	r0, [sp, #28]
    a556:	4b2c      	ldr	r3, [pc, #176]	; (a608 <UnconfirmedTransmissionCallback+0xf4>)
    a558:	9908      	ldr	r1, [sp, #32]
    a55a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a55c:	4798      	blx	r3
    a55e:	0038      	movs	r0, r7
    a560:	4b2a      	ldr	r3, [pc, #168]	; (a60c <UnconfirmedTransmissionCallback+0xf8>)
    a562:	4798      	blx	r3
    a564:	2800      	cmp	r0, #0
    a566:	d01b      	beq.n	a5a0 <UnconfirmedTransmissionCallback+0x8c>
    a568:	0023      	movs	r3, r4
    a56a:	33c8      	adds	r3, #200	; 0xc8
    a56c:	781b      	ldrb	r3, [r3, #0]
    a56e:	2b01      	cmp	r3, #1
    a570:	d108      	bne.n	a584 <UnconfirmedTransmissionCallback+0x70>
    a572:	0021      	movs	r1, r4
    a574:	220e      	movs	r2, #14
    a576:	3150      	adds	r1, #80	; 0x50
    a578:	780b      	ldrb	r3, [r1, #0]
    a57a:	4393      	bics	r3, r2
    a57c:	001a      	movs	r2, r3
    a57e:	230c      	movs	r3, #12
    a580:	4313      	orrs	r3, r2
    a582:	700b      	strb	r3, [r1, #0]
    a584:	232c      	movs	r3, #44	; 0x2c
    a586:	2200      	movs	r2, #0
    a588:	33ff      	adds	r3, #255	; 0xff
    a58a:	5ce3      	ldrb	r3, [r4, r3]
    a58c:	4920      	ldr	r1, [pc, #128]	; (a610 <UnconfirmedTransmissionCallback+0xfc>)
    a58e:	34c7      	adds	r4, #199	; 0xc7
    a590:	4359      	muls	r1, r3
    a592:	4b20      	ldr	r3, [pc, #128]	; (a614 <UnconfirmedTransmissionCallback+0x100>)
    a594:	7820      	ldrb	r0, [r4, #0]
    a596:	18c9      	adds	r1, r1, r3
    a598:	4b1f      	ldr	r3, [pc, #124]	; (a618 <UnconfirmedTransmissionCallback+0x104>)
    a59a:	9200      	str	r2, [sp, #0]
    a59c:	4c1f      	ldr	r4, [pc, #124]	; (a61c <UnconfirmedTransmissionCallback+0x108>)
    a59e:	47a0      	blx	r4
    a5a0:	b00b      	add	sp, #44	; 0x2c
    a5a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a5a4:	23fa      	movs	r3, #250	; 0xfa
    a5a6:	00db      	lsls	r3, r3, #3
    a5a8:	9304      	str	r3, [sp, #16]
    a5aa:	0023      	movs	r3, r4
    a5ac:	33e4      	adds	r3, #228	; 0xe4
    a5ae:	781b      	ldrb	r3, [r3, #0]
    a5b0:	079a      	lsls	r2, r3, #30
    a5b2:	d516      	bpl.n	a5e2 <UnconfirmedTransmissionCallback+0xce>
    a5b4:	aa04      	add	r2, sp, #16
    a5b6:	0031      	movs	r1, r6
    a5b8:	2024      	movs	r0, #36	; 0x24
    a5ba:	47a8      	blx	r5
    a5bc:	9b04      	ldr	r3, [sp, #16]
    a5be:	1c5a      	adds	r2, r3, #1
    a5c0:	d001      	beq.n	a5c6 <UnconfirmedTransmissionCallback+0xb2>
    a5c2:	3314      	adds	r3, #20
    a5c4:	9304      	str	r3, [sp, #16]
    a5c6:	232c      	movs	r3, #44	; 0x2c
    a5c8:	33ff      	adds	r3, #255	; 0xff
    a5ca:	5ce3      	ldrb	r3, [r4, r3]
    a5cc:	9a04      	ldr	r2, [sp, #16]
    a5ce:	21fa      	movs	r1, #250	; 0xfa
    a5d0:	1ad3      	subs	r3, r2, r3
    a5d2:	2200      	movs	r2, #0
    a5d4:	0089      	lsls	r1, r1, #2
    a5d6:	34bd      	adds	r4, #189	; 0xbd
    a5d8:	4359      	muls	r1, r3
    a5da:	7820      	ldrb	r0, [r4, #0]
    a5dc:	4b10      	ldr	r3, [pc, #64]	; (a620 <UnconfirmedTransmissionCallback+0x10c>)
    a5de:	9200      	str	r2, [sp, #0]
    a5e0:	e7dc      	b.n	a59c <UnconfirmedTransmissionCallback+0x88>
    a5e2:	075b      	lsls	r3, r3, #29
    a5e4:	d5ef      	bpl.n	a5c6 <UnconfirmedTransmissionCallback+0xb2>
    a5e6:	aa04      	add	r2, sp, #16
    a5e8:	0031      	movs	r1, r6
    a5ea:	2031      	movs	r0, #49	; 0x31
    a5ec:	47a8      	blx	r5
    a5ee:	9b04      	ldr	r3, [sp, #16]
    a5f0:	1c5a      	adds	r2, r3, #1
    a5f2:	d0e8      	beq.n	a5c6 <UnconfirmedTransmissionCallback+0xb2>
    a5f4:	3301      	adds	r3, #1
    a5f6:	e7e5      	b.n	a5c4 <UnconfirmedTransmissionCallback+0xb0>
    a5f8:	20000f10 	.word	0x20000f10
    a5fc:	2000104d 	.word	0x2000104d
    a600:	00006d79 	.word	0x00006d79
    a604:	0000e8c9 	.word	0x0000e8c9
    a608:	0000a2a1 	.word	0x0000a2a1
    a60c:	0000dee9 	.word	0x0000dee9
    a610:	fffffc18 	.word	0xfffffc18
    a614:	001e8480 	.word	0x001e8480
    a618:	0000a461 	.word	0x0000a461
    a61c:	000018f1 	.word	0x000018f1
    a620:	0000a515 	.word	0x0000a515

0000a624 <EncryptFRMPayload>:
    a624:	b5f0      	push	{r4, r5, r6, r7, lr}
    a626:	0007      	movs	r7, r0
    a628:	2401      	movs	r4, #1
    a62a:	b089      	sub	sp, #36	; 0x24
    a62c:	9305      	str	r3, [sp, #20]
    a62e:	ab0e      	add	r3, sp, #56	; 0x38
    a630:	9204      	str	r2, [sp, #16]
    a632:	cb04      	ldmia	r3!, {r2}
    a634:	9103      	str	r1, [sp, #12]
    a636:	781d      	ldrb	r5, [r3, #0]
    a638:	090b      	lsrs	r3, r1, #4
    a63a:	9206      	str	r2, [sp, #24]
    a63c:	9302      	str	r3, [sp, #8]
    a63e:	9b02      	ldr	r3, [sp, #8]
    a640:	429c      	cmp	r4, r3
    a642:	d922      	bls.n	a68a <EncryptFRMPayload+0x66>
    a644:	260f      	movs	r6, #15
    a646:	9b03      	ldr	r3, [sp, #12]
    a648:	4033      	ands	r3, r6
    a64a:	1e1e      	subs	r6, r3, #0
    a64c:	d01b      	beq.n	a686 <EncryptFRMPayload+0x62>
    a64e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a650:	0022      	movs	r2, r4
    a652:	9300      	str	r3, [sp, #0]
    a654:	9905      	ldr	r1, [sp, #20]
    a656:	2301      	movs	r3, #1
    a658:	9804      	ldr	r0, [sp, #16]
    a65a:	4c1d      	ldr	r4, [pc, #116]	; (a6d0 <EncryptFRMPayload+0xac>)
    a65c:	47a0      	blx	r4
    a65e:	4c1d      	ldr	r4, [pc, #116]	; (a6d4 <EncryptFRMPayload+0xb0>)
    a660:	4b1d      	ldr	r3, [pc, #116]	; (a6d8 <EncryptFRMPayload+0xb4>)
    a662:	9906      	ldr	r1, [sp, #24]
    a664:	0020      	movs	r0, r4
    a666:	4798      	blx	r3
    a668:	9b02      	ldr	r3, [sp, #8]
    a66a:	011a      	lsls	r2, r3, #4
    a66c:	2300      	movs	r3, #0
    a66e:	18ba      	adds	r2, r7, r2
    a670:	5d1f      	ldrb	r7, [r3, r4]
    a672:	5cd0      	ldrb	r0, [r2, r3]
    a674:	18e9      	adds	r1, r5, r3
    a676:	4078      	eors	r0, r7
    a678:	9f10      	ldr	r7, [sp, #64]	; 0x40
    a67a:	b2c9      	uxtb	r1, r1
    a67c:	3301      	adds	r3, #1
    a67e:	5478      	strb	r0, [r7, r1]
    a680:	b2d9      	uxtb	r1, r3
    a682:	428e      	cmp	r6, r1
    a684:	d8f4      	bhi.n	a670 <EncryptFRMPayload+0x4c>
    a686:	b009      	add	sp, #36	; 0x24
    a688:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a68a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a68c:	0022      	movs	r2, r4
    a68e:	9300      	str	r3, [sp, #0]
    a690:	9905      	ldr	r1, [sp, #20]
    a692:	2301      	movs	r3, #1
    a694:	9804      	ldr	r0, [sp, #16]
    a696:	4e0e      	ldr	r6, [pc, #56]	; (a6d0 <EncryptFRMPayload+0xac>)
    a698:	47b0      	blx	r6
    a69a:	4e0e      	ldr	r6, [pc, #56]	; (a6d4 <EncryptFRMPayload+0xb0>)
    a69c:	4b0e      	ldr	r3, [pc, #56]	; (a6d8 <EncryptFRMPayload+0xb4>)
    a69e:	9906      	ldr	r1, [sp, #24]
    a6a0:	0030      	movs	r0, r6
    a6a2:	4798      	blx	r3
    a6a4:	2300      	movs	r3, #0
    a6a6:	1e62      	subs	r2, r4, #1
    a6a8:	0112      	lsls	r2, r2, #4
    a6aa:	18ba      	adds	r2, r7, r2
    a6ac:	9207      	str	r2, [sp, #28]
    a6ae:	9a07      	ldr	r2, [sp, #28]
    a6b0:	18e9      	adds	r1, r5, r3
    a6b2:	5cd0      	ldrb	r0, [r2, r3]
    a6b4:	5d9a      	ldrb	r2, [r3, r6]
    a6b6:	b2c9      	uxtb	r1, r1
    a6b8:	4050      	eors	r0, r2
    a6ba:	9a10      	ldr	r2, [sp, #64]	; 0x40
    a6bc:	3301      	adds	r3, #1
    a6be:	5450      	strb	r0, [r2, r1]
    a6c0:	2b10      	cmp	r3, #16
    a6c2:	d1f4      	bne.n	a6ae <EncryptFRMPayload+0x8a>
    a6c4:	3510      	adds	r5, #16
    a6c6:	3401      	adds	r4, #1
    a6c8:	b2ed      	uxtb	r5, r5
    a6ca:	b2e4      	uxtb	r4, r4
    a6cc:	e7b7      	b.n	a63e <EncryptFRMPayload+0x1a>
    a6ce:	46c0      	nop			; (mov r8, r8)
    a6d0:	000096bd 	.word	0x000096bd
    a6d4:	2000057c 	.word	0x2000057c
    a6d8:	0000cc49 	.word	0x0000cc49

0000a6dc <AssemblePacket>:
    a6dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    a6de:	2710      	movs	r7, #16
    a6e0:	b08b      	sub	sp, #44	; 0x2c
    a6e2:	9304      	str	r3, [sp, #16]
    a6e4:	ab04      	add	r3, sp, #16
    a6e6:	829f      	strh	r7, [r3, #20]
    a6e8:	2316      	movs	r3, #22
    a6ea:	9205      	str	r2, [sp, #20]
    a6ec:	aa04      	add	r2, sp, #16
    a6ee:	189b      	adds	r3, r3, r2
    a6f0:	2500      	movs	r5, #0
    a6f2:	2210      	movs	r2, #16
    a6f4:	ac08      	add	r4, sp, #32
    a6f6:	9006      	str	r0, [sp, #24]
    a6f8:	9107      	str	r1, [sp, #28]
    a6fa:	32ff      	adds	r2, #255	; 0xff
    a6fc:	0029      	movs	r1, r5
    a6fe:	4ea1      	ldr	r6, [pc, #644]	; (a984 <AssemblePacket+0x2a8>)
    a700:	7025      	strb	r5, [r4, #0]
    a702:	48a1      	ldr	r0, [pc, #644]	; (a988 <AssemblePacket+0x2ac>)
    a704:	801d      	strh	r5, [r3, #0]
    a706:	47b0      	blx	r6
    a708:	003a      	movs	r2, r7
    a70a:	0029      	movs	r1, r5
    a70c:	489f      	ldr	r0, [pc, #636]	; (a98c <AssemblePacket+0x2b0>)
    a70e:	47b0      	blx	r6
    a710:	221f      	movs	r2, #31
    a712:	7823      	ldrb	r3, [r4, #0]
    a714:	9906      	ldr	r1, [sp, #24]
    a716:	4013      	ands	r3, r2
    a718:	42a9      	cmp	r1, r5
    a71a:	d041      	beq.n	a7a0 <AssemblePacket+0xc4>
    a71c:	3a9f      	subs	r2, #159	; 0x9f
    a71e:	4313      	orrs	r3, r2
    a720:	7023      	strb	r3, [r4, #0]
    a722:	4b9b      	ldr	r3, [pc, #620]	; (a990 <AssemblePacket+0x2b4>)
    a724:	3281      	adds	r2, #129	; 0x81
    a726:	3360      	adds	r3, #96	; 0x60
    a728:	7819      	ldrb	r1, [r3, #0]
    a72a:	430a      	orrs	r2, r1
    a72c:	701a      	strb	r2, [r3, #0]
    a72e:	22e0      	movs	r2, #224	; 0xe0
    a730:	7823      	ldrb	r3, [r4, #0]
    a732:	4895      	ldr	r0, [pc, #596]	; (a988 <AssemblePacket+0x2ac>)
    a734:	4013      	ands	r3, r2
    a736:	7023      	strb	r3, [r4, #0]
    a738:	4c95      	ldr	r4, [pc, #596]	; (a990 <AssemblePacket+0x2b4>)
    a73a:	7403      	strb	r3, [r0, #16]
    a73c:	3adc      	subs	r2, #220	; 0xdc
    a73e:	4b95      	ldr	r3, [pc, #596]	; (a994 <AssemblePacket+0x2b8>)
    a740:	3011      	adds	r0, #17
    a742:	1c61      	adds	r1, r4, #1
    a744:	4798      	blx	r3
    a746:	2315      	movs	r3, #21
    a748:	aa04      	add	r2, sp, #16
    a74a:	8293      	strh	r3, [r2, #20]
    a74c:	2300      	movs	r3, #0
    a74e:	469c      	mov	ip, r3
    a750:	0023      	movs	r3, r4
    a752:	3350      	adds	r3, #80	; 0x50
    a754:	781b      	ldrb	r3, [r3, #0]
    a756:	069b      	lsls	r3, r3, #26
    a758:	d400      	bmi.n	a75c <AssemblePacket+0x80>
    a75a:	e0e2      	b.n	a922 <AssemblePacket+0x246>
    a75c:	0023      	movs	r3, r4
    a75e:	33b3      	adds	r3, #179	; 0xb3
    a760:	781a      	ldrb	r2, [r3, #0]
    a762:	4b8d      	ldr	r3, [pc, #564]	; (a998 <AssemblePacket+0x2bc>)
    a764:	781d      	ldrb	r5, [r3, #0]
    a766:	42aa      	cmp	r2, r5
    a768:	d200      	bcs.n	a76c <AssemblePacket+0x90>
    a76a:	e0da      	b.n	a922 <AssemblePacket+0x246>
    a76c:	0021      	movs	r1, r4
    a76e:	0026      	movs	r6, r4
    a770:	2780      	movs	r7, #128	; 0x80
    a772:	3196      	adds	r1, #150	; 0x96
    a774:	880b      	ldrh	r3, [r1, #0]
    a776:	36a8      	adds	r6, #168	; 0xa8
    a778:	3301      	adds	r3, #1
    a77a:	b29b      	uxth	r3, r3
    a77c:	800b      	strh	r3, [r1, #0]
    a77e:	7836      	ldrb	r6, [r6, #0]
    a780:	427f      	negs	r7, r7
    a782:	1c38      	adds	r0, r7, #0
    a784:	42b3      	cmp	r3, r6
    a786:	d10f      	bne.n	a7a8 <AssemblePacket+0xcc>
    a788:	0023      	movs	r3, r4
    a78a:	4662      	mov	r2, ip
    a78c:	33c1      	adds	r3, #193	; 0xc1
    a78e:	701a      	strb	r2, [r3, #0]
    a790:	2040      	movs	r0, #64	; 0x40
    a792:	2310      	movs	r3, #16
    a794:	3460      	adds	r4, #96	; 0x60
    a796:	7822      	ldrb	r2, [r4, #0]
    a798:	4338      	orrs	r0, r7
    a79a:	4313      	orrs	r3, r2
    a79c:	7023      	strb	r3, [r4, #0]
    a79e:	e02e      	b.n	a7fe <AssemblePacket+0x122>
    a7a0:	2240      	movs	r2, #64	; 0x40
    a7a2:	4313      	orrs	r3, r2
    a7a4:	7023      	strb	r3, [r4, #0]
    a7a6:	e7c2      	b.n	a72e <AssemblePacket+0x52>
    a7a8:	42b3      	cmp	r3, r6
    a7aa:	d928      	bls.n	a7fe <AssemblePacket+0x122>
    a7ac:	42aa      	cmp	r2, r5
    a7ae:	d100      	bne.n	a7b2 <AssemblePacket+0xd6>
    a7b0:	e0b0      	b.n	a914 <AssemblePacket+0x238>
    a7b2:	0021      	movs	r1, r4
    a7b4:	0020      	movs	r0, r4
    a7b6:	31c1      	adds	r1, #193	; 0xc1
    a7b8:	780b      	ldrb	r3, [r1, #0]
    a7ba:	30a9      	adds	r0, #169	; 0xa9
    a7bc:	3301      	adds	r3, #1
    a7be:	b2db      	uxtb	r3, r3
    a7c0:	700b      	strb	r3, [r1, #0]
    a7c2:	7800      	ldrb	r0, [r0, #0]
    a7c4:	3801      	subs	r0, #1
    a7c6:	4283      	cmp	r3, r0
    a7c8:	dbe2      	blt.n	a790 <AssemblePacket+0xb4>
    a7ca:	4663      	mov	r3, ip
    a7cc:	700b      	strb	r3, [r1, #0]
    a7ce:	42aa      	cmp	r2, r5
    a7d0:	d90d      	bls.n	a7ee <AssemblePacket+0x112>
    a7d2:	2313      	movs	r3, #19
    a7d4:	a904      	add	r1, sp, #16
    a7d6:	3a01      	subs	r2, #1
    a7d8:	185b      	adds	r3, r3, r1
    a7da:	4d6f      	ldr	r5, [pc, #444]	; (a998 <AssemblePacket+0x2bc>)
    a7dc:	701a      	strb	r2, [r3, #0]
    a7de:	2613      	movs	r6, #19
    a7e0:	ab04      	add	r3, sp, #16
    a7e2:	18f6      	adds	r6, r6, r3
    a7e4:	782a      	ldrb	r2, [r5, #0]
    a7e6:	7833      	ldrb	r3, [r6, #0]
    a7e8:	429a      	cmp	r2, r3
    a7ea:	d800      	bhi.n	a7ee <AssemblePacket+0x112>
    a7ec:	e084      	b.n	a8f8 <AssemblePacket+0x21c>
    a7ee:	2210      	movs	r2, #16
    a7f0:	2040      	movs	r0, #64	; 0x40
    a7f2:	4b67      	ldr	r3, [pc, #412]	; (a990 <AssemblePacket+0x2b4>)
    a7f4:	4338      	orrs	r0, r7
    a7f6:	3360      	adds	r3, #96	; 0x60
    a7f8:	7819      	ldrb	r1, [r3, #0]
    a7fa:	430a      	orrs	r2, r1
    a7fc:	701a      	strb	r2, [r3, #0]
    a7fe:	4b64      	ldr	r3, [pc, #400]	; (a990 <AssemblePacket+0x2b4>)
    a800:	2402      	movs	r4, #2
    a802:	0019      	movs	r1, r3
    a804:	3160      	adds	r1, #96	; 0x60
    a806:	780a      	ldrb	r2, [r1, #0]
    a808:	4222      	tst	r2, r4
    a80a:	d003      	beq.n	a814 <AssemblePacket+0x138>
    a80c:	2520      	movs	r5, #32
    a80e:	43a2      	bics	r2, r4
    a810:	4328      	orrs	r0, r5
    a812:	700a      	strb	r2, [r1, #0]
    a814:	2210      	movs	r2, #16
    a816:	0004      	movs	r4, r0
    a818:	33ac      	adds	r3, #172	; 0xac
    a81a:	781e      	ldrb	r6, [r3, #0]
    a81c:	4394      	bics	r4, r2
    a81e:	2e00      	cmp	r6, #0
    a820:	d003      	beq.n	a82a <AssemblePacket+0x14e>
    a822:	9b04      	ldr	r3, [sp, #16]
    a824:	2b00      	cmp	r3, #0
    a826:	d000      	beq.n	a82a <AssemblePacket+0x14e>
    a828:	e07d      	b.n	a926 <AssemblePacket+0x24a>
    a82a:	230f      	movs	r3, #15
    a82c:	439c      	bics	r4, r3
    a82e:	0020      	movs	r0, r4
    a830:	ac09      	add	r4, sp, #36	; 0x24
    a832:	8825      	ldrh	r5, [r4, #0]
    a834:	4f54      	ldr	r7, [pc, #336]	; (a988 <AssemblePacket+0x2ac>)
    a836:	2202      	movs	r2, #2
    a838:	5578      	strb	r0, [r7, r5]
    a83a:	1c68      	adds	r0, r5, #1
    a83c:	b280      	uxth	r0, r0
    a83e:	19c0      	adds	r0, r0, r7
    a840:	4956      	ldr	r1, [pc, #344]	; (a99c <AssemblePacket+0x2c0>)
    a842:	4b54      	ldr	r3, [pc, #336]	; (a994 <AssemblePacket+0x2b8>)
    a844:	3503      	adds	r5, #3
    a846:	4798      	blx	r3
    a848:	8025      	strh	r5, [r4, #0]
    a84a:	2e00      	cmp	r6, #0
    a84c:	d007      	beq.n	a85e <AssemblePacket+0x182>
    a84e:	9b04      	ldr	r3, [sp, #16]
    a850:	2b00      	cmp	r3, #0
    a852:	d004      	beq.n	a85e <AssemblePacket+0x182>
    a854:	2201      	movs	r2, #1
    a856:	0021      	movs	r1, r4
    a858:	0038      	movs	r0, r7
    a85a:	4b51      	ldr	r3, [pc, #324]	; (a9a0 <AssemblePacket+0x2c4>)
    a85c:	4798      	blx	r3
    a85e:	466a      	mov	r2, sp
    a860:	8823      	ldrh	r3, [r4, #0]
    a862:	7f12      	ldrb	r2, [r2, #28]
    a864:	1c5d      	adds	r5, r3, #1
    a866:	54fa      	strb	r2, [r7, r3]
    a868:	9b04      	ldr	r3, [sp, #16]
    a86a:	b2ad      	uxth	r5, r5
    a86c:	8025      	strh	r5, [r4, #0]
    a86e:	2b00      	cmp	r3, #0
    a870:	d062      	beq.n	a938 <AssemblePacket+0x25c>
    a872:	001a      	movs	r2, r3
    a874:	1978      	adds	r0, r7, r5
    a876:	9905      	ldr	r1, [sp, #20]
    a878:	4b46      	ldr	r3, [pc, #280]	; (a994 <AssemblePacket+0x2b8>)
    a87a:	4798      	blx	r3
    a87c:	466b      	mov	r3, sp
    a87e:	4a44      	ldr	r2, [pc, #272]	; (a990 <AssemblePacket+0x2b4>)
    a880:	7c19      	ldrb	r1, [r3, #16]
    a882:	6813      	ldr	r3, [r2, #0]
    a884:	b2ed      	uxtb	r5, r5
    a886:	0a18      	lsrs	r0, r3, #8
    a888:	7913      	ldrb	r3, [r2, #4]
    a88a:	9501      	str	r5, [sp, #4]
    a88c:	061b      	lsls	r3, r3, #24
    a88e:	4303      	orrs	r3, r0
    a890:	9303      	str	r3, [sp, #12]
    a892:	4b44      	ldr	r3, [pc, #272]	; (a9a4 <AssemblePacket+0x2c8>)
    a894:	9702      	str	r7, [sp, #8]
    a896:	9300      	str	r3, [sp, #0]
    a898:	6d53      	ldr	r3, [r2, #84]	; 0x54
    a89a:	9805      	ldr	r0, [sp, #20]
    a89c:	2200      	movs	r2, #0
    a89e:	4d42      	ldr	r5, [pc, #264]	; (a9a8 <AssemblePacket+0x2cc>)
    a8a0:	47a8      	blx	r5
    a8a2:	8823      	ldrh	r3, [r4, #0]
    a8a4:	9a04      	ldr	r2, [sp, #16]
    a8a6:	189b      	adds	r3, r3, r2
    a8a8:	8023      	strh	r3, [r4, #0]
    a8aa:	4c39      	ldr	r4, [pc, #228]	; (a990 <AssemblePacket+0x2b4>)
    a8ac:	ae09      	add	r6, sp, #36	; 0x24
    a8ae:	6823      	ldr	r3, [r4, #0]
    a8b0:	8832      	ldrh	r2, [r6, #0]
    a8b2:	0a19      	lsrs	r1, r3, #8
    a8b4:	7923      	ldrb	r3, [r4, #4]
    a8b6:	3a10      	subs	r2, #16
    a8b8:	061b      	lsls	r3, r3, #24
    a8ba:	430b      	orrs	r3, r1
    a8bc:	9300      	str	r3, [sp, #0]
    a8be:	6d61      	ldr	r1, [r4, #84]	; 0x54
    a8c0:	b2d2      	uxtb	r2, r2
    a8c2:	2349      	movs	r3, #73	; 0x49
    a8c4:	2000      	movs	r0, #0
    a8c6:	4d39      	ldr	r5, [pc, #228]	; (a9ac <AssemblePacket+0x2d0>)
    a8c8:	47a8      	blx	r5
    a8ca:	4f2f      	ldr	r7, [pc, #188]	; (a988 <AssemblePacket+0x2ac>)
    a8cc:	2210      	movs	r2, #16
    a8ce:	492f      	ldr	r1, [pc, #188]	; (a98c <AssemblePacket+0x2b0>)
    a8d0:	0038      	movs	r0, r7
    a8d2:	4b30      	ldr	r3, [pc, #192]	; (a994 <AssemblePacket+0x2b8>)
    a8d4:	4798      	blx	r3
    a8d6:	7833      	ldrb	r3, [r6, #0]
    a8d8:	003a      	movs	r2, r7
    a8da:	492c      	ldr	r1, [pc, #176]	; (a98c <AssemblePacket+0x2b0>)
    a8dc:	4834      	ldr	r0, [pc, #208]	; (a9b0 <AssemblePacket+0x2d4>)
    a8de:	4d35      	ldr	r5, [pc, #212]	; (a9b4 <AssemblePacket+0x2d8>)
    a8e0:	47a8      	blx	r5
    a8e2:	8836      	ldrh	r6, [r6, #0]
    a8e4:	2204      	movs	r2, #4
    a8e6:	19f0      	adds	r0, r6, r7
    a8e8:	4928      	ldr	r1, [pc, #160]	; (a98c <AssemblePacket+0x2b0>)
    a8ea:	4b2a      	ldr	r3, [pc, #168]	; (a994 <AssemblePacket+0x2b8>)
    a8ec:	4798      	blx	r3
    a8ee:	3e0c      	subs	r6, #12
    a8f0:	349a      	adds	r4, #154	; 0x9a
    a8f2:	8026      	strh	r6, [r4, #0]
    a8f4:	b00b      	add	sp, #44	; 0x2c
    a8f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a8f8:	4b2f      	ldr	r3, [pc, #188]	; (a9b8 <AssemblePacket+0x2dc>)
    a8fa:	0031      	movs	r1, r6
    a8fc:	2011      	movs	r0, #17
    a8fe:	4798      	blx	r3
    a900:	7833      	ldrb	r3, [r6, #0]
    a902:	2808      	cmp	r0, #8
    a904:	d03a      	beq.n	a97c <AssemblePacket+0x2a0>
    a906:	782a      	ldrb	r2, [r5, #0]
    a908:	429a      	cmp	r2, r3
    a90a:	d300      	bcc.n	a90e <AssemblePacket+0x232>
    a90c:	e767      	b.n	a7de <AssemblePacket+0x102>
    a90e:	3b01      	subs	r3, #1
    a910:	7033      	strb	r3, [r6, #0]
    a912:	e764      	b.n	a7de <AssemblePacket+0x102>
    a914:	4663      	mov	r3, ip
    a916:	800b      	strh	r3, [r1, #0]
    a918:	2210      	movs	r2, #16
    a91a:	3460      	adds	r4, #96	; 0x60
    a91c:	7823      	ldrb	r3, [r4, #0]
    a91e:	4393      	bics	r3, r2
    a920:	e73c      	b.n	a79c <AssemblePacket+0xc0>
    a922:	2000      	movs	r0, #0
    a924:	e7f8      	b.n	a918 <AssemblePacket+0x23c>
    a926:	4b25      	ldr	r3, [pc, #148]	; (a9bc <AssemblePacket+0x2e0>)
    a928:	4798      	blx	r3
    a92a:	220f      	movs	r2, #15
    a92c:	0003      	movs	r3, r0
    a92e:	0020      	movs	r0, r4
    a930:	4013      	ands	r3, r2
    a932:	4390      	bics	r0, r2
    a934:	4318      	orrs	r0, r3
    a936:	e77b      	b.n	a830 <AssemblePacket+0x154>
    a938:	4d15      	ldr	r5, [pc, #84]	; (a990 <AssemblePacket+0x2b4>)
    a93a:	002b      	movs	r3, r5
    a93c:	33ac      	adds	r3, #172	; 0xac
    a93e:	781b      	ldrb	r3, [r3, #0]
    a940:	2b00      	cmp	r3, #0
    a942:	d0b2      	beq.n	a8aa <AssemblePacket+0x1ce>
    a944:	2616      	movs	r6, #22
    a946:	ab04      	add	r3, sp, #16
    a948:	18f6      	adds	r6, r6, r3
    a94a:	9a04      	ldr	r2, [sp, #16]
    a94c:	0031      	movs	r1, r6
    a94e:	481c      	ldr	r0, [pc, #112]	; (a9c0 <AssemblePacket+0x2e4>)
    a950:	4b13      	ldr	r3, [pc, #76]	; (a9a0 <AssemblePacket+0x2c4>)
    a952:	4798      	blx	r3
    a954:	682b      	ldr	r3, [r5, #0]
    a956:	7831      	ldrb	r1, [r6, #0]
    a958:	0a1a      	lsrs	r2, r3, #8
    a95a:	792b      	ldrb	r3, [r5, #4]
    a95c:	9702      	str	r7, [sp, #8]
    a95e:	061b      	lsls	r3, r3, #24
    a960:	4313      	orrs	r3, r2
    a962:	9303      	str	r3, [sp, #12]
    a964:	7823      	ldrb	r3, [r4, #0]
    a966:	9a04      	ldr	r2, [sp, #16]
    a968:	9301      	str	r3, [sp, #4]
    a96a:	4b11      	ldr	r3, [pc, #68]	; (a9b0 <AssemblePacket+0x2d4>)
    a96c:	4814      	ldr	r0, [pc, #80]	; (a9c0 <AssemblePacket+0x2e4>)
    a96e:	9300      	str	r3, [sp, #0]
    a970:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    a972:	4d0d      	ldr	r5, [pc, #52]	; (a9a8 <AssemblePacket+0x2cc>)
    a974:	47a8      	blx	r5
    a976:	8823      	ldrh	r3, [r4, #0]
    a978:	8832      	ldrh	r2, [r6, #0]
    a97a:	e794      	b.n	a8a6 <AssemblePacket+0x1ca>
    a97c:	34b3      	adds	r4, #179	; 0xb3
    a97e:	7023      	strb	r3, [r4, #0]
    a980:	e735      	b.n	a7ee <AssemblePacket+0x112>
    a982:	46c0      	nop			; (mov r8, r8)
    a984:	000112e7 	.word	0x000112e7
    a988:	2000103d 	.word	0x2000103d
    a98c:	2000057c 	.word	0x2000057c
    a990:	20000f10 	.word	0x20000f10
    a994:	000112d5 	.word	0x000112d5
    a998:	20000fce 	.word	0x20000fce
    a99c:	20000f64 	.word	0x20000f64
    a9a0:	00009421 	.word	0x00009421
    a9a4:	20000f25 	.word	0x20000f25
    a9a8:	0000a625 	.word	0x0000a625
    a9ac:	000096bd 	.word	0x000096bd
    a9b0:	20000f15 	.word	0x20000f15
    a9b4:	0000cc89 	.word	0x0000cc89
    a9b8:	00006d95 	.word	0x00006d95
    a9bc:	0000931d 	.word	0x0000931d
    a9c0:	20001158 	.word	0x20001158

0000a9c4 <UpdateTransactionCompleteCbParams>:
    a9c4:	2390      	movs	r3, #144	; 0x90
    a9c6:	2201      	movs	r2, #1
    a9c8:	b570      	push	{r4, r5, r6, lr}
    a9ca:	4915      	ldr	r1, [pc, #84]	; (aa20 <UpdateTransactionCompleteCbParams+0x5c>)
    a9cc:	4c15      	ldr	r4, [pc, #84]	; (aa24 <UpdateTransactionCompleteCbParams+0x60>)
    a9ce:	005b      	lsls	r3, r3, #1
    a9d0:	54e2      	strb	r2, [r4, r3]
    a9d2:	784a      	ldrb	r2, [r1, #1]
    a9d4:	780b      	ldrb	r3, [r1, #0]
    a9d6:	0212      	lsls	r2, r2, #8
    a9d8:	431a      	orrs	r2, r3
    a9da:	788b      	ldrb	r3, [r1, #2]
    a9dc:	041b      	lsls	r3, r3, #16
    a9de:	431a      	orrs	r2, r3
    a9e0:	78cb      	ldrb	r3, [r1, #3]
    a9e2:	061b      	lsls	r3, r3, #24
    a9e4:	4313      	orrs	r3, r2
    a9e6:	d012      	beq.n	aa0e <UpdateTransactionCompleteCbParams+0x4a>
    a9e8:	0022      	movs	r2, r4
    a9ea:	2504      	movs	r5, #4
    a9ec:	32cc      	adds	r2, #204	; 0xcc
    a9ee:	6812      	ldr	r2, [r2, #0]
    a9f0:	422a      	tst	r2, r5
    a9f2:	d00c      	beq.n	aa0e <UpdateTransactionCompleteCbParams+0x4a>
    a9f4:	0022      	movs	r2, r4
    a9f6:	32d0      	adds	r2, #208	; 0xd0
    a9f8:	6812      	ldr	r2, [r2, #0]
    a9fa:	2a00      	cmp	r2, #0
    a9fc:	d007      	beq.n	aa0e <UpdateTransactionCompleteCbParams+0x4a>
    a9fe:	0021      	movs	r1, r4
    aa00:	31d4      	adds	r1, #212	; 0xd4
    aa02:	700d      	strb	r5, [r1, #0]
    aa04:	0025      	movs	r5, r4
    aa06:	35d8      	adds	r5, #216	; 0xd8
    aa08:	7028      	strb	r0, [r5, #0]
    aa0a:	0010      	movs	r0, r2
    aa0c:	4798      	blx	r3
    aa0e:	2390      	movs	r3, #144	; 0x90
    aa10:	005b      	lsls	r3, r3, #1
    aa12:	5ce3      	ldrb	r3, [r4, r3]
    aa14:	2b00      	cmp	r3, #0
    aa16:	d002      	beq.n	aa1e <UpdateTransactionCompleteCbParams+0x5a>
    aa18:	2300      	movs	r3, #0
    aa1a:	34d0      	adds	r4, #208	; 0xd0
    aa1c:	6023      	str	r3, [r4, #0]
    aa1e:	bd70      	pop	{r4, r5, r6, pc}
    aa20:	20001150 	.word	0x20001150
    aa24:	20000f10 	.word	0x20000f10

0000aa28 <UpdateRxDataAvailableCbParams>:
    aa28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    aa2a:	4e13      	ldr	r6, [pc, #76]	; (aa78 <UpdateRxDataAvailableCbParams+0x50>)
    aa2c:	7874      	ldrb	r4, [r6, #1]
    aa2e:	7835      	ldrb	r5, [r6, #0]
    aa30:	0224      	lsls	r4, r4, #8
    aa32:	432c      	orrs	r4, r5
    aa34:	78b5      	ldrb	r5, [r6, #2]
    aa36:	042d      	lsls	r5, r5, #16
    aa38:	432c      	orrs	r4, r5
    aa3a:	78f5      	ldrb	r5, [r6, #3]
    aa3c:	062d      	lsls	r5, r5, #24
    aa3e:	4325      	orrs	r5, r4
    aa40:	d019      	beq.n	aa76 <UpdateRxDataAvailableCbParams+0x4e>
    aa42:	4c0e      	ldr	r4, [pc, #56]	; (aa7c <UpdateRxDataAvailableCbParams+0x54>)
    aa44:	2702      	movs	r7, #2
    aa46:	0026      	movs	r6, r4
    aa48:	36cc      	adds	r6, #204	; 0xcc
    aa4a:	6836      	ldr	r6, [r6, #0]
    aa4c:	423e      	tst	r6, r7
    aa4e:	d012      	beq.n	aa76 <UpdateRxDataAvailableCbParams+0x4e>
    aa50:	0026      	movs	r6, r4
    aa52:	36d4      	adds	r6, #212	; 0xd4
    aa54:	7037      	strb	r7, [r6, #0]
    aa56:	0027      	movs	r7, r4
    aa58:	37d8      	adds	r7, #216	; 0xd8
    aa5a:	6038      	str	r0, [r7, #0]
    aa5c:	0020      	movs	r0, r4
    aa5e:	30dc      	adds	r0, #220	; 0xdc
    aa60:	6001      	str	r1, [r0, #0]
    aa62:	0021      	movs	r1, r4
    aa64:	31e0      	adds	r1, #224	; 0xe0
    aa66:	700a      	strb	r2, [r1, #0]
    aa68:	0022      	movs	r2, r4
    aa6a:	34d0      	adds	r4, #208	; 0xd0
    aa6c:	32e1      	adds	r2, #225	; 0xe1
    aa6e:	7013      	strb	r3, [r2, #0]
    aa70:	0031      	movs	r1, r6
    aa72:	6820      	ldr	r0, [r4, #0]
    aa74:	47a8      	blx	r5
    aa76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    aa78:	20001150 	.word	0x20001150
    aa7c:	20000f10 	.word	0x20000f10

0000aa80 <LorawanNotifyAppOnRxdone>:
    aa80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    aa82:	4c25      	ldr	r4, [pc, #148]	; (ab18 <LorawanNotifyAppOnRxdone+0x98>)
    aa84:	0007      	movs	r7, r0
    aa86:	0023      	movs	r3, r4
    aa88:	33c8      	adds	r3, #200	; 0xc8
    aa8a:	781b      	ldrb	r3, [r3, #0]
    aa8c:	000d      	movs	r5, r1
    aa8e:	0016      	movs	r6, r2
    aa90:	2b01      	cmp	r3, #1
    aa92:	d136      	bne.n	ab02 <LorawanNotifyAppOnRxdone+0x82>
    aa94:	0022      	movs	r2, r4
    aa96:	210e      	movs	r1, #14
    aa98:	3250      	adds	r2, #80	; 0x50
    aa9a:	7813      	ldrb	r3, [r2, #0]
    aa9c:	438b      	bics	r3, r1
    aa9e:	7013      	strb	r3, [r2, #0]
    aaa0:	491e      	ldr	r1, [pc, #120]	; (ab1c <LorawanNotifyAppOnRxdone+0x9c>)
    aaa2:	784a      	ldrb	r2, [r1, #1]
    aaa4:	780b      	ldrb	r3, [r1, #0]
    aaa6:	0212      	lsls	r2, r2, #8
    aaa8:	431a      	orrs	r2, r3
    aaaa:	788b      	ldrb	r3, [r1, #2]
    aaac:	041b      	lsls	r3, r3, #16
    aaae:	431a      	orrs	r2, r3
    aab0:	78cb      	ldrb	r3, [r1, #3]
    aab2:	061b      	lsls	r3, r3, #24
    aab4:	4313      	orrs	r3, r2
    aab6:	d023      	beq.n	ab00 <LorawanNotifyAppOnRxdone+0x80>
    aab8:	0022      	movs	r2, r4
    aaba:	2120      	movs	r1, #32
    aabc:	3260      	adds	r2, #96	; 0x60
    aabe:	7813      	ldrb	r3, [r2, #0]
    aac0:	438b      	bics	r3, r1
    aac2:	7013      	strb	r3, [r2, #0]
    aac4:	0023      	movs	r3, r4
    aac6:	33c8      	adds	r3, #200	; 0xc8
    aac8:	781b      	ldrb	r3, [r3, #0]
    aaca:	7878      	ldrb	r0, [r7, #1]
    aacc:	469c      	mov	ip, r3
    aace:	78fa      	ldrb	r2, [r7, #3]
    aad0:	78b9      	ldrb	r1, [r7, #2]
    aad2:	793b      	ldrb	r3, [r7, #4]
    aad4:	4667      	mov	r7, ip
    aad6:	0209      	lsls	r1, r1, #8
    aad8:	4301      	orrs	r1, r0
    aada:	0410      	lsls	r0, r2, #16
    aadc:	4308      	orrs	r0, r1
    aade:	061b      	lsls	r3, r3, #24
    aae0:	4318      	orrs	r0, r3
    aae2:	0032      	movs	r2, r6
    aae4:	2308      	movs	r3, #8
    aae6:	0029      	movs	r1, r5
    aae8:	2f04      	cmp	r7, #4
    aaea:	d112      	bne.n	ab12 <LorawanNotifyAppOnRxdone+0x92>
    aaec:	4d0c      	ldr	r5, [pc, #48]	; (ab20 <LorawanNotifyAppOnRxdone+0xa0>)
    aaee:	47a8      	blx	r5
    aaf0:	2390      	movs	r3, #144	; 0x90
    aaf2:	005b      	lsls	r3, r3, #1
    aaf4:	5ce3      	ldrb	r3, [r4, r3]
    aaf6:	2b00      	cmp	r3, #0
    aaf8:	d102      	bne.n	ab00 <LorawanNotifyAppOnRxdone+0x80>
    aafa:	2008      	movs	r0, #8
    aafc:	4b09      	ldr	r3, [pc, #36]	; (ab24 <LorawanNotifyAppOnRxdone+0xa4>)
    aafe:	4798      	blx	r3
    ab00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ab02:	2b04      	cmp	r3, #4
    ab04:	d1cc      	bne.n	aaa0 <LorawanNotifyAppOnRxdone+0x20>
    ab06:	0023      	movs	r3, r4
    ab08:	33bc      	adds	r3, #188	; 0xbc
    ab0a:	7818      	ldrb	r0, [r3, #0]
    ab0c:	4b06      	ldr	r3, [pc, #24]	; (ab28 <LorawanNotifyAppOnRxdone+0xa8>)
    ab0e:	4798      	blx	r3
    ab10:	e7c6      	b.n	aaa0 <LorawanNotifyAppOnRxdone+0x20>
    ab12:	4d06      	ldr	r5, [pc, #24]	; (ab2c <LorawanNotifyAppOnRxdone+0xac>)
    ab14:	47a8      	blx	r5
    ab16:	e7eb      	b.n	aaf0 <LorawanNotifyAppOnRxdone+0x70>
    ab18:	20000f10 	.word	0x20000f10
    ab1c:	20001150 	.word	0x20001150
    ab20:	0000cfe9 	.word	0x0000cfe9
    ab24:	0000a9c5 	.word	0x0000a9c5
    ab28:	00001bf5 	.word	0x00001bf5
    ab2c:	0000aa29 	.word	0x0000aa29

0000ab30 <LorawanSetReceiveWindow2Parameters>:
    ab30:	b537      	push	{r0, r1, r2, r4, r5, lr}
    ab32:	466b      	mov	r3, sp
    ab34:	1cdd      	adds	r5, r3, #3
    ab36:	9001      	str	r0, [sp, #4]
    ab38:	7029      	strb	r1, [r5, #0]
    ab3a:	2001      	movs	r0, #1
    ab3c:	a901      	add	r1, sp, #4
    ab3e:	4c09      	ldr	r4, [pc, #36]	; (ab64 <LorawanSetReceiveWindow2Parameters+0x34>)
    ab40:	47a0      	blx	r4
    ab42:	2808      	cmp	r0, #8
    ab44:	d002      	beq.n	ab4c <LorawanSetReceiveWindow2Parameters+0x1c>
    ab46:	240a      	movs	r4, #10
    ab48:	0020      	movs	r0, r4
    ab4a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    ab4c:	0029      	movs	r1, r5
    ab4e:	200f      	movs	r0, #15
    ab50:	47a0      	blx	r4
    ab52:	0004      	movs	r4, r0
    ab54:	2808      	cmp	r0, #8
    ab56:	d1f6      	bne.n	ab46 <LorawanSetReceiveWindow2Parameters+0x16>
    ab58:	7829      	ldrb	r1, [r5, #0]
    ab5a:	9801      	ldr	r0, [sp, #4]
    ab5c:	4b02      	ldr	r3, [pc, #8]	; (ab68 <LorawanSetReceiveWindow2Parameters+0x38>)
    ab5e:	4798      	blx	r3
    ab60:	e7f2      	b.n	ab48 <LorawanSetReceiveWindow2Parameters+0x18>
    ab62:	46c0      	nop			; (mov r8, r8)
    ab64:	00006d95 	.word	0x00006d95
    ab68:	00009cc9 	.word	0x00009cc9

0000ab6c <LorawanSetFrequency>:
    ab6c:	b507      	push	{r0, r1, r2, lr}
    ab6e:	466b      	mov	r3, sp
    ab70:	9100      	str	r1, [sp, #0]
    ab72:	7118      	strb	r0, [r3, #4]
    ab74:	4669      	mov	r1, sp
    ab76:	2000      	movs	r0, #0
    ab78:	4b01      	ldr	r3, [pc, #4]	; (ab80 <LorawanSetFrequency+0x14>)
    ab7a:	4798      	blx	r3
    ab7c:	bd0e      	pop	{r1, r2, r3, pc}
    ab7e:	46c0      	nop			; (mov r8, r8)
    ab80:	00006db1 	.word	0x00006db1

0000ab84 <LorawanGetReceiveWindow2Parameters>:
    ab84:	4a06      	ldr	r2, [pc, #24]	; (aba0 <LorawanGetReceiveWindow2Parameters+0x1c>)
    ab86:	0013      	movs	r3, r2
    ab88:	334e      	adds	r3, #78	; 0x4e
    ab8a:	781b      	ldrb	r3, [r3, #0]
    ab8c:	7103      	strb	r3, [r0, #4]
    ab8e:	0013      	movs	r3, r2
    ab90:	324c      	adds	r2, #76	; 0x4c
    ab92:	334a      	adds	r3, #74	; 0x4a
    ab94:	8819      	ldrh	r1, [r3, #0]
    ab96:	8813      	ldrh	r3, [r2, #0]
    ab98:	041b      	lsls	r3, r3, #16
    ab9a:	430b      	orrs	r3, r1
    ab9c:	6003      	str	r3, [r0, #0]
    ab9e:	4770      	bx	lr
    aba0:	20000f10 	.word	0x20000f10

0000aba4 <LORAWAN_GetAttr>:
    aba4:	b530      	push	{r4, r5, lr}
    aba6:	000b      	movs	r3, r1
    aba8:	b085      	sub	sp, #20
    abaa:	0014      	movs	r4, r2
    abac:	2835      	cmp	r0, #53	; 0x35
    abae:	d837      	bhi.n	ac20 <LORAWAN_GetAttr+0x7c>
    abb0:	f004 f9a2 	bl	eef8 <__gnu_thumb1_case_uhi>
    abb4:	00580039 	.word	0x00580039
    abb8:	006c005c 	.word	0x006c005c
    abbc:	00680064 	.word	0x00680064
    abc0:	00760070 	.word	0x00760070
    abc4:	007e007b 	.word	0x007e007b
    abc8:	00840081 	.word	0x00840081
    abcc:	008f0087 	.word	0x008f0087
    abd0:	00950092 	.word	0x00950092
    abd4:	009c0099 	.word	0x009c0099
    abd8:	00a2009f 	.word	0x00a2009f
    abdc:	00cd00a5 	.word	0x00cd00a5
    abe0:	00a800ab 	.word	0x00a800ab
    abe4:	00d400da 	.word	0x00d400da
    abe8:	00c300c8 	.word	0x00c300c8
    abec:	003600bc 	.word	0x003600bc
    abf0:	00b6008c 	.word	0x00b6008c
    abf4:	00b300b9 	.word	0x00b300b9
    abf8:	00d100b0 	.word	0x00d100b0
    abfc:	003f00d7 	.word	0x003f00d7
    ac00:	0041003f 	.word	0x0041003f
    ac04:	00f000e2 	.word	0x00f000e2
    ac08:	00e700ec 	.word	0x00e700ec
    ac0c:	003600f3 	.word	0x003600f3
    ac10:	00fb00f7 	.word	0x00fb00f7
    ac14:	01050100 	.word	0x01050100
    ac18:	010e010a 	.word	0x010e010a
    ac1c:	01140111 	.word	0x01140111
    ac20:	200a      	movs	r0, #10
    ac22:	b005      	add	sp, #20
    ac24:	bd30      	pop	{r4, r5, pc}
    ac26:	2208      	movs	r2, #8
    ac28:	4971      	ldr	r1, [pc, #452]	; (adf0 <LORAWAN_GetAttr+0x24c>)
    ac2a:	313d      	adds	r1, #61	; 0x3d
    ac2c:	0020      	movs	r0, r4
    ac2e:	4b71      	ldr	r3, [pc, #452]	; (adf4 <LORAWAN_GetAttr+0x250>)
    ac30:	4798      	blx	r3
    ac32:	2008      	movs	r0, #8
    ac34:	e7f5      	b.n	ac22 <LORAWAN_GetAttr+0x7e>
    ac36:	4669      	mov	r1, sp
    ac38:	4b6f      	ldr	r3, [pc, #444]	; (adf8 <LORAWAN_GetAttr+0x254>)
    ac3a:	201d      	movs	r0, #29
    ac3c:	4798      	blx	r3
    ac3e:	4b6c      	ldr	r3, [pc, #432]	; (adf0 <LORAWAN_GetAttr+0x24c>)
    ac40:	a902      	add	r1, sp, #8
    ac42:	33e8      	adds	r3, #232	; 0xe8
    ac44:	881b      	ldrh	r3, [r3, #0]
    ac46:	2208      	movs	r2, #8
    ac48:	808b      	strh	r3, [r1, #4]
    ac4a:	466b      	mov	r3, sp
    ac4c:	791b      	ldrb	r3, [r3, #4]
    ac4e:	718b      	strb	r3, [r1, #6]
    ac50:	466b      	mov	r3, sp
    ac52:	881b      	ldrh	r3, [r3, #0]
    ac54:	800b      	strh	r3, [r1, #0]
    ac56:	466b      	mov	r3, sp
    ac58:	885b      	ldrh	r3, [r3, #2]
    ac5a:	804b      	strh	r3, [r1, #2]
    ac5c:	466b      	mov	r3, sp
    ac5e:	795b      	ldrb	r3, [r3, #5]
    ac60:	71cb      	strb	r3, [r1, #7]
    ac62:	e7e3      	b.n	ac2c <LORAWAN_GetAttr+0x88>
    ac64:	4962      	ldr	r1, [pc, #392]	; (adf0 <LORAWAN_GetAttr+0x24c>)
    ac66:	2208      	movs	r2, #8
    ac68:	3135      	adds	r1, #53	; 0x35
    ac6a:	e7df      	b.n	ac2c <LORAWAN_GetAttr+0x88>
    ac6c:	4b60      	ldr	r3, [pc, #384]	; (adf0 <LORAWAN_GetAttr+0x24c>)
    ac6e:	681a      	ldr	r2, [r3, #0]
    ac70:	791b      	ldrb	r3, [r3, #4]
    ac72:	0a12      	lsrs	r2, r2, #8
    ac74:	061b      	lsls	r3, r3, #24
    ac76:	4313      	orrs	r3, r2
    ac78:	6023      	str	r3, [r4, #0]
    ac7a:	e7da      	b.n	ac32 <LORAWAN_GetAttr+0x8e>
    ac7c:	495c      	ldr	r1, [pc, #368]	; (adf0 <LORAWAN_GetAttr+0x24c>)
    ac7e:	2210      	movs	r2, #16
    ac80:	3105      	adds	r1, #5
    ac82:	e7d3      	b.n	ac2c <LORAWAN_GetAttr+0x88>
    ac84:	495a      	ldr	r1, [pc, #360]	; (adf0 <LORAWAN_GetAttr+0x24c>)
    ac86:	2210      	movs	r2, #16
    ac88:	3115      	adds	r1, #21
    ac8a:	e7cf      	b.n	ac2c <LORAWAN_GetAttr+0x88>
    ac8c:	4958      	ldr	r1, [pc, #352]	; (adf0 <LORAWAN_GetAttr+0x24c>)
    ac8e:	2210      	movs	r2, #16
    ac90:	3125      	adds	r1, #37	; 0x25
    ac92:	e7cb      	b.n	ac2c <LORAWAN_GetAttr+0x88>
    ac94:	4b56      	ldr	r3, [pc, #344]	; (adf0 <LORAWAN_GetAttr+0x24c>)
    ac96:	3350      	adds	r3, #80	; 0x50
    ac98:	781b      	ldrb	r3, [r3, #0]
    ac9a:	069b      	lsls	r3, r3, #26
    ac9c:	0fdb      	lsrs	r3, r3, #31
    ac9e:	e002      	b.n	aca6 <LORAWAN_GetAttr+0x102>
    aca0:	4b53      	ldr	r3, [pc, #332]	; (adf0 <LORAWAN_GetAttr+0x24c>)
    aca2:	33b3      	adds	r3, #179	; 0xb3
    aca4:	781b      	ldrb	r3, [r3, #0]
    aca6:	7023      	strb	r3, [r4, #0]
    aca8:	e7c3      	b.n	ac32 <LORAWAN_GetAttr+0x8e>
    acaa:	4b51      	ldr	r3, [pc, #324]	; (adf0 <LORAWAN_GetAttr+0x24c>)
    acac:	33b5      	adds	r3, #181	; 0xb5
    acae:	e7f9      	b.n	aca4 <LORAWAN_GetAttr+0x100>
    acb0:	4b4f      	ldr	r3, [pc, #316]	; (adf0 <LORAWAN_GetAttr+0x24c>)
    acb2:	33cb      	adds	r3, #203	; 0xcb
    acb4:	e7f6      	b.n	aca4 <LORAWAN_GetAttr+0x100>
    acb6:	4b4e      	ldr	r3, [pc, #312]	; (adf0 <LORAWAN_GetAttr+0x24c>)
    acb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    acba:	e7dd      	b.n	ac78 <LORAWAN_GetAttr+0xd4>
    acbc:	4b4c      	ldr	r3, [pc, #304]	; (adf0 <LORAWAN_GetAttr+0x24c>)
    acbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    acc0:	e7da      	b.n	ac78 <LORAWAN_GetAttr+0xd4>
    acc2:	4b4b      	ldr	r3, [pc, #300]	; (adf0 <LORAWAN_GetAttr+0x24c>)
    acc4:	339c      	adds	r3, #156	; 0x9c
    acc6:	881b      	ldrh	r3, [r3, #0]
    acc8:	8023      	strh	r3, [r4, #0]
    acca:	e7b2      	b.n	ac32 <LORAWAN_GetAttr+0x8e>
    accc:	4b48      	ldr	r3, [pc, #288]	; (adf0 <LORAWAN_GetAttr+0x24c>)
    acce:	339e      	adds	r3, #158	; 0x9e
    acd0:	e7f9      	b.n	acc6 <LORAWAN_GetAttr+0x122>
    acd2:	4b47      	ldr	r3, [pc, #284]	; (adf0 <LORAWAN_GetAttr+0x24c>)
    acd4:	33a0      	adds	r3, #160	; 0xa0
    acd6:	e7f6      	b.n	acc6 <LORAWAN_GetAttr+0x122>
    acd8:	4b45      	ldr	r3, [pc, #276]	; (adf0 <LORAWAN_GetAttr+0x24c>)
    acda:	33a2      	adds	r3, #162	; 0xa2
    acdc:	e7f3      	b.n	acc6 <LORAWAN_GetAttr+0x122>
    acde:	4b44      	ldr	r3, [pc, #272]	; (adf0 <LORAWAN_GetAttr+0x24c>)
    ace0:	33a4      	adds	r3, #164	; 0xa4
    ace2:	881b      	ldrh	r3, [r3, #0]
    ace4:	e7df      	b.n	aca6 <LORAWAN_GetAttr+0x102>
    ace6:	4b42      	ldr	r3, [pc, #264]	; (adf0 <LORAWAN_GetAttr+0x24c>)
    ace8:	33a8      	adds	r3, #168	; 0xa8
    acea:	e7db      	b.n	aca4 <LORAWAN_GetAttr+0x100>
    acec:	4b40      	ldr	r3, [pc, #256]	; (adf0 <LORAWAN_GetAttr+0x24c>)
    acee:	33a9      	adds	r3, #169	; 0xa9
    acf0:	e7d8      	b.n	aca4 <LORAWAN_GetAttr+0x100>
    acf2:	4b3f      	ldr	r3, [pc, #252]	; (adf0 <LORAWAN_GetAttr+0x24c>)
    acf4:	33a6      	adds	r3, #166	; 0xa6
    acf6:	e7f4      	b.n	ace2 <LORAWAN_GetAttr+0x13e>
    acf8:	4b3d      	ldr	r3, [pc, #244]	; (adf0 <LORAWAN_GetAttr+0x24c>)
    acfa:	33ae      	adds	r3, #174	; 0xae
    acfc:	e7d2      	b.n	aca4 <LORAWAN_GetAttr+0x100>
    acfe:	4b3c      	ldr	r3, [pc, #240]	; (adf0 <LORAWAN_GetAttr+0x24c>)
    ad00:	33ad      	adds	r3, #173	; 0xad
    ad02:	e7cf      	b.n	aca4 <LORAWAN_GetAttr+0x100>
    ad04:	4b3a      	ldr	r3, [pc, #232]	; (adf0 <LORAWAN_GetAttr+0x24c>)
    ad06:	33b4      	adds	r3, #180	; 0xb4
    ad08:	e7cc      	b.n	aca4 <LORAWAN_GetAttr+0x100>
    ad0a:	4b39      	ldr	r3, [pc, #228]	; (adf0 <LORAWAN_GetAttr+0x24c>)
    ad0c:	3350      	adds	r3, #80	; 0x50
    ad0e:	781b      	ldrb	r3, [r3, #0]
    ad10:	06db      	lsls	r3, r3, #27
    ad12:	e7c3      	b.n	ac9c <LORAWAN_GetAttr+0xf8>
    ad14:	4b36      	ldr	r3, [pc, #216]	; (adf0 <LORAWAN_GetAttr+0x24c>)
    ad16:	33b2      	adds	r3, #178	; 0xb2
    ad18:	e7c4      	b.n	aca4 <LORAWAN_GetAttr+0x100>
    ad1a:	4b35      	ldr	r3, [pc, #212]	; (adf0 <LORAWAN_GetAttr+0x24c>)
    ad1c:	33b1      	adds	r3, #177	; 0xb1
    ad1e:	e7c1      	b.n	aca4 <LORAWAN_GetAttr+0x100>
    ad20:	4b33      	ldr	r3, [pc, #204]	; (adf0 <LORAWAN_GetAttr+0x24c>)
    ad22:	3364      	adds	r3, #100	; 0x64
    ad24:	e7cf      	b.n	acc6 <LORAWAN_GetAttr+0x122>
    ad26:	4b32      	ldr	r3, [pc, #200]	; (adf0 <LORAWAN_GetAttr+0x24c>)
    ad28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    ad2a:	e7a5      	b.n	ac78 <LORAWAN_GetAttr+0xd4>
    ad2c:	2016      	movs	r0, #22
    ad2e:	781b      	ldrb	r3, [r3, #0]
    ad30:	a902      	add	r1, sp, #8
    ad32:	700b      	strb	r3, [r1, #0]
    ad34:	4b31      	ldr	r3, [pc, #196]	; (adfc <LORAWAN_GetAttr+0x258>)
    ad36:	4798      	blx	r3
    ad38:	e77b      	b.n	ac32 <LORAWAN_GetAttr+0x8e>
    ad3a:	781b      	ldrb	r3, [r3, #0]
    ad3c:	a902      	add	r1, sp, #8
    ad3e:	700b      	strb	r3, [r1, #0]
    ad40:	2012      	movs	r0, #18
    ad42:	e7f7      	b.n	ad34 <LORAWAN_GetAttr+0x190>
    ad44:	781b      	ldrb	r3, [r3, #0]
    ad46:	a902      	add	r1, sp, #8
    ad48:	700b      	strb	r3, [r1, #0]
    ad4a:	2000      	movs	r0, #0
    ad4c:	e7f2      	b.n	ad34 <LORAWAN_GetAttr+0x190>
    ad4e:	0010      	movs	r0, r2
    ad50:	4b2b      	ldr	r3, [pc, #172]	; (ae00 <LORAWAN_GetAttr+0x25c>)
    ad52:	4798      	blx	r3
    ad54:	e76d      	b.n	ac32 <LORAWAN_GetAttr+0x8e>
    ad56:	4b26      	ldr	r3, [pc, #152]	; (adf0 <LORAWAN_GetAttr+0x24c>)
    ad58:	33ca      	adds	r3, #202	; 0xca
    ad5a:	e7a3      	b.n	aca4 <LORAWAN_GetAttr+0x100>
    ad5c:	4b24      	ldr	r3, [pc, #144]	; (adf0 <LORAWAN_GetAttr+0x24c>)
    ad5e:	33c8      	adds	r3, #200	; 0xc8
    ad60:	e7a0      	b.n	aca4 <LORAWAN_GetAttr+0x100>
    ad62:	4b23      	ldr	r3, [pc, #140]	; (adf0 <LORAWAN_GetAttr+0x24c>)
    ad64:	33c9      	adds	r3, #201	; 0xc9
    ad66:	e79d      	b.n	aca4 <LORAWAN_GetAttr+0x100>
    ad68:	21fa      	movs	r1, #250	; 0xfa
    ad6a:	4b21      	ldr	r3, [pc, #132]	; (adf0 <LORAWAN_GetAttr+0x24c>)
    ad6c:	0089      	lsls	r1, r1, #2
    ad6e:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
    ad70:	4b24      	ldr	r3, [pc, #144]	; (ae04 <LORAWAN_GetAttr+0x260>)
    ad72:	4798      	blx	r3
    ad74:	8020      	strh	r0, [r4, #0]
    ad76:	e75c      	b.n	ac32 <LORAWAN_GetAttr+0x8e>
    ad78:	4b1d      	ldr	r3, [pc, #116]	; (adf0 <LORAWAN_GetAttr+0x24c>)
    ad7a:	3352      	adds	r3, #82	; 0x52
    ad7c:	781b      	ldrb	r3, [r3, #0]
    ad7e:	079b      	lsls	r3, r3, #30
    ad80:	e78c      	b.n	ac9c <LORAWAN_GetAttr+0xf8>
    ad82:	491b      	ldr	r1, [pc, #108]	; (adf0 <LORAWAN_GetAttr+0x24c>)
    ad84:	2210      	movs	r2, #16
    ad86:	310d      	adds	r1, #13
    ad88:	31ff      	adds	r1, #255	; 0xff
    ad8a:	e74f      	b.n	ac2c <LORAWAN_GetAttr+0x88>
    ad8c:	4918      	ldr	r1, [pc, #96]	; (adf0 <LORAWAN_GetAttr+0x24c>)
    ad8e:	2210      	movs	r2, #16
    ad90:	31fc      	adds	r1, #252	; 0xfc
    ad92:	e74b      	b.n	ac2c <LORAWAN_GetAttr+0x88>
    ad94:	2204      	movs	r2, #4
    ad96:	491c      	ldr	r1, [pc, #112]	; (ae08 <LORAWAN_GetAttr+0x264>)
    ad98:	e748      	b.n	ac2c <LORAWAN_GetAttr+0x88>
    ad9a:	4b15      	ldr	r3, [pc, #84]	; (adf0 <LORAWAN_GetAttr+0x24c>)
    ad9c:	33fe      	adds	r3, #254	; 0xfe
    ad9e:	8bdb      	ldrh	r3, [r3, #30]
    ada0:	e792      	b.n	acc8 <LORAWAN_GetAttr+0x124>
    ada2:	0010      	movs	r0, r2
    ada4:	4b19      	ldr	r3, [pc, #100]	; (ae0c <LORAWAN_GetAttr+0x268>)
    ada6:	4798      	blx	r3
    ada8:	e73b      	b.n	ac22 <LORAWAN_GetAttr+0x7e>
    adaa:	0011      	movs	r1, r2
    adac:	4b12      	ldr	r3, [pc, #72]	; (adf8 <LORAWAN_GetAttr+0x254>)
    adae:	201f      	movs	r0, #31
    adb0:	4798      	blx	r3
    adb2:	e73e      	b.n	ac32 <LORAWAN_GetAttr+0x8e>
    adb4:	4b0e      	ldr	r3, [pc, #56]	; (adf0 <LORAWAN_GetAttr+0x24c>)
    adb6:	3360      	adds	r3, #96	; 0x60
    adb8:	781b      	ldrb	r3, [r3, #0]
    adba:	071b      	lsls	r3, r3, #28
    adbc:	e76e      	b.n	ac9c <LORAWAN_GetAttr+0xf8>
    adbe:	4b0c      	ldr	r3, [pc, #48]	; (adf0 <LORAWAN_GetAttr+0x24c>)
    adc0:	3360      	adds	r3, #96	; 0x60
    adc2:	781b      	ldrb	r3, [r3, #0]
    adc4:	07db      	lsls	r3, r3, #31
    adc6:	e769      	b.n	ac9c <LORAWAN_GetAttr+0xf8>
    adc8:	202f      	movs	r0, #47	; 0x2f
    adca:	4b0c      	ldr	r3, [pc, #48]	; (adfc <LORAWAN_GetAttr+0x258>)
    adcc:	4798      	blx	r3
    adce:	e728      	b.n	ac22 <LORAWAN_GetAttr+0x7e>
    add0:	490f      	ldr	r1, [pc, #60]	; (ae10 <LORAWAN_GetAttr+0x26c>)
    add2:	2024      	movs	r0, #36	; 0x24
    add4:	e7f9      	b.n	adca <LORAWAN_GetAttr+0x226>
    add6:	4b06      	ldr	r3, [pc, #24]	; (adf0 <LORAWAN_GetAttr+0x24c>)
    add8:	33b0      	adds	r3, #176	; 0xb0
    adda:	e763      	b.n	aca4 <LORAWAN_GetAttr+0x100>
    addc:	4b0d      	ldr	r3, [pc, #52]	; (ae14 <LORAWAN_GetAttr+0x270>)
    adde:	4798      	blx	r3
    ade0:	4b0d      	ldr	r3, [pc, #52]	; (ae18 <LORAWAN_GetAttr+0x274>)
    ade2:	0005      	movs	r5, r0
    ade4:	4798      	blx	r3
    ade6:	3808      	subs	r0, #8
    ade8:	1b40      	subs	r0, r0, r5
    adea:	7020      	strb	r0, [r4, #0]
    adec:	e721      	b.n	ac32 <LORAWAN_GetAttr+0x8e>
    adee:	46c0      	nop			; (mov r8, r8)
    adf0:	20000f10 	.word	0x20000f10
    adf4:	000112d5 	.word	0x000112d5
    adf8:	0000d4ad 	.word	0x0000d4ad
    adfc:	00006d79 	.word	0x00006d79
    ae00:	0000ab85 	.word	0x0000ab85
    ae04:	0000ef0d 	.word	0x0000ef0d
    ae08:	20001008 	.word	0x20001008
    ae0c:	00006edd 	.word	0x00006edd
    ae10:	20000fc3 	.word	0x20000fc3
    ae14:	0000931d 	.word	0x0000931d
    ae18:	000093c5 	.word	0x000093c5

0000ae1c <LORAWAN_TxDone>:
    ae1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ae1e:	6843      	ldr	r3, [r0, #4]
    ae20:	b08f      	sub	sp, #60	; 0x3c
    ae22:	ae07      	add	r6, sp, #28
    ae24:	7805      	ldrb	r5, [r0, #0]
    ae26:	9303      	str	r3, [sp, #12]
    ae28:	0032      	movs	r2, r6
    ae2a:	4bd2      	ldr	r3, [pc, #840]	; (b174 <LORAWAN_TxDone+0x358>)
    ae2c:	2100      	movs	r1, #0
    ae2e:	2027      	movs	r0, #39	; 0x27
    ae30:	4798      	blx	r3
    ae32:	4cd1      	ldr	r4, [pc, #836]	; (b178 <LORAWAN_TxDone+0x35c>)
    ae34:	0023      	movs	r3, r4
    ae36:	3350      	adds	r3, #80	; 0x50
    ae38:	781b      	ldrb	r3, [r3, #0]
    ae3a:	2b7f      	cmp	r3, #127	; 0x7f
    ae3c:	d900      	bls.n	ae40 <LORAWAN_TxDone+0x24>
    ae3e:	e200      	b.n	b242 <LORAWAN_TxDone+0x426>
    ae40:	4bce      	ldr	r3, [pc, #824]	; (b17c <LORAWAN_TxDone+0x360>)
    ae42:	201b      	movs	r0, #27
    ae44:	781a      	ldrb	r2, [r3, #0]
    ae46:	2a04      	cmp	r2, #4
    ae48:	d100      	bne.n	ae4c <LORAWAN_TxDone+0x30>
    ae4a:	e0b1      	b.n	afb0 <LORAWAN_TxDone+0x194>
    ae4c:	781b      	ldrb	r3, [r3, #0]
    ae4e:	2b02      	cmp	r3, #2
    ae50:	d11f      	bne.n	ae92 <LORAWAN_TxDone+0x76>
    ae52:	3321      	adds	r3, #33	; 0x21
    ae54:	33ff      	adds	r3, #255	; 0xff
    ae56:	5ce2      	ldrb	r2, [r4, r3]
    ae58:	2a00      	cmp	r2, #0
    ae5a:	d005      	beq.n	ae68 <LORAWAN_TxDone+0x4c>
    ae5c:	2200      	movs	r2, #0
    ae5e:	49c8      	ldr	r1, [pc, #800]	; (b180 <LORAWAN_TxDone+0x364>)
    ae60:	54e2      	strb	r2, [r4, r3]
    ae62:	200b      	movs	r0, #11
    ae64:	4bc7      	ldr	r3, [pc, #796]	; (b184 <LORAWAN_TxDone+0x368>)
    ae66:	4798      	blx	r3
    ae68:	2d07      	cmp	r5, #7
    ae6a:	d000      	beq.n	ae6e <LORAWAN_TxDone+0x52>
    ae6c:	e0a5      	b.n	afba <LORAWAN_TxDone+0x19e>
    ae6e:	79f3      	ldrb	r3, [r6, #7]
    ae70:	2b00      	cmp	r3, #0
    ae72:	d00e      	beq.n	ae92 <LORAWAN_TxDone+0x76>
    ae74:	0023      	movs	r3, r4
    ae76:	3360      	adds	r3, #96	; 0x60
    ae78:	7818      	ldrb	r0, [r3, #0]
    ae7a:	0026      	movs	r6, r4
    ae7c:	2304      	movs	r3, #4
    ae7e:	36e6      	adds	r6, #230	; 0xe6
    ae80:	4018      	ands	r0, r3
    ae82:	4dc1      	ldr	r5, [pc, #772]	; (b188 <LORAWAN_TxDone+0x36c>)
    ae84:	d007      	beq.n	ae96 <LORAWAN_TxDone+0x7a>
    ae86:	2000      	movs	r0, #0
    ae88:	2109      	movs	r1, #9
    ae8a:	8030      	strh	r0, [r6, #0]
    ae8c:	47a8      	blx	r5
    ae8e:	4bbf      	ldr	r3, [pc, #764]	; (b18c <LORAWAN_TxDone+0x370>)
    ae90:	4798      	blx	r3
    ae92:	b00f      	add	sp, #60	; 0x3c
    ae94:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ae96:	8833      	ldrh	r3, [r6, #0]
    ae98:	2109      	movs	r1, #9
    ae9a:	3301      	adds	r3, #1
    ae9c:	8033      	strh	r3, [r6, #0]
    ae9e:	47a8      	blx	r5
    aea0:	0023      	movs	r3, r4
    aea2:	33e8      	adds	r3, #232	; 0xe8
    aea4:	881b      	ldrh	r3, [r3, #0]
    aea6:	4aba      	ldr	r2, [pc, #744]	; (b190 <LORAWAN_TxDone+0x374>)
    aea8:	4293      	cmp	r3, r2
    aeaa:	d002      	beq.n	aeb2 <LORAWAN_TxDone+0x96>
    aeac:	8832      	ldrh	r2, [r6, #0]
    aeae:	429a      	cmp	r2, r3
    aeb0:	d266      	bcs.n	af80 <LORAWAN_TxDone+0x164>
    aeb2:	2395      	movs	r3, #149	; 0x95
    aeb4:	005b      	lsls	r3, r3, #1
    aeb6:	5ce3      	ldrb	r3, [r4, r3]
    aeb8:	2b00      	cmp	r3, #0
    aeba:	d061      	beq.n	af80 <LORAWAN_TxDone+0x164>
    aebc:	2701      	movs	r7, #1
    aebe:	0023      	movs	r3, r4
    aec0:	a905      	add	r1, sp, #20
    aec2:	700f      	strb	r7, [r1, #0]
    aec4:	33b5      	adds	r3, #181	; 0xb5
    aec6:	781b      	ldrb	r3, [r3, #0]
    aec8:	aa0b      	add	r2, sp, #44	; 0x2c
    aeca:	704b      	strb	r3, [r1, #1]
    aecc:	0023      	movs	r3, r4
    aece:	33b3      	adds	r3, #179	; 0xb3
    aed0:	781b      	ldrb	r3, [r3, #0]
    aed2:	202d      	movs	r0, #45	; 0x2d
    aed4:	708b      	strb	r3, [r1, #2]
    aed6:	4baf      	ldr	r3, [pc, #700]	; (b194 <LORAWAN_TxDone+0x378>)
    aed8:	4798      	blx	r3
    aeda:	2808      	cmp	r0, #8
    aedc:	d135      	bne.n	af4a <LORAWAN_TxDone+0x12e>
    aede:	a806      	add	r0, sp, #24
    aee0:	4bad      	ldr	r3, [pc, #692]	; (b198 <LORAWAN_TxDone+0x37c>)
    aee2:	7007      	strb	r7, [r0, #0]
    aee4:	4798      	blx	r3
    aee6:	980b      	ldr	r0, [sp, #44]	; 0x2c
    aee8:	990c      	ldr	r1, [sp, #48]	; 0x30
    aeea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    aeec:	4bab      	ldr	r3, [pc, #684]	; (b19c <LORAWAN_TxDone+0x380>)
    aeee:	4798      	blx	r3
    aef0:	0023      	movs	r3, r4
    aef2:	339a      	adds	r3, #154	; 0x9a
    aef4:	881b      	ldrh	r3, [r3, #0]
    aef6:	a809      	add	r0, sp, #36	; 0x24
    aef8:	7003      	strb	r3, [r0, #0]
    aefa:	4ba9      	ldr	r3, [pc, #676]	; (b1a0 <LORAWAN_TxDone+0x384>)
    aefc:	6043      	str	r3, [r0, #4]
    aefe:	4ba9      	ldr	r3, [pc, #676]	; (b1a4 <LORAWAN_TxDone+0x388>)
    af00:	4798      	blx	r3
    af02:	1e06      	subs	r6, r0, #0
    af04:	d108      	bne.n	af18 <LORAWAN_TxDone+0xfc>
    af06:	220e      	movs	r2, #14
    af08:	3450      	adds	r4, #80	; 0x50
    af0a:	7823      	ldrb	r3, [r4, #0]
    af0c:	4393      	bics	r3, r2
    af0e:	001a      	movs	r2, r3
    af10:	2302      	movs	r3, #2
    af12:	4313      	orrs	r3, r2
    af14:	7023      	strb	r3, [r4, #0]
    af16:	e7bc      	b.n	ae92 <LORAWAN_TxDone+0x76>
    af18:	0023      	movs	r3, r4
    af1a:	3360      	adds	r3, #96	; 0x60
    af1c:	7818      	ldrb	r0, [r3, #0]
    af1e:	0023      	movs	r3, r4
    af20:	4038      	ands	r0, r7
    af22:	33e6      	adds	r3, #230	; 0xe6
    af24:	4fa0      	ldr	r7, [pc, #640]	; (b1a8 <LORAWAN_TxDone+0x38c>)
    af26:	4ca1      	ldr	r4, [pc, #644]	; (b1ac <LORAWAN_TxDone+0x390>)
    af28:	2800      	cmp	r0, #0
    af2a:	d009      	beq.n	af40 <LORAWAN_TxDone+0x124>
    af2c:	2000      	movs	r0, #0
    af2e:	2109      	movs	r1, #9
    af30:	8018      	strh	r0, [r3, #0]
    af32:	47a8      	blx	r5
    af34:	4b9e      	ldr	r3, [pc, #632]	; (b1b0 <LORAWAN_TxDone+0x394>)
    af36:	4798      	blx	r3
    af38:	47a0      	blx	r4
    af3a:	0030      	movs	r0, r6
    af3c:	47b8      	blx	r7
    af3e:	e7a8      	b.n	ae92 <LORAWAN_TxDone+0x76>
    af40:	2109      	movs	r1, #9
    af42:	8018      	strh	r0, [r3, #0]
    af44:	47a8      	blx	r5
    af46:	4b9b      	ldr	r3, [pc, #620]	; (b1b4 <LORAWAN_TxDone+0x398>)
    af48:	e7f5      	b.n	af36 <LORAWAN_TxDone+0x11a>
    af4a:	0023      	movs	r3, r4
    af4c:	3360      	adds	r3, #96	; 0x60
    af4e:	7818      	ldrb	r0, [r3, #0]
    af50:	0023      	movs	r3, r4
    af52:	4007      	ands	r7, r0
    af54:	4e94      	ldr	r6, [pc, #592]	; (b1a8 <LORAWAN_TxDone+0x38c>)
    af56:	33e6      	adds	r3, #230	; 0xe6
    af58:	4c94      	ldr	r4, [pc, #592]	; (b1ac <LORAWAN_TxDone+0x390>)
    af5a:	2f00      	cmp	r7, #0
    af5c:	d00a      	beq.n	af74 <LORAWAN_TxDone+0x158>
    af5e:	2700      	movs	r7, #0
    af60:	2109      	movs	r1, #9
    af62:	0038      	movs	r0, r7
    af64:	801f      	strh	r7, [r3, #0]
    af66:	47a8      	blx	r5
    af68:	4b91      	ldr	r3, [pc, #580]	; (b1b0 <LORAWAN_TxDone+0x394>)
    af6a:	4798      	blx	r3
    af6c:	47a0      	blx	r4
    af6e:	0038      	movs	r0, r7
    af70:	47b0      	blx	r6
    af72:	e78e      	b.n	ae92 <LORAWAN_TxDone+0x76>
    af74:	2109      	movs	r1, #9
    af76:	0038      	movs	r0, r7
    af78:	801f      	strh	r7, [r3, #0]
    af7a:	47a8      	blx	r5
    af7c:	4b8d      	ldr	r3, [pc, #564]	; (b1b4 <LORAWAN_TxDone+0x398>)
    af7e:	e7f4      	b.n	af6a <LORAWAN_TxDone+0x14e>
    af80:	0023      	movs	r3, r4
    af82:	2000      	movs	r0, #0
    af84:	33e6      	adds	r3, #230	; 0xe6
    af86:	2109      	movs	r1, #9
    af88:	8018      	strh	r0, [r3, #0]
    af8a:	47a8      	blx	r5
    af8c:	0022      	movs	r2, r4
    af8e:	210e      	movs	r1, #14
    af90:	3250      	adds	r2, #80	; 0x50
    af92:	7813      	ldrb	r3, [r2, #0]
    af94:	3460      	adds	r4, #96	; 0x60
    af96:	438b      	bics	r3, r1
    af98:	7013      	strb	r3, [r2, #0]
    af9a:	2220      	movs	r2, #32
    af9c:	7823      	ldrb	r3, [r4, #0]
    af9e:	4393      	bics	r3, r2
    afa0:	7023      	strb	r3, [r4, #0]
    afa2:	4c82      	ldr	r4, [pc, #520]	; (b1ac <LORAWAN_TxDone+0x390>)
    afa4:	07db      	lsls	r3, r3, #31
    afa6:	d506      	bpl.n	afb6 <LORAWAN_TxDone+0x19a>
    afa8:	4b81      	ldr	r3, [pc, #516]	; (b1b0 <LORAWAN_TxDone+0x394>)
    afaa:	4798      	blx	r3
    afac:	47a0      	blx	r4
    afae:	2007      	movs	r0, #7
    afb0:	4b7d      	ldr	r3, [pc, #500]	; (b1a8 <LORAWAN_TxDone+0x38c>)
    afb2:	4798      	blx	r3
    afb4:	e76d      	b.n	ae92 <LORAWAN_TxDone+0x76>
    afb6:	4b7f      	ldr	r3, [pc, #508]	; (b1b4 <LORAWAN_TxDone+0x398>)
    afb8:	e7f7      	b.n	afaa <LORAWAN_TxDone+0x18e>
    afba:	2d00      	cmp	r5, #0
    afbc:	d000      	beq.n	afc0 <LORAWAN_TxDone+0x1a4>
    afbe:	e768      	b.n	ae92 <LORAWAN_TxDone+0x76>
    afc0:	0023      	movs	r3, r4
    afc2:	33d0      	adds	r3, #208	; 0xd0
    afc4:	681b      	ldr	r3, [r3, #0]
    afc6:	0026      	movs	r6, r4
    afc8:	9302      	str	r3, [sp, #8]
    afca:	0023      	movs	r3, r4
    afcc:	33e6      	adds	r3, #230	; 0xe6
    afce:	801d      	strh	r5, [r3, #0]
    afd0:	2109      	movs	r1, #9
    afd2:	4b6d      	ldr	r3, [pc, #436]	; (b188 <LORAWAN_TxDone+0x36c>)
    afd4:	0028      	movs	r0, r5
    afd6:	36af      	adds	r6, #175	; 0xaf
    afd8:	4798      	blx	r3
    afda:	7833      	ldrb	r3, [r6, #0]
    afdc:	2b00      	cmp	r3, #0
    afde:	d000      	beq.n	afe2 <LORAWAN_TxDone+0x1c6>
    afe0:	e0b2      	b.n	b148 <LORAWAN_TxDone+0x32c>
    afe2:	0027      	movs	r7, r4
    afe4:	37b0      	adds	r7, #176	; 0xb0
    afe6:	783a      	ldrb	r2, [r7, #0]
    afe8:	2a00      	cmp	r2, #0
    afea:	d000      	beq.n	afee <LORAWAN_TxDone+0x1d2>
    afec:	e0ac      	b.n	b148 <LORAWAN_TxDone+0x32c>
    afee:	4b72      	ldr	r3, [pc, #456]	; (b1b8 <LORAWAN_TxDone+0x39c>)
    aff0:	781b      	ldrb	r3, [r3, #0]
    aff2:	07db      	lsls	r3, r3, #31
    aff4:	d513      	bpl.n	b01e <LORAWAN_TxDone+0x202>
    aff6:	6d63      	ldr	r3, [r4, #84]	; 0x54
    aff8:	2116      	movs	r1, #22
    affa:	3301      	adds	r3, #1
    affc:	6563      	str	r3, [r4, #84]	; 0x54
    affe:	0028      	movs	r0, r5
    b000:	4b61      	ldr	r3, [pc, #388]	; (b188 <LORAWAN_TxDone+0x36c>)
    b002:	4798      	blx	r3
    b004:	9b02      	ldr	r3, [sp, #8]
    b006:	781b      	ldrb	r3, [r3, #0]
    b008:	2b01      	cmp	r3, #1
    b00a:	d000      	beq.n	b00e <LORAWAN_TxDone+0x1f2>
    b00c:	e098      	b.n	b140 <LORAWAN_TxDone+0x324>
    b00e:	0022      	movs	r2, r4
    b010:	3260      	adds	r2, #96	; 0x60
    b012:	7811      	ldrb	r1, [r2, #0]
    b014:	430b      	orrs	r3, r1
    b016:	7013      	strb	r3, [r2, #0]
    b018:	783b      	ldrb	r3, [r7, #0]
    b01a:	3301      	adds	r3, #1
    b01c:	703b      	strb	r3, [r7, #0]
    b01e:	0023      	movs	r3, r4
    b020:	2200      	movs	r2, #0
    b022:	33c4      	adds	r3, #196	; 0xc4
    b024:	701a      	strb	r2, [r3, #0]
    b026:	0022      	movs	r2, r4
    b028:	210e      	movs	r1, #14
    b02a:	2604      	movs	r6, #4
    b02c:	3250      	adds	r2, #80	; 0x50
    b02e:	7813      	ldrb	r3, [r2, #0]
    b030:	0027      	movs	r7, r4
    b032:	438b      	bics	r3, r1
    b034:	4333      	orrs	r3, r6
    b036:	7013      	strb	r3, [r2, #0]
    b038:	0023      	movs	r3, r4
    b03a:	33b3      	adds	r3, #179	; 0xb3
    b03c:	781b      	ldrb	r3, [r3, #0]
    b03e:	a906      	add	r1, sp, #24
    b040:	708b      	strb	r3, [r1, #2]
    b042:	0023      	movs	r3, r4
    b044:	33c2      	adds	r3, #194	; 0xc2
    b046:	781b      	ldrb	r3, [r3, #0]
    b048:	3760      	adds	r7, #96	; 0x60
    b04a:	704b      	strb	r3, [r1, #1]
    b04c:	783b      	ldrb	r3, [r7, #0]
    b04e:	ad0b      	add	r5, sp, #44	; 0x2c
    b050:	075b      	lsls	r3, r3, #29
    b052:	0fdb      	lsrs	r3, r3, #31
    b054:	700b      	strb	r3, [r1, #0]
    b056:	002a      	movs	r2, r5
    b058:	4b4e      	ldr	r3, [pc, #312]	; (b194 <LORAWAN_TxDone+0x378>)
    b05a:	2019      	movs	r0, #25
    b05c:	4798      	blx	r3
    b05e:	783b      	ldrb	r3, [r7, #0]
    b060:	4233      	tst	r3, r6
    b062:	d100      	bne.n	b066 <LORAWAN_TxDone+0x24a>
    b064:	e0b2      	b.n	b1cc <LORAWAN_TxDone+0x3b0>
    b066:	2300      	movs	r3, #0
    b068:	af09      	add	r7, sp, #36	; 0x24
    b06a:	703b      	strb	r3, [r7, #0]
    b06c:	003a      	movs	r2, r7
    b06e:	2100      	movs	r1, #0
    b070:	2009      	movs	r0, #9
    b072:	4b48      	ldr	r3, [pc, #288]	; (b194 <LORAWAN_TxDone+0x378>)
    b074:	4798      	blx	r3
    b076:	0039      	movs	r1, r7
    b078:	aa05      	add	r2, sp, #20
    b07a:	0030      	movs	r0, r6
    b07c:	4b45      	ldr	r3, [pc, #276]	; (b194 <LORAWAN_TxDone+0x378>)
    b07e:	4798      	blx	r3
    b080:	0021      	movs	r1, r4
    b082:	792b      	ldrb	r3, [r5, #4]
    b084:	3149      	adds	r1, #73	; 0x49
    b086:	700b      	strb	r3, [r1, #0]
    b088:	0023      	movs	r3, r4
    b08a:	270b      	movs	r7, #11
    b08c:	782a      	ldrb	r2, [r5, #0]
    b08e:	3345      	adds	r3, #69	; 0x45
    b090:	701a      	strb	r2, [r3, #0]
    b092:	786a      	ldrb	r2, [r5, #1]
    b094:	2004      	movs	r0, #4
    b096:	705a      	strb	r2, [r3, #1]
    b098:	78aa      	ldrb	r2, [r5, #2]
    b09a:	2600      	movs	r6, #0
    b09c:	709a      	strb	r2, [r3, #2]
    b09e:	78ea      	ldrb	r2, [r5, #3]
    b0a0:	70da      	strb	r2, [r3, #3]
    b0a2:	ab02      	add	r3, sp, #8
    b0a4:	18ff      	adds	r7, r7, r3
    b0a6:	003a      	movs	r2, r7
    b0a8:	4b3a      	ldr	r3, [pc, #232]	; (b194 <LORAWAN_TxDone+0x378>)
    b0aa:	4798      	blx	r3
    b0ac:	0023      	movs	r3, r4
    b0ae:	3360      	adds	r3, #96	; 0x60
    b0b0:	781d      	ldrb	r5, [r3, #0]
    b0b2:	2304      	movs	r3, #4
    b0b4:	401d      	ands	r5, r3
    b0b6:	2300      	movs	r3, #0
    b0b8:	0022      	movs	r2, r4
    b0ba:	56fb      	ldrsb	r3, [r7, r3]
    b0bc:	42b5      	cmp	r5, r6
    b0be:	d100      	bne.n	b0c2 <LORAWAN_TxDone+0x2a6>
    b0c0:	e087      	b.n	b1d2 <LORAWAN_TxDone+0x3b6>
    b0c2:	2100      	movs	r1, #0
    b0c4:	32a2      	adds	r2, #162	; 0xa2
    b0c6:	8817      	ldrh	r7, [r2, #0]
    b0c8:	aa05      	add	r2, sp, #20
    b0ca:	5651      	ldrsb	r1, [r2, r1]
    b0cc:	4d3b      	ldr	r5, [pc, #236]	; (b1bc <LORAWAN_TxDone+0x3a0>)
    b0ce:	187a      	adds	r2, r7, r1
    b0d0:	9202      	str	r2, [sp, #8]
    b0d2:	0022      	movs	r2, r4
    b0d4:	32a0      	adds	r2, #160	; 0xa0
    b0d6:	8811      	ldrh	r1, [r2, #0]
    b0d8:	27fa      	movs	r7, #250	; 0xfa
    b0da:	18c9      	adds	r1, r1, r3
    b0dc:	232c      	movs	r3, #44	; 0x2c
    b0de:	33ff      	adds	r3, #255	; 0xff
    b0e0:	5ce3      	ldrb	r3, [r4, r3]
    b0e2:	00bf      	lsls	r7, r7, #2
    b0e4:	1ac9      	subs	r1, r1, r3
    b0e6:	0023      	movs	r3, r4
    b0e8:	33b6      	adds	r3, #182	; 0xb6
    b0ea:	7818      	ldrb	r0, [r3, #0]
    b0ec:	4379      	muls	r1, r7
    b0ee:	4b34      	ldr	r3, [pc, #208]	; (b1c0 <LORAWAN_TxDone+0x3a4>)
    b0f0:	0032      	movs	r2, r6
    b0f2:	9600      	str	r6, [sp, #0]
    b0f4:	47a8      	blx	r5
    b0f6:	232c      	movs	r3, #44	; 0x2c
    b0f8:	33ff      	adds	r3, #255	; 0xff
    b0fa:	5ce1      	ldrb	r1, [r4, r3]
    b0fc:	9b02      	ldr	r3, [sp, #8]
    b0fe:	34b7      	adds	r4, #183	; 0xb7
    b100:	1a59      	subs	r1, r3, r1
    b102:	7820      	ldrb	r0, [r4, #0]
    b104:	4379      	muls	r1, r7
    b106:	9600      	str	r6, [sp, #0]
    b108:	4b2e      	ldr	r3, [pc, #184]	; (b1c4 <LORAWAN_TxDone+0x3a8>)
    b10a:	0032      	movs	r2, r6
    b10c:	47a8      	blx	r5
    b10e:	4b1a      	ldr	r3, [pc, #104]	; (b178 <LORAWAN_TxDone+0x35c>)
    b110:	2102      	movs	r1, #2
    b112:	001a      	movs	r2, r3
    b114:	32e4      	adds	r2, #228	; 0xe4
    b116:	7812      	ldrb	r2, [r2, #0]
    b118:	4011      	ands	r1, r2
    b11a:	d100      	bne.n	b11e <LORAWAN_TxDone+0x302>
    b11c:	e08c      	b.n	b238 <LORAWAN_TxDone+0x41c>
    b11e:	466a      	mov	r2, sp
    b120:	8992      	ldrh	r2, [r2, #12]
    b122:	a909      	add	r1, sp, #36	; 0x24
    b124:	800a      	strh	r2, [r1, #0]
    b126:	001a      	movs	r2, r3
    b128:	201f      	movs	r0, #31
    b12a:	3260      	adds	r2, #96	; 0x60
    b12c:	7812      	ldrb	r2, [r2, #0]
    b12e:	3364      	adds	r3, #100	; 0x64
    b130:	0752      	lsls	r2, r2, #29
    b132:	0fd2      	lsrs	r2, r2, #31
    b134:	710a      	strb	r2, [r1, #4]
    b136:	881b      	ldrh	r3, [r3, #0]
    b138:	804b      	strh	r3, [r1, #2]
    b13a:	4b23      	ldr	r3, [pc, #140]	; (b1c8 <LORAWAN_TxDone+0x3ac>)
    b13c:	4798      	blx	r3
    b13e:	e6a8      	b.n	ae92 <LORAWAN_TxDone+0x76>
    b140:	7833      	ldrb	r3, [r6, #0]
    b142:	3301      	adds	r3, #1
    b144:	7033      	strb	r3, [r6, #0]
    b146:	e76a      	b.n	b01e <LORAWAN_TxDone+0x202>
    b148:	0022      	movs	r2, r4
    b14a:	3250      	adds	r2, #80	; 0x50
    b14c:	7811      	ldrb	r1, [r2, #0]
    b14e:	2201      	movs	r2, #1
    b150:	4211      	tst	r1, r2
    b152:	d100      	bne.n	b156 <LORAWAN_TxDone+0x33a>
    b154:	e763      	b.n	b01e <LORAWAN_TxDone+0x202>
    b156:	0021      	movs	r1, r4
    b158:	3160      	adds	r1, #96	; 0x60
    b15a:	7809      	ldrb	r1, [r1, #0]
    b15c:	4211      	tst	r1, r2
    b15e:	d104      	bne.n	b16a <LORAWAN_TxDone+0x34e>
    b160:	189b      	adds	r3, r3, r2
    b162:	0022      	movs	r2, r4
    b164:	32af      	adds	r2, #175	; 0xaf
    b166:	7013      	strb	r3, [r2, #0]
    b168:	e759      	b.n	b01e <LORAWAN_TxDone+0x202>
    b16a:	0022      	movs	r2, r4
    b16c:	32b0      	adds	r2, #176	; 0xb0
    b16e:	7813      	ldrb	r3, [r2, #0]
    b170:	3301      	adds	r3, #1
    b172:	e7f8      	b.n	b166 <LORAWAN_TxDone+0x34a>
    b174:	0000aba5 	.word	0x0000aba5
    b178:	20000f10 	.word	0x20000f10
    b17c:	2000103c 	.word	0x2000103c
    b180:	20001031 	.word	0x20001031
    b184:	0000d599 	.word	0x0000d599
    b188:	00001e65 	.word	0x00001e65
    b18c:	00009d41 	.word	0x00009d41
    b190:	0000ffff 	.word	0x0000ffff
    b194:	00006d79 	.word	0x00006d79
    b198:	0000e8c9 	.word	0x0000e8c9
    b19c:	0000a2a1 	.word	0x0000a2a1
    b1a0:	2000104d 	.word	0x2000104d
    b1a4:	0000dee9 	.word	0x0000dee9
    b1a8:	0000a9c5 	.word	0x0000a9c5
    b1ac:	000092d9 	.word	0x000092d9
    b1b0:	00009ced 	.word	0x00009ced
    b1b4:	00009d1d 	.word	0x00009d1d
    b1b8:	20000f60 	.word	0x20000f60
    b1bc:	000018f1 	.word	0x000018f1
    b1c0:	0000a229 	.word	0x0000a229
    b1c4:	0000b5d1 	.word	0x0000b5d1
    b1c8:	00006db1 	.word	0x00006db1
    b1cc:	aa05      	add	r2, sp, #20
    b1ce:	492d      	ldr	r1, [pc, #180]	; (b284 <LORAWAN_TxDone+0x468>)
    b1d0:	e753      	b.n	b07a <LORAWAN_TxDone+0x25e>
    b1d2:	329c      	adds	r2, #156	; 0x9c
    b1d4:	8811      	ldrh	r1, [r2, #0]
    b1d6:	26fa      	movs	r6, #250	; 0xfa
    b1d8:	18c9      	adds	r1, r1, r3
    b1da:	232c      	movs	r3, #44	; 0x2c
    b1dc:	33ff      	adds	r3, #255	; 0xff
    b1de:	5ce3      	ldrb	r3, [r4, r3]
    b1e0:	00b6      	lsls	r6, r6, #2
    b1e2:	1ac9      	subs	r1, r1, r3
    b1e4:	0023      	movs	r3, r4
    b1e6:	33b8      	adds	r3, #184	; 0xb8
    b1e8:	7818      	ldrb	r0, [r3, #0]
    b1ea:	4371      	muls	r1, r6
    b1ec:	4b26      	ldr	r3, [pc, #152]	; (b288 <LORAWAN_TxDone+0x46c>)
    b1ee:	9500      	str	r5, [sp, #0]
    b1f0:	002a      	movs	r2, r5
    b1f2:	4f26      	ldr	r7, [pc, #152]	; (b28c <LORAWAN_TxDone+0x470>)
    b1f4:	47b8      	blx	r7
    b1f6:	0023      	movs	r3, r4
    b1f8:	33c8      	adds	r3, #200	; 0xc8
    b1fa:	781b      	ldrb	r3, [r3, #0]
    b1fc:	2b04      	cmp	r3, #4
    b1fe:	d105      	bne.n	b20c <LORAWAN_TxDone+0x3f0>
    b200:	2000      	movs	r0, #0
    b202:	ab05      	add	r3, sp, #20
    b204:	5618      	ldrsb	r0, [r3, r0]
    b206:	4b22      	ldr	r3, [pc, #136]	; (b290 <LORAWAN_TxDone+0x474>)
    b208:	4798      	blx	r3
    b20a:	e780      	b.n	b10e <LORAWAN_TxDone+0x2f2>
    b20c:	2b01      	cmp	r3, #1
    b20e:	d000      	beq.n	b212 <LORAWAN_TxDone+0x3f6>
    b210:	e77d      	b.n	b10e <LORAWAN_TxDone+0x2f2>
    b212:	0023      	movs	r3, r4
    b214:	339e      	adds	r3, #158	; 0x9e
    b216:	8819      	ldrh	r1, [r3, #0]
    b218:	ab05      	add	r3, sp, #20
    b21a:	781b      	ldrb	r3, [r3, #0]
    b21c:	002a      	movs	r2, r5
    b21e:	b25b      	sxtb	r3, r3
    b220:	18c9      	adds	r1, r1, r3
    b222:	232c      	movs	r3, #44	; 0x2c
    b224:	33ff      	adds	r3, #255	; 0xff
    b226:	5ce3      	ldrb	r3, [r4, r3]
    b228:	34b9      	adds	r4, #185	; 0xb9
    b22a:	1ac9      	subs	r1, r1, r3
    b22c:	7820      	ldrb	r0, [r4, #0]
    b22e:	4371      	muls	r1, r6
    b230:	9500      	str	r5, [sp, #0]
    b232:	4b18      	ldr	r3, [pc, #96]	; (b294 <LORAWAN_TxDone+0x478>)
    b234:	47b8      	blx	r7
    b236:	e76a      	b.n	b10e <LORAWAN_TxDone+0x2f2>
    b238:	0753      	lsls	r3, r2, #29
    b23a:	d400      	bmi.n	b23e <LORAWAN_TxDone+0x422>
    b23c:	e629      	b.n	ae92 <LORAWAN_TxDone+0x76>
    b23e:	2020      	movs	r0, #32
    b240:	e77b      	b.n	b13a <LORAWAN_TxDone+0x31e>
    b242:	4915      	ldr	r1, [pc, #84]	; (b298 <LORAWAN_TxDone+0x47c>)
    b244:	784a      	ldrb	r2, [r1, #1]
    b246:	780b      	ldrb	r3, [r1, #0]
    b248:	0212      	lsls	r2, r2, #8
    b24a:	431a      	orrs	r2, r3
    b24c:	788b      	ldrb	r3, [r1, #2]
    b24e:	041b      	lsls	r3, r3, #16
    b250:	431a      	orrs	r2, r3
    b252:	78cb      	ldrb	r3, [r1, #3]
    b254:	061b      	lsls	r3, r3, #24
    b256:	4313      	orrs	r3, r2
    b258:	d100      	bne.n	b25c <LORAWAN_TxDone+0x440>
    b25a:	e61a      	b.n	ae92 <LORAWAN_TxDone+0x76>
    b25c:	4a0f      	ldr	r2, [pc, #60]	; (b29c <LORAWAN_TxDone+0x480>)
    b25e:	7811      	ldrb	r1, [r2, #0]
    b260:	221c      	movs	r2, #28
    b262:	2904      	cmp	r1, #4
    b264:	d003      	beq.n	b26e <LORAWAN_TxDone+0x452>
    b266:	2200      	movs	r2, #0
    b268:	2d07      	cmp	r5, #7
    b26a:	d100      	bne.n	b26e <LORAWAN_TxDone+0x452>
    b26c:	002a      	movs	r2, r5
    b26e:	0021      	movs	r1, r4
    b270:	2004      	movs	r0, #4
    b272:	31d4      	adds	r1, #212	; 0xd4
    b274:	7008      	strb	r0, [r1, #0]
    b276:	0020      	movs	r0, r4
    b278:	34d0      	adds	r4, #208	; 0xd0
    b27a:	30d8      	adds	r0, #216	; 0xd8
    b27c:	7002      	strb	r2, [r0, #0]
    b27e:	6820      	ldr	r0, [r4, #0]
    b280:	4798      	blx	r3
    b282:	e606      	b.n	ae92 <LORAWAN_TxDone+0x76>
    b284:	20000f5e 	.word	0x20000f5e
    b288:	0000a229 	.word	0x0000a229
    b28c:	000018f1 	.word	0x000018f1
    b290:	0000cf39 	.word	0x0000cf39
    b294:	0000b5d1 	.word	0x0000b5d1
    b298:	20001150 	.word	0x20001150
    b29c:	2000103c 	.word	0x2000103c

0000b2a0 <radioCallback>:
    b2a0:	4b10      	ldr	r3, [pc, #64]	; (b2e4 <radioCallback+0x44>)
    b2a2:	b510      	push	{r4, lr}
    b2a4:	7018      	strb	r0, [r3, #0]
    b2a6:	3801      	subs	r0, #1
    b2a8:	b2c0      	uxtb	r0, r0
    b2aa:	000c      	movs	r4, r1
    b2ac:	281f      	cmp	r0, #31
    b2ae:	d809      	bhi.n	b2c4 <radioCallback+0x24>
    b2b0:	2301      	movs	r3, #1
    b2b2:	4083      	lsls	r3, r0
    b2b4:	4a0c      	ldr	r2, [pc, #48]	; (b2e8 <radioCallback+0x48>)
    b2b6:	4213      	tst	r3, r2
    b2b8:	d109      	bne.n	b2ce <radioCallback+0x2e>
    b2ba:	220a      	movs	r2, #10
    b2bc:	4213      	tst	r3, r2
    b2be:	d102      	bne.n	b2c6 <radioCallback+0x26>
    b2c0:	2b00      	cmp	r3, #0
    b2c2:	db08      	blt.n	b2d6 <radioCallback+0x36>
    b2c4:	bd10      	pop	{r4, pc}
    b2c6:	0008      	movs	r0, r1
    b2c8:	4b08      	ldr	r3, [pc, #32]	; (b2ec <radioCallback+0x4c>)
    b2ca:	4798      	blx	r3
    b2cc:	e7fa      	b.n	b2c4 <radioCallback+0x24>
    b2ce:	2002      	movs	r0, #2
    b2d0:	4b07      	ldr	r3, [pc, #28]	; (b2f0 <radioCallback+0x50>)
    b2d2:	4798      	blx	r3
    b2d4:	e7f6      	b.n	b2c4 <radioCallback+0x24>
    b2d6:	4b07      	ldr	r3, [pc, #28]	; (b2f4 <radioCallback+0x54>)
    b2d8:	681b      	ldr	r3, [r3, #0]
    b2da:	2b00      	cmp	r3, #0
    b2dc:	d0f2      	beq.n	b2c4 <radioCallback+0x24>
    b2de:	4798      	blx	r3
    b2e0:	6020      	str	r0, [r4, #0]
    b2e2:	e7ef      	b.n	b2c4 <radioCallback+0x24>
    b2e4:	2000103c 	.word	0x2000103c
    b2e8:	00008081 	.word	0x00008081
    b2ec:	0000ae1d 	.word	0x0000ae1d
    b2f0:	0000d429 	.word	0x0000d429
    b2f4:	2000114c 	.word	0x2000114c

0000b2f8 <LorawanCheckAndDoRetryOnTimeout>:
    b2f8:	b513      	push	{r0, r1, r4, lr}
    b2fa:	4c34      	ldr	r4, [pc, #208]	; (b3cc <LorawanCheckAndDoRetryOnTimeout+0xd4>)
    b2fc:	0023      	movs	r3, r4
    b2fe:	3360      	adds	r3, #96	; 0x60
    b300:	781b      	ldrb	r3, [r3, #0]
    b302:	0022      	movs	r2, r4
    b304:	07db      	lsls	r3, r3, #31
    b306:	d54e      	bpl.n	b3a6 <LorawanCheckAndDoRetryOnTimeout+0xae>
    b308:	0023      	movs	r3, r4
    b30a:	32b0      	adds	r2, #176	; 0xb0
    b30c:	33ae      	adds	r3, #174	; 0xae
    b30e:	7812      	ldrb	r2, [r2, #0]
    b310:	781b      	ldrb	r3, [r3, #0]
    b312:	429a      	cmp	r2, r3
    b314:	d839      	bhi.n	b38a <LorawanCheckAndDoRetryOnTimeout+0x92>
    b316:	2395      	movs	r3, #149	; 0x95
    b318:	005b      	lsls	r3, r3, #1
    b31a:	5ce3      	ldrb	r3, [r4, r3]
    b31c:	2b00      	cmp	r3, #0
    b31e:	d034      	beq.n	b38a <LorawanCheckAndDoRetryOnTimeout+0x92>
    b320:	0023      	movs	r3, r4
    b322:	33c8      	adds	r3, #200	; 0xc8
    b324:	781b      	ldrb	r3, [r3, #0]
    b326:	2b01      	cmp	r3, #1
    b328:	d11a      	bne.n	b360 <LorawanCheckAndDoRetryOnTimeout+0x68>
    b32a:	0021      	movs	r1, r4
    b32c:	220e      	movs	r2, #14
    b32e:	3150      	adds	r1, #80	; 0x50
    b330:	780b      	ldrb	r3, [r1, #0]
    b332:	4393      	bics	r3, r2
    b334:	001a      	movs	r2, r3
    b336:	230c      	movs	r3, #12
    b338:	4313      	orrs	r3, r2
    b33a:	700b      	strb	r3, [r1, #0]
    b33c:	0023      	movs	r3, r4
    b33e:	33a6      	adds	r3, #166	; 0xa6
    b340:	8819      	ldrh	r1, [r3, #0]
    b342:	232c      	movs	r3, #44	; 0x2c
    b344:	33ff      	adds	r3, #255	; 0xff
    b346:	5ce3      	ldrb	r3, [r4, r3]
    b348:	2200      	movs	r2, #0
    b34a:	1acb      	subs	r3, r1, r3
    b34c:	21fa      	movs	r1, #250	; 0xfa
    b34e:	34bc      	adds	r4, #188	; 0xbc
    b350:	0089      	lsls	r1, r1, #2
    b352:	7820      	ldrb	r0, [r4, #0]
    b354:	4359      	muls	r1, r3
    b356:	9200      	str	r2, [sp, #0]
    b358:	4b1d      	ldr	r3, [pc, #116]	; (b3d0 <LorawanCheckAndDoRetryOnTimeout+0xd8>)
    b35a:	4c1e      	ldr	r4, [pc, #120]	; (b3d4 <LorawanCheckAndDoRetryOnTimeout+0xdc>)
    b35c:	47a0      	blx	r4
    b35e:	bd13      	pop	{r0, r1, r4, pc}
    b360:	2b04      	cmp	r3, #4
    b362:	d1fc      	bne.n	b35e <LorawanCheckAndDoRetryOnTimeout+0x66>
    b364:	4b1c      	ldr	r3, [pc, #112]	; (b3d8 <LorawanCheckAndDoRetryOnTimeout+0xe0>)
    b366:	4798      	blx	r3
    b368:	349a      	adds	r4, #154	; 0x9a
    b36a:	300d      	adds	r0, #13
    b36c:	8823      	ldrh	r3, [r4, #0]
    b36e:	b280      	uxth	r0, r0
    b370:	4283      	cmp	r3, r0
    b372:	d802      	bhi.n	b37a <LorawanCheckAndDoRetryOnTimeout+0x82>
    b374:	4b19      	ldr	r3, [pc, #100]	; (b3dc <LorawanCheckAndDoRetryOnTimeout+0xe4>)
    b376:	4798      	blx	r3
    b378:	e7f1      	b.n	b35e <LorawanCheckAndDoRetryOnTimeout+0x66>
    b37a:	4b19      	ldr	r3, [pc, #100]	; (b3e0 <LorawanCheckAndDoRetryOnTimeout+0xe8>)
    b37c:	4798      	blx	r3
    b37e:	4b19      	ldr	r3, [pc, #100]	; (b3e4 <LorawanCheckAndDoRetryOnTimeout+0xec>)
    b380:	4798      	blx	r3
    b382:	200e      	movs	r0, #14
    b384:	4b18      	ldr	r3, [pc, #96]	; (b3e8 <LorawanCheckAndDoRetryOnTimeout+0xf0>)
    b386:	4798      	blx	r3
    b388:	e7e9      	b.n	b35e <LorawanCheckAndDoRetryOnTimeout+0x66>
    b38a:	4b15      	ldr	r3, [pc, #84]	; (b3e0 <LorawanCheckAndDoRetryOnTimeout+0xe8>)
    b38c:	4798      	blx	r3
    b38e:	4b15      	ldr	r3, [pc, #84]	; (b3e4 <LorawanCheckAndDoRetryOnTimeout+0xec>)
    b390:	4798      	blx	r3
    b392:	34c8      	adds	r4, #200	; 0xc8
    b394:	4b14      	ldr	r3, [pc, #80]	; (b3e8 <LorawanCheckAndDoRetryOnTimeout+0xf0>)
    b396:	2012      	movs	r0, #18
    b398:	4798      	blx	r3
    b39a:	7823      	ldrb	r3, [r4, #0]
    b39c:	2b04      	cmp	r3, #4
    b39e:	d1de      	bne.n	b35e <LorawanCheckAndDoRetryOnTimeout+0x66>
    b3a0:	4b12      	ldr	r3, [pc, #72]	; (b3ec <LorawanCheckAndDoRetryOnTimeout+0xf4>)
    b3a2:	4798      	blx	r3
    b3a4:	e7db      	b.n	b35e <LorawanCheckAndDoRetryOnTimeout+0x66>
    b3a6:	0023      	movs	r3, r4
    b3a8:	32af      	adds	r2, #175	; 0xaf
    b3aa:	33ad      	adds	r3, #173	; 0xad
    b3ac:	7812      	ldrb	r2, [r2, #0]
    b3ae:	781b      	ldrb	r3, [r3, #0]
    b3b0:	429a      	cmp	r2, r3
    b3b2:	d804      	bhi.n	b3be <LorawanCheckAndDoRetryOnTimeout+0xc6>
    b3b4:	2395      	movs	r3, #149	; 0x95
    b3b6:	005b      	lsls	r3, r3, #1
    b3b8:	5ce3      	ldrb	r3, [r4, r3]
    b3ba:	2b00      	cmp	r3, #0
    b3bc:	d1da      	bne.n	b374 <LorawanCheckAndDoRetryOnTimeout+0x7c>
    b3be:	4b0c      	ldr	r3, [pc, #48]	; (b3f0 <LorawanCheckAndDoRetryOnTimeout+0xf8>)
    b3c0:	4798      	blx	r3
    b3c2:	4b08      	ldr	r3, [pc, #32]	; (b3e4 <LorawanCheckAndDoRetryOnTimeout+0xec>)
    b3c4:	4798      	blx	r3
    b3c6:	2008      	movs	r0, #8
    b3c8:	e7dc      	b.n	b384 <LorawanCheckAndDoRetryOnTimeout+0x8c>
    b3ca:	46c0      	nop			; (mov r8, r8)
    b3cc:	20000f10 	.word	0x20000f10
    b3d0:	0000b3f5 	.word	0x0000b3f5
    b3d4:	000018f1 	.word	0x000018f1
    b3d8:	000093c5 	.word	0x000093c5
    b3dc:	0000a30d 	.word	0x0000a30d
    b3e0:	00009ced 	.word	0x00009ced
    b3e4:	000092d9 	.word	0x000092d9
    b3e8:	0000a9c5 	.word	0x0000a9c5
    b3ec:	0000decd 	.word	0x0000decd
    b3f0:	00009d1d 	.word	0x00009d1d

0000b3f4 <AckRetransmissionCallback>:
    b3f4:	b510      	push	{r4, lr}
    b3f6:	4c1c      	ldr	r4, [pc, #112]	; (b468 <AckRetransmissionCallback+0x74>)
    b3f8:	0023      	movs	r3, r4
    b3fa:	3350      	adds	r3, #80	; 0x50
    b3fc:	781b      	ldrb	r3, [r3, #0]
    b3fe:	2b7f      	cmp	r3, #127	; 0x7f
    b400:	d82e      	bhi.n	b460 <AckRetransmissionCallback+0x6c>
    b402:	0023      	movs	r3, r4
    b404:	33c8      	adds	r3, #200	; 0xc8
    b406:	781b      	ldrb	r3, [r3, #0]
    b408:	2b04      	cmp	r3, #4
    b40a:	d102      	bne.n	b412 <AckRetransmissionCallback+0x1e>
    b40c:	4b17      	ldr	r3, [pc, #92]	; (b46c <AckRetransmissionCallback+0x78>)
    b40e:	4798      	blx	r3
    b410:	e01f      	b.n	b452 <AckRetransmissionCallback+0x5e>
    b412:	2b01      	cmp	r3, #1
    b414:	d11d      	bne.n	b452 <AckRetransmissionCallback+0x5e>
    b416:	0022      	movs	r2, r4
    b418:	0023      	movs	r3, r4
    b41a:	32b0      	adds	r2, #176	; 0xb0
    b41c:	33ae      	adds	r3, #174	; 0xae
    b41e:	7812      	ldrb	r2, [r2, #0]
    b420:	781b      	ldrb	r3, [r3, #0]
    b422:	429a      	cmp	r2, r3
    b424:	d816      	bhi.n	b454 <AckRetransmissionCallback+0x60>
    b426:	2395      	movs	r3, #149	; 0x95
    b428:	005b      	lsls	r3, r3, #1
    b42a:	5ce3      	ldrb	r3, [r4, r3]
    b42c:	2b00      	cmp	r3, #0
    b42e:	d011      	beq.n	b454 <AckRetransmissionCallback+0x60>
    b430:	4b0f      	ldr	r3, [pc, #60]	; (b470 <AckRetransmissionCallback+0x7c>)
    b432:	4798      	blx	r3
    b434:	349a      	adds	r4, #154	; 0x9a
    b436:	300d      	adds	r0, #13
    b438:	8823      	ldrh	r3, [r4, #0]
    b43a:	b280      	uxth	r0, r0
    b43c:	4283      	cmp	r3, r0
    b43e:	d801      	bhi.n	b444 <AckRetransmissionCallback+0x50>
    b440:	4b0c      	ldr	r3, [pc, #48]	; (b474 <AckRetransmissionCallback+0x80>)
    b442:	e7e4      	b.n	b40e <AckRetransmissionCallback+0x1a>
    b444:	4b0c      	ldr	r3, [pc, #48]	; (b478 <AckRetransmissionCallback+0x84>)
    b446:	4798      	blx	r3
    b448:	4b0c      	ldr	r3, [pc, #48]	; (b47c <AckRetransmissionCallback+0x88>)
    b44a:	4798      	blx	r3
    b44c:	200e      	movs	r0, #14
    b44e:	4b0c      	ldr	r3, [pc, #48]	; (b480 <AckRetransmissionCallback+0x8c>)
    b450:	4798      	blx	r3
    b452:	bd10      	pop	{r4, pc}
    b454:	4b08      	ldr	r3, [pc, #32]	; (b478 <AckRetransmissionCallback+0x84>)
    b456:	4798      	blx	r3
    b458:	4b08      	ldr	r3, [pc, #32]	; (b47c <AckRetransmissionCallback+0x88>)
    b45a:	4798      	blx	r3
    b45c:	2012      	movs	r0, #18
    b45e:	e7f6      	b.n	b44e <AckRetransmissionCallback+0x5a>
    b460:	4b05      	ldr	r3, [pc, #20]	; (b478 <AckRetransmissionCallback+0x84>)
    b462:	4798      	blx	r3
    b464:	4b05      	ldr	r3, [pc, #20]	; (b47c <AckRetransmissionCallback+0x88>)
    b466:	e7d2      	b.n	b40e <AckRetransmissionCallback+0x1a>
    b468:	20000f10 	.word	0x20000f10
    b46c:	0000b2f9 	.word	0x0000b2f9
    b470:	000093c5 	.word	0x000093c5
    b474:	0000a30d 	.word	0x0000a30d
    b478:	00009ced 	.word	0x00009ced
    b47c:	000092d9 	.word	0x000092d9
    b480:	0000a9c5 	.word	0x0000a9c5

0000b484 <LORAWAN_RxTimeout>:
    b484:	4b22      	ldr	r3, [pc, #136]	; (b510 <LORAWAN_RxTimeout+0x8c>)
    b486:	b510      	push	{r4, lr}
    b488:	001a      	movs	r2, r3
    b48a:	3250      	adds	r2, #80	; 0x50
    b48c:	7812      	ldrb	r2, [r2, #0]
    b48e:	b251      	sxtb	r1, r2
    b490:	2900      	cmp	r1, #0
    b492:	db21      	blt.n	b4d8 <LORAWAN_RxTimeout+0x54>
    b494:	0019      	movs	r1, r3
    b496:	31c8      	adds	r1, #200	; 0xc8
    b498:	7809      	ldrb	r1, [r1, #0]
    b49a:	2904      	cmp	r1, #4
    b49c:	d104      	bne.n	b4a8 <LORAWAN_RxTimeout+0x24>
    b49e:	07d1      	lsls	r1, r2, #31
    b4a0:	d502      	bpl.n	b4a8 <LORAWAN_RxTimeout+0x24>
    b4a2:	4b1c      	ldr	r3, [pc, #112]	; (b514 <LORAWAN_RxTimeout+0x90>)
    b4a4:	4798      	blx	r3
    b4a6:	bd10      	pop	{r4, pc}
    b4a8:	210e      	movs	r1, #14
    b4aa:	0010      	movs	r0, r2
    b4ac:	4008      	ands	r0, r1
    b4ae:	2806      	cmp	r0, #6
    b4b0:	d107      	bne.n	b4c2 <LORAWAN_RxTimeout+0x3e>
    b4b2:	3350      	adds	r3, #80	; 0x50
    b4b4:	781a      	ldrb	r2, [r3, #0]
    b4b6:	438a      	bics	r2, r1
    b4b8:	0011      	movs	r1, r2
    b4ba:	2208      	movs	r2, #8
    b4bc:	430a      	orrs	r2, r1
    b4be:	701a      	strb	r2, [r3, #0]
    b4c0:	e7f1      	b.n	b4a6 <LORAWAN_RxTimeout+0x22>
    b4c2:	3360      	adds	r3, #96	; 0x60
    b4c4:	781b      	ldrb	r3, [r3, #0]
    b4c6:	075b      	lsls	r3, r3, #29
    b4c8:	d502      	bpl.n	b4d0 <LORAWAN_RxTimeout+0x4c>
    b4ca:	4b13      	ldr	r3, [pc, #76]	; (b518 <LORAWAN_RxTimeout+0x94>)
    b4cc:	4798      	blx	r3
    b4ce:	e7ea      	b.n	b4a6 <LORAWAN_RxTimeout+0x22>
    b4d0:	07d3      	lsls	r3, r2, #31
    b4d2:	d5e8      	bpl.n	b4a6 <LORAWAN_RxTimeout+0x22>
    b4d4:	4b11      	ldr	r3, [pc, #68]	; (b51c <LORAWAN_RxTimeout+0x98>)
    b4d6:	e7f9      	b.n	b4cc <LORAWAN_RxTimeout+0x48>
    b4d8:	4811      	ldr	r0, [pc, #68]	; (b520 <LORAWAN_RxTimeout+0x9c>)
    b4da:	7841      	ldrb	r1, [r0, #1]
    b4dc:	7802      	ldrb	r2, [r0, #0]
    b4de:	0209      	lsls	r1, r1, #8
    b4e0:	4311      	orrs	r1, r2
    b4e2:	7882      	ldrb	r2, [r0, #2]
    b4e4:	0412      	lsls	r2, r2, #16
    b4e6:	4311      	orrs	r1, r2
    b4e8:	78c2      	ldrb	r2, [r0, #3]
    b4ea:	0612      	lsls	r2, r2, #24
    b4ec:	430a      	orrs	r2, r1
    b4ee:	d0da      	beq.n	b4a6 <LORAWAN_RxTimeout+0x22>
    b4f0:	2190      	movs	r1, #144	; 0x90
    b4f2:	2001      	movs	r0, #1
    b4f4:	0049      	lsls	r1, r1, #1
    b4f6:	5458      	strb	r0, [r3, r1]
    b4f8:	0019      	movs	r1, r3
    b4fa:	2404      	movs	r4, #4
    b4fc:	31d4      	adds	r1, #212	; 0xd4
    b4fe:	700c      	strb	r4, [r1, #0]
    b500:	001c      	movs	r4, r3
    b502:	33d0      	adds	r3, #208	; 0xd0
    b504:	34d8      	adds	r4, #216	; 0xd8
    b506:	7020      	strb	r0, [r4, #0]
    b508:	6818      	ldr	r0, [r3, #0]
    b50a:	4790      	blx	r2
    b50c:	e7cb      	b.n	b4a6 <LORAWAN_RxTimeout+0x22>
    b50e:	46c0      	nop			; (mov r8, r8)
    b510:	20000f10 	.word	0x20000f10
    b514:	0000cfbd 	.word	0x0000cfbd
    b518:	00009d41 	.word	0x00009d41
    b51c:	0000b2f9 	.word	0x0000b2f9
    b520:	20001150 	.word	0x20001150

0000b524 <LorawanConfigureRadioForRX2>:
    b524:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    b526:	466b      	mov	r3, sp
    b528:	4c21      	ldr	r4, [pc, #132]	; (b5b0 <LorawanConfigureRadioForRX2+0x8c>)
    b52a:	1cdd      	adds	r5, r3, #3
    b52c:	0023      	movs	r3, r4
    b52e:	2100      	movs	r1, #0
    b530:	3360      	adds	r3, #96	; 0x60
    b532:	781b      	ldrb	r3, [r3, #0]
    b534:	0007      	movs	r7, r0
    b536:	7029      	strb	r1, [r5, #0]
    b538:	075b      	lsls	r3, r3, #29
    b53a:	d52c      	bpl.n	b596 <LorawanConfigureRadioForRX2+0x72>
    b53c:	002a      	movs	r2, r5
    b53e:	2009      	movs	r0, #9
    b540:	4b1c      	ldr	r3, [pc, #112]	; (b5b4 <LorawanConfigureRadioForRX2+0x90>)
    b542:	4798      	blx	r3
    b544:	0022      	movs	r2, r4
    b546:	0023      	movs	r3, r4
    b548:	324c      	adds	r2, #76	; 0x4c
    b54a:	8811      	ldrh	r1, [r2, #0]
    b54c:	334a      	adds	r3, #74	; 0x4a
    b54e:	881b      	ldrh	r3, [r3, #0]
    b550:	0409      	lsls	r1, r1, #16
    b552:	4319      	orrs	r1, r3
    b554:	7828      	ldrb	r0, [r5, #0]
    b556:	4b18      	ldr	r3, [pc, #96]	; (b5b8 <LorawanConfigureRadioForRX2+0x94>)
    b558:	4798      	blx	r3
    b55a:	2300      	movs	r3, #0
    b55c:	0022      	movs	r2, r4
    b55e:	ae01      	add	r6, sp, #4
    b560:	7033      	strb	r3, [r6, #0]
    b562:	32c8      	adds	r2, #200	; 0xc8
    b564:	7812      	ldrb	r2, [r2, #0]
    b566:	2a04      	cmp	r2, #4
    b568:	d11a      	bne.n	b5a0 <LorawanConfigureRadioForRX2+0x7c>
    b56a:	3450      	adds	r4, #80	; 0x50
    b56c:	7822      	ldrb	r2, [r4, #0]
    b56e:	07d2      	lsls	r2, r2, #31
    b570:	d516      	bpl.n	b5a0 <LorawanConfigureRadioForRX2+0x7c>
    b572:	8073      	strh	r3, [r6, #2]
    b574:	0030      	movs	r0, r6
    b576:	4b11      	ldr	r3, [pc, #68]	; (b5bc <LorawanConfigureRadioForRX2+0x98>)
    b578:	4798      	blx	r3
    b57a:	1e04      	subs	r4, r0, #0
    b57c:	d00a      	beq.n	b594 <LorawanConfigureRadioForRX2+0x70>
    b57e:	4b10      	ldr	r3, [pc, #64]	; (b5c0 <LorawanConfigureRadioForRX2+0x9c>)
    b580:	4798      	blx	r3
    b582:	4b10      	ldr	r3, [pc, #64]	; (b5c4 <LorawanConfigureRadioForRX2+0xa0>)
    b584:	4798      	blx	r3
    b586:	4b10      	ldr	r3, [pc, #64]	; (b5c8 <LorawanConfigureRadioForRX2+0xa4>)
    b588:	4798      	blx	r3
    b58a:	2f00      	cmp	r7, #0
    b58c:	d002      	beq.n	b594 <LorawanConfigureRadioForRX2+0x70>
    b58e:	0020      	movs	r0, r4
    b590:	4b0e      	ldr	r3, [pc, #56]	; (b5cc <LorawanConfigureRadioForRX2+0xa8>)
    b592:	4798      	blx	r3
    b594:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    b596:	0023      	movs	r3, r4
    b598:	334e      	adds	r3, #78	; 0x4e
    b59a:	781b      	ldrb	r3, [r3, #0]
    b59c:	702b      	strb	r3, [r5, #0]
    b59e:	e7d1      	b.n	b544 <LorawanConfigureRadioForRX2+0x20>
    b5a0:	466b      	mov	r3, sp
    b5a2:	0029      	movs	r1, r5
    b5a4:	1d9a      	adds	r2, r3, #6
    b5a6:	2003      	movs	r0, #3
    b5a8:	4b02      	ldr	r3, [pc, #8]	; (b5b4 <LorawanConfigureRadioForRX2+0x90>)
    b5aa:	4798      	blx	r3
    b5ac:	e7e2      	b.n	b574 <LorawanConfigureRadioForRX2+0x50>
    b5ae:	46c0      	nop			; (mov r8, r8)
    b5b0:	20000f10 	.word	0x20000f10
    b5b4:	00006d79 	.word	0x00006d79
    b5b8:	0000a1bd 	.word	0x0000a1bd
    b5bc:	0000e8c9 	.word	0x0000e8c9
    b5c0:	00009ced 	.word	0x00009ced
    b5c4:	00009d1d 	.word	0x00009d1d
    b5c8:	000092d9 	.word	0x000092d9
    b5cc:	0000a9c5 	.word	0x0000a9c5

0000b5d0 <LorawanReceiveWindow2Callback>:
    b5d0:	b570      	push	{r4, r5, r6, lr}
    b5d2:	4c16      	ldr	r4, [pc, #88]	; (b62c <LorawanReceiveWindow2Callback+0x5c>)
    b5d4:	0025      	movs	r5, r4
    b5d6:	3550      	adds	r5, #80	; 0x50
    b5d8:	782b      	ldrb	r3, [r5, #0]
    b5da:	2b7f      	cmp	r3, #127	; 0x7f
    b5dc:	d811      	bhi.n	b602 <LorawanReceiveWindow2Callback+0x32>
    b5de:	4b14      	ldr	r3, [pc, #80]	; (b630 <LorawanReceiveWindow2Callback+0x60>)
    b5e0:	4798      	blx	r3
    b5e2:	2801      	cmp	r0, #1
    b5e4:	d109      	bne.n	b5fa <LorawanReceiveWindow2Callback+0x2a>
    b5e6:	220e      	movs	r2, #14
    b5e8:	782b      	ldrb	r3, [r5, #0]
    b5ea:	4393      	bics	r3, r2
    b5ec:	001a      	movs	r2, r3
    b5ee:	230a      	movs	r3, #10
    b5f0:	4313      	orrs	r3, r2
    b5f2:	702b      	strb	r3, [r5, #0]
    b5f4:	4b0f      	ldr	r3, [pc, #60]	; (b634 <LorawanReceiveWindow2Callback+0x64>)
    b5f6:	4798      	blx	r3
    b5f8:	bd70      	pop	{r4, r5, r6, pc}
    b5fa:	2301      	movs	r3, #1
    b5fc:	34c4      	adds	r4, #196	; 0xc4
    b5fe:	7023      	strb	r3, [r4, #0]
    b600:	e7fa      	b.n	b5f8 <LorawanReceiveWindow2Callback+0x28>
    b602:	2104      	movs	r1, #4
    b604:	3460      	adds	r4, #96	; 0x60
    b606:	7822      	ldrb	r2, [r4, #0]
    b608:	420a      	tst	r2, r1
    b60a:	d007      	beq.n	b61c <LorawanReceiveWindow2Callback+0x4c>
    b60c:	2001      	movs	r0, #1
    b60e:	4383      	bics	r3, r0
    b610:	438a      	bics	r2, r1
    b612:	702b      	strb	r3, [r5, #0]
    b614:	3107      	adds	r1, #7
    b616:	4b08      	ldr	r3, [pc, #32]	; (b638 <LorawanReceiveWindow2Callback+0x68>)
    b618:	7022      	strb	r2, [r4, #0]
    b61a:	4798      	blx	r3
    b61c:	4b07      	ldr	r3, [pc, #28]	; (b63c <LorawanReceiveWindow2Callback+0x6c>)
    b61e:	4798      	blx	r3
    b620:	4b07      	ldr	r3, [pc, #28]	; (b640 <LorawanReceiveWindow2Callback+0x70>)
    b622:	4798      	blx	r3
    b624:	4b07      	ldr	r3, [pc, #28]	; (b644 <LorawanReceiveWindow2Callback+0x74>)
    b626:	4798      	blx	r3
    b628:	e7e6      	b.n	b5f8 <LorawanReceiveWindow2Callback+0x28>
    b62a:	46c0      	nop			; (mov r8, r8)
    b62c:	20000f10 	.word	0x20000f10
    b630:	0000decd 	.word	0x0000decd
    b634:	0000b525 	.word	0x0000b525
    b638:	00001e65 	.word	0x00001e65
    b63c:	00009d1d 	.word	0x00009d1d
    b640:	00009ced 	.word	0x00009ced
    b644:	000092d9 	.word	0x000092d9

0000b648 <SetReceptionNotOkState>:
    b648:	2290      	movs	r2, #144	; 0x90
    b64a:	2101      	movs	r1, #1
    b64c:	4b19      	ldr	r3, [pc, #100]	; (b6b4 <SetReceptionNotOkState+0x6c>)
    b64e:	0052      	lsls	r2, r2, #1
    b650:	b510      	push	{r4, lr}
    b652:	5499      	strb	r1, [r3, r2]
    b654:	001a      	movs	r2, r3
    b656:	0019      	movs	r1, r3
    b658:	32c8      	adds	r2, #200	; 0xc8
    b65a:	7812      	ldrb	r2, [r2, #0]
    b65c:	3150      	adds	r1, #80	; 0x50
    b65e:	200e      	movs	r0, #14
    b660:	2a01      	cmp	r2, #1
    b662:	d11d      	bne.n	b6a0 <SetReceptionNotOkState+0x58>
    b664:	780a      	ldrb	r2, [r1, #0]
    b666:	4002      	ands	r2, r0
    b668:	2a0a      	cmp	r2, #10
    b66a:	d006      	beq.n	b67a <SetReceptionNotOkState+0x32>
    b66c:	2a06      	cmp	r2, #6
    b66e:	d113      	bne.n	b698 <SetReceptionNotOkState+0x50>
    b670:	001a      	movs	r2, r3
    b672:	32c4      	adds	r2, #196	; 0xc4
    b674:	7812      	ldrb	r2, [r2, #0]
    b676:	2a00      	cmp	r2, #0
    b678:	d00e      	beq.n	b698 <SetReceptionNotOkState+0x50>
    b67a:	0019      	movs	r1, r3
    b67c:	2001      	movs	r0, #1
    b67e:	3160      	adds	r1, #96	; 0x60
    b680:	780a      	ldrb	r2, [r1, #0]
    b682:	240e      	movs	r4, #14
    b684:	4382      	bics	r2, r0
    b686:	700a      	strb	r2, [r1, #0]
    b688:	001a      	movs	r2, r3
    b68a:	3250      	adds	r2, #80	; 0x50
    b68c:	7811      	ldrb	r1, [r2, #0]
    b68e:	43a1      	bics	r1, r4
    b690:	7011      	strb	r1, [r2, #0]
    b692:	7851      	ldrb	r1, [r2, #1]
    b694:	4381      	bics	r1, r0
    b696:	7051      	strb	r1, [r2, #1]
    b698:	2200      	movs	r2, #0
    b69a:	33c4      	adds	r3, #196	; 0xc4
    b69c:	701a      	strb	r2, [r3, #0]
    b69e:	bd10      	pop	{r4, pc}
    b6a0:	230a      	movs	r3, #10
    b6a2:	780a      	ldrb	r2, [r1, #0]
    b6a4:	4382      	bics	r2, r0
    b6a6:	4313      	orrs	r3, r2
    b6a8:	700b      	strb	r3, [r1, #0]
    b6aa:	2000      	movs	r0, #0
    b6ac:	4b02      	ldr	r3, [pc, #8]	; (b6b8 <SetReceptionNotOkState+0x70>)
    b6ae:	4798      	blx	r3
    b6b0:	e7f5      	b.n	b69e <SetReceptionNotOkState+0x56>
    b6b2:	46c0      	nop			; (mov r8, r8)
    b6b4:	20000f10 	.word	0x20000f10
    b6b8:	0000b525 	.word	0x0000b525

0000b6bc <UpdateCurrentDataRateAfterDataRangeChanges>:
    b6bc:	4b09      	ldr	r3, [pc, #36]	; (b6e4 <UpdateCurrentDataRateAfterDataRangeChanges+0x28>)
    b6be:	001a      	movs	r2, r3
    b6c0:	32bf      	adds	r2, #191	; 0xbf
    b6c2:	7811      	ldrb	r1, [r2, #0]
    b6c4:	001a      	movs	r2, r3
    b6c6:	32b3      	adds	r2, #179	; 0xb3
    b6c8:	7810      	ldrb	r0, [r2, #0]
    b6ca:	4288      	cmp	r0, r1
    b6cc:	d900      	bls.n	b6d0 <UpdateCurrentDataRateAfterDataRangeChanges+0x14>
    b6ce:	7011      	strb	r1, [r2, #0]
    b6d0:	001a      	movs	r2, r3
    b6d2:	33b3      	adds	r3, #179	; 0xb3
    b6d4:	32be      	adds	r2, #190	; 0xbe
    b6d6:	7812      	ldrb	r2, [r2, #0]
    b6d8:	7819      	ldrb	r1, [r3, #0]
    b6da:	4291      	cmp	r1, r2
    b6dc:	d200      	bcs.n	b6e0 <UpdateCurrentDataRateAfterDataRangeChanges+0x24>
    b6de:	701a      	strb	r2, [r3, #0]
    b6e0:	4770      	bx	lr
    b6e2:	46c0      	nop			; (mov r8, r8)
    b6e4:	20000f10 	.word	0x20000f10

0000b6e8 <ExecuteNewChannel>:
    b6e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    b6ea:	b08d      	sub	sp, #52	; 0x34
    b6ec:	7804      	ldrb	r4, [r0, #0]
    b6ee:	ab02      	add	r3, sp, #8
    b6f0:	0006      	movs	r6, r0
    b6f2:	71dc      	strb	r4, [r3, #7]
    b6f4:	1c41      	adds	r1, r0, #1
    b6f6:	2204      	movs	r2, #4
    b6f8:	4b54      	ldr	r3, [pc, #336]	; (b84c <ExecuteNewChannel+0x164>)
    b6fa:	a808      	add	r0, sp, #32
    b6fc:	4798      	blx	r3
    b6fe:	9b08      	ldr	r3, [sp, #32]
    b700:	a904      	add	r1, sp, #16
    b702:	021d      	lsls	r5, r3, #8
    b704:	2364      	movs	r3, #100	; 0x64
    b706:	0a2d      	lsrs	r5, r5, #8
    b708:	435d      	muls	r5, r3
    b70a:	1d73      	adds	r3, r6, #5
    b70c:	9301      	str	r3, [sp, #4]
    b70e:	7933      	ldrb	r3, [r6, #4]
    b710:	2015      	movs	r0, #21
    b712:	9300      	str	r3, [sp, #0]
    b714:	2300      	movs	r3, #0
    b716:	4e4e      	ldr	r6, [pc, #312]	; (b850 <ExecuteNewChannel+0x168>)
    b718:	700c      	strb	r4, [r1, #0]
    b71a:	9508      	str	r5, [sp, #32]
    b71c:	704b      	strb	r3, [r1, #1]
    b71e:	47b0      	blx	r6
    b720:	4c4c      	ldr	r4, [pc, #304]	; (b854 <ExecuteNewChannel+0x16c>)
    b722:	2808      	cmp	r0, #8
    b724:	d12b      	bne.n	b77e <ExecuteNewChannel+0x96>
    b726:	466a      	mov	r2, sp
    b728:	ab02      	add	r3, sp, #8
    b72a:	79db      	ldrb	r3, [r3, #7]
    b72c:	7812      	ldrb	r2, [r2, #0]
    b72e:	af06      	add	r7, sp, #24
    b730:	a90a      	add	r1, sp, #40	; 0x28
    b732:	3806      	subs	r0, #6
    b734:	703b      	strb	r3, [r7, #0]
    b736:	707a      	strb	r2, [r7, #1]
    b738:	710b      	strb	r3, [r1, #4]
    b73a:	950a      	str	r5, [sp, #40]	; 0x28
    b73c:	47b0      	blx	r6
    b73e:	2808      	cmp	r0, #8
    b740:	d001      	beq.n	b746 <ExecuteNewChannel+0x5e>
    b742:	2d00      	cmp	r5, #0
    b744:	d10b      	bne.n	b75e <ExecuteNewChannel+0x76>
    b746:	0023      	movs	r3, r4
    b748:	33ac      	adds	r3, #172	; 0xac
    b74a:	781a      	ldrb	r2, [r3, #0]
    b74c:	2303      	movs	r3, #3
    b74e:	4353      	muls	r3, r2
    b750:	2280      	movs	r2, #128	; 0x80
    b752:	18e3      	adds	r3, r4, r3
    b754:	3360      	adds	r3, #96	; 0x60
    b756:	79d9      	ldrb	r1, [r3, #7]
    b758:	4252      	negs	r2, r2
    b75a:	430a      	orrs	r2, r1
    b75c:	71da      	strb	r2, [r3, #7]
    b75e:	0039      	movs	r1, r7
    b760:	2012      	movs	r0, #18
    b762:	47b0      	blx	r6
    b764:	2808      	cmp	r0, #8
    b766:	d10a      	bne.n	b77e <ExecuteNewChannel+0x96>
    b768:	0023      	movs	r3, r4
    b76a:	33ac      	adds	r3, #172	; 0xac
    b76c:	781a      	ldrb	r2, [r3, #0]
    b76e:	2303      	movs	r3, #3
    b770:	4353      	muls	r3, r2
    b772:	2240      	movs	r2, #64	; 0x40
    b774:	18e3      	adds	r3, r4, r3
    b776:	3360      	adds	r3, #96	; 0x60
    b778:	79d9      	ldrb	r1, [r3, #7]
    b77a:	430a      	orrs	r2, r1
    b77c:	71da      	strb	r2, [r3, #7]
    b77e:	0023      	movs	r3, r4
    b780:	33ac      	adds	r3, #172	; 0xac
    b782:	781a      	ldrb	r2, [r3, #0]
    b784:	2303      	movs	r3, #3
    b786:	4353      	muls	r3, r2
    b788:	18e3      	adds	r3, r4, r3
    b78a:	3360      	adds	r3, #96	; 0x60
    b78c:	79db      	ldrb	r3, [r3, #7]
    b78e:	09da      	lsrs	r2, r3, #7
    b790:	2a01      	cmp	r2, #1
    b792:	d150      	bne.n	b836 <ExecuteNewChannel+0x14e>
    b794:	065b      	lsls	r3, r3, #25
    b796:	d54e      	bpl.n	b836 <ExecuteNewChannel+0x14e>
    b798:	4e2f      	ldr	r6, [pc, #188]	; (b858 <ExecuteNewChannel+0x170>)
    b79a:	2d00      	cmp	r5, #0
    b79c:	d04e      	beq.n	b83c <ExecuteNewChannel+0x154>
    b79e:	a906      	add	r1, sp, #24
    b7a0:	2012      	movs	r0, #18
    b7a2:	47b0      	blx	r6
    b7a4:	ad07      	add	r5, sp, #28
    b7a6:	a90a      	add	r1, sp, #40	; 0x28
    b7a8:	2000      	movs	r0, #0
    b7aa:	47b0      	blx	r6
    b7ac:	002a      	movs	r2, r5
    b7ae:	2100      	movs	r1, #0
    b7b0:	2014      	movs	r0, #20
    b7b2:	4f2a      	ldr	r7, [pc, #168]	; (b85c <ExecuteNewChannel+0x174>)
    b7b4:	47b8      	blx	r7
    b7b6:	0023      	movs	r3, r4
    b7b8:	782a      	ldrb	r2, [r5, #0]
    b7ba:	33be      	adds	r3, #190	; 0xbe
    b7bc:	701a      	strb	r2, [r3, #0]
    b7be:	0023      	movs	r3, r4
    b7c0:	786a      	ldrb	r2, [r5, #1]
    b7c2:	33bf      	adds	r3, #191	; 0xbf
    b7c4:	701a      	strb	r2, [r3, #0]
    b7c6:	34e4      	adds	r4, #228	; 0xe4
    b7c8:	4b25      	ldr	r3, [pc, #148]	; (b860 <ExecuteNewChannel+0x178>)
    b7ca:	4798      	blx	r3
    b7cc:	7823      	ldrb	r3, [r4, #0]
    b7ce:	079b      	lsls	r3, r3, #30
    b7d0:	d50e      	bpl.n	b7f0 <ExecuteNewChannel+0x108>
    b7d2:	2416      	movs	r4, #22
    b7d4:	ab02      	add	r3, sp, #8
    b7d6:	18e4      	adds	r4, r4, r3
    b7d8:	1dd9      	adds	r1, r3, #7
    b7da:	0022      	movs	r2, r4
    b7dc:	201e      	movs	r0, #30
    b7de:	47b8      	blx	r7
    b7e0:	ab02      	add	r3, sp, #8
    b7e2:	79db      	ldrb	r3, [r3, #7]
    b7e4:	a909      	add	r1, sp, #36	; 0x24
    b7e6:	708b      	strb	r3, [r1, #2]
    b7e8:	8823      	ldrh	r3, [r4, #0]
    b7ea:	201e      	movs	r0, #30
    b7ec:	800b      	strh	r3, [r1, #0]
    b7ee:	47b0      	blx	r6
    b7f0:	ab02      	add	r3, sp, #8
    b7f2:	79db      	ldrb	r3, [r3, #7]
    b7f4:	a905      	add	r1, sp, #20
    b7f6:	700b      	strb	r3, [r1, #0]
    b7f8:	2301      	movs	r3, #1
    b7fa:	2016      	movs	r0, #22
    b7fc:	704b      	strb	r3, [r1, #1]
    b7fe:	4b16      	ldr	r3, [pc, #88]	; (b858 <ExecuteNewChannel+0x170>)
    b800:	4798      	blx	r3
    b802:	ad09      	add	r5, sp, #36	; 0x24
    b804:	2100      	movs	r1, #0
    b806:	002a      	movs	r2, r5
    b808:	4b14      	ldr	r3, [pc, #80]	; (b85c <ExecuteNewChannel+0x174>)
    b80a:	2014      	movs	r0, #20
    b80c:	4798      	blx	r3
    b80e:	4c11      	ldr	r4, [pc, #68]	; (b854 <ExecuteNewChannel+0x16c>)
    b810:	782a      	ldrb	r2, [r5, #0]
    b812:	0023      	movs	r3, r4
    b814:	33be      	adds	r3, #190	; 0xbe
    b816:	701a      	strb	r2, [r3, #0]
    b818:	0023      	movs	r3, r4
    b81a:	786a      	ldrb	r2, [r5, #1]
    b81c:	33bf      	adds	r3, #191	; 0xbf
    b81e:	701a      	strb	r2, [r3, #0]
    b820:	4b0f      	ldr	r3, [pc, #60]	; (b860 <ExecuteNewChannel+0x178>)
    b822:	4798      	blx	r3
    b824:	2304      	movs	r3, #4
    b826:	3450      	adds	r4, #80	; 0x50
    b828:	7862      	ldrb	r2, [r4, #1]
    b82a:	210b      	movs	r1, #11
    b82c:	4313      	orrs	r3, r2
    b82e:	7063      	strb	r3, [r4, #1]
    b830:	2001      	movs	r0, #1
    b832:	4b0c      	ldr	r3, [pc, #48]	; (b864 <ExecuteNewChannel+0x17c>)
    b834:	4798      	blx	r3
    b836:	9801      	ldr	r0, [sp, #4]
    b838:	b00d      	add	sp, #52	; 0x34
    b83a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b83c:	ab02      	add	r3, sp, #8
    b83e:	79db      	ldrb	r3, [r3, #7]
    b840:	a905      	add	r1, sp, #20
    b842:	2016      	movs	r0, #22
    b844:	700b      	strb	r3, [r1, #0]
    b846:	704d      	strb	r5, [r1, #1]
    b848:	47b0      	blx	r6
    b84a:	e7da      	b.n	b802 <ExecuteNewChannel+0x11a>
    b84c:	000112d5 	.word	0x000112d5
    b850:	00006d95 	.word	0x00006d95
    b854:	20000f10 	.word	0x20000f10
    b858:	00006db1 	.word	0x00006db1
    b85c:	00006d79 	.word	0x00006d79
    b860:	0000b6bd 	.word	0x0000b6bd
    b864:	00001e65 	.word	0x00001e65

0000b868 <MacExecuteCommands>:
    b868:	2300      	movs	r3, #0
    b86a:	b5f0      	push	{r4, r5, r6, r7, lr}
    b86c:	0007      	movs	r7, r0
    b86e:	2601      	movs	r6, #1
    b870:	b087      	sub	sp, #28
    b872:	9002      	str	r0, [sp, #8]
    b874:	9103      	str	r1, [sp, #12]
    b876:	9300      	str	r3, [sp, #0]
    b878:	9b02      	ldr	r3, [sp, #8]
    b87a:	9a03      	ldr	r2, [sp, #12]
    b87c:	4c69      	ldr	r4, [pc, #420]	; (ba24 <MacExecuteCommands+0x1bc>)
    b87e:	1898      	adds	r0, r3, r2
    b880:	4287      	cmp	r7, r0
    b882:	d353      	bcc.n	b92c <MacExecuteCommands+0xc4>
    b884:	2393      	movs	r3, #147	; 0x93
    b886:	005b      	lsls	r3, r3, #1
    b888:	5ce3      	ldrb	r3, [r4, r3]
    b88a:	2b00      	cmp	r3, #0
    b88c:	d000      	beq.n	b890 <MacExecuteCommands+0x28>
    b88e:	e072      	b.n	b976 <MacExecuteCommands+0x10e>
    b890:	0038      	movs	r0, r7
    b892:	b007      	add	sp, #28
    b894:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b896:	0023      	movs	r3, r4
    b898:	787a      	ldrb	r2, [r7, #1]
    b89a:	33b1      	adds	r3, #177	; 0xb1
    b89c:	701a      	strb	r2, [r3, #0]
    b89e:	0023      	movs	r3, r4
    b8a0:	78ba      	ldrb	r2, [r7, #2]
    b8a2:	33b2      	adds	r3, #178	; 0xb2
    b8a4:	701a      	strb	r2, [r3, #0]
    b8a6:	2203      	movs	r2, #3
    b8a8:	9b01      	ldr	r3, [sp, #4]
    b8aa:	1cfd      	adds	r5, r7, #3
    b8ac:	4353      	muls	r3, r2
    b8ae:	18e3      	adds	r3, r4, r3
    b8b0:	3366      	adds	r3, #102	; 0x66
    b8b2:	32fc      	adds	r2, #252	; 0xfc
    b8b4:	701a      	strb	r2, [r3, #0]
    b8b6:	0022      	movs	r2, r4
    b8b8:	2103      	movs	r1, #3
    b8ba:	32ac      	adds	r2, #172	; 0xac
    b8bc:	7813      	ldrb	r3, [r2, #0]
    b8be:	4359      	muls	r1, r3
    b8c0:	1864      	adds	r4, r4, r1
    b8c2:	3466      	adds	r4, #102	; 0x66
    b8c4:	7821      	ldrb	r1, [r4, #0]
    b8c6:	29ff      	cmp	r1, #255	; 0xff
    b8c8:	d003      	beq.n	b8d2 <MacExecuteCommands+0x6a>
    b8ca:	2b0f      	cmp	r3, #15
    b8cc:	d801      	bhi.n	b8d2 <MacExecuteCommands+0x6a>
    b8ce:	3301      	adds	r3, #1
    b8d0:	7013      	strb	r3, [r2, #0]
    b8d2:	002f      	movs	r7, r5
    b8d4:	e7d0      	b.n	b878 <MacExecuteCommands+0x10>
    b8d6:	0028      	movs	r0, r5
    b8d8:	4b53      	ldr	r3, [pc, #332]	; (ba28 <MacExecuteCommands+0x1c0>)
    b8da:	4798      	blx	r3
    b8dc:	0005      	movs	r5, r0
    b8de:	e7ea      	b.n	b8b6 <MacExecuteCommands+0x4e>
    b8e0:	0028      	movs	r0, r5
    b8e2:	4b52      	ldr	r3, [pc, #328]	; (ba2c <MacExecuteCommands+0x1c4>)
    b8e4:	e7f9      	b.n	b8da <MacExecuteCommands+0x72>
    b8e6:	0028      	movs	r0, r5
    b8e8:	4b51      	ldr	r3, [pc, #324]	; (ba30 <MacExecuteCommands+0x1c8>)
    b8ea:	e7f6      	b.n	b8da <MacExecuteCommands+0x72>
    b8ec:	0028      	movs	r0, r5
    b8ee:	4b51      	ldr	r3, [pc, #324]	; (ba34 <MacExecuteCommands+0x1cc>)
    b8f0:	e7f3      	b.n	b8da <MacExecuteCommands+0x72>
    b8f2:	230f      	movs	r3, #15
    b8f4:	7878      	ldrb	r0, [r7, #1]
    b8f6:	1cbd      	adds	r5, r7, #2
    b8f8:	4018      	ands	r0, r3
    b8fa:	4b4f      	ldr	r3, [pc, #316]	; (ba38 <MacExecuteCommands+0x1d0>)
    b8fc:	4798      	blx	r3
    b8fe:	0022      	movs	r2, r4
    b900:	2380      	movs	r3, #128	; 0x80
    b902:	3250      	adds	r2, #80	; 0x50
    b904:	7851      	ldrb	r1, [r2, #1]
    b906:	425b      	negs	r3, r3
    b908:	430b      	orrs	r3, r1
    b90a:	7053      	strb	r3, [r2, #1]
    b90c:	210b      	movs	r1, #11
    b90e:	0030      	movs	r0, r6
    b910:	4b4a      	ldr	r3, [pc, #296]	; (ba3c <MacExecuteCommands+0x1d4>)
    b912:	4798      	blx	r3
    b914:	e7cf      	b.n	b8b6 <MacExecuteCommands+0x4e>
    b916:	0028      	movs	r0, r5
    b918:	4b49      	ldr	r3, [pc, #292]	; (ba40 <MacExecuteCommands+0x1d8>)
    b91a:	e7de      	b.n	b8da <MacExecuteCommands+0x72>
    b91c:	0028      	movs	r0, r5
    b91e:	4b49      	ldr	r3, [pc, #292]	; (ba44 <MacExecuteCommands+0x1dc>)
    b920:	e7db      	b.n	b8da <MacExecuteCommands+0x72>
    b922:	22ff      	movs	r2, #255	; 0xff
    b924:	0005      	movs	r5, r0
    b926:	701a      	strb	r2, [r3, #0]
    b928:	9600      	str	r6, [sp, #0]
    b92a:	e7c4      	b.n	b8b6 <MacExecuteCommands+0x4e>
    b92c:	9b00      	ldr	r3, [sp, #0]
    b92e:	2b00      	cmp	r3, #0
    b930:	d1a8      	bne.n	b884 <MacExecuteCommands+0x1c>
    b932:	0023      	movs	r3, r4
    b934:	33ac      	adds	r3, #172	; 0xac
    b936:	781b      	ldrb	r3, [r3, #0]
    b938:	2501      	movs	r5, #1
    b93a:	9301      	str	r3, [sp, #4]
    b93c:	2303      	movs	r3, #3
    b93e:	9a01      	ldr	r2, [sp, #4]
    b940:	4353      	muls	r3, r2
    b942:	18e3      	adds	r3, r4, r3
    b944:	0019      	movs	r1, r3
    b946:	3160      	adds	r1, #96	; 0x60
    b948:	79ca      	ldrb	r2, [r1, #7]
    b94a:	3366      	adds	r3, #102	; 0x66
    b94c:	43b2      	bics	r2, r6
    b94e:	402a      	ands	r2, r5
    b950:	71ca      	strb	r2, [r1, #7]
    b952:	7a0a      	ldrb	r2, [r1, #8]
    b954:	197d      	adds	r5, r7, r5
    b956:	43b2      	bics	r2, r6
    b958:	720a      	strb	r2, [r1, #8]
    b95a:	783a      	ldrb	r2, [r7, #0]
    b95c:	701a      	strb	r2, [r3, #0]
    b95e:	783a      	ldrb	r2, [r7, #0]
    b960:	3a02      	subs	r2, #2
    b962:	2a08      	cmp	r2, #8
    b964:	d8dd      	bhi.n	b922 <MacExecuteCommands+0xba>
    b966:	0010      	movs	r0, r2
    b968:	f003 fab2 	bl	eed0 <__gnu_thumb1_case_sqi>
    b96c:	bdbab595 	.word	0xbdbab595
    b970:	d5c3c0a5 	.word	0xd5c3c0a5
    b974:	d8          	.byte	0xd8
    b975:	00          	.byte	0x00
    b976:	2324      	movs	r3, #36	; 0x24
    b978:	33ff      	adds	r3, #255	; 0xff
    b97a:	5ce3      	ldrb	r3, [r4, r3]
    b97c:	43db      	mvns	r3, r3
    b97e:	075b      	lsls	r3, r3, #29
    b980:	d000      	beq.n	b984 <MacExecuteCommands+0x11c>
    b982:	e785      	b.n	b890 <MacExecuteCommands+0x28>
    b984:	232a      	movs	r3, #42	; 0x2a
    b986:	33ff      	adds	r3, #255	; 0xff
    b988:	5ce5      	ldrb	r5, [r4, r3]
    b98a:	2326      	movs	r3, #38	; 0x26
    b98c:	33ff      	adds	r3, #255	; 0xff
    b98e:	5ce3      	ldrb	r3, [r4, r3]
    b990:	a905      	add	r1, sp, #20
    b992:	9300      	str	r3, [sp, #0]
    b994:	2392      	movs	r3, #146	; 0x92
    b996:	005b      	lsls	r3, r3, #1
    b998:	5ce3      	ldrb	r3, [r4, r3]
    b99a:	066a      	lsls	r2, r5, #25
    b99c:	9301      	str	r3, [sp, #4]
    b99e:	2328      	movs	r3, #40	; 0x28
    b9a0:	33ff      	adds	r3, #255	; 0xff
    b9a2:	5ce0      	ldrb	r0, [r4, r3]
    b9a4:	3301      	adds	r3, #1
    b9a6:	5ce3      	ldrb	r3, [r4, r3]
    b9a8:	0f52      	lsrs	r2, r2, #29
    b9aa:	021b      	lsls	r3, r3, #8
    b9ac:	4303      	orrs	r3, r0
    b9ae:	800b      	strh	r3, [r1, #0]
    b9b0:	201c      	movs	r0, #28
    b9b2:	4b25      	ldr	r3, [pc, #148]	; (ba48 <MacExecuteCommands+0x1e0>)
    b9b4:	708a      	strb	r2, [r1, #2]
    b9b6:	4798      	blx	r3
    b9b8:	2100      	movs	r1, #0
    b9ba:	aa04      	add	r2, sp, #16
    b9bc:	4b23      	ldr	r3, [pc, #140]	; (ba4c <MacExecuteCommands+0x1e4>)
    b9be:	2014      	movs	r0, #20
    b9c0:	4798      	blx	r3
    b9c2:	0023      	movs	r3, r4
    b9c4:	aa04      	add	r2, sp, #16
    b9c6:	7812      	ldrb	r2, [r2, #0]
    b9c8:	33be      	adds	r3, #190	; 0xbe
    b9ca:	701a      	strb	r2, [r3, #0]
    b9cc:	0023      	movs	r3, r4
    b9ce:	aa04      	add	r2, sp, #16
    b9d0:	7852      	ldrb	r2, [r2, #1]
    b9d2:	33bf      	adds	r3, #191	; 0xbf
    b9d4:	701a      	strb	r2, [r3, #0]
    b9d6:	4b1e      	ldr	r3, [pc, #120]	; (ba50 <MacExecuteCommands+0x1e8>)
    b9d8:	4798      	blx	r3
    b9da:	9800      	ldr	r0, [sp, #0]
    b9dc:	4b1d      	ldr	r3, [pc, #116]	; (ba54 <MacExecuteCommands+0x1ec>)
    b9de:	4798      	blx	r3
    b9e0:	0022      	movs	r2, r4
    b9e2:	2308      	movs	r3, #8
    b9e4:	3250      	adds	r2, #80	; 0x50
    b9e6:	7851      	ldrb	r1, [r2, #1]
    b9e8:	072d      	lsls	r5, r5, #28
    b9ea:	430b      	orrs	r3, r1
    b9ec:	7053      	strb	r3, [r2, #1]
    b9ee:	0f2d      	lsrs	r5, r5, #28
    b9f0:	9801      	ldr	r0, [sp, #4]
    b9f2:	4b19      	ldr	r3, [pc, #100]	; (ba58 <MacExecuteCommands+0x1f0>)
    b9f4:	b2ee      	uxtb	r6, r5
    b9f6:	4798      	blx	r3
    b9f8:	34ad      	adds	r4, #173	; 0xad
    b9fa:	2e00      	cmp	r6, #0
    b9fc:	d10e      	bne.n	ba1c <MacExecuteCommands+0x1b4>
    b9fe:	7025      	strb	r5, [r4, #0]
    ba00:	2114      	movs	r1, #20
    ba02:	4c0e      	ldr	r4, [pc, #56]	; (ba3c <MacExecuteCommands+0x1d4>)
    ba04:	2000      	movs	r0, #0
    ba06:	47a0      	blx	r4
    ba08:	2210      	movs	r2, #16
    ba0a:	4b06      	ldr	r3, [pc, #24]	; (ba24 <MacExecuteCommands+0x1bc>)
    ba0c:	2001      	movs	r0, #1
    ba0e:	3350      	adds	r3, #80	; 0x50
    ba10:	7859      	ldrb	r1, [r3, #1]
    ba12:	430a      	orrs	r2, r1
    ba14:	705a      	strb	r2, [r3, #1]
    ba16:	210b      	movs	r1, #11
    ba18:	47a0      	blx	r4
    ba1a:	e739      	b.n	b890 <MacExecuteCommands+0x28>
    ba1c:	1e73      	subs	r3, r6, #1
    ba1e:	7023      	strb	r3, [r4, #0]
    ba20:	e7ee      	b.n	ba00 <MacExecuteCommands+0x198>
    ba22:	46c0      	nop			; (mov r8, r8)
    ba24:	20000f10 	.word	0x20000f10
    ba28:	00009fed 	.word	0x00009fed
    ba2c:	00009e91 	.word	0x00009e91
    ba30:	00009d95 	.word	0x00009d95
    ba34:	0000b6e9 	.word	0x0000b6e9
    ba38:	000093e5 	.word	0x000093e5
    ba3c:	00001e65 	.word	0x00001e65
    ba40:	00009f9d 	.word	0x00009f9d
    ba44:	00009ee9 	.word	0x00009ee9
    ba48:	00006db1 	.word	0x00006db1
    ba4c:	00006d79 	.word	0x00006d79
    ba50:	0000b6bd 	.word	0x0000b6bd
    ba54:	00009c5d 	.word	0x00009c5d
    ba58:	00009bf1 	.word	0x00009bf1

0000ba5c <LorawanSetDataRange>:
    ba5c:	2201      	movs	r2, #1
    ba5e:	b530      	push	{r4, r5, lr}
    ba60:	b085      	sub	sp, #20
    ba62:	ab01      	add	r3, sp, #4
    ba64:	ac02      	add	r4, sp, #8
    ba66:	7018      	strb	r0, [r3, #0]
    ba68:	7020      	strb	r0, [r4, #0]
    ba6a:	7061      	strb	r1, [r4, #1]
    ba6c:	2015      	movs	r0, #21
    ba6e:	0019      	movs	r1, r3
    ba70:	4d11      	ldr	r5, [pc, #68]	; (bab8 <LorawanSetDataRange+0x5c>)
    ba72:	705a      	strb	r2, [r3, #1]
    ba74:	47a8      	blx	r5
    ba76:	2808      	cmp	r0, #8
    ba78:	d003      	beq.n	ba82 <LorawanSetDataRange+0x26>
    ba7a:	250a      	movs	r5, #10
    ba7c:	0028      	movs	r0, r5
    ba7e:	b005      	add	sp, #20
    ba80:	bd30      	pop	{r4, r5, pc}
    ba82:	0021      	movs	r1, r4
    ba84:	2012      	movs	r0, #18
    ba86:	47a8      	blx	r5
    ba88:	0005      	movs	r5, r0
    ba8a:	2808      	cmp	r0, #8
    ba8c:	d1f5      	bne.n	ba7a <LorawanSetDataRange+0x1e>
    ba8e:	0021      	movs	r1, r4
    ba90:	4b0a      	ldr	r3, [pc, #40]	; (babc <LorawanSetDataRange+0x60>)
    ba92:	ac03      	add	r4, sp, #12
    ba94:	2012      	movs	r0, #18
    ba96:	4798      	blx	r3
    ba98:	0022      	movs	r2, r4
    ba9a:	2100      	movs	r1, #0
    ba9c:	4b08      	ldr	r3, [pc, #32]	; (bac0 <LorawanSetDataRange+0x64>)
    ba9e:	2014      	movs	r0, #20
    baa0:	4798      	blx	r3
    baa2:	4b08      	ldr	r3, [pc, #32]	; (bac4 <LorawanSetDataRange+0x68>)
    baa4:	7821      	ldrb	r1, [r4, #0]
    baa6:	001a      	movs	r2, r3
    baa8:	32be      	adds	r2, #190	; 0xbe
    baaa:	7011      	strb	r1, [r2, #0]
    baac:	7862      	ldrb	r2, [r4, #1]
    baae:	33bf      	adds	r3, #191	; 0xbf
    bab0:	701a      	strb	r2, [r3, #0]
    bab2:	4b05      	ldr	r3, [pc, #20]	; (bac8 <LorawanSetDataRange+0x6c>)
    bab4:	4798      	blx	r3
    bab6:	e7e1      	b.n	ba7c <LorawanSetDataRange+0x20>
    bab8:	00006d95 	.word	0x00006d95
    babc:	00006db1 	.word	0x00006db1
    bac0:	00006d79 	.word	0x00006d79
    bac4:	20000f10 	.word	0x20000f10
    bac8:	0000b6bd 	.word	0x0000b6bd

0000bacc <LorawanSetChannelIdStatus>:
    bacc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bace:	466b      	mov	r3, sp
    bad0:	7018      	strb	r0, [r3, #0]
    bad2:	7059      	strb	r1, [r3, #1]
    bad4:	2016      	movs	r0, #22
    bad6:	4669      	mov	r1, sp
    bad8:	4b0c      	ldr	r3, [pc, #48]	; (bb0c <LorawanSetChannelIdStatus+0x40>)
    bada:	4798      	blx	r3
    badc:	0004      	movs	r4, r0
    bade:	2808      	cmp	r0, #8
    bae0:	d111      	bne.n	bb06 <LorawanSetChannelIdStatus+0x3a>
    bae2:	ad01      	add	r5, sp, #4
    bae4:	002a      	movs	r2, r5
    bae6:	2100      	movs	r1, #0
    bae8:	4b09      	ldr	r3, [pc, #36]	; (bb10 <LorawanSetChannelIdStatus+0x44>)
    baea:	2014      	movs	r0, #20
    baec:	4798      	blx	r3
    baee:	4b09      	ldr	r3, [pc, #36]	; (bb14 <LorawanSetChannelIdStatus+0x48>)
    baf0:	7829      	ldrb	r1, [r5, #0]
    baf2:	001a      	movs	r2, r3
    baf4:	32be      	adds	r2, #190	; 0xbe
    baf6:	7011      	strb	r1, [r2, #0]
    baf8:	786a      	ldrb	r2, [r5, #1]
    bafa:	33bf      	adds	r3, #191	; 0xbf
    bafc:	701a      	strb	r2, [r3, #0]
    bafe:	4b06      	ldr	r3, [pc, #24]	; (bb18 <LorawanSetChannelIdStatus+0x4c>)
    bb00:	4798      	blx	r3
    bb02:	0020      	movs	r0, r4
    bb04:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    bb06:	240a      	movs	r4, #10
    bb08:	e7fb      	b.n	bb02 <LorawanSetChannelIdStatus+0x36>
    bb0a:	46c0      	nop			; (mov r8, r8)
    bb0c:	00006db1 	.word	0x00006db1
    bb10:	00006d79 	.word	0x00006d79
    bb14:	20000f10 	.word	0x20000f10
    bb18:	0000b6bd 	.word	0x0000b6bd

0000bb1c <LORAWAN_RxDone>:
    bb1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    bb1e:	4ddc      	ldr	r5, [pc, #880]	; (be90 <LORAWAN_RxDone+0x374>)
    bb20:	b091      	sub	sp, #68	; 0x44
    bb22:	002b      	movs	r3, r5
    bb24:	3350      	adds	r3, #80	; 0x50
    bb26:	781b      	ldrb	r3, [r3, #0]
    bb28:	0007      	movs	r7, r0
    bb2a:	b25a      	sxtb	r2, r3
    bb2c:	000c      	movs	r4, r1
    bb2e:	2a00      	cmp	r2, #0
    bb30:	da01      	bge.n	bb36 <LORAWAN_RxDone+0x1a>
    bb32:	f000 fc90 	bl	c456 <LORAWAN_RxDone+0x93a>
    bb36:	7801      	ldrb	r1, [r0, #0]
    bb38:	221f      	movs	r2, #31
    bb3a:	000e      	movs	r6, r1
    bb3c:	4396      	bics	r6, r2
    bb3e:	2e20      	cmp	r6, #32
    bb40:	d000      	beq.n	bb44 <LORAWAN_RxDone+0x28>
    bb42:	e131      	b.n	bda8 <LORAWAN_RxDone+0x28c>
    bb44:	782b      	ldrb	r3, [r5, #0]
    bb46:	2b00      	cmp	r3, #0
    bb48:	d001      	beq.n	bb4e <LORAWAN_RxDone+0x32>
    bb4a:	f000 fc6d 	bl	c428 <LORAWAN_RxDone+0x90c>
    bb4e:	002b      	movs	r3, r5
    bb50:	3360      	adds	r3, #96	; 0x60
    bb52:	781b      	ldrb	r3, [r3, #0]
    bb54:	075b      	lsls	r3, r3, #29
    bb56:	d401      	bmi.n	bb5c <LORAWAN_RxDone+0x40>
    bb58:	f000 fc66 	bl	c428 <LORAWAN_RxDone+0x90c>
    bb5c:	1e63      	subs	r3, r4, #1
    bb5e:	b2db      	uxtb	r3, r3
    bb60:	9304      	str	r3, [sp, #16]
    bb62:	4bcc      	ldr	r3, [pc, #816]	; (be94 <LORAWAN_RxDone+0x378>)
    bb64:	469c      	mov	ip, r3
    bb66:	9b04      	ldr	r3, [sp, #16]
    bb68:	2b00      	cmp	r3, #0
    bb6a:	d12c      	bne.n	bbc6 <LORAWAN_RxDone+0xaa>
    bb6c:	1f23      	subs	r3, r4, #4
    bb6e:	9305      	str	r3, [sp, #20]
    bb70:	466b      	mov	r3, sp
    bb72:	4660      	mov	r0, ip
    bb74:	7d1b      	ldrb	r3, [r3, #20]
    bb76:	003a      	movs	r2, r7
    bb78:	49c7      	ldr	r1, [pc, #796]	; (be98 <LORAWAN_RxDone+0x37c>)
    bb7a:	4ec8      	ldr	r6, [pc, #800]	; (be9c <LORAWAN_RxDone+0x380>)
    bb7c:	47b0      	blx	r6
    bb7e:	2204      	movs	r2, #4
    bb80:	49c5      	ldr	r1, [pc, #788]	; (be98 <LORAWAN_RxDone+0x37c>)
    bb82:	4bc7      	ldr	r3, [pc, #796]	; (bea0 <LORAWAN_RxDone+0x384>)
    bb84:	a80e      	add	r0, sp, #56	; 0x38
    bb86:	4798      	blx	r3
    bb88:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    bb8a:	1f23      	subs	r3, r4, #4
    bb8c:	18f9      	adds	r1, r7, r3
    bb8e:	2204      	movs	r2, #4
    bb90:	4bc3      	ldr	r3, [pc, #780]	; (bea0 <LORAWAN_RxDone+0x384>)
    bb92:	a80e      	add	r0, sp, #56	; 0x38
    bb94:	960b      	str	r6, [sp, #44]	; 0x2c
    bb96:	4798      	blx	r3
    bb98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    bb9a:	4bbd      	ldr	r3, [pc, #756]	; (be90 <LORAWAN_RxDone+0x374>)
    bb9c:	210e      	movs	r1, #14
    bb9e:	42b2      	cmp	r2, r6
    bba0:	d01e      	beq.n	bbe0 <LORAWAN_RxDone+0xc4>
    bba2:	001a      	movs	r2, r3
    bba4:	3250      	adds	r2, #80	; 0x50
    bba6:	7812      	ldrb	r2, [r2, #0]
    bba8:	400a      	ands	r2, r1
    bbaa:	2a0a      	cmp	r2, #10
    bbac:	d005      	beq.n	bbba <LORAWAN_RxDone+0x9e>
    bbae:	2a06      	cmp	r2, #6
    bbb0:	d105      	bne.n	bbbe <LORAWAN_RxDone+0xa2>
    bbb2:	33c4      	adds	r3, #196	; 0xc4
    bbb4:	781b      	ldrb	r3, [r3, #0]
    bbb6:	2b00      	cmp	r3, #0
    bbb8:	d001      	beq.n	bbbe <LORAWAN_RxDone+0xa2>
    bbba:	4bba      	ldr	r3, [pc, #744]	; (bea4 <LORAWAN_RxDone+0x388>)
    bbbc:	4798      	blx	r3
    bbbe:	4bba      	ldr	r3, [pc, #744]	; (bea8 <LORAWAN_RxDone+0x38c>)
    bbc0:	4798      	blx	r3
    bbc2:	200a      	movs	r0, #10
    bbc4:	e0eb      	b.n	bd9e <LORAWAN_RxDone+0x282>
    bbc6:	9b04      	ldr	r3, [sp, #16]
    bbc8:	4661      	mov	r1, ip
    bbca:	1ae0      	subs	r0, r4, r3
    bbcc:	1838      	adds	r0, r7, r0
    bbce:	4bb7      	ldr	r3, [pc, #732]	; (beac <LORAWAN_RxDone+0x390>)
    bbd0:	4798      	blx	r3
    bbd2:	9b04      	ldr	r3, [sp, #16]
    bbd4:	2b10      	cmp	r3, #16
    bbd6:	d901      	bls.n	bbdc <LORAWAN_RxDone+0xc0>
    bbd8:	3b10      	subs	r3, #16
    bbda:	e7c0      	b.n	bb5e <LORAWAN_RxDone+0x42>
    bbdc:	2300      	movs	r3, #0
    bbde:	e7bf      	b.n	bb60 <LORAWAN_RxDone+0x44>
    bbe0:	001a      	movs	r2, r3
    bbe2:	3250      	adds	r2, #80	; 0x50
    bbe4:	7812      	ldrb	r2, [r2, #0]
    bbe6:	400a      	ands	r2, r1
    bbe8:	2a06      	cmp	r2, #6
    bbea:	d103      	bne.n	bbf4 <LORAWAN_RxDone+0xd8>
    bbec:	33b7      	adds	r3, #183	; 0xb7
    bbee:	7818      	ldrb	r0, [r3, #0]
    bbf0:	4baf      	ldr	r3, [pc, #700]	; (beb0 <LORAWAN_RxDone+0x394>)
    bbf2:	4798      	blx	r3
    bbf4:	7a3a      	ldrb	r2, [r7, #8]
    bbf6:	79fb      	ldrb	r3, [r7, #7]
    bbf8:	0212      	lsls	r2, r2, #8
    bbfa:	431a      	orrs	r2, r3
    bbfc:	7a7b      	ldrb	r3, [r7, #9]
    bbfe:	2001      	movs	r0, #1
    bc00:	041b      	lsls	r3, r3, #16
    bc02:	431a      	orrs	r2, r3
    bc04:	7abb      	ldrb	r3, [r7, #10]
    bc06:	061b      	lsls	r3, r3, #24
    bc08:	4313      	orrs	r3, r2
    bc0a:	0a19      	lsrs	r1, r3, #8
    bc0c:	706b      	strb	r3, [r5, #1]
    bc0e:	70a9      	strb	r1, [r5, #2]
    bc10:	0c19      	lsrs	r1, r3, #16
    bc12:	0e1b      	lsrs	r3, r3, #24
    bc14:	70e9      	strb	r1, [r5, #3]
    bc16:	712b      	strb	r3, [r5, #4]
    bc18:	250f      	movs	r5, #15
    bc1a:	2103      	movs	r1, #3
    bc1c:	4ba5      	ldr	r3, [pc, #660]	; (beb4 <LORAWAN_RxDone+0x398>)
    bc1e:	4798      	blx	r3
    bc20:	7b38      	ldrb	r0, [r7, #12]
    bc22:	4ba5      	ldr	r3, [pc, #660]	; (beb8 <LORAWAN_RxDone+0x39c>)
    bc24:	4028      	ands	r0, r5
    bc26:	4798      	blx	r3
    bc28:	7af8      	ldrb	r0, [r7, #11]
    bc2a:	4ba4      	ldr	r3, [pc, #656]	; (bebc <LORAWAN_RxDone+0x3a0>)
    bc2c:	0641      	lsls	r1, r0, #25
    bc2e:	0700      	lsls	r0, r0, #28
    bc30:	0f49      	lsrs	r1, r1, #29
    bc32:	0f00      	lsrs	r0, r0, #28
    bc34:	4798      	blx	r3
    bc36:	2c21      	cmp	r4, #33	; 0x21
    bc38:	d000      	beq.n	bc3c <LORAWAN_RxDone+0x120>
    bc3a:	e088      	b.n	bd4e <LORAWAN_RxDone+0x232>
    bc3c:	ab04      	add	r3, sp, #16
    bc3e:	3c0f      	subs	r4, #15
    bc40:	18e4      	adds	r4, r4, r3
    bc42:	0022      	movs	r2, r4
    bc44:	4b9e      	ldr	r3, [pc, #632]	; (bec0 <LORAWAN_RxDone+0x3a4>)
    bc46:	499f      	ldr	r1, [pc, #636]	; (bec4 <LORAWAN_RxDone+0x3a8>)
    bc48:	2007      	movs	r0, #7
    bc4a:	4798      	blx	r3
    bc4c:	7823      	ldrb	r3, [r4, #0]
    bc4e:	2bff      	cmp	r3, #255	; 0xff
    bc50:	d07d      	beq.n	bd4e <LORAWAN_RxDone+0x232>
    bc52:	2350      	movs	r3, #80	; 0x50
    bc54:	43ab      	bics	r3, r5
    bc56:	9306      	str	r3, [sp, #24]
    bc58:	003b      	movs	r3, r7
    bc5a:	330d      	adds	r3, #13
    bc5c:	9305      	str	r3, [sp, #20]
    bc5e:	2400      	movs	r4, #0
    bc60:	2203      	movs	r2, #3
    bc62:	9905      	ldr	r1, [sp, #20]
    bc64:	4b8e      	ldr	r3, [pc, #568]	; (bea0 <LORAWAN_RxDone+0x384>)
    bc66:	a80c      	add	r0, sp, #48	; 0x30
    bc68:	940c      	str	r4, [sp, #48]	; 0x30
    bc6a:	4798      	blx	r3
    bc6c:	2364      	movs	r3, #100	; 0x64
    bc6e:	990c      	ldr	r1, [sp, #48]	; 0x30
    bc70:	aa04      	add	r2, sp, #16
    bc72:	4359      	muls	r1, r3
    bc74:	3b52      	subs	r3, #82	; 0x52
    bc76:	189b      	adds	r3, r3, r2
    bc78:	7818      	ldrb	r0, [r3, #0]
    bc7a:	9b04      	ldr	r3, [sp, #16]
    bc7c:	910c      	str	r1, [sp, #48]	; 0x30
    bc7e:	1818      	adds	r0, r3, r0
    bc80:	b2c0      	uxtb	r0, r0
    bc82:	74d0      	strb	r0, [r2, #19]
    bc84:	42a1      	cmp	r1, r4
    bc86:	d100      	bne.n	bc8a <LORAWAN_RxDone+0x16e>
    bc88:	e08b      	b.n	bda2 <LORAWAN_RxDone+0x286>
    bc8a:	466b      	mov	r3, sp
    bc8c:	7e1b      	ldrb	r3, [r3, #24]
    bc8e:	ae0e      	add	r6, sp, #56	; 0x38
    bc90:	ad09      	add	r5, sp, #36	; 0x24
    bc92:	7130      	strb	r0, [r6, #4]
    bc94:	910e      	str	r1, [sp, #56]	; 0x38
    bc96:	7028      	strb	r0, [r5, #0]
    bc98:	706b      	strb	r3, [r5, #1]
    bc9a:	0031      	movs	r1, r6
    bc9c:	2002      	movs	r0, #2
    bc9e:	4b8a      	ldr	r3, [pc, #552]	; (bec8 <LORAWAN_RxDone+0x3ac>)
    bca0:	4798      	blx	r3
    bca2:	2808      	cmp	r0, #8
    bca4:	d13f      	bne.n	bd26 <LORAWAN_RxDone+0x20a>
    bca6:	0031      	movs	r1, r6
    bca8:	0020      	movs	r0, r4
    bcaa:	4e88      	ldr	r6, [pc, #544]	; (becc <LORAWAN_RxDone+0x3b0>)
    bcac:	47b0      	blx	r6
    bcae:	0029      	movs	r1, r5
    bcb0:	2012      	movs	r0, #18
    bcb2:	ad0a      	add	r5, sp, #40	; 0x28
    bcb4:	47b0      	blx	r6
    bcb6:	0021      	movs	r1, r4
    bcb8:	002a      	movs	r2, r5
    bcba:	4b81      	ldr	r3, [pc, #516]	; (bec0 <LORAWAN_RxDone+0x3a4>)
    bcbc:	2014      	movs	r0, #20
    bcbe:	4798      	blx	r3
    bcc0:	4c73      	ldr	r4, [pc, #460]	; (be90 <LORAWAN_RxDone+0x374>)
    bcc2:	782a      	ldrb	r2, [r5, #0]
    bcc4:	0023      	movs	r3, r4
    bcc6:	33be      	adds	r3, #190	; 0xbe
    bcc8:	701a      	strb	r2, [r3, #0]
    bcca:	0023      	movs	r3, r4
    bccc:	786a      	ldrb	r2, [r5, #1]
    bcce:	251a      	movs	r5, #26
    bcd0:	33bf      	adds	r3, #191	; 0xbf
    bcd2:	701a      	strb	r2, [r3, #0]
    bcd4:	4b7e      	ldr	r3, [pc, #504]	; (bed0 <LORAWAN_RxDone+0x3b4>)
    bcd6:	4798      	blx	r3
    bcd8:	ab04      	add	r3, sp, #16
    bcda:	18ed      	adds	r5, r5, r3
    bcdc:	2313      	movs	r3, #19
    bcde:	a904      	add	r1, sp, #16
    bce0:	185b      	adds	r3, r3, r1
    bce2:	0019      	movs	r1, r3
    bce4:	002a      	movs	r2, r5
    bce6:	4b76      	ldr	r3, [pc, #472]	; (bec0 <LORAWAN_RxDone+0x3a4>)
    bce8:	201e      	movs	r0, #30
    bcea:	4798      	blx	r3
    bcec:	0023      	movs	r3, r4
    bcee:	33e4      	adds	r3, #228	; 0xe4
    bcf0:	781b      	ldrb	r3, [r3, #0]
    bcf2:	079b      	lsls	r3, r3, #30
    bcf4:	d507      	bpl.n	bd06 <LORAWAN_RxDone+0x1ea>
    bcf6:	ab04      	add	r3, sp, #16
    bcf8:	7cdb      	ldrb	r3, [r3, #19]
    bcfa:	a90d      	add	r1, sp, #52	; 0x34
    bcfc:	708b      	strb	r3, [r1, #2]
    bcfe:	882b      	ldrh	r3, [r5, #0]
    bd00:	201e      	movs	r0, #30
    bd02:	800b      	strh	r3, [r1, #0]
    bd04:	47b0      	blx	r6
    bd06:	2313      	movs	r3, #19
    bd08:	aa04      	add	r2, sp, #16
    bd0a:	189b      	adds	r3, r3, r2
    bd0c:	7818      	ldrb	r0, [r3, #0]
    bd0e:	2101      	movs	r1, #1
    bd10:	4b70      	ldr	r3, [pc, #448]	; (bed4 <LORAWAN_RxDone+0x3b8>)
    bd12:	4798      	blx	r3
    bd14:	2204      	movs	r2, #4
    bd16:	3450      	adds	r4, #80	; 0x50
    bd18:	7863      	ldrb	r3, [r4, #1]
    bd1a:	210b      	movs	r1, #11
    bd1c:	4313      	orrs	r3, r2
    bd1e:	7063      	strb	r3, [r4, #1]
    bd20:	2001      	movs	r0, #1
    bd22:	4b64      	ldr	r3, [pc, #400]	; (beb4 <LORAWAN_RxDone+0x398>)
    bd24:	4798      	blx	r3
    bd26:	9b04      	ldr	r3, [sp, #16]
    bd28:	3301      	adds	r3, #1
    bd2a:	b2db      	uxtb	r3, r3
    bd2c:	9304      	str	r3, [sp, #16]
    bd2e:	9b05      	ldr	r3, [sp, #20]
    bd30:	3303      	adds	r3, #3
    bd32:	9305      	str	r3, [sp, #20]
    bd34:	9b04      	ldr	r3, [sp, #16]
    bd36:	2b05      	cmp	r3, #5
    bd38:	d191      	bne.n	bc5e <LORAWAN_RxDone+0x142>
    bd3a:	2204      	movs	r2, #4
    bd3c:	4b54      	ldr	r3, [pc, #336]	; (be90 <LORAWAN_RxDone+0x374>)
    bd3e:	2001      	movs	r0, #1
    bd40:	3350      	adds	r3, #80	; 0x50
    bd42:	7859      	ldrb	r1, [r3, #1]
    bd44:	430a      	orrs	r2, r1
    bd46:	705a      	strb	r2, [r3, #1]
    bd48:	210b      	movs	r1, #11
    bd4a:	4b5a      	ldr	r3, [pc, #360]	; (beb4 <LORAWAN_RxDone+0x398>)
    bd4c:	4798      	blx	r3
    bd4e:	4c62      	ldr	r4, [pc, #392]	; (bed8 <LORAWAN_RxDone+0x3bc>)
    bd50:	1c7e      	adds	r6, r7, #1
    bd52:	3704      	adds	r7, #4
    bd54:	0031      	movs	r1, r6
    bd56:	0020      	movs	r0, r4
    bd58:	003a      	movs	r2, r7
    bd5a:	4b60      	ldr	r3, [pc, #384]	; (bedc <LORAWAN_RxDone+0x3c0>)
    bd5c:	4798      	blx	r3
    bd5e:	2302      	movs	r3, #2
    bd60:	4a4b      	ldr	r2, [pc, #300]	; (be90 <LORAWAN_RxDone+0x374>)
    bd62:	4d4c      	ldr	r5, [pc, #304]	; (be94 <LORAWAN_RxDone+0x378>)
    bd64:	7553      	strb	r3, [r2, #21]
    bd66:	0020      	movs	r0, r4
    bd68:	0029      	movs	r1, r5
    bd6a:	4b50      	ldr	r3, [pc, #320]	; (beac <LORAWAN_RxDone+0x390>)
    bd6c:	4798      	blx	r3
    bd6e:	2105      	movs	r1, #5
    bd70:	4b50      	ldr	r3, [pc, #320]	; (beb4 <LORAWAN_RxDone+0x398>)
    bd72:	2001      	movs	r0, #1
    bd74:	4798      	blx	r3
    bd76:	0031      	movs	r1, r6
    bd78:	2601      	movs	r6, #1
    bd7a:	4c59      	ldr	r4, [pc, #356]	; (bee0 <LORAWAN_RxDone+0x3c4>)
    bd7c:	003a      	movs	r2, r7
    bd7e:	0020      	movs	r0, r4
    bd80:	4b56      	ldr	r3, [pc, #344]	; (bedc <LORAWAN_RxDone+0x3c0>)
    bd82:	4798      	blx	r3
    bd84:	4b42      	ldr	r3, [pc, #264]	; (be90 <LORAWAN_RxDone+0x374>)
    bd86:	0029      	movs	r1, r5
    bd88:	715e      	strb	r6, [r3, #5]
    bd8a:	0020      	movs	r0, r4
    bd8c:	4b47      	ldr	r3, [pc, #284]	; (beac <LORAWAN_RxDone+0x390>)
    bd8e:	4798      	blx	r3
    bd90:	2104      	movs	r1, #4
    bd92:	4b48      	ldr	r3, [pc, #288]	; (beb4 <LORAWAN_RxDone+0x398>)
    bd94:	0030      	movs	r0, r6
    bd96:	4798      	blx	r3
    bd98:	4b52      	ldr	r3, [pc, #328]	; (bee4 <LORAWAN_RxDone+0x3c8>)
    bd9a:	4798      	blx	r3
    bd9c:	2008      	movs	r0, #8
    bd9e:	b011      	add	sp, #68	; 0x44
    bda0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bda2:	4b4c      	ldr	r3, [pc, #304]	; (bed4 <LORAWAN_RxDone+0x3b8>)
    bda4:	4798      	blx	r3
    bda6:	e7be      	b.n	bd26 <LORAWAN_RxDone+0x20a>
    bda8:	22bf      	movs	r2, #191	; 0xbf
    bdaa:	3e60      	subs	r6, #96	; 0x60
    bdac:	4032      	ands	r2, r6
    bdae:	d000      	beq.n	bdb2 <LORAWAN_RxDone+0x296>
    bdb0:	e33a      	b.n	c428 <LORAWAN_RxDone+0x90c>
    bdb2:	2601      	movs	r6, #1
    bdb4:	4233      	tst	r3, r6
    bdb6:	d100      	bne.n	bdba <LORAWAN_RxDone+0x29e>
    bdb8:	e336      	b.n	c428 <LORAWAN_RxDone+0x90c>
    bdba:	7928      	ldrb	r0, [r5, #4]
    bdbc:	682b      	ldr	r3, [r5, #0]
    bdbe:	0600      	lsls	r0, r0, #24
    bdc0:	0a1b      	lsrs	r3, r3, #8
    bdc2:	4318      	orrs	r0, r3
    bdc4:	002b      	movs	r3, r5
    bdc6:	33ac      	adds	r3, #172	; 0xac
    bdc8:	701a      	strb	r2, [r3, #0]
    bdca:	9004      	str	r0, [sp, #16]
    bdcc:	78b8      	ldrb	r0, [r7, #2]
    bdce:	787b      	ldrb	r3, [r7, #1]
    bdd0:	0200      	lsls	r0, r0, #8
    bdd2:	4318      	orrs	r0, r3
    bdd4:	78fb      	ldrb	r3, [r7, #3]
    bdd6:	041b      	lsls	r3, r3, #16
    bdd8:	4318      	orrs	r0, r3
    bdda:	793b      	ldrb	r3, [r7, #4]
    bddc:	061b      	lsls	r3, r3, #24
    bdde:	4303      	orrs	r3, r0
    bde0:	9804      	ldr	r0, [sp, #16]
    bde2:	4298      	cmp	r0, r3
    bde4:	d050      	beq.n	be88 <LORAWAN_RxDone+0x36c>
    bde6:	7a3a      	ldrb	r2, [r7, #8]
    bde8:	0949      	lsrs	r1, r1, #5
    bdea:	0038      	movs	r0, r7
    bdec:	4b3e      	ldr	r3, [pc, #248]	; (bee8 <LORAWAN_RxDone+0x3cc>)
    bdee:	4798      	blx	r3
    bdf0:	2808      	cmp	r0, #8
    bdf2:	d000      	beq.n	bdf6 <LORAWAN_RxDone+0x2da>
    bdf4:	e6e3      	b.n	bbbe <LORAWAN_RxDone+0xa2>
    bdf6:	35f8      	adds	r5, #248	; 0xf8
    bdf8:	4a3c      	ldr	r2, [pc, #240]	; (beec <LORAWAN_RxDone+0x3d0>)
    bdfa:	682b      	ldr	r3, [r5, #0]
    bdfc:	9204      	str	r2, [sp, #16]
    bdfe:	9606      	str	r6, [sp, #24]
    be00:	1f22      	subs	r2, r4, #4
    be02:	9205      	str	r2, [sp, #20]
    be04:	466a      	mov	r2, sp
    be06:	79f9      	ldrb	r1, [r7, #7]
    be08:	79b8      	ldrb	r0, [r7, #6]
    be0a:	0209      	lsls	r1, r1, #8
    be0c:	7d12      	ldrb	r2, [r2, #20]
    be0e:	4301      	orrs	r1, r0
    be10:	9300      	str	r3, [sp, #0]
    be12:	2001      	movs	r0, #1
    be14:	2349      	movs	r3, #73	; 0x49
    be16:	4d36      	ldr	r5, [pc, #216]	; (bef0 <LORAWAN_RxDone+0x3d4>)
    be18:	47a8      	blx	r5
    be1a:	4d21      	ldr	r5, [pc, #132]	; (bea0 <LORAWAN_RxDone+0x384>)
    be1c:	2210      	movs	r2, #16
    be1e:	491e      	ldr	r1, [pc, #120]	; (be98 <LORAWAN_RxDone+0x37c>)
    be20:	4834      	ldr	r0, [pc, #208]	; (bef4 <LORAWAN_RxDone+0x3d8>)
    be22:	47a8      	blx	r5
    be24:	1f22      	subs	r2, r4, #4
    be26:	0039      	movs	r1, r7
    be28:	4833      	ldr	r0, [pc, #204]	; (bef8 <LORAWAN_RxDone+0x3dc>)
    be2a:	47a8      	blx	r5
    be2c:	0023      	movs	r3, r4
    be2e:	330c      	adds	r3, #12
    be30:	b2db      	uxtb	r3, r3
    be32:	4a30      	ldr	r2, [pc, #192]	; (bef4 <LORAWAN_RxDone+0x3d8>)
    be34:	4918      	ldr	r1, [pc, #96]	; (be98 <LORAWAN_RxDone+0x37c>)
    be36:	9804      	ldr	r0, [sp, #16]
    be38:	4e18      	ldr	r6, [pc, #96]	; (be9c <LORAWAN_RxDone+0x380>)
    be3a:	47b0      	blx	r6
    be3c:	2204      	movs	r2, #4
    be3e:	4916      	ldr	r1, [pc, #88]	; (be98 <LORAWAN_RxDone+0x37c>)
    be40:	a80b      	add	r0, sp, #44	; 0x2c
    be42:	47a8      	blx	r5
    be44:	1f23      	subs	r3, r4, #4
    be46:	18f9      	adds	r1, r7, r3
    be48:	2204      	movs	r2, #4
    be4a:	a80e      	add	r0, sp, #56	; 0x38
    be4c:	47a8      	blx	r5
    be4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    be50:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    be52:	4293      	cmp	r3, r2
    be54:	d056      	beq.n	bf04 <LORAWAN_RxDone+0x3e8>
    be56:	4b14      	ldr	r3, [pc, #80]	; (bea8 <LORAWAN_RxDone+0x38c>)
    be58:	4798      	blx	r3
    be5a:	4928      	ldr	r1, [pc, #160]	; (befc <LORAWAN_RxDone+0x3e0>)
    be5c:	784a      	ldrb	r2, [r1, #1]
    be5e:	780b      	ldrb	r3, [r1, #0]
    be60:	0212      	lsls	r2, r2, #8
    be62:	431a      	orrs	r2, r3
    be64:	788b      	ldrb	r3, [r1, #2]
    be66:	041b      	lsls	r3, r3, #16
    be68:	431a      	orrs	r2, r3
    be6a:	78cb      	ldrb	r3, [r1, #3]
    be6c:	061b      	lsls	r3, r3, #24
    be6e:	4313      	orrs	r3, r2
    be70:	d100      	bne.n	be74 <LORAWAN_RxDone+0x358>
    be72:	e6a6      	b.n	bbc2 <LORAWAN_RxDone+0xa6>
    be74:	2120      	movs	r1, #32
    be76:	2018      	movs	r0, #24
    be78:	4b05      	ldr	r3, [pc, #20]	; (be90 <LORAWAN_RxDone+0x374>)
    be7a:	3360      	adds	r3, #96	; 0x60
    be7c:	781a      	ldrb	r2, [r3, #0]
    be7e:	438a      	bics	r2, r1
    be80:	701a      	strb	r2, [r3, #0]
    be82:	4b1f      	ldr	r3, [pc, #124]	; (bf00 <LORAWAN_RxDone+0x3e4>)
    be84:	4798      	blx	r3
    be86:	e69c      	b.n	bbc2 <LORAWAN_RxDone+0xa6>
    be88:	4915      	ldr	r1, [pc, #84]	; (bee0 <LORAWAN_RxDone+0x3c4>)
    be8a:	9206      	str	r2, [sp, #24]
    be8c:	9104      	str	r1, [sp, #16]
    be8e:	e7b7      	b.n	be00 <LORAWAN_RxDone+0x2e4>
    be90:	20000f10 	.word	0x20000f10
    be94:	20000f35 	.word	0x20000f35
    be98:	2000057c 	.word	0x2000057c
    be9c:	0000cc89 	.word	0x0000cc89
    bea0:	000112d5 	.word	0x000112d5
    bea4:	00009d41 	.word	0x00009d41
    bea8:	0000b649 	.word	0x0000b649
    beac:	0000cc49 	.word	0x0000cc49
    beb0:	00001bf5 	.word	0x00001bf5
    beb4:	00001e65 	.word	0x00001e65
    beb8:	000093e5 	.word	0x000093e5
    bebc:	00009c0d 	.word	0x00009c0d
    bec0:	00006d79 	.word	0x00006d79
    bec4:	20000fc3 	.word	0x20000fc3
    bec8:	00006d95 	.word	0x00006d95
    becc:	00006db1 	.word	0x00006db1
    bed0:	0000b6bd 	.word	0x0000b6bd
    bed4:	0000bacd 	.word	0x0000bacd
    bed8:	20000f25 	.word	0x20000f25
    bedc:	00009681 	.word	0x00009681
    bee0:	20000f15 	.word	0x20000f15
    bee4:	000095e1 	.word	0x000095e1
    bee8:	0000d0dd 	.word	0x0000d0dd
    beec:	2000100c 	.word	0x2000100c
    bef0:	000096bd 	.word	0x000096bd
    bef4:	20001158 	.word	0x20001158
    bef8:	20001168 	.word	0x20001168
    befc:	20001150 	.word	0x20001150
    bf00:	0000a9c5 	.word	0x0000a9c5
    bf04:	9b06      	ldr	r3, [sp, #24]
    bf06:	2b00      	cmp	r3, #0
    bf08:	d006      	beq.n	bf18 <LORAWAN_RxDone+0x3fc>
    bf0a:	003a      	movs	r2, r7
    bf0c:	0021      	movs	r1, r4
    bf0e:	0038      	movs	r0, r7
    bf10:	4bd4      	ldr	r3, [pc, #848]	; (c264 <LORAWAN_RxDone+0x748>)
    bf12:	4798      	blx	r3
    bf14:	2001      	movs	r0, #1
    bf16:	e742      	b.n	bd9e <LORAWAN_RxDone+0x282>
    bf18:	4ed3      	ldr	r6, [pc, #844]	; (c268 <LORAWAN_RxDone+0x74c>)
    bf1a:	79fb      	ldrb	r3, [r7, #7]
    bf1c:	0031      	movs	r1, r6
    bf1e:	79ba      	ldrb	r2, [r7, #6]
    bf20:	021b      	lsls	r3, r3, #8
    bf22:	3158      	adds	r1, #88	; 0x58
    bf24:	4313      	orrs	r3, r2
    bf26:	880a      	ldrh	r2, [r1, #0]
    bf28:	4293      	cmp	r3, r2
    bf2a:	d357      	bcc.n	bfdc <LORAWAN_RxDone+0x4c0>
    bf2c:	0030      	movs	r0, r6
    bf2e:	30a4      	adds	r0, #164	; 0xa4
    bf30:	8800      	ldrh	r0, [r0, #0]
    bf32:	1a9a      	subs	r2, r3, r2
    bf34:	4dcd      	ldr	r5, [pc, #820]	; (c26c <LORAWAN_RxDone+0x750>)
    bf36:	4282      	cmp	r2, r0
    bf38:	dd3d      	ble.n	bfb6 <LORAWAN_RxDone+0x49a>
    bf3a:	0032      	movs	r2, r6
    bf3c:	2101      	movs	r1, #1
    bf3e:	3260      	adds	r2, #96	; 0x60
    bf40:	7813      	ldrb	r3, [r2, #0]
    bf42:	438b      	bics	r3, r1
    bf44:	7013      	strb	r3, [r2, #0]
    bf46:	0033      	movs	r3, r6
    bf48:	33c8      	adds	r3, #200	; 0xc8
    bf4a:	781b      	ldrb	r3, [r3, #0]
    bf4c:	428b      	cmp	r3, r1
    bf4e:	d10f      	bne.n	bf70 <LORAWAN_RxDone+0x454>
    bf50:	0032      	movs	r2, r6
    bf52:	0034      	movs	r4, r6
    bf54:	3250      	adds	r2, #80	; 0x50
    bf56:	7813      	ldrb	r3, [r2, #0]
    bf58:	310d      	adds	r1, #13
    bf5a:	438b      	bics	r3, r1
    bf5c:	7013      	strb	r3, [r2, #0]
    bf5e:	34b9      	adds	r4, #185	; 0xb9
    bf60:	7820      	ldrb	r0, [r4, #0]
    bf62:	4bc3      	ldr	r3, [pc, #780]	; (c270 <LORAWAN_RxDone+0x754>)
    bf64:	4798      	blx	r3
    bf66:	2800      	cmp	r0, #0
    bf68:	d002      	beq.n	bf70 <LORAWAN_RxDone+0x454>
    bf6a:	7820      	ldrb	r0, [r4, #0]
    bf6c:	4bc1      	ldr	r3, [pc, #772]	; (c274 <LORAWAN_RxDone+0x758>)
    bf6e:	4798      	blx	r3
    bf70:	49c1      	ldr	r1, [pc, #772]	; (c278 <LORAWAN_RxDone+0x75c>)
    bf72:	784a      	ldrb	r2, [r1, #1]
    bf74:	780b      	ldrb	r3, [r1, #0]
    bf76:	0212      	lsls	r2, r2, #8
    bf78:	431a      	orrs	r2, r3
    bf7a:	788b      	ldrb	r3, [r1, #2]
    bf7c:	041b      	lsls	r3, r3, #16
    bf7e:	431a      	orrs	r2, r3
    bf80:	78cb      	ldrb	r3, [r1, #3]
    bf82:	061b      	lsls	r3, r3, #24
    bf84:	4313      	orrs	r3, r2
    bf86:	d008      	beq.n	bf9a <LORAWAN_RxDone+0x47e>
    bf88:	0032      	movs	r2, r6
    bf8a:	2120      	movs	r1, #32
    bf8c:	3260      	adds	r2, #96	; 0x60
    bf8e:	7813      	ldrb	r3, [r2, #0]
    bf90:	2017      	movs	r0, #23
    bf92:	438b      	bics	r3, r1
    bf94:	7013      	strb	r3, [r2, #0]
    bf96:	4bb9      	ldr	r3, [pc, #740]	; (c27c <LORAWAN_RxDone+0x760>)
    bf98:	4798      	blx	r3
    bf9a:	2401      	movs	r4, #1
    bf9c:	3650      	adds	r6, #80	; 0x50
    bf9e:	7873      	ldrb	r3, [r6, #1]
    bfa0:	43a3      	bics	r3, r4
    bfa2:	7073      	strb	r3, [r6, #1]
    bfa4:	78b3      	ldrb	r3, [r6, #2]
    bfa6:	4323      	orrs	r3, r4
    bfa8:	70b3      	strb	r3, [r6, #2]
    bfaa:	4bb5      	ldr	r3, [pc, #724]	; (c280 <LORAWAN_RxDone+0x764>)
    bfac:	4798      	blx	r3
    bfae:	210b      	movs	r1, #11
    bfb0:	0020      	movs	r0, r4
    bfb2:	47a8      	blx	r5
    bfb4:	e7ae      	b.n	bf14 <LORAWAN_RxDone+0x3f8>
    bfb6:	800b      	strh	r3, [r1, #0]
    bfb8:	2001      	movs	r0, #1
    bfba:	210a      	movs	r1, #10
    bfbc:	47a8      	blx	r5
    bfbe:	6db3      	ldr	r3, [r6, #88]	; 0x58
    bfc0:	3301      	adds	r3, #1
    bfc2:	d14a      	bne.n	c05a <LORAWAN_RxDone+0x53e>
    bfc4:	2401      	movs	r4, #1
    bfc6:	3650      	adds	r6, #80	; 0x50
    bfc8:	78b3      	ldrb	r3, [r6, #2]
    bfca:	4323      	orrs	r3, r4
    bfcc:	70b3      	strb	r3, [r6, #2]
    bfce:	4bac      	ldr	r3, [pc, #688]	; (c280 <LORAWAN_RxDone+0x764>)
    bfd0:	4798      	blx	r3
    bfd2:	210b      	movs	r1, #11
    bfd4:	0020      	movs	r0, r4
    bfd6:	4ba5      	ldr	r3, [pc, #660]	; (c26c <LORAWAN_RxDone+0x750>)
    bfd8:	4798      	blx	r3
    bfda:	e79b      	b.n	bf14 <LORAWAN_RxDone+0x3f8>
    bfdc:	2b00      	cmp	r3, #0
    bfde:	d10f      	bne.n	c000 <LORAWAN_RxDone+0x4e4>
    bfe0:	4ba8      	ldr	r3, [pc, #672]	; (c284 <LORAWAN_RxDone+0x768>)
    bfe2:	429a      	cmp	r2, r3
    bfe4:	d10c      	bne.n	c000 <LORAWAN_RxDone+0x4e4>
    bfe6:	466b      	mov	r3, sp
    bfe8:	0032      	movs	r2, r6
    bfea:	8b1b      	ldrh	r3, [r3, #24]
    bfec:	325a      	adds	r2, #90	; 0x5a
    bfee:	800b      	strh	r3, [r1, #0]
    bff0:	8813      	ldrh	r3, [r2, #0]
    bff2:	210a      	movs	r1, #10
    bff4:	3301      	adds	r3, #1
    bff6:	8013      	strh	r3, [r2, #0]
    bff8:	2001      	movs	r0, #1
    bffa:	4b9c      	ldr	r3, [pc, #624]	; (c26c <LORAWAN_RxDone+0x750>)
    bffc:	4798      	blx	r3
    bffe:	e7de      	b.n	bfbe <LORAWAN_RxDone+0x4a2>
    c000:	0033      	movs	r3, r6
    c002:	33c8      	adds	r3, #200	; 0xc8
    c004:	781b      	ldrb	r3, [r3, #0]
    c006:	2b01      	cmp	r3, #1
    c008:	d10f      	bne.n	c02a <LORAWAN_RxDone+0x50e>
    c00a:	0032      	movs	r2, r6
    c00c:	210e      	movs	r1, #14
    c00e:	0034      	movs	r4, r6
    c010:	3250      	adds	r2, #80	; 0x50
    c012:	7813      	ldrb	r3, [r2, #0]
    c014:	34b9      	adds	r4, #185	; 0xb9
    c016:	438b      	bics	r3, r1
    c018:	7013      	strb	r3, [r2, #0]
    c01a:	7820      	ldrb	r0, [r4, #0]
    c01c:	4b94      	ldr	r3, [pc, #592]	; (c270 <LORAWAN_RxDone+0x754>)
    c01e:	4798      	blx	r3
    c020:	2800      	cmp	r0, #0
    c022:	d002      	beq.n	c02a <LORAWAN_RxDone+0x50e>
    c024:	7820      	ldrb	r0, [r4, #0]
    c026:	4b93      	ldr	r3, [pc, #588]	; (c274 <LORAWAN_RxDone+0x758>)
    c028:	4798      	blx	r3
    c02a:	4b95      	ldr	r3, [pc, #596]	; (c280 <LORAWAN_RxDone+0x764>)
    c02c:	4798      	blx	r3
    c02e:	4992      	ldr	r1, [pc, #584]	; (c278 <LORAWAN_RxDone+0x75c>)
    c030:	784a      	ldrb	r2, [r1, #1]
    c032:	780b      	ldrb	r3, [r1, #0]
    c034:	0212      	lsls	r2, r2, #8
    c036:	431a      	orrs	r2, r3
    c038:	788b      	ldrb	r3, [r1, #2]
    c03a:	041b      	lsls	r3, r3, #16
    c03c:	431a      	orrs	r2, r3
    c03e:	78cb      	ldrb	r3, [r1, #3]
    c040:	061b      	lsls	r3, r3, #24
    c042:	4313      	orrs	r3, r2
    c044:	d100      	bne.n	c048 <LORAWAN_RxDone+0x52c>
    c046:	e765      	b.n	bf14 <LORAWAN_RxDone+0x3f8>
    c048:	2220      	movs	r2, #32
    c04a:	3660      	adds	r6, #96	; 0x60
    c04c:	7833      	ldrb	r3, [r6, #0]
    c04e:	2017      	movs	r0, #23
    c050:	4393      	bics	r3, r2
    c052:	7033      	strb	r3, [r6, #0]
    c054:	4b89      	ldr	r3, [pc, #548]	; (c27c <LORAWAN_RxDone+0x760>)
    c056:	4798      	blx	r3
    c058:	e75c      	b.n	bf14 <LORAWAN_RxDone+0x3f8>
    c05a:	0033      	movs	r3, r6
    c05c:	2200      	movs	r2, #0
    c05e:	33af      	adds	r3, #175	; 0xaf
    c060:	701a      	strb	r2, [r3, #0]
    c062:	797b      	ldrb	r3, [r7, #5]
    c064:	2b7f      	cmp	r3, #127	; 0x7f
    c066:	d909      	bls.n	c07c <LORAWAN_RxDone+0x560>
    c068:	0032      	movs	r2, r6
    c06a:	2320      	movs	r3, #32
    c06c:	3250      	adds	r2, #80	; 0x50
    c06e:	7811      	ldrb	r1, [r2, #0]
    c070:	2001      	movs	r0, #1
    c072:	430b      	orrs	r3, r1
    c074:	7013      	strb	r3, [r2, #0]
    c076:	210b      	movs	r1, #11
    c078:	4b7c      	ldr	r3, [pc, #496]	; (c26c <LORAWAN_RxDone+0x750>)
    c07a:	4798      	blx	r3
    c07c:	797b      	ldrb	r3, [r7, #5]
    c07e:	06db      	lsls	r3, r3, #27
    c080:	d505      	bpl.n	c08e <LORAWAN_RxDone+0x572>
    c082:	0032      	movs	r2, r6
    c084:	2308      	movs	r3, #8
    c086:	3260      	adds	r2, #96	; 0x60
    c088:	7811      	ldrb	r1, [r2, #0]
    c08a:	430b      	orrs	r3, r1
    c08c:	7013      	strb	r3, [r2, #0]
    c08e:	797b      	ldrb	r3, [r7, #5]
    c090:	065b      	lsls	r3, r3, #25
    c092:	d505      	bpl.n	c0a0 <LORAWAN_RxDone+0x584>
    c094:	0032      	movs	r2, r6
    c096:	2310      	movs	r3, #16
    c098:	3260      	adds	r2, #96	; 0x60
    c09a:	7811      	ldrb	r1, [r2, #0]
    c09c:	430b      	orrs	r3, r1
    c09e:	7013      	strb	r3, [r2, #0]
    c0a0:	221f      	movs	r2, #31
    c0a2:	783b      	ldrb	r3, [r7, #0]
    c0a4:	4393      	bics	r3, r2
    c0a6:	2ba0      	cmp	r3, #160	; 0xa0
    c0a8:	d105      	bne.n	c0b6 <LORAWAN_RxDone+0x59a>
    c0aa:	0032      	movs	r2, r6
    c0ac:	3260      	adds	r2, #96	; 0x60
    c0ae:	7811      	ldrb	r1, [r2, #0]
    c0b0:	3b9e      	subs	r3, #158	; 0x9e
    c0b2:	430b      	orrs	r3, r1
    c0b4:	7013      	strb	r3, [r2, #0]
    c0b6:	003d      	movs	r5, r7
    c0b8:	7979      	ldrb	r1, [r7, #5]
    c0ba:	3508      	adds	r5, #8
    c0bc:	070b      	lsls	r3, r1, #28
    c0be:	d007      	beq.n	c0d0 <LORAWAN_RxDone+0x5b4>
    c0c0:	0709      	lsls	r1, r1, #28
    c0c2:	0028      	movs	r0, r5
    c0c4:	4b70      	ldr	r3, [pc, #448]	; (c288 <LORAWAN_RxDone+0x76c>)
    c0c6:	0f09      	lsrs	r1, r1, #28
    c0c8:	4798      	blx	r3
    c0ca:	2301      	movs	r3, #1
    c0cc:	0005      	movs	r5, r0
    c0ce:	9306      	str	r3, [sp, #24]
    c0d0:	7978      	ldrb	r0, [r7, #5]
    c0d2:	0703      	lsls	r3, r0, #28
    c0d4:	0f1b      	lsrs	r3, r3, #28
    c0d6:	001a      	movs	r2, r3
    c0d8:	320c      	adds	r2, #12
    c0da:	4294      	cmp	r4, r2
    c0dc:	d100      	bne.n	c0e0 <LORAWAN_RxDone+0x5c4>
    c0de:	e0b8      	b.n	c252 <LORAWAN_RxDone+0x736>
    c0e0:	1c6a      	adds	r2, r5, #1
    c0e2:	1ae4      	subs	r4, r4, r3
    c0e4:	9207      	str	r2, [sp, #28]
    c0e6:	782a      	ldrb	r2, [r5, #0]
    c0e8:	b2e4      	uxtb	r4, r4
    c0ea:	9204      	str	r2, [sp, #16]
    c0ec:	0022      	movs	r2, r4
    c0ee:	9904      	ldr	r1, [sp, #16]
    c0f0:	3a0c      	subs	r2, #12
    c0f2:	b2d2      	uxtb	r2, r2
    c0f4:	9205      	str	r2, [sp, #20]
    c0f6:	3319      	adds	r3, #25
    c0f8:	4a5b      	ldr	r2, [pc, #364]	; (c268 <LORAWAN_RxDone+0x74c>)
    c0fa:	2900      	cmp	r1, #0
    c0fc:	d100      	bne.n	c100 <LORAWAN_RxDone+0x5e4>
    c0fe:	e07f      	b.n	c200 <LORAWAN_RxDone+0x6e4>
    c100:	6810      	ldr	r0, [r2, #0]
    c102:	3c0d      	subs	r4, #13
    c104:	b2e1      	uxtb	r1, r4
    c106:	0a04      	lsrs	r4, r0, #8
    c108:	7910      	ldrb	r0, [r2, #4]
    c10a:	9301      	str	r3, [sp, #4]
    c10c:	0600      	lsls	r0, r0, #24
    c10e:	4320      	orrs	r0, r4
    c110:	9003      	str	r0, [sp, #12]
    c112:	4b5e      	ldr	r3, [pc, #376]	; (c28c <LORAWAN_RxDone+0x770>)
    c114:	485e      	ldr	r0, [pc, #376]	; (c290 <LORAWAN_RxDone+0x774>)
    c116:	9300      	str	r3, [sp, #0]
    c118:	9002      	str	r0, [sp, #8]
    c11a:	6d93      	ldr	r3, [r2, #88]	; 0x58
    c11c:	2201      	movs	r2, #1
    c11e:	4c5d      	ldr	r4, [pc, #372]	; (c294 <LORAWAN_RxDone+0x778>)
    c120:	18a8      	adds	r0, r5, r2
    c122:	47a0      	blx	r4
    c124:	4c50      	ldr	r4, [pc, #320]	; (c268 <LORAWAN_RxDone+0x74c>)
    c126:	2300      	movs	r3, #0
    c128:	0022      	movs	r2, r4
    c12a:	3296      	adds	r2, #150	; 0x96
    c12c:	8013      	strh	r3, [r2, #0]
    c12e:	0022      	movs	r2, r4
    c130:	32c1      	adds	r2, #193	; 0xc1
    c132:	7013      	strb	r3, [r2, #0]
    c134:	0022      	movs	r2, r4
    c136:	2110      	movs	r1, #16
    c138:	3260      	adds	r2, #96	; 0x60
    c13a:	7813      	ldrb	r3, [r2, #0]
    c13c:	438b      	bics	r3, r1
    c13e:	7013      	strb	r3, [r2, #0]
    c140:	0023      	movs	r3, r4
    c142:	2201      	movs	r2, #1
    c144:	3350      	adds	r3, #80	; 0x50
    c146:	7859      	ldrb	r1, [r3, #1]
    c148:	430a      	orrs	r2, r1
    c14a:	705a      	strb	r2, [r3, #1]
    c14c:	220e      	movs	r2, #14
    c14e:	781b      	ldrb	r3, [r3, #0]
    c150:	4013      	ands	r3, r2
    c152:	2b06      	cmp	r3, #6
    c154:	d109      	bne.n	c16a <LORAWAN_RxDone+0x64e>
    c156:	0023      	movs	r3, r4
    c158:	33c8      	adds	r3, #200	; 0xc8
    c15a:	781b      	ldrb	r3, [r3, #0]
    c15c:	2b01      	cmp	r3, #1
    c15e:	d104      	bne.n	c16a <LORAWAN_RxDone+0x64e>
    c160:	0023      	movs	r3, r4
    c162:	33b9      	adds	r3, #185	; 0xb9
    c164:	7818      	ldrb	r0, [r3, #0]
    c166:	4b43      	ldr	r3, [pc, #268]	; (c274 <LORAWAN_RxDone+0x758>)
    c168:	4798      	blx	r3
    c16a:	0026      	movs	r6, r4
    c16c:	2201      	movs	r2, #1
    c16e:	3660      	adds	r6, #96	; 0x60
    c170:	7833      	ldrb	r3, [r6, #0]
    c172:	4213      	tst	r3, r2
    c174:	d100      	bne.n	c178 <LORAWAN_RxDone+0x65c>
    c176:	e0d7      	b.n	c328 <LORAWAN_RxDone+0x80c>
    c178:	797b      	ldrb	r3, [r7, #5]
    c17a:	321f      	adds	r2, #31
    c17c:	4213      	tst	r3, r2
    c17e:	d100      	bne.n	c182 <LORAWAN_RxDone+0x666>
    c180:	e0b8      	b.n	c2f4 <LORAWAN_RxDone+0x7d8>
    c182:	4b45      	ldr	r3, [pc, #276]	; (c298 <LORAWAN_RxDone+0x77c>)
    c184:	4798      	blx	r3
    c186:	0023      	movs	r3, r4
    c188:	2101      	movs	r1, #1
    c18a:	3350      	adds	r3, #80	; 0x50
    c18c:	785a      	ldrb	r2, [r3, #1]
    c18e:	438a      	bics	r2, r1
    c190:	705a      	strb	r2, [r3, #1]
    c192:	9a04      	ldr	r2, [sp, #16]
    c194:	2a00      	cmp	r2, #0
    c196:	d100      	bne.n	c19a <LORAWAN_RxDone+0x67e>
    c198:	e08c      	b.n	c2b4 <LORAWAN_RxDone+0x798>
    c19a:	9a05      	ldr	r2, [sp, #20]
    c19c:	0029      	movs	r1, r5
    c19e:	0038      	movs	r0, r7
    c1a0:	4b3e      	ldr	r3, [pc, #248]	; (c29c <LORAWAN_RxDone+0x780>)
    c1a2:	4798      	blx	r3
    c1a4:	4b3e      	ldr	r3, [pc, #248]	; (c2a0 <LORAWAN_RxDone+0x784>)
    c1a6:	4d30      	ldr	r5, [pc, #192]	; (c268 <LORAWAN_RxDone+0x74c>)
    c1a8:	781b      	ldrb	r3, [r3, #0]
    c1aa:	06db      	lsls	r3, r3, #27
    c1ac:	d400      	bmi.n	c1b0 <LORAWAN_RxDone+0x694>
    c1ae:	e132      	b.n	c416 <LORAWAN_RxDone+0x8fa>
    c1b0:	2220      	movs	r2, #32
    c1b2:	4b3c      	ldr	r3, [pc, #240]	; (c2a4 <LORAWAN_RxDone+0x788>)
    c1b4:	781b      	ldrb	r3, [r3, #0]
    c1b6:	401a      	ands	r2, r3
    c1b8:	9204      	str	r2, [sp, #16]
    c1ba:	d000      	beq.n	c1be <LORAWAN_RxDone+0x6a2>
    c1bc:	e12b      	b.n	c416 <LORAWAN_RxDone+0x8fa>
    c1be:	320a      	adds	r2, #10
    c1c0:	4213      	tst	r3, r2
    c1c2:	d100      	bne.n	c1c6 <LORAWAN_RxDone+0x6aa>
    c1c4:	e127      	b.n	c416 <LORAWAN_RxDone+0x8fa>
    c1c6:	002b      	movs	r3, r5
    c1c8:	33c0      	adds	r3, #192	; 0xc0
    c1ca:	781b      	ldrb	r3, [r3, #0]
    c1cc:	a90d      	add	r1, sp, #52	; 0x34
    c1ce:	704b      	strb	r3, [r1, #1]
    c1d0:	002e      	movs	r6, r5
    c1d2:	2301      	movs	r3, #1
    c1d4:	36b3      	adds	r6, #179	; 0xb3
    c1d6:	700b      	strb	r3, [r1, #0]
    c1d8:	7833      	ldrb	r3, [r6, #0]
    c1da:	aa0c      	add	r2, sp, #48	; 0x30
    c1dc:	202e      	movs	r0, #46	; 0x2e
    c1de:	4f32      	ldr	r7, [pc, #200]	; (c2a8 <LORAWAN_RxDone+0x78c>)
    c1e0:	708b      	strb	r3, [r1, #2]
    c1e2:	47b8      	blx	r7
    c1e4:	9005      	str	r0, [sp, #20]
    c1e6:	2808      	cmp	r0, #8
    c1e8:	d000      	beq.n	c1ec <LORAWAN_RxDone+0x6d0>
    c1ea:	e0cb      	b.n	c384 <LORAWAN_RxDone+0x868>
    c1ec:	4b2f      	ldr	r3, [pc, #188]	; (c2ac <LORAWAN_RxDone+0x790>)
    c1ee:	9804      	ldr	r0, [sp, #16]
    c1f0:	4798      	blx	r3
    c1f2:	4b2c      	ldr	r3, [pc, #176]	; (c2a4 <LORAWAN_RxDone+0x788>)
    c1f4:	9a05      	ldr	r2, [sp, #20]
    c1f6:	781b      	ldrb	r3, [r3, #0]
    c1f8:	4393      	bics	r3, r2
    c1fa:	4a2a      	ldr	r2, [pc, #168]	; (c2a4 <LORAWAN_RxDone+0x788>)
    c1fc:	7013      	strb	r3, [r2, #0]
    c1fe:	e689      	b.n	bf14 <LORAWAN_RxDone+0x3f8>
    c200:	9905      	ldr	r1, [sp, #20]
    c202:	2900      	cmp	r1, #0
    c204:	d029      	beq.n	c25a <LORAWAN_RxDone+0x73e>
    c206:	0701      	lsls	r1, r0, #28
    c208:	d11c      	bne.n	c244 <LORAWAN_RxDone+0x728>
    c20a:	6811      	ldr	r1, [r2, #0]
    c20c:	3c0d      	subs	r4, #13
    c20e:	0a08      	lsrs	r0, r1, #8
    c210:	7911      	ldrb	r1, [r2, #4]
    c212:	9301      	str	r3, [sp, #4]
    c214:	0609      	lsls	r1, r1, #24
    c216:	4301      	orrs	r1, r0
    c218:	9103      	str	r1, [sp, #12]
    c21a:	4b25      	ldr	r3, [pc, #148]	; (c2b0 <LORAWAN_RxDone+0x794>)
    c21c:	491c      	ldr	r1, [pc, #112]	; (c290 <LORAWAN_RxDone+0x774>)
    c21e:	b2e4      	uxtb	r4, r4
    c220:	9102      	str	r1, [sp, #8]
    c222:	9300      	str	r3, [sp, #0]
    c224:	6d93      	ldr	r3, [r2, #88]	; 0x58
    c226:	0021      	movs	r1, r4
    c228:	2201      	movs	r2, #1
    c22a:	9807      	ldr	r0, [sp, #28]
    c22c:	4d19      	ldr	r5, [pc, #100]	; (c294 <LORAWAN_RxDone+0x778>)
    c22e:	47a8      	blx	r5
    c230:	4b15      	ldr	r3, [pc, #84]	; (c288 <LORAWAN_RxDone+0x76c>)
    c232:	0021      	movs	r1, r4
    c234:	9807      	ldr	r0, [sp, #28]
    c236:	4798      	blx	r3
    c238:	9b04      	ldr	r3, [sp, #16]
    c23a:	9d04      	ldr	r5, [sp, #16]
    c23c:	9305      	str	r3, [sp, #20]
    c23e:	2301      	movs	r3, #1
    c240:	9306      	str	r3, [sp, #24]
    c242:	e76f      	b.n	c124 <LORAWAN_RxDone+0x608>
    c244:	466b      	mov	r3, sp
    c246:	7c1b      	ldrb	r3, [r3, #16]
    c248:	36ac      	adds	r6, #172	; 0xac
    c24a:	7033      	strb	r3, [r6, #0]
    c24c:	4b0c      	ldr	r3, [pc, #48]	; (c280 <LORAWAN_RxDone+0x764>)
    c24e:	4798      	blx	r3
    c250:	e660      	b.n	bf14 <LORAWAN_RxDone+0x3f8>
    c252:	2500      	movs	r5, #0
    c254:	9504      	str	r5, [sp, #16]
    c256:	9505      	str	r5, [sp, #20]
    c258:	e764      	b.n	c124 <LORAWAN_RxDone+0x608>
    c25a:	9b05      	ldr	r3, [sp, #20]
    c25c:	9304      	str	r3, [sp, #16]
    c25e:	001d      	movs	r5, r3
    c260:	e760      	b.n	c124 <LORAWAN_RxDone+0x608>
    c262:	46c0      	nop			; (mov r8, r8)
    c264:	0000d131 	.word	0x0000d131
    c268:	20000f10 	.word	0x20000f10
    c26c:	00001e65 	.word	0x00001e65
    c270:	00001a89 	.word	0x00001a89
    c274:	00001bf5 	.word	0x00001bf5
    c278:	20001150 	.word	0x20001150
    c27c:	0000a9c5 	.word	0x0000a9c5
    c280:	0000b649 	.word	0x0000b649
    c284:	0000ffff 	.word	0x0000ffff
    c288:	0000b869 	.word	0x0000b869
    c28c:	20000f25 	.word	0x20000f25
    c290:	20001158 	.word	0x20001158
    c294:	0000a625 	.word	0x0000a625
    c298:	00009ced 	.word	0x00009ced
    c29c:	0000aa81 	.word	0x0000aa81
    c2a0:	20000f60 	.word	0x20000f60
    c2a4:	20000f70 	.word	0x20000f70
    c2a8:	00006d79 	.word	0x00006d79
    c2ac:	0000995d 	.word	0x0000995d
    c2b0:	20000f15 	.word	0x20000f15
    c2b4:	2120      	movs	r1, #32
    c2b6:	7832      	ldrb	r2, [r6, #0]
    c2b8:	438a      	bics	r2, r1
    c2ba:	7032      	strb	r2, [r6, #0]
    c2bc:	0022      	movs	r2, r4
    c2be:	32c8      	adds	r2, #200	; 0xc8
    c2c0:	7812      	ldrb	r2, [r2, #0]
    c2c2:	2a01      	cmp	r2, #1
    c2c4:	d10e      	bne.n	c2e4 <LORAWAN_RxDone+0x7c8>
    c2c6:	781a      	ldrb	r2, [r3, #0]
    c2c8:	3912      	subs	r1, #18
    c2ca:	438a      	bics	r2, r1
    c2cc:	701a      	strb	r2, [r3, #0]
    c2ce:	2390      	movs	r3, #144	; 0x90
    c2d0:	4a6f      	ldr	r2, [pc, #444]	; (c490 <LORAWAN_RxDone+0x974>)
    c2d2:	005b      	lsls	r3, r3, #1
    c2d4:	5cd3      	ldrb	r3, [r2, r3]
    c2d6:	2b00      	cmp	r3, #0
    c2d8:	d000      	beq.n	c2dc <LORAWAN_RxDone+0x7c0>
    c2da:	e763      	b.n	c1a4 <LORAWAN_RxDone+0x688>
    c2dc:	2008      	movs	r0, #8
    c2de:	4b6d      	ldr	r3, [pc, #436]	; (c494 <LORAWAN_RxDone+0x978>)
    c2e0:	4798      	blx	r3
    c2e2:	e75f      	b.n	c1a4 <LORAWAN_RxDone+0x688>
    c2e4:	2a04      	cmp	r2, #4
    c2e6:	d1f2      	bne.n	c2ce <LORAWAN_RxDone+0x7b2>
    c2e8:	0023      	movs	r3, r4
    c2ea:	33bc      	adds	r3, #188	; 0xbc
    c2ec:	7818      	ldrb	r0, [r3, #0]
    c2ee:	4b6a      	ldr	r3, [pc, #424]	; (c498 <LORAWAN_RxDone+0x97c>)
    c2f0:	4798      	blx	r3
    c2f2:	e7ec      	b.n	c2ce <LORAWAN_RxDone+0x7b2>
    c2f4:	9b06      	ldr	r3, [sp, #24]
    c2f6:	2b00      	cmp	r3, #0
    c2f8:	d013      	beq.n	c322 <LORAWAN_RxDone+0x806>
    c2fa:	0023      	movs	r3, r4
    c2fc:	33c8      	adds	r3, #200	; 0xc8
    c2fe:	781d      	ldrb	r5, [r3, #0]
    c300:	2d01      	cmp	r5, #1
    c302:	d10e      	bne.n	c322 <LORAWAN_RxDone+0x806>
    c304:	4b65      	ldr	r3, [pc, #404]	; (c49c <LORAWAN_RxDone+0x980>)
    c306:	4798      	blx	r3
    c308:	0022      	movs	r2, r4
    c30a:	3250      	adds	r2, #80	; 0x50
    c30c:	7853      	ldrb	r3, [r2, #1]
    c30e:	43ab      	bics	r3, r5
    c310:	7053      	strb	r3, [r2, #1]
    c312:	2220      	movs	r2, #32
    c314:	7833      	ldrb	r3, [r6, #0]
    c316:	4393      	bics	r3, r2
    c318:	7033      	strb	r3, [r6, #0]
    c31a:	2390      	movs	r3, #144	; 0x90
    c31c:	005b      	lsls	r3, r3, #1
    c31e:	5ce3      	ldrb	r3, [r4, r3]
    c320:	e7d9      	b.n	c2d6 <LORAWAN_RxDone+0x7ba>
    c322:	4b5f      	ldr	r3, [pc, #380]	; (c4a0 <LORAWAN_RxDone+0x984>)
    c324:	4798      	blx	r3
    c326:	e73d      	b.n	c1a4 <LORAWAN_RxDone+0x688>
    c328:	9a04      	ldr	r2, [sp, #16]
    c32a:	2a00      	cmp	r2, #0
    c32c:	d00b      	beq.n	c346 <LORAWAN_RxDone+0x82a>
    c32e:	9a05      	ldr	r2, [sp, #20]
    c330:	0029      	movs	r1, r5
    c332:	0038      	movs	r0, r7
    c334:	4b5b      	ldr	r3, [pc, #364]	; (c4a4 <LORAWAN_RxDone+0x988>)
    c336:	4798      	blx	r3
    c338:	0022      	movs	r2, r4
    c33a:	2101      	movs	r1, #1
    c33c:	3250      	adds	r2, #80	; 0x50
    c33e:	7853      	ldrb	r3, [r2, #1]
    c340:	438b      	bics	r3, r1
    c342:	7053      	strb	r3, [r2, #1]
    c344:	e72e      	b.n	c1a4 <LORAWAN_RxDone+0x688>
    c346:	2220      	movs	r2, #32
    c348:	4393      	bics	r3, r2
    c34a:	7033      	strb	r3, [r6, #0]
    c34c:	0023      	movs	r3, r4
    c34e:	33c8      	adds	r3, #200	; 0xc8
    c350:	781b      	ldrb	r3, [r3, #0]
    c352:	2b01      	cmp	r3, #1
    c354:	d10e      	bne.n	c374 <LORAWAN_RxDone+0x858>
    c356:	0022      	movs	r2, r4
    c358:	210e      	movs	r1, #14
    c35a:	3250      	adds	r2, #80	; 0x50
    c35c:	7813      	ldrb	r3, [r2, #0]
    c35e:	438b      	bics	r3, r1
    c360:	7013      	strb	r3, [r2, #0]
    c362:	2390      	movs	r3, #144	; 0x90
    c364:	005b      	lsls	r3, r3, #1
    c366:	5ce3      	ldrb	r3, [r4, r3]
    c368:	2b00      	cmp	r3, #0
    c36a:	d1e5      	bne.n	c338 <LORAWAN_RxDone+0x81c>
    c36c:	2008      	movs	r0, #8
    c36e:	4b49      	ldr	r3, [pc, #292]	; (c494 <LORAWAN_RxDone+0x978>)
    c370:	4798      	blx	r3
    c372:	e7e1      	b.n	c338 <LORAWAN_RxDone+0x81c>
    c374:	2b04      	cmp	r3, #4
    c376:	d1f4      	bne.n	c362 <LORAWAN_RxDone+0x846>
    c378:	0023      	movs	r3, r4
    c37a:	33bc      	adds	r3, #188	; 0xbc
    c37c:	7818      	ldrb	r0, [r3, #0]
    c37e:	4b46      	ldr	r3, [pc, #280]	; (c498 <LORAWAN_RxDone+0x97c>)
    c380:	4798      	blx	r3
    c382:	e7ee      	b.n	c362 <LORAWAN_RxDone+0x846>
    c384:	35e4      	adds	r5, #228	; 0xe4
    c386:	782b      	ldrb	r3, [r5, #0]
    c388:	079a      	lsls	r2, r3, #30
    c38a:	d521      	bpl.n	c3d0 <LORAWAN_RxDone+0x8b4>
    c38c:	aa0e      	add	r2, sp, #56	; 0x38
    c38e:	0031      	movs	r1, r6
    c390:	2024      	movs	r0, #36	; 0x24
    c392:	47b8      	blx	r7
    c394:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c396:	1c5a      	adds	r2, r3, #1
    c398:	d001      	beq.n	c39e <LORAWAN_RxDone+0x882>
    c39a:	3314      	adds	r3, #20
    c39c:	930e      	str	r3, [sp, #56]	; 0x38
    c39e:	0021      	movs	r1, r4
    c3a0:	220e      	movs	r2, #14
    c3a2:	3150      	adds	r1, #80	; 0x50
    c3a4:	780b      	ldrb	r3, [r1, #0]
    c3a6:	4393      	bics	r3, r2
    c3a8:	001a      	movs	r2, r3
    c3aa:	230c      	movs	r3, #12
    c3ac:	4313      	orrs	r3, r2
    c3ae:	700b      	strb	r3, [r1, #0]
    c3b0:	232c      	movs	r3, #44	; 0x2c
    c3b2:	33ff      	adds	r3, #255	; 0xff
    c3b4:	5ce3      	ldrb	r3, [r4, r3]
    c3b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    c3b8:	21fa      	movs	r1, #250	; 0xfa
    c3ba:	1ad3      	subs	r3, r2, r3
    c3bc:	2200      	movs	r2, #0
    c3be:	0089      	lsls	r1, r1, #2
    c3c0:	4359      	muls	r1, r3
    c3c2:	34ba      	adds	r4, #186	; 0xba
    c3c4:	4b38      	ldr	r3, [pc, #224]	; (c4a8 <LORAWAN_RxDone+0x98c>)
    c3c6:	7820      	ldrb	r0, [r4, #0]
    c3c8:	9200      	str	r2, [sp, #0]
    c3ca:	4c38      	ldr	r4, [pc, #224]	; (c4ac <LORAWAN_RxDone+0x990>)
    c3cc:	47a0      	blx	r4
    c3ce:	e5a1      	b.n	bf14 <LORAWAN_RxDone+0x3f8>
    c3d0:	075b      	lsls	r3, r3, #29
    c3d2:	d400      	bmi.n	c3d6 <LORAWAN_RxDone+0x8ba>
    c3d4:	e59e      	b.n	bf14 <LORAWAN_RxDone+0x3f8>
    c3d6:	aa0e      	add	r2, sp, #56	; 0x38
    c3d8:	0031      	movs	r1, r6
    c3da:	2031      	movs	r0, #49	; 0x31
    c3dc:	47b8      	blx	r7
    c3de:	220e      	movs	r2, #14
    c3e0:	4b33      	ldr	r3, [pc, #204]	; (c4b0 <LORAWAN_RxDone+0x994>)
    c3e2:	781b      	ldrb	r3, [r3, #0]
    c3e4:	4393      	bics	r3, r2
    c3e6:	001a      	movs	r2, r3
    c3e8:	230c      	movs	r3, #12
    c3ea:	4313      	orrs	r3, r2
    c3ec:	4a30      	ldr	r2, [pc, #192]	; (c4b0 <LORAWAN_RxDone+0x994>)
    c3ee:	7013      	strb	r3, [r2, #0]
    c3f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c3f2:	1c5a      	adds	r2, r3, #1
    c3f4:	d001      	beq.n	c3fa <LORAWAN_RxDone+0x8de>
    c3f6:	3301      	adds	r3, #1
    c3f8:	930e      	str	r3, [sp, #56]	; 0x38
    c3fa:	232c      	movs	r3, #44	; 0x2c
    c3fc:	33ff      	adds	r3, #255	; 0xff
    c3fe:	5ce3      	ldrb	r3, [r4, r3]
    c400:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    c402:	21fa      	movs	r1, #250	; 0xfa
    c404:	1ad3      	subs	r3, r2, r3
    c406:	2200      	movs	r2, #0
    c408:	0089      	lsls	r1, r1, #2
    c40a:	34bd      	adds	r4, #189	; 0xbd
    c40c:	4359      	muls	r1, r3
    c40e:	7820      	ldrb	r0, [r4, #0]
    c410:	4b28      	ldr	r3, [pc, #160]	; (c4b4 <LORAWAN_RxDone+0x998>)
    c412:	9200      	str	r2, [sp, #0]
    c414:	e7d9      	b.n	c3ca <LORAWAN_RxDone+0x8ae>
    c416:	35c8      	adds	r5, #200	; 0xc8
    c418:	782b      	ldrb	r3, [r5, #0]
    c41a:	2b04      	cmp	r3, #4
    c41c:	d000      	beq.n	c420 <LORAWAN_RxDone+0x904>
    c41e:	e579      	b.n	bf14 <LORAWAN_RxDone+0x3f8>
    c420:	0038      	movs	r0, r7
    c422:	4b25      	ldr	r3, [pc, #148]	; (c4b8 <LORAWAN_RxDone+0x99c>)
    c424:	4798      	blx	r3
    c426:	e575      	b.n	bf14 <LORAWAN_RxDone+0x3f8>
    c428:	4b24      	ldr	r3, [pc, #144]	; (c4bc <LORAWAN_RxDone+0x9a0>)
    c42a:	4798      	blx	r3
    c42c:	4924      	ldr	r1, [pc, #144]	; (c4c0 <LORAWAN_RxDone+0x9a4>)
    c42e:	784a      	ldrb	r2, [r1, #1]
    c430:	780b      	ldrb	r3, [r1, #0]
    c432:	0212      	lsls	r2, r2, #8
    c434:	431a      	orrs	r2, r3
    c436:	788b      	ldrb	r3, [r1, #2]
    c438:	041b      	lsls	r3, r3, #16
    c43a:	431a      	orrs	r2, r3
    c43c:	78cb      	ldrb	r3, [r1, #3]
    c43e:	061b      	lsls	r3, r3, #24
    c440:	4313      	orrs	r3, r2
    c442:	d101      	bne.n	c448 <LORAWAN_RxDone+0x92c>
    c444:	f7ff fbbd 	bl	bbc2 <LORAWAN_RxDone+0xa6>
    c448:	2220      	movs	r2, #32
    c44a:	3560      	adds	r5, #96	; 0x60
    c44c:	782b      	ldrb	r3, [r5, #0]
    c44e:	2019      	movs	r0, #25
    c450:	4393      	bics	r3, r2
    c452:	702b      	strb	r3, [r5, #0]
    c454:	e515      	b.n	be82 <LORAWAN_RxDone+0x366>
    c456:	491a      	ldr	r1, [pc, #104]	; (c4c0 <LORAWAN_RxDone+0x9a4>)
    c458:	784a      	ldrb	r2, [r1, #1]
    c45a:	780b      	ldrb	r3, [r1, #0]
    c45c:	0212      	lsls	r2, r2, #8
    c45e:	431a      	orrs	r2, r3
    c460:	788b      	ldrb	r3, [r1, #2]
    c462:	041b      	lsls	r3, r3, #16
    c464:	431a      	orrs	r2, r3
    c466:	78cb      	ldrb	r3, [r1, #3]
    c468:	061b      	lsls	r3, r3, #24
    c46a:	4313      	orrs	r3, r2
    c46c:	d100      	bne.n	c470 <LORAWAN_RxDone+0x954>
    c46e:	e551      	b.n	bf14 <LORAWAN_RxDone+0x3f8>
    c470:	4b14      	ldr	r3, [pc, #80]	; (c4c4 <LORAWAN_RxDone+0x9a8>)
    c472:	4d15      	ldr	r5, [pc, #84]	; (c4c8 <LORAWAN_RxDone+0x9ac>)
    c474:	781b      	ldrb	r3, [r3, #0]
    c476:	2b10      	cmp	r3, #16
    c478:	d105      	bne.n	c486 <LORAWAN_RxDone+0x96a>
    c47a:	0001      	movs	r1, r0
    c47c:	0022      	movs	r2, r4
    c47e:	2000      	movs	r0, #0
    c480:	3b0c      	subs	r3, #12
    c482:	47a8      	blx	r5
    c484:	e546      	b.n	bf14 <LORAWAN_RxDone+0x3f8>
    c486:	2300      	movs	r3, #0
    c488:	0001      	movs	r1, r0
    c48a:	0022      	movs	r2, r4
    c48c:	0018      	movs	r0, r3
    c48e:	e7f8      	b.n	c482 <LORAWAN_RxDone+0x966>
    c490:	20000f10 	.word	0x20000f10
    c494:	0000a9c5 	.word	0x0000a9c5
    c498:	00001bf5 	.word	0x00001bf5
    c49c:	00009ced 	.word	0x00009ced
    c4a0:	00009c79 	.word	0x00009c79
    c4a4:	0000aa81 	.word	0x0000aa81
    c4a8:	00009a51 	.word	0x00009a51
    c4ac:	000018f1 	.word	0x000018f1
    c4b0:	20000f60 	.word	0x20000f60
    c4b4:	0000a515 	.word	0x0000a515
    c4b8:	0000cecd 	.word	0x0000cecd
    c4bc:	0000b649 	.word	0x0000b649
    c4c0:	20001150 	.word	0x20001150
    c4c4:	2000103c 	.word	0x2000103c
    c4c8:	0000aa29 	.word	0x0000aa29

0000c4cc <LorawanSetEdClass>:
    c4cc:	2390      	movs	r3, #144	; 0x90
    c4ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
    c4d0:	4d19      	ldr	r5, [pc, #100]	; (c538 <LorawanSetEdClass+0x6c>)
    c4d2:	005b      	lsls	r3, r3, #1
    c4d4:	5ceb      	ldrb	r3, [r5, r3]
    c4d6:	0004      	movs	r4, r0
    c4d8:	2011      	movs	r0, #17
    c4da:	2b00      	cmp	r3, #0
    c4dc:	d013      	beq.n	c506 <LorawanSetEdClass+0x3a>
    c4de:	002b      	movs	r3, r5
    c4e0:	33c9      	adds	r3, #201	; 0xc9
    c4e2:	781b      	ldrb	r3, [r3, #0]
    c4e4:	3807      	subs	r0, #7
    c4e6:	4223      	tst	r3, r4
    c4e8:	d00d      	beq.n	c506 <LorawanSetEdClass+0x3a>
    c4ea:	002b      	movs	r3, r5
    c4ec:	33c8      	adds	r3, #200	; 0xc8
    c4ee:	7819      	ldrb	r1, [r3, #0]
    c4f0:	428c      	cmp	r4, r1
    c4f2:	d007      	beq.n	c504 <LorawanSetEdClass+0x38>
    c4f4:	2901      	cmp	r1, #1
    c4f6:	d107      	bne.n	c508 <LorawanSetEdClass+0x3c>
    c4f8:	2c04      	cmp	r4, #4
    c4fa:	d104      	bne.n	c506 <LorawanSetEdClass+0x3a>
    c4fc:	701c      	strb	r4, [r3, #0]
    c4fe:	2000      	movs	r0, #0
    c500:	4b0e      	ldr	r3, [pc, #56]	; (c53c <LorawanSetEdClass+0x70>)
    c502:	4798      	blx	r3
    c504:	2008      	movs	r0, #8
    c506:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    c508:	2904      	cmp	r1, #4
    c50a:	d1fc      	bne.n	c506 <LorawanSetEdClass+0x3a>
    c50c:	2c01      	cmp	r4, #1
    c50e:	d1fa      	bne.n	c506 <LorawanSetEdClass+0x3a>
    c510:	701c      	strb	r4, [r3, #0]
    c512:	0021      	movs	r1, r4
    c514:	4b09      	ldr	r3, [pc, #36]	; (c53c <LorawanSetEdClass+0x70>)
    c516:	2000      	movs	r0, #0
    c518:	4798      	blx	r3
    c51a:	002a      	movs	r2, r5
    c51c:	210e      	movs	r1, #14
    c51e:	3250      	adds	r2, #80	; 0x50
    c520:	7813      	ldrb	r3, [r2, #0]
    c522:	a801      	add	r0, sp, #4
    c524:	438b      	bics	r3, r1
    c526:	7013      	strb	r3, [r2, #0]
    c528:	35f0      	adds	r5, #240	; 0xf0
    c52a:	4b05      	ldr	r3, [pc, #20]	; (c540 <LorawanSetEdClass+0x74>)
    c52c:	7004      	strb	r4, [r0, #0]
    c52e:	4798      	blx	r3
    c530:	7828      	ldrb	r0, [r5, #0]
    c532:	4b04      	ldr	r3, [pc, #16]	; (c544 <LorawanSetEdClass+0x78>)
    c534:	4798      	blx	r3
    c536:	e7e5      	b.n	c504 <LorawanSetEdClass+0x38>
    c538:	20000f10 	.word	0x20000f10
    c53c:	00001e65 	.word	0x00001e65
    c540:	0000e8c9 	.word	0x0000e8c9
    c544:	00001bf5 	.word	0x00001bf5

0000c548 <LORAWAN_SetAttr>:
    c548:	2290      	movs	r2, #144	; 0x90
    c54a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    c54c:	4cc0      	ldr	r4, [pc, #768]	; (c850 <LORAWAN_SetAttr+0x308>)
    c54e:	0052      	lsls	r2, r2, #1
    c550:	5ca2      	ldrb	r2, [r4, r2]
    c552:	000b      	movs	r3, r1
    c554:	2511      	movs	r5, #17
    c556:	2a00      	cmp	r2, #0
    c558:	d04e      	beq.n	c5f8 <LORAWAN_SetAttr+0xb0>
    c55a:	282d      	cmp	r0, #45	; 0x2d
    c55c:	d85f      	bhi.n	c61e <LORAWAN_SetAttr+0xd6>
    c55e:	f002 fccb 	bl	eef8 <__gnu_thumb1_case_uhi>
    c562:	002e      	.short	0x002e
    c564:	009a007d 	.word	0x009a007d
    c568:	00ab00d9 	.word	0x00ab00d9
    c56c:	00f700c7 	.word	0x00f700c7
    c570:	01300110 	.word	0x01300110
    c574:	01480142 	.word	0x01480142
    c578:	015d0154 	.word	0x015d0154
    c57c:	01810172 	.word	0x01810172
    c580:	018b0186 	.word	0x018b0186
    c584:	01950190 	.word	0x01950190
    c588:	019f019a 	.word	0x019f019a
    c58c:	01a601c1 	.word	0x01a601c1
    c590:	01ca01a3 	.word	0x01ca01a3
    c594:	01bc01c6 	.word	0x01bc01c6
    c598:	01b201b8 	.word	0x01b201b8
    c59c:	005e005e 	.word	0x005e005e
    c5a0:	005e016e 	.word	0x005e016e
    c5a4:	005e005e 	.word	0x005e005e
    c5a8:	005e005e 	.word	0x005e005e
    c5ac:	01ce005e 	.word	0x01ce005e
    c5b0:	01d1004d 	.word	0x01d1004d
    c5b4:	01e601f8 	.word	0x01e601f8
    c5b8:	005e01d5 	.word	0x005e01d5
    c5bc:	0212      	.short	0x0212
    c5be:	250a      	movs	r5, #10
    c5c0:	2900      	cmp	r1, #0
    c5c2:	d019      	beq.n	c5f8 <LORAWAN_SetAttr+0xb0>
    c5c4:	0020      	movs	r0, r4
    c5c6:	2208      	movs	r2, #8
    c5c8:	4ba2      	ldr	r3, [pc, #648]	; (c854 <LORAWAN_SetAttr+0x30c>)
    c5ca:	303d      	adds	r0, #61	; 0x3d
    c5cc:	4798      	blx	r3
    c5ce:	4ea2      	ldr	r6, [pc, #648]	; (c858 <LORAWAN_SetAttr+0x310>)
    c5d0:	2108      	movs	r1, #8
    c5d2:	2001      	movs	r0, #1
    c5d4:	47b0      	blx	r6
    c5d6:	0022      	movs	r2, r4
    c5d8:	32aa      	adds	r2, #170	; 0xaa
    c5da:	7813      	ldrb	r3, [r2, #0]
    c5dc:	3d09      	subs	r5, #9
    c5de:	432b      	orrs	r3, r5
    c5e0:	2109      	movs	r1, #9
    c5e2:	0028      	movs	r0, r5
    c5e4:	3450      	adds	r4, #80	; 0x50
    c5e6:	7013      	strb	r3, [r2, #0]
    c5e8:	47b0      	blx	r6
    c5ea:	7823      	ldrb	r3, [r4, #0]
    c5ec:	0028      	movs	r0, r5
    c5ee:	43ab      	bics	r3, r5
    c5f0:	210b      	movs	r1, #11
    c5f2:	7023      	strb	r3, [r4, #0]
    c5f4:	47b0      	blx	r6
    c5f6:	3507      	adds	r5, #7
    c5f8:	0028      	movs	r0, r5
    c5fa:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    c5fc:	0022      	movs	r2, r4
    c5fe:	32e4      	adds	r2, #228	; 0xe4
    c600:	7812      	ldrb	r2, [r2, #0]
    c602:	250a      	movs	r5, #10
    c604:	0752      	lsls	r2, r2, #29
    c606:	d5f7      	bpl.n	c5f8 <LORAWAN_SetAttr+0xb0>
    c608:	79c9      	ldrb	r1, [r1, #7]
    c60a:	4a94      	ldr	r2, [pc, #592]	; (c85c <LORAWAN_SetAttr+0x314>)
    c60c:	2900      	cmp	r1, #0
    c60e:	d111      	bne.n	c634 <LORAWAN_SetAttr+0xec>
    c610:	466b      	mov	r3, sp
    c612:	201d      	movs	r0, #29
    c614:	7159      	strb	r1, [r3, #5]
    c616:	4669      	mov	r1, sp
    c618:	4790      	blx	r2
    c61a:	2800      	cmp	r0, #0
    c61c:	d001      	beq.n	c622 <LORAWAN_SetAttr+0xda>
    c61e:	250a      	movs	r5, #10
    c620:	e7ea      	b.n	c5f8 <LORAWAN_SetAttr+0xb0>
    c622:	0023      	movs	r3, r4
    c624:	2109      	movs	r1, #9
    c626:	33e8      	adds	r3, #232	; 0xe8
    c628:	34e6      	adds	r4, #230	; 0xe6
    c62a:	8018      	strh	r0, [r3, #0]
    c62c:	8020      	strh	r0, [r4, #0]
    c62e:	4b8a      	ldr	r3, [pc, #552]	; (c858 <LORAWAN_SetAttr+0x310>)
    c630:	4798      	blx	r3
    c632:	e011      	b.n	c658 <LORAWAN_SetAttr+0x110>
    c634:	466e      	mov	r6, sp
    c636:	2502      	movs	r5, #2
    c638:	5f59      	ldrsh	r1, [r3, r5]
    c63a:	8818      	ldrh	r0, [r3, #0]
    c63c:	889d      	ldrh	r5, [r3, #4]
    c63e:	799b      	ldrb	r3, [r3, #6]
    c640:	8030      	strh	r0, [r6, #0]
    c642:	7133      	strb	r3, [r6, #4]
    c644:	2301      	movs	r3, #1
    c646:	8071      	strh	r1, [r6, #2]
    c648:	201d      	movs	r0, #29
    c64a:	4669      	mov	r1, sp
    c64c:	7173      	strb	r3, [r6, #5]
    c64e:	4790      	blx	r2
    c650:	2800      	cmp	r0, #0
    c652:	d1e4      	bne.n	c61e <LORAWAN_SetAttr+0xd6>
    c654:	34e8      	adds	r4, #232	; 0xe8
    c656:	8025      	strh	r5, [r4, #0]
    c658:	2508      	movs	r5, #8
    c65a:	e7cd      	b.n	c5f8 <LORAWAN_SetAttr+0xb0>
    c65c:	250a      	movs	r5, #10
    c65e:	2900      	cmp	r1, #0
    c660:	d0ca      	beq.n	c5f8 <LORAWAN_SetAttr+0xb0>
    c662:	0020      	movs	r0, r4
    c664:	2208      	movs	r2, #8
    c666:	4b7b      	ldr	r3, [pc, #492]	; (c854 <LORAWAN_SetAttr+0x30c>)
    c668:	3035      	adds	r0, #53	; 0x35
    c66a:	4798      	blx	r3
    c66c:	2107      	movs	r1, #7
    c66e:	2001      	movs	r0, #1
    c670:	4d79      	ldr	r5, [pc, #484]	; (c858 <LORAWAN_SetAttr+0x310>)
    c672:	47a8      	blx	r5
    c674:	0022      	movs	r2, r4
    c676:	2302      	movs	r3, #2
    c678:	32aa      	adds	r2, #170	; 0xaa
    c67a:	7811      	ldrb	r1, [r2, #0]
    c67c:	430b      	orrs	r3, r1
    c67e:	7013      	strb	r3, [r2, #0]
    c680:	2109      	movs	r1, #9
    c682:	2001      	movs	r0, #1
    c684:	47a8      	blx	r5
    c686:	2001      	movs	r0, #1
    c688:	210b      	movs	r1, #11
    c68a:	3450      	adds	r4, #80	; 0x50
    c68c:	7823      	ldrb	r3, [r4, #0]
    c68e:	4383      	bics	r3, r0
    c690:	7023      	strb	r3, [r4, #0]
    c692:	47a8      	blx	r5
    c694:	e7e0      	b.n	c658 <LORAWAN_SetAttr+0x110>
    c696:	680b      	ldr	r3, [r1, #0]
    c698:	2001      	movs	r0, #1
    c69a:	0a19      	lsrs	r1, r3, #8
    c69c:	70a1      	strb	r1, [r4, #2]
    c69e:	0c19      	lsrs	r1, r3, #16
    c6a0:	7063      	strb	r3, [r4, #1]
    c6a2:	70e1      	strb	r1, [r4, #3]
    c6a4:	0e1b      	lsrs	r3, r3, #24
    c6a6:	2103      	movs	r1, #3
    c6a8:	4d6b      	ldr	r5, [pc, #428]	; (c858 <LORAWAN_SetAttr+0x310>)
    c6aa:	7123      	strb	r3, [r4, #4]
    c6ac:	47a8      	blx	r5
    c6ae:	0022      	movs	r2, r4
    c6b0:	32aa      	adds	r2, #170	; 0xaa
    c6b2:	7811      	ldrb	r1, [r2, #0]
    c6b4:	2304      	movs	r3, #4
    c6b6:	e7e1      	b.n	c67c <LORAWAN_SetAttr+0x134>
    c6b8:	250a      	movs	r5, #10
    c6ba:	2900      	cmp	r1, #0
    c6bc:	d09c      	beq.n	c5f8 <LORAWAN_SetAttr+0xb0>
    c6be:	3506      	adds	r5, #6
    c6c0:	002a      	movs	r2, r5
    c6c2:	4b64      	ldr	r3, [pc, #400]	; (c854 <LORAWAN_SetAttr+0x30c>)
    c6c4:	1d60      	adds	r0, r4, #5
    c6c6:	4798      	blx	r3
    c6c8:	4e63      	ldr	r6, [pc, #396]	; (c858 <LORAWAN_SetAttr+0x310>)
    c6ca:	2104      	movs	r1, #4
    c6cc:	2001      	movs	r0, #1
    c6ce:	47b0      	blx	r6
    c6d0:	0023      	movs	r3, r4
    c6d2:	33aa      	adds	r3, #170	; 0xaa
    c6d4:	781a      	ldrb	r2, [r3, #0]
    c6d6:	2109      	movs	r1, #9
    c6d8:	4315      	orrs	r5, r2
    c6da:	2001      	movs	r0, #1
    c6dc:	701d      	strb	r5, [r3, #0]
    c6de:	47b0      	blx	r6
    c6e0:	2001      	movs	r0, #1
    c6e2:	3450      	adds	r4, #80	; 0x50
    c6e4:	7823      	ldrb	r3, [r4, #0]
    c6e6:	210b      	movs	r1, #11
    c6e8:	4383      	bics	r3, r0
    c6ea:	7023      	strb	r3, [r4, #0]
    c6ec:	47b0      	blx	r6
    c6ee:	e7b3      	b.n	c658 <LORAWAN_SetAttr+0x110>
    c6f0:	250a      	movs	r5, #10
    c6f2:	2900      	cmp	r1, #0
    c6f4:	d100      	bne.n	c6f8 <LORAWAN_SetAttr+0x1b0>
    c6f6:	e77f      	b.n	c5f8 <LORAWAN_SetAttr+0xb0>
    c6f8:	0020      	movs	r0, r4
    c6fa:	2210      	movs	r2, #16
    c6fc:	4b55      	ldr	r3, [pc, #340]	; (c854 <LORAWAN_SetAttr+0x30c>)
    c6fe:	3015      	adds	r0, #21
    c700:	4798      	blx	r3
    c702:	2105      	movs	r1, #5
    c704:	2001      	movs	r0, #1
    c706:	4d54      	ldr	r5, [pc, #336]	; (c858 <LORAWAN_SetAttr+0x310>)
    c708:	47a8      	blx	r5
    c70a:	0022      	movs	r2, r4
    c70c:	32aa      	adds	r2, #170	; 0xaa
    c70e:	7811      	ldrb	r1, [r2, #0]
    c710:	2320      	movs	r3, #32
    c712:	e7b3      	b.n	c67c <LORAWAN_SetAttr+0x134>
    c714:	250a      	movs	r5, #10
    c716:	2900      	cmp	r1, #0
    c718:	d100      	bne.n	c71c <LORAWAN_SetAttr+0x1d4>
    c71a:	e76d      	b.n	c5f8 <LORAWAN_SetAttr+0xb0>
    c71c:	0020      	movs	r0, r4
    c71e:	2210      	movs	r2, #16
    c720:	4b4c      	ldr	r3, [pc, #304]	; (c854 <LORAWAN_SetAttr+0x30c>)
    c722:	3025      	adds	r0, #37	; 0x25
    c724:	4798      	blx	r3
    c726:	4e4c      	ldr	r6, [pc, #304]	; (c858 <LORAWAN_SetAttr+0x310>)
    c728:	2106      	movs	r1, #6
    c72a:	2001      	movs	r0, #1
    c72c:	47b0      	blx	r6
    c72e:	0022      	movs	r2, r4
    c730:	32aa      	adds	r2, #170	; 0xaa
    c732:	7813      	ldrb	r3, [r2, #0]
    c734:	3d02      	subs	r5, #2
    c736:	432b      	orrs	r3, r5
    c738:	2109      	movs	r1, #9
    c73a:	2001      	movs	r0, #1
    c73c:	7013      	strb	r3, [r2, #0]
    c73e:	47b0      	blx	r6
    c740:	2001      	movs	r0, #1
    c742:	3450      	adds	r4, #80	; 0x50
    c744:	7823      	ldrb	r3, [r4, #0]
    c746:	210b      	movs	r1, #11
    c748:	4383      	bics	r3, r0
    c74a:	7023      	strb	r3, [r4, #0]
    c74c:	47b0      	blx	r6
    c74e:	e753      	b.n	c5f8 <LORAWAN_SetAttr+0xb0>
    c750:	780b      	ldrb	r3, [r1, #0]
    c752:	2001      	movs	r0, #1
    c754:	0021      	movs	r1, r4
    c756:	2520      	movs	r5, #32
    c758:	3150      	adds	r1, #80	; 0x50
    c75a:	4003      	ands	r3, r0
    c75c:	015a      	lsls	r2, r3, #5
    c75e:	780b      	ldrb	r3, [r1, #0]
    c760:	43ab      	bics	r3, r5
    c762:	4313      	orrs	r3, r2
    c764:	700b      	strb	r3, [r1, #0]
    c766:	0023      	movs	r3, r4
    c768:	2200      	movs	r2, #0
    c76a:	3396      	adds	r3, #150	; 0x96
    c76c:	3460      	adds	r4, #96	; 0x60
    c76e:	801a      	strh	r2, [r3, #0]
    c770:	7823      	ldrb	r3, [r4, #0]
    c772:	3210      	adds	r2, #16
    c774:	4393      	bics	r3, r2
    c776:	7023      	strb	r3, [r4, #0]
    c778:	210b      	movs	r1, #11
    c77a:	4b37      	ldr	r3, [pc, #220]	; (c858 <LORAWAN_SetAttr+0x310>)
    c77c:	4798      	blx	r3
    c77e:	3d18      	subs	r5, #24
    c780:	e73a      	b.n	c5f8 <LORAWAN_SetAttr+0xb0>
    c782:	466a      	mov	r2, sp
    c784:	780b      	ldrb	r3, [r1, #0]
    c786:	7013      	strb	r3, [r2, #0]
    c788:	0022      	movs	r2, r4
    c78a:	32be      	adds	r2, #190	; 0xbe
    c78c:	7812      	ldrb	r2, [r2, #0]
    c78e:	429a      	cmp	r2, r3
    c790:	d900      	bls.n	c794 <LORAWAN_SetAttr+0x24c>
    c792:	e744      	b.n	c61e <LORAWAN_SetAttr+0xd6>
    c794:	0022      	movs	r2, r4
    c796:	32bf      	adds	r2, #191	; 0xbf
    c798:	7812      	ldrb	r2, [r2, #0]
    c79a:	429a      	cmp	r2, r3
    c79c:	d200      	bcs.n	c7a0 <LORAWAN_SetAttr+0x258>
    c79e:	e73e      	b.n	c61e <LORAWAN_SetAttr+0xd6>
    c7a0:	4669      	mov	r1, sp
    c7a2:	2010      	movs	r0, #16
    c7a4:	4b2e      	ldr	r3, [pc, #184]	; (c860 <LORAWAN_SetAttr+0x318>)
    c7a6:	4798      	blx	r3
    c7a8:	0005      	movs	r5, r0
    c7aa:	2808      	cmp	r0, #8
    c7ac:	d000      	beq.n	c7b0 <LORAWAN_SetAttr+0x268>
    c7ae:	e736      	b.n	c61e <LORAWAN_SetAttr+0xd6>
    c7b0:	466b      	mov	r3, sp
    c7b2:	210c      	movs	r1, #12
    c7b4:	2001      	movs	r0, #1
    c7b6:	781b      	ldrb	r3, [r3, #0]
    c7b8:	34b3      	adds	r4, #179	; 0xb3
    c7ba:	7023      	strb	r3, [r4, #0]
    c7bc:	4b26      	ldr	r3, [pc, #152]	; (c858 <LORAWAN_SetAttr+0x310>)
    c7be:	4798      	blx	r3
    c7c0:	e71a      	b.n	c5f8 <LORAWAN_SetAttr+0xb0>
    c7c2:	466a      	mov	r2, sp
    c7c4:	780b      	ldrb	r3, [r1, #0]
    c7c6:	201d      	movs	r0, #29
    c7c8:	7013      	strb	r3, [r2, #0]
    c7ca:	4669      	mov	r1, sp
    c7cc:	4b24      	ldr	r3, [pc, #144]	; (c860 <LORAWAN_SetAttr+0x318>)
    c7ce:	4798      	blx	r3
    c7d0:	0005      	movs	r5, r0
    c7d2:	2808      	cmp	r0, #8
    c7d4:	d000      	beq.n	c7d8 <LORAWAN_SetAttr+0x290>
    c7d6:	e722      	b.n	c61e <LORAWAN_SetAttr+0xd6>
    c7d8:	466b      	mov	r3, sp
    c7da:	781b      	ldrb	r3, [r3, #0]
    c7dc:	34b5      	adds	r4, #181	; 0xb5
    c7de:	7023      	strb	r3, [r4, #0]
    c7e0:	210a      	movs	r1, #10
    c7e2:	2000      	movs	r0, #0
    c7e4:	e7ea      	b.n	c7bc <LORAWAN_SetAttr+0x274>
    c7e6:	780b      	ldrb	r3, [r1, #0]
    c7e8:	2103      	movs	r1, #3
    c7ea:	34cb      	adds	r4, #203	; 0xcb
    c7ec:	7023      	strb	r3, [r4, #0]
    c7ee:	2000      	movs	r0, #0
    c7f0:	e71d      	b.n	c62e <LORAWAN_SetAttr+0xe6>
    c7f2:	680b      	ldr	r3, [r1, #0]
    c7f4:	250a      	movs	r5, #10
    c7f6:	1c5a      	adds	r2, r3, #1
    c7f8:	d100      	bne.n	c7fc <LORAWAN_SetAttr+0x2b4>
    c7fa:	e6fd      	b.n	c5f8 <LORAWAN_SetAttr+0xb0>
    c7fc:	2116      	movs	r1, #22
    c7fe:	2000      	movs	r0, #0
    c800:	6563      	str	r3, [r4, #84]	; 0x54
    c802:	4b15      	ldr	r3, [pc, #84]	; (c858 <LORAWAN_SetAttr+0x310>)
    c804:	4798      	blx	r3
    c806:	3d02      	subs	r5, #2
    c808:	e6f6      	b.n	c5f8 <LORAWAN_SetAttr+0xb0>
    c80a:	680b      	ldr	r3, [r1, #0]
    c80c:	250a      	movs	r5, #10
    c80e:	1c5a      	adds	r2, r3, #1
    c810:	d100      	bne.n	c814 <LORAWAN_SetAttr+0x2cc>
    c812:	e6f1      	b.n	c5f8 <LORAWAN_SetAttr+0xb0>
    c814:	65a3      	str	r3, [r4, #88]	; 0x58
    c816:	0029      	movs	r1, r5
    c818:	2001      	movs	r0, #1
    c81a:	e7f2      	b.n	c802 <LORAWAN_SetAttr+0x2ba>
    c81c:	0026      	movs	r6, r4
    c81e:	880b      	ldrh	r3, [r1, #0]
    c820:	369c      	adds	r6, #156	; 0x9c
    c822:	210c      	movs	r1, #12
    c824:	2000      	movs	r0, #0
    c826:	4d0c      	ldr	r5, [pc, #48]	; (c858 <LORAWAN_SetAttr+0x310>)
    c828:	8033      	strh	r3, [r6, #0]
    c82a:	47a8      	blx	r5
    c82c:	22fa      	movs	r2, #250	; 0xfa
    c82e:	8833      	ldrh	r3, [r6, #0]
    c830:	0092      	lsls	r2, r2, #2
    c832:	189b      	adds	r3, r3, r2
    c834:	349e      	adds	r4, #158	; 0x9e
    c836:	8023      	strh	r3, [r4, #0]
    c838:	210d      	movs	r1, #13
    c83a:	2000      	movs	r0, #0
    c83c:	e729      	b.n	c692 <LORAWAN_SetAttr+0x14a>
    c83e:	880b      	ldrh	r3, [r1, #0]
    c840:	3464      	adds	r4, #100	; 0x64
    c842:	8023      	strh	r3, [r4, #0]
    c844:	e708      	b.n	c658 <LORAWAN_SetAttr+0x110>
    c846:	880b      	ldrh	r3, [r1, #0]
    c848:	34a0      	adds	r4, #160	; 0xa0
    c84a:	8023      	strh	r3, [r4, #0]
    c84c:	210e      	movs	r1, #14
    c84e:	e7ce      	b.n	c7ee <LORAWAN_SetAttr+0x2a6>
    c850:	20000f10 	.word	0x20000f10
    c854:	000112d5 	.word	0x000112d5
    c858:	00001e65 	.word	0x00001e65
    c85c:	0000d599 	.word	0x0000d599
    c860:	00006d95 	.word	0x00006d95
    c864:	880b      	ldrh	r3, [r1, #0]
    c866:	34a2      	adds	r4, #162	; 0xa2
    c868:	8023      	strh	r3, [r4, #0]
    c86a:	210f      	movs	r1, #15
    c86c:	e7bf      	b.n	c7ee <LORAWAN_SetAttr+0x2a6>
    c86e:	880b      	ldrh	r3, [r1, #0]
    c870:	34a4      	adds	r4, #164	; 0xa4
    c872:	8023      	strh	r3, [r4, #0]
    c874:	2110      	movs	r1, #16
    c876:	e7ba      	b.n	c7ee <LORAWAN_SetAttr+0x2a6>
    c878:	780b      	ldrb	r3, [r1, #0]
    c87a:	34a8      	adds	r4, #168	; 0xa8
    c87c:	7023      	strb	r3, [r4, #0]
    c87e:	2112      	movs	r1, #18
    c880:	e7b5      	b.n	c7ee <LORAWAN_SetAttr+0x2a6>
    c882:	780b      	ldrb	r3, [r1, #0]
    c884:	34a9      	adds	r4, #169	; 0xa9
    c886:	7023      	strb	r3, [r4, #0]
    c888:	2113      	movs	r1, #19
    c88a:	e7b0      	b.n	c7ee <LORAWAN_SetAttr+0x2a6>
    c88c:	880b      	ldrh	r3, [r1, #0]
    c88e:	34a6      	adds	r4, #166	; 0xa6
    c890:	8023      	strh	r3, [r4, #0]
    c892:	2111      	movs	r1, #17
    c894:	e7ab      	b.n	c7ee <LORAWAN_SetAttr+0x2a6>
    c896:	780b      	ldrb	r3, [r1, #0]
    c898:	34ae      	adds	r4, #174	; 0xae
    c89a:	7023      	strb	r3, [r4, #0]
    c89c:	2115      	movs	r1, #21
    c89e:	e7a6      	b.n	c7ee <LORAWAN_SetAttr+0x2a6>
    c8a0:	780b      	ldrb	r3, [r1, #0]
    c8a2:	34ad      	adds	r4, #173	; 0xad
    c8a4:	7023      	strb	r3, [r4, #0]
    c8a6:	e6d7      	b.n	c658 <LORAWAN_SetAttr+0x110>
    c8a8:	780b      	ldrb	r3, [r1, #0]
    c8aa:	34b4      	adds	r4, #180	; 0xb4
    c8ac:	e7fa      	b.n	c8a4 <LORAWAN_SetAttr+0x35c>
    c8ae:	2001      	movs	r0, #1
    c8b0:	780b      	ldrb	r3, [r1, #0]
    c8b2:	2110      	movs	r1, #16
    c8b4:	3450      	adds	r4, #80	; 0x50
    c8b6:	4003      	ands	r3, r0
    c8b8:	011a      	lsls	r2, r3, #4
    c8ba:	7823      	ldrb	r3, [r4, #0]
    c8bc:	438b      	bics	r3, r1
    c8be:	4313      	orrs	r3, r2
    c8c0:	7023      	strb	r3, [r4, #0]
    c8c2:	3905      	subs	r1, #5
    c8c4:	e6b3      	b.n	c62e <LORAWAN_SetAttr+0xe6>
    c8c6:	7818      	ldrb	r0, [r3, #0]
    c8c8:	7909      	ldrb	r1, [r1, #4]
    c8ca:	4b38      	ldr	r3, [pc, #224]	; (c9ac <LORAWAN_SetAttr+0x464>)
    c8cc:	4798      	blx	r3
    c8ce:	0005      	movs	r5, r0
    c8d0:	e692      	b.n	c5f8 <LORAWAN_SetAttr+0xb0>
    c8d2:	7818      	ldrb	r0, [r3, #0]
    c8d4:	7909      	ldrb	r1, [r1, #4]
    c8d6:	4b36      	ldr	r3, [pc, #216]	; (c9b0 <LORAWAN_SetAttr+0x468>)
    c8d8:	e7f8      	b.n	c8cc <LORAWAN_SetAttr+0x384>
    c8da:	7808      	ldrb	r0, [r1, #0]
    c8dc:	4b35      	ldr	r3, [pc, #212]	; (c9b4 <LORAWAN_SetAttr+0x46c>)
    c8de:	6849      	ldr	r1, [r1, #4]
    c8e0:	4798      	blx	r3
    c8e2:	e7f4      	b.n	c8ce <LORAWAN_SetAttr+0x386>
    c8e4:	7909      	ldrb	r1, [r1, #4]
    c8e6:	6818      	ldr	r0, [r3, #0]
    c8e8:	4b33      	ldr	r3, [pc, #204]	; (c9b8 <LORAWAN_SetAttr+0x470>)
    c8ea:	4798      	blx	r3
    c8ec:	e7ef      	b.n	c8ce <LORAWAN_SetAttr+0x386>
    c8ee:	7808      	ldrb	r0, [r1, #0]
    c8f0:	4b32      	ldr	r3, [pc, #200]	; (c9bc <LORAWAN_SetAttr+0x474>)
    c8f2:	4798      	blx	r3
    c8f4:	e7eb      	b.n	c8ce <LORAWAN_SetAttr+0x386>
    c8f6:	8808      	ldrh	r0, [r1, #0]
    c8f8:	4b31      	ldr	r3, [pc, #196]	; (c9c0 <LORAWAN_SetAttr+0x478>)
    c8fa:	4798      	blx	r3
    c8fc:	e6ac      	b.n	c658 <LORAWAN_SetAttr+0x110>
    c8fe:	4a31      	ldr	r2, [pc, #196]	; (c9c4 <LORAWAN_SetAttr+0x47c>)
    c900:	6011      	str	r1, [r2, #0]
    c902:	e68c      	b.n	c61e <LORAWAN_SetAttr+0xd6>
    c904:	7808      	ldrb	r0, [r1, #0]
    c906:	4b30      	ldr	r3, [pc, #192]	; (c9c8 <LORAWAN_SetAttr+0x480>)
    c908:	4798      	blx	r3
    c90a:	e7e0      	b.n	c8ce <LORAWAN_SetAttr+0x386>
    c90c:	0020      	movs	r0, r4
    c90e:	300d      	adds	r0, #13
    c910:	4b2e      	ldr	r3, [pc, #184]	; (c9cc <LORAWAN_SetAttr+0x484>)
    c912:	2210      	movs	r2, #16
    c914:	30ff      	adds	r0, #255	; 0xff
    c916:	4798      	blx	r3
    c918:	2107      	movs	r1, #7
    c91a:	2000      	movs	r0, #0
    c91c:	4d2c      	ldr	r5, [pc, #176]	; (c9d0 <LORAWAN_SetAttr+0x488>)
    c91e:	47a8      	blx	r5
    c920:	2001      	movs	r0, #1
    c922:	34aa      	adds	r4, #170	; 0xaa
    c924:	7863      	ldrb	r3, [r4, #1]
    c926:	2109      	movs	r1, #9
    c928:	4303      	orrs	r3, r0
    c92a:	7063      	strb	r3, [r4, #1]
    c92c:	e6b1      	b.n	c692 <LORAWAN_SetAttr+0x14a>
    c92e:	0020      	movs	r0, r4
    c930:	2210      	movs	r2, #16
    c932:	4b26      	ldr	r3, [pc, #152]	; (c9cc <LORAWAN_SetAttr+0x484>)
    c934:	30fc      	adds	r0, #252	; 0xfc
    c936:	4798      	blx	r3
    c938:	2108      	movs	r1, #8
    c93a:	2000      	movs	r0, #0
    c93c:	4d24      	ldr	r5, [pc, #144]	; (c9d0 <LORAWAN_SetAttr+0x488>)
    c93e:	47a8      	blx	r5
    c940:	2380      	movs	r3, #128	; 0x80
    c942:	34aa      	adds	r4, #170	; 0xaa
    c944:	7822      	ldrb	r2, [r4, #0]
    c946:	425b      	negs	r3, r3
    c948:	4313      	orrs	r3, r2
    c94a:	7023      	strb	r3, [r4, #0]
    c94c:	2109      	movs	r1, #9
    c94e:	2001      	movs	r0, #1
    c950:	e69f      	b.n	c692 <LORAWAN_SetAttr+0x14a>
    c952:	0023      	movs	r3, r4
    c954:	3350      	adds	r3, #80	; 0x50
    c956:	781b      	ldrb	r3, [r3, #0]
    c958:	6809      	ldr	r1, [r1, #0]
    c95a:	07db      	lsls	r3, r3, #31
    c95c:	d508      	bpl.n	c970 <LORAWAN_SetAttr+0x428>
    c95e:	6823      	ldr	r3, [r4, #0]
    c960:	250a      	movs	r5, #10
    c962:	0a1a      	lsrs	r2, r3, #8
    c964:	7923      	ldrb	r3, [r4, #4]
    c966:	061b      	lsls	r3, r3, #24
    c968:	4313      	orrs	r3, r2
    c96a:	4299      	cmp	r1, r3
    c96c:	d100      	bne.n	c970 <LORAWAN_SetAttr+0x428>
    c96e:	e643      	b.n	c5f8 <LORAWAN_SetAttr+0xb0>
    c970:	0023      	movs	r3, r4
    c972:	33f8      	adds	r3, #248	; 0xf8
    c974:	6019      	str	r1, [r3, #0]
    c976:	2000      	movs	r0, #0
    c978:	2106      	movs	r1, #6
    c97a:	4d15      	ldr	r5, [pc, #84]	; (c9d0 <LORAWAN_SetAttr+0x488>)
    c97c:	34aa      	adds	r4, #170	; 0xaa
    c97e:	47a8      	blx	r5
    c980:	7822      	ldrb	r2, [r4, #0]
    c982:	2340      	movs	r3, #64	; 0x40
    c984:	e7e0      	b.n	c948 <LORAWAN_SetAttr+0x400>
    c986:	7809      	ldrb	r1, [r1, #0]
    c988:	2900      	cmp	r1, #0
    c98a:	d009      	beq.n	c9a0 <LORAWAN_SetAttr+0x458>
    c98c:	2202      	movs	r2, #2
    c98e:	34e4      	adds	r4, #228	; 0xe4
    c990:	7823      	ldrb	r3, [r4, #0]
    c992:	2508      	movs	r5, #8
    c994:	4213      	tst	r3, r2
    c996:	d100      	bne.n	c99a <LORAWAN_SetAttr+0x452>
    c998:	e62e      	b.n	c5f8 <LORAWAN_SetAttr+0xb0>
    c99a:	4393      	bics	r3, r2
    c99c:	7023      	strb	r3, [r4, #0]
    c99e:	e62b      	b.n	c5f8 <LORAWAN_SetAttr+0xb0>
    c9a0:	4a0c      	ldr	r2, [pc, #48]	; (c9d4 <LORAWAN_SetAttr+0x48c>)
    c9a2:	4b0d      	ldr	r3, [pc, #52]	; (c9d8 <LORAWAN_SetAttr+0x490>)
    c9a4:	200e      	movs	r0, #14
    c9a6:	4798      	blx	r3
    c9a8:	e656      	b.n	c658 <LORAWAN_SetAttr+0x110>
    c9aa:	46c0      	nop			; (mov r8, r8)
    c9ac:	0000bacd 	.word	0x0000bacd
    c9b0:	0000ba5d 	.word	0x0000ba5d
    c9b4:	0000ab6d 	.word	0x0000ab6d
    c9b8:	0000ab31 	.word	0x0000ab31
    c9bc:	0000c4cd 	.word	0x0000c4cd
    c9c0:	00009b59 	.word	0x00009b59
    c9c4:	2000114c 	.word	0x2000114c
    c9c8:	0000d089 	.word	0x0000d089
    c9cc:	000112d5 	.word	0x000112d5
    c9d0:	00001e65 	.word	0x00001e65
    c9d4:	20000ff4 	.word	0x20000ff4
    c9d8:	00006d79 	.word	0x00006d79

0000c9dc <LORAWAN_Reset>:
    c9dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    c9de:	b087      	sub	sp, #28
    c9e0:	ab02      	add	r3, sp, #8
    c9e2:	1ddd      	adds	r5, r3, #7
    c9e4:	23ff      	movs	r3, #255	; 0xff
    c9e6:	4c7e      	ldr	r4, [pc, #504]	; (cbe0 <LORAWAN_Reset+0x204>)
    c9e8:	702b      	strb	r3, [r5, #0]
    c9ea:	0023      	movs	r3, r4
    c9ec:	9001      	str	r0, [sp, #4]
    c9ee:	33c3      	adds	r3, #195	; 0xc3
    c9f0:	781b      	ldrb	r3, [r3, #0]
    c9f2:	2b00      	cmp	r3, #0
    c9f4:	d001      	beq.n	c9fa <LORAWAN_Reset+0x1e>
    c9f6:	4b7b      	ldr	r3, [pc, #492]	; (cbe4 <LORAWAN_Reset+0x208>)
    c9f8:	4798      	blx	r3
    c9fa:	002a      	movs	r2, r5
    c9fc:	4b7a      	ldr	r3, [pc, #488]	; (cbe8 <LORAWAN_Reset+0x20c>)
    c9fe:	2100      	movs	r1, #0
    ca00:	2023      	movs	r0, #35	; 0x23
    ca02:	4798      	blx	r3
    ca04:	782b      	ldrb	r3, [r5, #0]
    ca06:	9a01      	ldr	r2, [sp, #4]
    ca08:	4293      	cmp	r3, r2
    ca0a:	d001      	beq.n	ca10 <LORAWAN_Reset+0x34>
    ca0c:	4b77      	ldr	r3, [pc, #476]	; (cbec <LORAWAN_Reset+0x210>)
    ca0e:	4798      	blx	r3
    ca10:	0021      	movs	r1, r4
    ca12:	2334      	movs	r3, #52	; 0x34
    ca14:	31cb      	adds	r1, #203	; 0xcb
    ca16:	700b      	strb	r3, [r1, #0]
    ca18:	2000      	movs	r0, #0
    ca1a:	4b75      	ldr	r3, [pc, #468]	; (cbf0 <LORAWAN_Reset+0x214>)
    ca1c:	4798      	blx	r3
    ca1e:	0023      	movs	r3, r4
    ca20:	2201      	movs	r2, #1
    ca22:	33c8      	adds	r3, #200	; 0xc8
    ca24:	701a      	strb	r2, [r3, #0]
    ca26:	0023      	movs	r3, r4
    ca28:	2205      	movs	r2, #5
    ca2a:	33c9      	adds	r3, #201	; 0xc9
    ca2c:	701a      	strb	r2, [r3, #0]
    ca2e:	0023      	movs	r3, r4
    ca30:	32fa      	adds	r2, #250	; 0xfa
    ca32:	33b1      	adds	r3, #177	; 0xb1
    ca34:	701a      	strb	r2, [r3, #0]
    ca36:	0023      	movs	r3, r4
    ca38:	2500      	movs	r5, #0
    ca3a:	33b2      	adds	r3, #178	; 0xb2
    ca3c:	701d      	strb	r5, [r3, #0]
    ca3e:	0023      	movs	r3, r4
    ca40:	339a      	adds	r3, #154	; 0x9a
    ca42:	801d      	strh	r5, [r3, #0]
    ca44:	0023      	movs	r3, r4
    ca46:	3398      	adds	r3, #152	; 0x98
    ca48:	801d      	strh	r5, [r3, #0]
    ca4a:	0023      	movs	r3, r4
    ca4c:	3afe      	subs	r2, #254	; 0xfe
    ca4e:	3364      	adds	r3, #100	; 0x64
    ca50:	801a      	strh	r2, [r3, #0]
    ca52:	0023      	movs	r3, r4
    ca54:	3396      	adds	r3, #150	; 0x96
    ca56:	801d      	strh	r5, [r3, #0]
    ca58:	0023      	movs	r3, r4
    ca5a:	33c1      	adds	r3, #193	; 0xc1
    ca5c:	701d      	strb	r5, [r3, #0]
    ca5e:	0023      	movs	r3, r4
    ca60:	33c2      	adds	r3, #194	; 0xc2
    ca62:	701d      	strb	r5, [r3, #0]
    ca64:	0023      	movs	r3, r4
    ca66:	2206      	movs	r2, #6
    ca68:	33cc      	adds	r3, #204	; 0xcc
    ca6a:	601a      	str	r2, [r3, #0]
    ca6c:	0023      	movs	r3, r4
    ca6e:	33d0      	adds	r3, #208	; 0xd0
    ca70:	601d      	str	r5, [r3, #0]
    ca72:	0023      	movs	r3, r4
    ca74:	33e6      	adds	r3, #230	; 0xe6
    ca76:	801d      	strh	r5, [r3, #0]
    ca78:	0023      	movs	r3, r4
    ca7a:	33e8      	adds	r3, #232	; 0xe8
    ca7c:	801d      	strh	r5, [r3, #0]
    ca7e:	320a      	adds	r2, #10
    ca80:	0029      	movs	r1, r5
    ca82:	4b5c      	ldr	r3, [pc, #368]	; (cbf4 <LORAWAN_Reset+0x218>)
    ca84:	485c      	ldr	r0, [pc, #368]	; (cbf8 <LORAWAN_Reset+0x21c>)
    ca86:	65a5      	str	r5, [r4, #88]	; 0x58
    ca88:	6565      	str	r5, [r4, #84]	; 0x54
    ca8a:	4798      	blx	r3
    ca8c:	2390      	movs	r3, #144	; 0x90
    ca8e:	2201      	movs	r2, #1
    ca90:	2607      	movs	r6, #7
    ca92:	005b      	lsls	r3, r3, #1
    ca94:	54e2      	strb	r2, [r4, r3]
    ca96:	0029      	movs	r1, r5
    ca98:	0032      	movs	r2, r6
    ca9a:	4b56      	ldr	r3, [pc, #344]	; (cbf4 <LORAWAN_Reset+0x218>)
    ca9c:	4857      	ldr	r0, [pc, #348]	; (cbfc <LORAWAN_Reset+0x220>)
    ca9e:	4798      	blx	r3
    caa0:	0023      	movs	r3, r4
    caa2:	3360      	adds	r3, #96	; 0x60
    caa4:	801d      	strh	r5, [r3, #0]
    caa6:	0023      	movs	r3, r4
    caa8:	33ae      	adds	r3, #174	; 0xae
    caaa:	701e      	strb	r6, [r3, #0]
    caac:	0023      	movs	r3, r4
    caae:	33ad      	adds	r3, #173	; 0xad
    cab0:	701d      	strb	r5, [r3, #0]
    cab2:	0023      	movs	r3, r4
    cab4:	33b0      	adds	r3, #176	; 0xb0
    cab6:	701d      	strb	r5, [r3, #0]
    cab8:	0023      	movs	r3, r4
    caba:	33af      	adds	r3, #175	; 0xaf
    cabc:	701d      	strb	r5, [r3, #0]
    cabe:	9801      	ldr	r0, [sp, #4]
    cac0:	4b4f      	ldr	r3, [pc, #316]	; (cc00 <LORAWAN_Reset+0x224>)
    cac2:	6525      	str	r5, [r4, #80]	; 0x50
    cac4:	4798      	blx	r3
    cac6:	0007      	movs	r7, r0
    cac8:	2808      	cmp	r0, #8
    caca:	d000      	beq.n	cace <LORAWAN_Reset+0xf2>
    cacc:	e085      	b.n	cbda <LORAWAN_Reset+0x1fe>
    cace:	4e4d      	ldr	r6, [pc, #308]	; (cc04 <LORAWAN_Reset+0x228>)
    cad0:	4a4d      	ldr	r2, [pc, #308]	; (cc08 <LORAWAN_Reset+0x22c>)
    cad2:	0029      	movs	r1, r5
    cad4:	47b0      	blx	r6
    cad6:	4a4d      	ldr	r2, [pc, #308]	; (cc0c <LORAWAN_Reset+0x230>)
    cad8:	0029      	movs	r1, r5
    cada:	200e      	movs	r0, #14
    cadc:	47b0      	blx	r6
    cade:	0023      	movs	r3, r4
    cae0:	4a4b      	ldr	r2, [pc, #300]	; (cc10 <LORAWAN_Reset+0x234>)
    cae2:	33b4      	adds	r3, #180	; 0xb4
    cae4:	0029      	movs	r1, r5
    cae6:	2006      	movs	r0, #6
    cae8:	701d      	strb	r5, [r3, #0]
    caea:	47b0      	blx	r6
    caec:	4b49      	ldr	r3, [pc, #292]	; (cc14 <LORAWAN_Reset+0x238>)
    caee:	4798      	blx	r3
    caf0:	466b      	mov	r3, sp
    caf2:	791b      	ldrb	r3, [r3, #4]
    caf4:	34ca      	adds	r4, #202	; 0xca
    caf6:	7023      	strb	r3, [r4, #0]
    caf8:	0029      	movs	r1, r5
    cafa:	4b47      	ldr	r3, [pc, #284]	; (cc18 <LORAWAN_Reset+0x23c>)
    cafc:	0028      	movs	r0, r5
    cafe:	4798      	blx	r3
    cb00:	2210      	movs	r2, #16
    cb02:	4b42      	ldr	r3, [pc, #264]	; (cc0c <LORAWAN_Reset+0x230>)
    cb04:	781b      	ldrb	r3, [r3, #0]
    cb06:	4213      	tst	r3, r2
    cb08:	d006      	beq.n	cb18 <LORAWAN_Reset+0x13c>
    cb0a:	ab02      	add	r3, sp, #8
    cb0c:	1d99      	adds	r1, r3, #6
    cb0e:	2301      	movs	r3, #1
    cb10:	0038      	movs	r0, r7
    cb12:	700b      	strb	r3, [r1, #0]
    cb14:	4b36      	ldr	r3, [pc, #216]	; (cbf0 <LORAWAN_Reset+0x214>)
    cb16:	4798      	blx	r3
    cb18:	4b40      	ldr	r3, [pc, #256]	; (cc1c <LORAWAN_Reset+0x240>)
    cb1a:	4941      	ldr	r1, [pc, #260]	; (cc20 <LORAWAN_Reset+0x244>)
    cb1c:	201e      	movs	r0, #30
    cb1e:	4798      	blx	r3
    cb20:	4c2f      	ldr	r4, [pc, #188]	; (cbe0 <LORAWAN_Reset+0x204>)
    cb22:	0023      	movs	r3, r4
    cb24:	33e4      	adds	r3, #228	; 0xe4
    cb26:	781b      	ldrb	r3, [r3, #0]
    cb28:	075b      	lsls	r3, r3, #29
    cb2a:	d507      	bpl.n	cb3c <LORAWAN_Reset+0x160>
    cb2c:	2100      	movs	r1, #0
    cb2e:	aa04      	add	r2, sp, #16
    cb30:	2030      	movs	r0, #48	; 0x30
    cb32:	47b0      	blx	r6
    cb34:	a904      	add	r1, sp, #16
    cb36:	2027      	movs	r0, #39	; 0x27
    cb38:	4b3a      	ldr	r3, [pc, #232]	; (cc24 <LORAWAN_Reset+0x248>)
    cb3a:	4798      	blx	r3
    cb3c:	4a3a      	ldr	r2, [pc, #232]	; (cc28 <LORAWAN_Reset+0x24c>)
    cb3e:	2100      	movs	r1, #0
    cb40:	2009      	movs	r0, #9
    cb42:	47b0      	blx	r6
    cb44:	4a39      	ldr	r2, [pc, #228]	; (cc2c <LORAWAN_Reset+0x250>)
    cb46:	2100      	movs	r1, #0
    cb48:	200a      	movs	r0, #10
    cb4a:	47b0      	blx	r6
    cb4c:	4a38      	ldr	r2, [pc, #224]	; (cc30 <LORAWAN_Reset+0x254>)
    cb4e:	2100      	movs	r1, #0
    cb50:	2034      	movs	r0, #52	; 0x34
    cb52:	47b0      	blx	r6
    cb54:	ad04      	add	r5, sp, #16
    cb56:	4a37      	ldr	r2, [pc, #220]	; (cc34 <LORAWAN_Reset+0x258>)
    cb58:	2100      	movs	r1, #0
    cb5a:	2035      	movs	r0, #53	; 0x35
    cb5c:	47b0      	blx	r6
    cb5e:	002a      	movs	r2, r5
    cb60:	2100      	movs	r1, #0
    cb62:	2014      	movs	r0, #20
    cb64:	47b0      	blx	r6
    cb66:	0023      	movs	r3, r4
    cb68:	782a      	ldrb	r2, [r5, #0]
    cb6a:	33be      	adds	r3, #190	; 0xbe
    cb6c:	701a      	strb	r2, [r3, #0]
    cb6e:	0023      	movs	r3, r4
    cb70:	786a      	ldrb	r2, [r5, #1]
    cb72:	33bf      	adds	r3, #191	; 0xbf
    cb74:	701a      	strb	r2, [r3, #0]
    cb76:	0023      	movs	r3, r4
    cb78:	2500      	movs	r5, #0
    cb7a:	33aa      	adds	r3, #170	; 0xaa
    cb7c:	801d      	strh	r5, [r3, #0]
    cb7e:	2245      	movs	r2, #69	; 0x45
    cb80:	0029      	movs	r1, r5
    cb82:	0020      	movs	r0, r4
    cb84:	4b1b      	ldr	r3, [pc, #108]	; (cbf4 <LORAWAN_Reset+0x218>)
    cb86:	4798      	blx	r3
    cb88:	0023      	movs	r3, r4
    cb8a:	22fa      	movs	r2, #250	; 0xfa
    cb8c:	339c      	adds	r3, #156	; 0x9c
    cb8e:	0092      	lsls	r2, r2, #2
    cb90:	801a      	strh	r2, [r3, #0]
    cb92:	0022      	movs	r2, r4
    cb94:	23fa      	movs	r3, #250	; 0xfa
    cb96:	329e      	adds	r2, #158	; 0x9e
    cb98:	00db      	lsls	r3, r3, #3
    cb9a:	8013      	strh	r3, [r2, #0]
    cb9c:	0022      	movs	r2, r4
    cb9e:	4926      	ldr	r1, [pc, #152]	; (cc38 <LORAWAN_Reset+0x25c>)
    cba0:	32a0      	adds	r2, #160	; 0xa0
    cba2:	8011      	strh	r1, [r2, #0]
    cba4:	0022      	movs	r2, r4
    cba6:	4925      	ldr	r1, [pc, #148]	; (cc3c <LORAWAN_Reset+0x260>)
    cba8:	32a2      	adds	r2, #162	; 0xa2
    cbaa:	8011      	strh	r1, [r2, #0]
    cbac:	0022      	movs	r2, r4
    cbae:	32a6      	adds	r2, #166	; 0xa6
    cbb0:	8013      	strh	r3, [r2, #0]
    cbb2:	0023      	movs	r3, r4
    cbb4:	2220      	movs	r2, #32
    cbb6:	33a9      	adds	r3, #169	; 0xa9
    cbb8:	701a      	strb	r2, [r3, #0]
    cbba:	0023      	movs	r3, r4
    cbbc:	1892      	adds	r2, r2, r2
    cbbe:	33a8      	adds	r3, #168	; 0xa8
    cbc0:	701a      	strb	r2, [r3, #0]
    cbc2:	2380      	movs	r3, #128	; 0x80
    cbc4:	34a4      	adds	r4, #164	; 0xa4
    cbc6:	01db      	lsls	r3, r3, #7
    cbc8:	8023      	strh	r3, [r4, #0]
    cbca:	0028      	movs	r0, r5
    cbcc:	4b1c      	ldr	r3, [pc, #112]	; (cc40 <LORAWAN_Reset+0x264>)
    cbce:	4798      	blx	r3
    cbd0:	4b1c      	ldr	r3, [pc, #112]	; (cc44 <LORAWAN_Reset+0x268>)
    cbd2:	4798      	blx	r3
    cbd4:	0038      	movs	r0, r7
    cbd6:	b007      	add	sp, #28
    cbd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cbda:	270a      	movs	r7, #10
    cbdc:	e7fa      	b.n	cbd4 <LORAWAN_Reset+0x1f8>
    cbde:	46c0      	nop			; (mov r8, r8)
    cbe0:	20000f10 	.word	0x20000f10
    cbe4:	0000935d 	.word	0x0000935d
    cbe8:	0000aba5 	.word	0x0000aba5
    cbec:	00006ee9 	.word	0x00006ee9
    cbf0:	0000d599 	.word	0x0000d599
    cbf4:	000112e7 	.word	0x000112e7
    cbf8:	20000fe4 	.word	0x20000fe4
    cbfc:	20001033 	.word	0x20001033
    cc00:	00006e09 	.word	0x00006e09
    cc04:	00006d79 	.word	0x00006d79
    cc08:	20000f59 	.word	0x20000f59
    cc0c:	20000ff4 	.word	0x20000ff4
    cc10:	20000fd0 	.word	0x20000fd0
    cc14:	0000d7b5 	.word	0x0000d7b5
    cc18:	00001e65 	.word	0x00001e65
    cc1c:	0000d4ad 	.word	0x0000d4ad
    cc20:	2000103b 	.word	0x2000103b
    cc24:	0000c549 	.word	0x0000c549
    cc28:	20000f5e 	.word	0x20000f5e
    cc2c:	20000f5a 	.word	0x20000f5a
    cc30:	20000fc5 	.word	0x20000fc5
    cc34:	20000fc3 	.word	0x20000fc3
    cc38:	00001388 	.word	0x00001388
    cc3c:	00001770 	.word	0x00001770
    cc40:	00009b59 	.word	0x00009b59
    cc44:	0000d01d 	.word	0x0000d01d

0000cc48 <AESEncodeLoRa>:
    cc48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    cc4a:	0004      	movs	r4, r0
    cc4c:	2210      	movs	r2, #16
    cc4e:	4668      	mov	r0, sp
    cc50:	4b03      	ldr	r3, [pc, #12]	; (cc60 <AESEncodeLoRa+0x18>)
    cc52:	4798      	blx	r3
    cc54:	4669      	mov	r1, sp
    cc56:	0020      	movs	r0, r4
    cc58:	4b02      	ldr	r3, [pc, #8]	; (cc64 <AESEncodeLoRa+0x1c>)
    cc5a:	4798      	blx	r3
    cc5c:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    cc5e:	46c0      	nop			; (mov r8, r8)
    cc60:	000112d5 	.word	0x000112d5
    cc64:	000024a5 	.word	0x000024a5

0000cc68 <FillSubKey.constprop.0>:
    cc68:	b530      	push	{r4, r5, lr}
    cc6a:	2310      	movs	r3, #16
    cc6c:	2400      	movs	r4, #0
    cc6e:	3b01      	subs	r3, #1
    cc70:	b2db      	uxtb	r3, r3
    cc72:	2bff      	cmp	r3, #255	; 0xff
    cc74:	d100      	bne.n	cc78 <FillSubKey.constprop.0+0x10>
    cc76:	bd30      	pop	{r4, r5, pc}
    cc78:	18c5      	adds	r5, r0, r3
    cc7a:	782a      	ldrb	r2, [r5, #0]
    cc7c:	0052      	lsls	r2, r2, #1
    cc7e:	4322      	orrs	r2, r4
    cc80:	54ca      	strb	r2, [r1, r3]
    cc82:	782c      	ldrb	r4, [r5, #0]
    cc84:	09e4      	lsrs	r4, r4, #7
    cc86:	e7f2      	b.n	cc6e <FillSubKey.constprop.0+0x6>

0000cc88 <AESCmac>:
    cc88:	b5f0      	push	{r4, r5, r6, r7, lr}
    cc8a:	b09d      	sub	sp, #116	; 0x74
    cc8c:	ad18      	add	r5, sp, #96	; 0x60
    cc8e:	4c59      	ldr	r4, [pc, #356]	; (cdf4 <AESCmac+0x16c>)
    cc90:	9001      	str	r0, [sp, #4]
    cc92:	9103      	str	r1, [sp, #12]
    cc94:	9202      	str	r2, [sp, #8]
    cc96:	2100      	movs	r1, #0
    cc98:	2210      	movs	r2, #16
    cc9a:	0028      	movs	r0, r5
    cc9c:	001f      	movs	r7, r3
    cc9e:	47a0      	blx	r4
    cca0:	2387      	movs	r3, #135	; 0x87
    cca2:	ae14      	add	r6, sp, #80	; 0x50
    cca4:	2210      	movs	r2, #16
    cca6:	2100      	movs	r1, #0
    cca8:	0030      	movs	r0, r6
    ccaa:	73eb      	strb	r3, [r5, #15]
    ccac:	47a0      	blx	r4
    ccae:	9901      	ldr	r1, [sp, #4]
    ccb0:	0030      	movs	r0, r6
    ccb2:	4b51      	ldr	r3, [pc, #324]	; (cdf8 <AESCmac+0x170>)
    ccb4:	4798      	blx	r3
    ccb6:	7832      	ldrb	r2, [r6, #0]
    ccb8:	ac04      	add	r4, sp, #16
    ccba:	4b50      	ldr	r3, [pc, #320]	; (cdfc <AESCmac+0x174>)
    ccbc:	0021      	movs	r1, r4
    ccbe:	0030      	movs	r0, r6
    ccc0:	2a7f      	cmp	r2, #127	; 0x7f
    ccc2:	d83e      	bhi.n	cd42 <AESCmac+0xba>
    ccc4:	4798      	blx	r3
    ccc6:	ab04      	add	r3, sp, #16
    ccc8:	781a      	ldrb	r2, [r3, #0]
    ccca:	ac08      	add	r4, sp, #32
    cccc:	4b4b      	ldr	r3, [pc, #300]	; (cdfc <AESCmac+0x174>)
    ccce:	0021      	movs	r1, r4
    ccd0:	a804      	add	r0, sp, #16
    ccd2:	2a7f      	cmp	r2, #127	; 0x7f
    ccd4:	d83f      	bhi.n	cd56 <AESCmac+0xce>
    ccd6:	4798      	blx	r3
    ccd8:	0039      	movs	r1, r7
    ccda:	310f      	adds	r1, #15
    ccdc:	110b      	asrs	r3, r1, #4
    ccde:	d04d      	beq.n	cd7c <AESCmac+0xf4>
    cce0:	b2db      	uxtb	r3, r3
    cce2:	9300      	str	r3, [sp, #0]
    cce4:	073b      	lsls	r3, r7, #28
    cce6:	d14b      	bne.n	cd80 <AESCmac+0xf8>
    cce8:	9b00      	ldr	r3, [sp, #0]
    ccea:	20ff      	movs	r0, #255	; 0xff
    ccec:	1e5a      	subs	r2, r3, #1
    ccee:	0112      	lsls	r2, r2, #4
    ccf0:	b2d2      	uxtb	r2, r2
    ccf2:	0013      	movs	r3, r2
    ccf4:	0100      	lsls	r0, r0, #4
    ccf6:	4001      	ands	r1, r0
    ccf8:	ad14      	add	r5, sp, #80	; 0x50
    ccfa:	1a98      	subs	r0, r3, r2
    ccfc:	b2c0      	uxtb	r0, r0
    ccfe:	428b      	cmp	r3, r1
    cd00:	db33      	blt.n	cd6a <AESCmac+0xe2>
    cd02:	2210      	movs	r2, #16
    cd04:	2100      	movs	r1, #0
    cd06:	a80c      	add	r0, sp, #48	; 0x30
    cd08:	4b3a      	ldr	r3, [pc, #232]	; (cdf4 <AESCmac+0x16c>)
    cd0a:	4798      	blx	r3
    cd0c:	2400      	movs	r4, #0
    cd0e:	9b00      	ldr	r3, [sp, #0]
    cd10:	3b01      	subs	r3, #1
    cd12:	429c      	cmp	r4, r3
    cd14:	db57      	blt.n	cdc6 <AESCmac+0x13e>
    cd16:	2400      	movs	r4, #0
    cd18:	ad10      	add	r5, sp, #64	; 0x40
    cd1a:	a80c      	add	r0, sp, #48	; 0x30
    cd1c:	a914      	add	r1, sp, #80	; 0x50
    cd1e:	5c23      	ldrb	r3, [r4, r0]
    cd20:	5c62      	ldrb	r2, [r4, r1]
    cd22:	4053      	eors	r3, r2
    cd24:	5563      	strb	r3, [r4, r5]
    cd26:	3401      	adds	r4, #1
    cd28:	2c10      	cmp	r4, #16
    cd2a:	d1f8      	bne.n	cd1e <AESCmac+0x96>
    cd2c:	9901      	ldr	r1, [sp, #4]
    cd2e:	0028      	movs	r0, r5
    cd30:	4b31      	ldr	r3, [pc, #196]	; (cdf8 <AESCmac+0x170>)
    cd32:	4798      	blx	r3
    cd34:	0022      	movs	r2, r4
    cd36:	0029      	movs	r1, r5
    cd38:	9803      	ldr	r0, [sp, #12]
    cd3a:	4b31      	ldr	r3, [pc, #196]	; (ce00 <AESCmac+0x178>)
    cd3c:	4798      	blx	r3
    cd3e:	b01d      	add	sp, #116	; 0x74
    cd40:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cd42:	4798      	blx	r3
    cd44:	2300      	movs	r3, #0
    cd46:	5d1a      	ldrb	r2, [r3, r4]
    cd48:	5ce9      	ldrb	r1, [r5, r3]
    cd4a:	404a      	eors	r2, r1
    cd4c:	551a      	strb	r2, [r3, r4]
    cd4e:	3301      	adds	r3, #1
    cd50:	2b10      	cmp	r3, #16
    cd52:	d1f8      	bne.n	cd46 <AESCmac+0xbe>
    cd54:	e7b7      	b.n	ccc6 <AESCmac+0x3e>
    cd56:	4798      	blx	r3
    cd58:	2300      	movs	r3, #0
    cd5a:	5d1a      	ldrb	r2, [r3, r4]
    cd5c:	5ce9      	ldrb	r1, [r5, r3]
    cd5e:	404a      	eors	r2, r1
    cd60:	551a      	strb	r2, [r3, r4]
    cd62:	3301      	adds	r3, #1
    cd64:	2b10      	cmp	r3, #16
    cd66:	d1f8      	bne.n	cd5a <AESCmac+0xd2>
    cd68:	e7b6      	b.n	ccd8 <AESCmac+0x50>
    cd6a:	9c02      	ldr	r4, [sp, #8]
    cd6c:	ae04      	add	r6, sp, #16
    cd6e:	5ce4      	ldrb	r4, [r4, r3]
    cd70:	5c36      	ldrb	r6, [r6, r0]
    cd72:	3301      	adds	r3, #1
    cd74:	4074      	eors	r4, r6
    cd76:	542c      	strb	r4, [r5, r0]
    cd78:	b2db      	uxtb	r3, r3
    cd7a:	e7be      	b.n	ccfa <AESCmac+0x72>
    cd7c:	2301      	movs	r3, #1
    cd7e:	9300      	str	r3, [sp, #0]
    cd80:	2300      	movs	r3, #0
    cd82:	220f      	movs	r2, #15
    cd84:	003e      	movs	r6, r7
    cd86:	001c      	movs	r4, r3
    cd88:	2080      	movs	r0, #128	; 0x80
    cd8a:	4396      	bics	r6, r2
    cd8c:	4017      	ands	r7, r2
    cd8e:	aa18      	add	r2, sp, #96	; 0x60
    cd90:	b2d9      	uxtb	r1, r3
    cd92:	428f      	cmp	r7, r1
    cd94:	d911      	bls.n	cdba <AESCmac+0x132>
    cd96:	9902      	ldr	r1, [sp, #8]
    cd98:	1989      	adds	r1, r1, r6
    cd9a:	5cc9      	ldrb	r1, [r1, r3]
    cd9c:	54d1      	strb	r1, [r2, r3]
    cd9e:	3301      	adds	r3, #1
    cda0:	2b10      	cmp	r3, #16
    cda2:	d1f5      	bne.n	cd90 <AESCmac+0x108>
    cda4:	2300      	movs	r3, #0
    cda6:	a914      	add	r1, sp, #80	; 0x50
    cda8:	a808      	add	r0, sp, #32
    cdaa:	5cea      	ldrb	r2, [r5, r3]
    cdac:	5c1c      	ldrb	r4, [r3, r0]
    cdae:	4062      	eors	r2, r4
    cdb0:	545a      	strb	r2, [r3, r1]
    cdb2:	3301      	adds	r3, #1
    cdb4:	2b10      	cmp	r3, #16
    cdb6:	d1f8      	bne.n	cdaa <AESCmac+0x122>
    cdb8:	e7a3      	b.n	cd02 <AESCmac+0x7a>
    cdba:	428f      	cmp	r7, r1
    cdbc:	d101      	bne.n	cdc2 <AESCmac+0x13a>
    cdbe:	54d0      	strb	r0, [r2, r3]
    cdc0:	e7ed      	b.n	cd9e <AESCmac+0x116>
    cdc2:	54d4      	strb	r4, [r2, r3]
    cdc4:	e7eb      	b.n	cd9e <AESCmac+0x116>
    cdc6:	2200      	movs	r2, #0
    cdc8:	9802      	ldr	r0, [sp, #8]
    cdca:	0123      	lsls	r3, r4, #4
    cdcc:	a910      	add	r1, sp, #64	; 0x40
    cdce:	18c0      	adds	r0, r0, r3
    cdd0:	ad0c      	add	r5, sp, #48	; 0x30
    cdd2:	5c83      	ldrb	r3, [r0, r2]
    cdd4:	5d56      	ldrb	r6, [r2, r5]
    cdd6:	4073      	eors	r3, r6
    cdd8:	5453      	strb	r3, [r2, r1]
    cdda:	3201      	adds	r2, #1
    cddc:	2a10      	cmp	r2, #16
    cdde:	d1f8      	bne.n	cdd2 <AESCmac+0x14a>
    cde0:	4b07      	ldr	r3, [pc, #28]	; (ce00 <AESCmac+0x178>)
    cde2:	0028      	movs	r0, r5
    cde4:	4798      	blx	r3
    cde6:	3401      	adds	r4, #1
    cde8:	9901      	ldr	r1, [sp, #4]
    cdea:	0028      	movs	r0, r5
    cdec:	4b02      	ldr	r3, [pc, #8]	; (cdf8 <AESCmac+0x170>)
    cdee:	4798      	blx	r3
    cdf0:	b2e4      	uxtb	r4, r4
    cdf2:	e78c      	b.n	cd0e <AESCmac+0x86>
    cdf4:	000112e7 	.word	0x000112e7
    cdf8:	0000cc49 	.word	0x0000cc49
    cdfc:	0000cc69 	.word	0x0000cc69
    ce00:	000112d5 	.word	0x000112d5

0000ce04 <LorawanClasscUlAckTimerCallback>:
    ce04:	2102      	movs	r1, #2
    ce06:	4b03      	ldr	r3, [pc, #12]	; (ce14 <LorawanClasscUlAckTimerCallback+0x10>)
    ce08:	3360      	adds	r3, #96	; 0x60
    ce0a:	781a      	ldrb	r2, [r3, #0]
    ce0c:	438a      	bics	r2, r1
    ce0e:	701a      	strb	r2, [r3, #0]
    ce10:	4770      	bx	lr
    ce12:	46c0      	nop			; (mov r8, r8)
    ce14:	20000f10 	.word	0x20000f10

0000ce18 <LorawanClasscValidateSend>:
    ce18:	2390      	movs	r3, #144	; 0x90
    ce1a:	b510      	push	{r4, lr}
    ce1c:	4c0a      	ldr	r4, [pc, #40]	; (ce48 <LorawanClasscValidateSend+0x30>)
    ce1e:	005b      	lsls	r3, r3, #1
    ce20:	5ce3      	ldrb	r3, [r4, r3]
    ce22:	2b00      	cmp	r3, #0
    ce24:	d008      	beq.n	ce38 <LorawanClasscValidateSend+0x20>
    ce26:	220e      	movs	r2, #14
    ce28:	3450      	adds	r4, #80	; 0x50
    ce2a:	7823      	ldrb	r3, [r4, #0]
    ce2c:	2008      	movs	r0, #8
    ce2e:	4013      	ands	r3, r2
    ce30:	2b02      	cmp	r3, #2
    ce32:	d100      	bne.n	ce36 <LorawanClasscValidateSend+0x1e>
    ce34:	2011      	movs	r0, #17
    ce36:	bd10      	pop	{r4, pc}
    ce38:	0023      	movs	r3, r4
    ce3a:	33f0      	adds	r3, #240	; 0xf0
    ce3c:	7818      	ldrb	r0, [r3, #0]
    ce3e:	4b03      	ldr	r3, [pc, #12]	; (ce4c <LorawanClasscValidateSend+0x34>)
    ce40:	4798      	blx	r3
    ce42:	2800      	cmp	r0, #0
    ce44:	d1ef      	bne.n	ce26 <LorawanClasscValidateSend+0xe>
    ce46:	e7f5      	b.n	ce34 <LorawanClasscValidateSend+0x1c>
    ce48:	20000f10 	.word	0x20000f10
    ce4c:	00001a89 	.word	0x00001a89

0000ce50 <LorawanClasscPause>:
    ce50:	b537      	push	{r0, r1, r2, r4, r5, lr}
    ce52:	4c16      	ldr	r4, [pc, #88]	; (ceac <LorawanClasscPause+0x5c>)
    ce54:	220e      	movs	r2, #14
    ce56:	0023      	movs	r3, r4
    ce58:	3350      	adds	r3, #80	; 0x50
    ce5a:	781b      	ldrb	r3, [r3, #0]
    ce5c:	4013      	ands	r3, r2
    ce5e:	2b0a      	cmp	r3, #10
    ce60:	d121      	bne.n	cea6 <LorawanClasscPause+0x56>
    ce62:	3317      	adds	r3, #23
    ce64:	33ff      	adds	r3, #255	; 0xff
    ce66:	5ce3      	ldrb	r3, [r4, r3]
    ce68:	2b00      	cmp	r3, #0
    ce6a:	d00c      	beq.n	ce86 <LorawanClasscPause+0x36>
    ce6c:	2301      	movs	r3, #1
    ce6e:	a801      	add	r0, sp, #4
    ce70:	7003      	strb	r3, [r0, #0]
    ce72:	4b0f      	ldr	r3, [pc, #60]	; (ceb0 <LorawanClasscPause+0x60>)
    ce74:	4798      	blx	r3
    ce76:	220e      	movs	r2, #14
    ce78:	2001      	movs	r0, #1
    ce7a:	3450      	adds	r4, #80	; 0x50
    ce7c:	7823      	ldrb	r3, [r4, #0]
    ce7e:	4240      	negs	r0, r0
    ce80:	4393      	bics	r3, r2
    ce82:	7023      	strb	r3, [r4, #0]
    ce84:	e007      	b.n	ce96 <LorawanClasscPause+0x46>
    ce86:	0023      	movs	r3, r4
    ce88:	33bc      	adds	r3, #188	; 0xbc
    ce8a:	7818      	ldrb	r0, [r3, #0]
    ce8c:	4d09      	ldr	r5, [pc, #36]	; (ceb4 <LorawanClasscPause+0x64>)
    ce8e:	47a8      	blx	r5
    ce90:	2800      	cmp	r0, #0
    ce92:	d001      	beq.n	ce98 <LorawanClasscPause+0x48>
    ce94:	2000      	movs	r0, #0
    ce96:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    ce98:	0023      	movs	r3, r4
    ce9a:	33f0      	adds	r3, #240	; 0xf0
    ce9c:	7818      	ldrb	r0, [r3, #0]
    ce9e:	47a8      	blx	r5
    cea0:	2800      	cmp	r0, #0
    cea2:	d0e8      	beq.n	ce76 <LorawanClasscPause+0x26>
    cea4:	e7f6      	b.n	ce94 <LorawanClasscPause+0x44>
    cea6:	2b00      	cmp	r3, #0
    cea8:	d0e5      	beq.n	ce76 <LorawanClasscPause+0x26>
    ceaa:	e7f3      	b.n	ce94 <LorawanClasscPause+0x44>
    ceac:	20000f10 	.word	0x20000f10
    ceb0:	0000e8c9 	.word	0x0000e8c9
    ceb4:	00001a89 	.word	0x00001a89

0000ceb8 <LorawanClasscReceiveWindow1Callback>:
    ceb8:	2301      	movs	r3, #1
    ceba:	b507      	push	{r0, r1, r2, lr}
    cebc:	a801      	add	r0, sp, #4
    cebe:	7003      	strb	r3, [r0, #0]
    cec0:	4b01      	ldr	r3, [pc, #4]	; (cec8 <LorawanClasscReceiveWindow1Callback+0x10>)
    cec2:	4798      	blx	r3
    cec4:	bd07      	pop	{r0, r1, r2, pc}
    cec6:	46c0      	nop			; (mov r8, r8)
    cec8:	0000e8c9 	.word	0x0000e8c9

0000cecc <LorawanClasscRxDone>:
    cecc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    cece:	221f      	movs	r2, #31
    ced0:	7803      	ldrb	r3, [r0, #0]
    ced2:	4c13      	ldr	r4, [pc, #76]	; (cf20 <LorawanClasscRxDone+0x54>)
    ced4:	4393      	bics	r3, r2
    ced6:	2ba0      	cmp	r3, #160	; 0xa0
    ced8:	d10c      	bne.n	cef4 <LorawanClasscRxDone+0x28>
    ceda:	0025      	movs	r5, r4
    cedc:	35f0      	adds	r5, #240	; 0xf0
    cede:	7828      	ldrb	r0, [r5, #0]
    cee0:	4b10      	ldr	r3, [pc, #64]	; (cf24 <LorawanClasscRxDone+0x58>)
    cee2:	4798      	blx	r3
    cee4:	1e02      	subs	r2, r0, #0
    cee6:	d014      	beq.n	cf12 <LorawanClasscRxDone+0x46>
    cee8:	0022      	movs	r2, r4
    ceea:	2102      	movs	r1, #2
    ceec:	3260      	adds	r2, #96	; 0x60
    ceee:	7813      	ldrb	r3, [r2, #0]
    cef0:	438b      	bics	r3, r1
    cef2:	7013      	strb	r3, [r2, #0]
    cef4:	3450      	adds	r4, #80	; 0x50
    cef6:	7823      	ldrb	r3, [r4, #0]
    cef8:	220e      	movs	r2, #14
    cefa:	0019      	movs	r1, r3
    cefc:	4011      	ands	r1, r2
    cefe:	2906      	cmp	r1, #6
    cf00:	d103      	bne.n	cf0a <LorawanClasscRxDone+0x3e>
    cf02:	4393      	bics	r3, r2
    cf04:	3a04      	subs	r2, #4
    cf06:	4313      	orrs	r3, r2
    cf08:	7023      	strb	r3, [r4, #0]
    cf0a:	2000      	movs	r0, #0
    cf0c:	4b06      	ldr	r3, [pc, #24]	; (cf28 <LorawanClasscRxDone+0x5c>)
    cf0e:	4798      	blx	r3
    cf10:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    cf12:	7828      	ldrb	r0, [r5, #0]
    cf14:	4b05      	ldr	r3, [pc, #20]	; (cf2c <LorawanClasscRxDone+0x60>)
    cf16:	9200      	str	r2, [sp, #0]
    cf18:	4905      	ldr	r1, [pc, #20]	; (cf30 <LorawanClasscRxDone+0x64>)
    cf1a:	4d06      	ldr	r5, [pc, #24]	; (cf34 <LorawanClasscRxDone+0x68>)
    cf1c:	47a8      	blx	r5
    cf1e:	e7e9      	b.n	cef4 <LorawanClasscRxDone+0x28>
    cf20:	20000f10 	.word	0x20000f10
    cf24:	00001a89 	.word	0x00001a89
    cf28:	0000b525 	.word	0x0000b525
    cf2c:	0000ce05 	.word	0x0000ce05
    cf30:	001e8480 	.word	0x001e8480
    cf34:	000018f1 	.word	0x000018f1

0000cf38 <LorawanClasscTxDone>:
    cf38:	b537      	push	{r0, r1, r2, r4, r5, lr}
    cf3a:	4c1b      	ldr	r4, [pc, #108]	; (cfa8 <LorawanClasscTxDone+0x70>)
    cf3c:	0023      	movs	r3, r4
    cf3e:	339e      	adds	r3, #158	; 0x9e
    cf40:	881d      	ldrh	r5, [r3, #0]
    cf42:	0023      	movs	r3, r4
    cf44:	3360      	adds	r3, #96	; 0x60
    cf46:	781b      	ldrb	r3, [r3, #0]
    cf48:	07db      	lsls	r3, r3, #31
    cf4a:	d525      	bpl.n	cf98 <LorawanClasscTxDone+0x60>
    cf4c:	0023      	movs	r3, r4
    cf4e:	0022      	movs	r2, r4
    cf50:	33ae      	adds	r3, #174	; 0xae
    cf52:	781b      	ldrb	r3, [r3, #0]
    cf54:	32b0      	adds	r2, #176	; 0xb0
    cf56:	3301      	adds	r3, #1
    cf58:	7812      	ldrb	r2, [r2, #0]
    cf5a:	4293      	cmp	r3, r2
    cf5c:	db07      	blt.n	cf6e <LorawanClasscTxDone+0x36>
    cf5e:	2395      	movs	r3, #149	; 0x95
    cf60:	005b      	lsls	r3, r3, #1
    cf62:	5ce3      	ldrb	r3, [r4, r3]
    cf64:	2b00      	cmp	r3, #0
    cf66:	d002      	beq.n	cf6e <LorawanClasscTxDone+0x36>
    cf68:	23fa      	movs	r3, #250	; 0xfa
    cf6a:	00db      	lsls	r3, r3, #3
    cf6c:	18ed      	adds	r5, r5, r3
    cf6e:	0023      	movs	r3, r4
    cf70:	33f0      	adds	r3, #240	; 0xf0
    cf72:	1945      	adds	r5, r0, r5
    cf74:	7818      	ldrb	r0, [r3, #0]
    cf76:	4b0d      	ldr	r3, [pc, #52]	; (cfac <LorawanClasscTxDone+0x74>)
    cf78:	4798      	blx	r3
    cf7a:	34bc      	adds	r4, #188	; 0xbc
    cf7c:	21fa      	movs	r1, #250	; 0xfa
    cf7e:	7820      	ldrb	r0, [r4, #0]
    cf80:	2400      	movs	r4, #0
    cf82:	0089      	lsls	r1, r1, #2
    cf84:	4369      	muls	r1, r5
    cf86:	0022      	movs	r2, r4
    cf88:	4d09      	ldr	r5, [pc, #36]	; (cfb0 <LorawanClasscTxDone+0x78>)
    cf8a:	9400      	str	r4, [sp, #0]
    cf8c:	4b09      	ldr	r3, [pc, #36]	; (cfb4 <LorawanClasscTxDone+0x7c>)
    cf8e:	47a8      	blx	r5
    cf90:	0020      	movs	r0, r4
    cf92:	4b09      	ldr	r3, [pc, #36]	; (cfb8 <LorawanClasscTxDone+0x80>)
    cf94:	4798      	blx	r3
    cf96:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    cf98:	0023      	movs	r3, r4
    cf9a:	0022      	movs	r2, r4
    cf9c:	33ad      	adds	r3, #173	; 0xad
    cf9e:	781b      	ldrb	r3, [r3, #0]
    cfa0:	32af      	adds	r2, #175	; 0xaf
    cfa2:	3301      	adds	r3, #1
    cfa4:	e7d8      	b.n	cf58 <LorawanClasscTxDone+0x20>
    cfa6:	46c0      	nop			; (mov r8, r8)
    cfa8:	20000f10 	.word	0x20000f10
    cfac:	00001bf5 	.word	0x00001bf5
    cfb0:	000018f1 	.word	0x000018f1
    cfb4:	0000b3f5 	.word	0x0000b3f5
    cfb8:	0000b525 	.word	0x0000b525

0000cfbc <LorawanClasscRxTimeout>:
    cfbc:	b510      	push	{r4, lr}
    cfbe:	4b08      	ldr	r3, [pc, #32]	; (cfe0 <LorawanClasscRxTimeout+0x24>)
    cfc0:	210e      	movs	r1, #14
    cfc2:	3350      	adds	r3, #80	; 0x50
    cfc4:	781a      	ldrb	r2, [r3, #0]
    cfc6:	0010      	movs	r0, r2
    cfc8:	4008      	ands	r0, r1
    cfca:	2806      	cmp	r0, #6
    cfcc:	d106      	bne.n	cfdc <LorawanClasscRxTimeout+0x20>
    cfce:	438a      	bics	r2, r1
    cfd0:	3904      	subs	r1, #4
    cfd2:	430a      	orrs	r2, r1
    cfd4:	701a      	strb	r2, [r3, #0]
    cfd6:	2000      	movs	r0, #0
    cfd8:	4b02      	ldr	r3, [pc, #8]	; (cfe4 <LorawanClasscRxTimeout+0x28>)
    cfda:	4798      	blx	r3
    cfdc:	bd10      	pop	{r4, pc}
    cfde:	46c0      	nop			; (mov r8, r8)
    cfe0:	20000f10 	.word	0x20000f10
    cfe4:	0000b525 	.word	0x0000b525

0000cfe8 <LorawanClasscNotifyAppOnReceive>:
    cfe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cfea:	001f      	movs	r7, r3
    cfec:	4b08      	ldr	r3, [pc, #32]	; (d010 <LorawanClasscNotifyAppOnReceive+0x28>)
    cfee:	0004      	movs	r4, r0
    cff0:	33f0      	adds	r3, #240	; 0xf0
    cff2:	7818      	ldrb	r0, [r3, #0]
    cff4:	4b07      	ldr	r3, [pc, #28]	; (d014 <LorawanClasscNotifyAppOnReceive+0x2c>)
    cff6:	000d      	movs	r5, r1
    cff8:	0016      	movs	r6, r2
    cffa:	4798      	blx	r3
    cffc:	2800      	cmp	r0, #0
    cffe:	d105      	bne.n	d00c <LorawanClasscNotifyAppOnReceive+0x24>
    d000:	0020      	movs	r0, r4
    d002:	003b      	movs	r3, r7
    d004:	0032      	movs	r2, r6
    d006:	0029      	movs	r1, r5
    d008:	4c03      	ldr	r4, [pc, #12]	; (d018 <LorawanClasscNotifyAppOnReceive+0x30>)
    d00a:	47a0      	blx	r4
    d00c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d00e:	46c0      	nop			; (mov r8, r8)
    d010:	20000f10 	.word	0x20000f10
    d014:	00001a89 	.word	0x00001a89
    d018:	0000aa29 	.word	0x0000aa29

0000d01c <LorawanMcastInit>:
    d01c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d01e:	4c15      	ldr	r4, [pc, #84]	; (d074 <LorawanMcastInit+0x58>)
    d020:	2201      	movs	r2, #1
    d022:	0023      	movs	r3, r4
    d024:	33f4      	adds	r3, #244	; 0xf4
    d026:	701a      	strb	r2, [r3, #0]
    d028:	0023      	movs	r3, r4
    d02a:	2201      	movs	r2, #1
    d02c:	2710      	movs	r7, #16
    d02e:	33f8      	adds	r3, #248	; 0xf8
    d030:	4252      	negs	r2, r2
    d032:	601a      	str	r2, [r3, #0]
    d034:	4e10      	ldr	r6, [pc, #64]	; (d078 <LorawanMcastInit+0x5c>)
    d036:	003a      	movs	r2, r7
    d038:	2100      	movs	r1, #0
    d03a:	4810      	ldr	r0, [pc, #64]	; (d07c <LorawanMcastInit+0x60>)
    d03c:	47b0      	blx	r6
    d03e:	4d10      	ldr	r5, [pc, #64]	; (d080 <LorawanMcastInit+0x64>)
    d040:	003a      	movs	r2, r7
    d042:	0028      	movs	r0, r5
    d044:	2100      	movs	r1, #0
    d046:	47b0      	blx	r6
    d048:	0022      	movs	r2, r4
    d04a:	2102      	movs	r1, #2
    d04c:	3250      	adds	r2, #80	; 0x50
    d04e:	7893      	ldrb	r3, [r2, #2]
    d050:	2000      	movs	r0, #0
    d052:	438b      	bics	r3, r1
    d054:	7093      	strb	r3, [r2, #2]
    d056:	223f      	movs	r2, #63	; 0x3f
    d058:	34aa      	adds	r4, #170	; 0xaa
    d05a:	7823      	ldrb	r3, [r4, #0]
    d05c:	3103      	adds	r1, #3
    d05e:	4013      	ands	r3, r2
    d060:	7023      	strb	r3, [r4, #0]
    d062:	7863      	ldrb	r3, [r4, #1]
    d064:	3a3e      	subs	r2, #62	; 0x3e
    d066:	4393      	bics	r3, r2
    d068:	7063      	strb	r3, [r4, #1]
    d06a:	4b06      	ldr	r3, [pc, #24]	; (d084 <LorawanMcastInit+0x68>)
    d06c:	6228      	str	r0, [r5, #32]
    d06e:	4798      	blx	r3
    d070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d072:	46c0      	nop			; (mov r8, r8)
    d074:	20000f10 	.word	0x20000f10
    d078:	000112e7 	.word	0x000112e7
    d07c:	2000101c 	.word	0x2000101c
    d080:	2000100c 	.word	0x2000100c
    d084:	00001e65 	.word	0x00001e65

0000d088 <LorawanMcastEnable>:
    d088:	b510      	push	{r4, lr}
    d08a:	4b12      	ldr	r3, [pc, #72]	; (d0d4 <LorawanMcastEnable+0x4c>)
    d08c:	2800      	cmp	r0, #0
    d08e:	d019      	beq.n	d0c4 <LorawanMcastEnable+0x3c>
    d090:	001a      	movs	r2, r3
    d092:	21e0      	movs	r1, #224	; 0xe0
    d094:	32aa      	adds	r2, #170	; 0xaa
    d096:	8812      	ldrh	r2, [r2, #0]
    d098:	0049      	lsls	r1, r1, #1
    d09a:	400a      	ands	r2, r1
    d09c:	200a      	movs	r0, #10
    d09e:	428a      	cmp	r2, r1
    d0a0:	d10f      	bne.n	d0c2 <LorawanMcastEnable+0x3a>
    d0a2:	001a      	movs	r2, r3
    d0a4:	32c8      	adds	r2, #200	; 0xc8
    d0a6:	7811      	ldrb	r1, [r2, #0]
    d0a8:	2206      	movs	r2, #6
    d0aa:	4211      	tst	r1, r2
    d0ac:	d009      	beq.n	d0c2 <LorawanMcastEnable+0x3a>
    d0ae:	3350      	adds	r3, #80	; 0x50
    d0b0:	7899      	ldrb	r1, [r3, #2]
    d0b2:	3a04      	subs	r2, #4
    d0b4:	430a      	orrs	r2, r1
    d0b6:	210b      	movs	r1, #11
    d0b8:	709a      	strb	r2, [r3, #2]
    d0ba:	3809      	subs	r0, #9
    d0bc:	4b06      	ldr	r3, [pc, #24]	; (d0d8 <LorawanMcastEnable+0x50>)
    d0be:	4798      	blx	r3
    d0c0:	2008      	movs	r0, #8
    d0c2:	bd10      	pop	{r4, pc}
    d0c4:	2102      	movs	r1, #2
    d0c6:	3350      	adds	r3, #80	; 0x50
    d0c8:	789a      	ldrb	r2, [r3, #2]
    d0ca:	2001      	movs	r0, #1
    d0cc:	438a      	bics	r2, r1
    d0ce:	709a      	strb	r2, [r3, #2]
    d0d0:	3109      	adds	r1, #9
    d0d2:	e7f3      	b.n	d0bc <LorawanMcastEnable+0x34>
    d0d4:	20000f10 	.word	0x20000f10
    d0d8:	00001e65 	.word	0x00001e65

0000d0dc <LorawanMcastValidateHdr>:
    d0dc:	0003      	movs	r3, r0
    d0de:	b570      	push	{r4, r5, r6, lr}
    d0e0:	7845      	ldrb	r5, [r0, #1]
    d0e2:	7880      	ldrb	r0, [r0, #2]
    d0e4:	4c11      	ldr	r4, [pc, #68]	; (d12c <LorawanMcastValidateHdr+0x50>)
    d0e6:	0200      	lsls	r0, r0, #8
    d0e8:	4328      	orrs	r0, r5
    d0ea:	78dd      	ldrb	r5, [r3, #3]
    d0ec:	042d      	lsls	r5, r5, #16
    d0ee:	4328      	orrs	r0, r5
    d0f0:	791d      	ldrb	r5, [r3, #4]
    d0f2:	062d      	lsls	r5, r5, #24
    d0f4:	4305      	orrs	r5, r0
    d0f6:	0020      	movs	r0, r4
    d0f8:	30f8      	adds	r0, #248	; 0xf8
    d0fa:	6806      	ldr	r6, [r0, #0]
    d0fc:	200a      	movs	r0, #10
    d0fe:	42b5      	cmp	r5, r6
    d100:	d112      	bne.n	d128 <LorawanMcastValidateHdr+0x4c>
    d102:	0025      	movs	r5, r4
    d104:	35c8      	adds	r5, #200	; 0xc8
    d106:	782e      	ldrb	r6, [r5, #0]
    d108:	2506      	movs	r5, #6
    d10a:	422e      	tst	r6, r5
    d10c:	d00c      	beq.n	d128 <LorawanMcastValidateHdr+0x4c>
    d10e:	3452      	adds	r4, #82	; 0x52
    d110:	7824      	ldrb	r4, [r4, #0]
    d112:	07a4      	lsls	r4, r4, #30
    d114:	d508      	bpl.n	d128 <LorawanMcastValidateHdr+0x4c>
    d116:	2a00      	cmp	r2, #0
    d118:	d006      	beq.n	d128 <LorawanMcastValidateHdr+0x4c>
    d11a:	795a      	ldrb	r2, [r3, #5]
    d11c:	236f      	movs	r3, #111	; 0x6f
    d11e:	421a      	tst	r2, r3
    d120:	d102      	bne.n	d128 <LorawanMcastValidateHdr+0x4c>
    d122:	2903      	cmp	r1, #3
    d124:	d100      	bne.n	d128 <LorawanMcastValidateHdr+0x4c>
    d126:	3802      	subs	r0, #2
    d128:	bd70      	pop	{r4, r5, r6, pc}
    d12a:	46c0      	nop			; (mov r8, r8)
    d12c:	20000f10 	.word	0x20000f10

0000d130 <LorawanMcastProcessPkt>:
    d130:	b5f0      	push	{r4, r5, r6, r7, lr}
    d132:	0016      	movs	r6, r2
    d134:	b087      	sub	sp, #28
    d136:	9005      	str	r0, [sp, #20]
    d138:	79f3      	ldrb	r3, [r6, #7]
    d13a:	7992      	ldrb	r2, [r2, #6]
    d13c:	4c2f      	ldr	r4, [pc, #188]	; (d1fc <LorawanMcastProcessPkt+0xcc>)
    d13e:	021b      	lsls	r3, r3, #8
    d140:	4313      	orrs	r3, r2
    d142:	0022      	movs	r2, r4
    d144:	32fe      	adds	r2, #254	; 0xfe
    d146:	000d      	movs	r5, r1
    d148:	8bd1      	ldrh	r1, [r2, #30]
    d14a:	270a      	movs	r7, #10
    d14c:	4299      	cmp	r1, r3
    d14e:	d83d      	bhi.n	d1cc <LorawanMcastProcessPkt+0x9c>
    d150:	83d3      	strh	r3, [r2, #30]
    d152:	2105      	movs	r1, #5
    d154:	4b2a      	ldr	r3, [pc, #168]	; (d200 <LorawanMcastProcessPkt+0xd0>)
    d156:	2000      	movs	r0, #0
    d158:	4798      	blx	r3
    d15a:	0022      	movs	r2, r4
    d15c:	32f8      	adds	r2, #248	; 0xf8
    d15e:	6812      	ldr	r2, [r2, #0]
    d160:	0023      	movs	r3, r4
    d162:	9203      	str	r2, [sp, #12]
    d164:	4a27      	ldr	r2, [pc, #156]	; (d204 <LorawanMcastProcessPkt+0xd4>)
    d166:	0029      	movs	r1, r5
    d168:	9202      	str	r2, [sp, #8]
    d16a:	2219      	movs	r2, #25
    d16c:	9201      	str	r2, [sp, #4]
    d16e:	4a26      	ldr	r2, [pc, #152]	; (d208 <LorawanMcastProcessPkt+0xd8>)
    d170:	9805      	ldr	r0, [sp, #20]
    d172:	9200      	str	r2, [sp, #0]
    d174:	33fc      	adds	r3, #252	; 0xfc
    d176:	390d      	subs	r1, #13
    d178:	b2c9      	uxtb	r1, r1
    d17a:	6a1b      	ldr	r3, [r3, #32]
    d17c:	2201      	movs	r2, #1
    d17e:	4f23      	ldr	r7, [pc, #140]	; (d20c <LorawanMcastProcessPkt+0xdc>)
    d180:	3009      	adds	r0, #9
    d182:	47b8      	blx	r7
    d184:	4922      	ldr	r1, [pc, #136]	; (d210 <LorawanMcastProcessPkt+0xe0>)
    d186:	2708      	movs	r7, #8
    d188:	784a      	ldrb	r2, [r1, #1]
    d18a:	780b      	ldrb	r3, [r1, #0]
    d18c:	0212      	lsls	r2, r2, #8
    d18e:	431a      	orrs	r2, r3
    d190:	788b      	ldrb	r3, [r1, #2]
    d192:	041b      	lsls	r3, r3, #16
    d194:	431a      	orrs	r2, r3
    d196:	78cb      	ldrb	r3, [r1, #3]
    d198:	061b      	lsls	r3, r3, #24
    d19a:	4313      	orrs	r3, r2
    d19c:	d016      	beq.n	d1cc <LorawanMcastProcessPkt+0x9c>
    d19e:	2220      	movs	r2, #32
    d1a0:	3460      	adds	r4, #96	; 0x60
    d1a2:	7823      	ldrb	r3, [r4, #0]
    d1a4:	9905      	ldr	r1, [sp, #20]
    d1a6:	4393      	bics	r3, r2
    d1a8:	7023      	strb	r3, [r4, #0]
    d1aa:	78b3      	ldrb	r3, [r6, #2]
    d1ac:	002a      	movs	r2, r5
    d1ae:	40bb      	lsls	r3, r7
    d1b0:	7870      	ldrb	r0, [r6, #1]
    d1b2:	3a0c      	subs	r2, #12
    d1b4:	4303      	orrs	r3, r0
    d1b6:	78f0      	ldrb	r0, [r6, #3]
    d1b8:	b2d2      	uxtb	r2, r2
    d1ba:	0400      	lsls	r0, r0, #16
    d1bc:	4303      	orrs	r3, r0
    d1be:	7930      	ldrb	r0, [r6, #4]
    d1c0:	19c9      	adds	r1, r1, r7
    d1c2:	0600      	lsls	r0, r0, #24
    d1c4:	4318      	orrs	r0, r3
    d1c6:	4c13      	ldr	r4, [pc, #76]	; (d214 <LorawanMcastProcessPkt+0xe4>)
    d1c8:	003b      	movs	r3, r7
    d1ca:	47a0      	blx	r4
    d1cc:	4a0b      	ldr	r2, [pc, #44]	; (d1fc <LorawanMcastProcessPkt+0xcc>)
    d1ce:	200e      	movs	r0, #14
    d1d0:	0011      	movs	r1, r2
    d1d2:	3150      	adds	r1, #80	; 0x50
    d1d4:	780b      	ldrb	r3, [r1, #0]
    d1d6:	001c      	movs	r4, r3
    d1d8:	4004      	ands	r4, r0
    d1da:	2c06      	cmp	r4, #6
    d1dc:	d107      	bne.n	d1ee <LorawanMcastProcessPkt+0xbe>
    d1de:	32c8      	adds	r2, #200	; 0xc8
    d1e0:	7812      	ldrb	r2, [r2, #0]
    d1e2:	2a04      	cmp	r2, #4
    d1e4:	d103      	bne.n	d1ee <LorawanMcastProcessPkt+0xbe>
    d1e6:	4383      	bics	r3, r0
    d1e8:	3206      	adds	r2, #6
    d1ea:	4313      	orrs	r3, r2
    d1ec:	700b      	strb	r3, [r1, #0]
    d1ee:	2000      	movs	r0, #0
    d1f0:	4b09      	ldr	r3, [pc, #36]	; (d218 <LorawanMcastProcessPkt+0xe8>)
    d1f2:	4798      	blx	r3
    d1f4:	0038      	movs	r0, r7
    d1f6:	b007      	add	sp, #28
    d1f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d1fa:	46c0      	nop			; (mov r8, r8)
    d1fc:	20000f10 	.word	0x20000f10
    d200:	00001e65 	.word	0x00001e65
    d204:	20001158 	.word	0x20001158
    d208:	2000101c 	.word	0x2000101c
    d20c:	0000a625 	.word	0x0000a625
    d210:	20001150 	.word	0x20001150
    d214:	0000aa29 	.word	0x0000aa29
    d218:	0000b525 	.word	0x0000b525

0000d21c <Lorawan_Pds_fid1_CB>:
    d21c:	4b04      	ldr	r3, [pc, #16]	; (d230 <Lorawan_Pds_fid1_CB+0x14>)
    d21e:	0019      	movs	r1, r3
    d220:	31fc      	adds	r1, #252	; 0xfc
    d222:	6a0a      	ldr	r2, [r1, #32]
    d224:	3201      	adds	r2, #1
    d226:	620a      	str	r2, [r1, #32]
    d228:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    d22a:	3201      	adds	r2, #1
    d22c:	655a      	str	r2, [r3, #84]	; 0x54
    d22e:	4770      	bx	lr
    d230:	20000f10 	.word	0x20000f10

0000d234 <Lorawan_Pds_fid2_CB>:
    d234:	2171      	movs	r1, #113	; 0x71
    d236:	4b06      	ldr	r3, [pc, #24]	; (d250 <Lorawan_Pds_fid2_CB+0x1c>)
    d238:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    d23a:	3350      	adds	r3, #80	; 0x50
    d23c:	3201      	adds	r2, #1
    d23e:	609a      	str	r2, [r3, #8]
    d240:	781a      	ldrb	r2, [r3, #0]
    d242:	400a      	ands	r2, r1
    d244:	701a      	strb	r2, [r3, #0]
    d246:	785a      	ldrb	r2, [r3, #1]
    d248:	3970      	subs	r1, #112	; 0x70
    d24a:	438a      	bics	r2, r1
    d24c:	705a      	strb	r2, [r3, #1]
    d24e:	4770      	bx	lr
    d250:	20000f10 	.word	0x20000f10

0000d254 <LORAWAN_TxHandler>:
    d254:	b5f0      	push	{r4, r5, r6, r7, lr}
    d256:	b087      	sub	sp, #28
    d258:	466b      	mov	r3, sp
    d25a:	2501      	movs	r5, #1
    d25c:	4c30      	ldr	r4, [pc, #192]	; (d320 <LORAWAN_TxHandler+0xcc>)
    d25e:	701d      	strb	r5, [r3, #0]
    d260:	0023      	movs	r3, r4
    d262:	466a      	mov	r2, sp
    d264:	33b5      	adds	r3, #181	; 0xb5
    d266:	781b      	ldrb	r3, [r3, #0]
    d268:	4669      	mov	r1, sp
    d26a:	7053      	strb	r3, [r2, #1]
    d26c:	0023      	movs	r3, r4
    d26e:	33b3      	adds	r3, #179	; 0xb3
    d270:	781b      	ldrb	r3, [r3, #0]
    d272:	202d      	movs	r0, #45	; 0x2d
    d274:	7093      	strb	r3, [r2, #2]
    d276:	aa03      	add	r2, sp, #12
    d278:	4b2a      	ldr	r3, [pc, #168]	; (d324 <LORAWAN_TxHandler+0xd0>)
    d27a:	4798      	blx	r3
    d27c:	2808      	cmp	r0, #8
    d27e:	d004      	beq.n	d28a <LORAWAN_TxHandler+0x36>
    d280:	4b29      	ldr	r3, [pc, #164]	; (d328 <LORAWAN_TxHandler+0xd4>)
    d282:	4798      	blx	r3
    d284:	2000      	movs	r0, #0
    d286:	b007      	add	sp, #28
    d288:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d28a:	0023      	movs	r3, r4
    d28c:	33c8      	adds	r3, #200	; 0xc8
    d28e:	781b      	ldrb	r3, [r3, #0]
    d290:	ae01      	add	r6, sp, #4
    d292:	2b04      	cmp	r3, #4
    d294:	d103      	bne.n	d29e <LORAWAN_TxHandler+0x4a>
    d296:	0030      	movs	r0, r6
    d298:	4b24      	ldr	r3, [pc, #144]	; (d32c <LORAWAN_TxHandler+0xd8>)
    d29a:	7035      	strb	r5, [r6, #0]
    d29c:	4798      	blx	r3
    d29e:	4b24      	ldr	r3, [pc, #144]	; (d330 <LORAWAN_TxHandler+0xdc>)
    d2a0:	9803      	ldr	r0, [sp, #12]
    d2a2:	9904      	ldr	r1, [sp, #16]
    d2a4:	9a05      	ldr	r2, [sp, #20]
    d2a6:	4798      	blx	r3
    d2a8:	0023      	movs	r3, r4
    d2aa:	33d0      	adds	r3, #208	; 0xd0
    d2ac:	681d      	ldr	r5, [r3, #0]
    d2ae:	2395      	movs	r3, #149	; 0x95
    d2b0:	4f20      	ldr	r7, [pc, #128]	; (d334 <LORAWAN_TxHandler+0xe0>)
    d2b2:	005b      	lsls	r3, r3, #1
    d2b4:	2d00      	cmp	r5, #0
    d2b6:	d023      	beq.n	d300 <LORAWAN_TxHandler+0xac>
    d2b8:	2201      	movs	r2, #1
    d2ba:	54e2      	strb	r2, [r4, r3]
    d2bc:	7828      	ldrb	r0, [r5, #0]
    d2be:	7a2b      	ldrb	r3, [r5, #8]
    d2c0:	1e42      	subs	r2, r0, #1
    d2c2:	4190      	sbcs	r0, r2
    d2c4:	7869      	ldrb	r1, [r5, #1]
    d2c6:	686a      	ldr	r2, [r5, #4]
    d2c8:	b2c0      	uxtb	r0, r0
    d2ca:	47b8      	blx	r7
    d2cc:	0023      	movs	r3, r4
    d2ce:	339a      	adds	r3, #154	; 0x9a
    d2d0:	881b      	ldrh	r3, [r3, #0]
    d2d2:	0030      	movs	r0, r6
    d2d4:	7033      	strb	r3, [r6, #0]
    d2d6:	4b18      	ldr	r3, [pc, #96]	; (d338 <LORAWAN_TxHandler+0xe4>)
    d2d8:	6073      	str	r3, [r6, #4]
    d2da:	4b18      	ldr	r3, [pc, #96]	; (d33c <LORAWAN_TxHandler+0xe8>)
    d2dc:	4798      	blx	r3
    d2de:	2800      	cmp	r0, #0
    d2e0:	d114      	bne.n	d30c <LORAWAN_TxHandler+0xb8>
    d2e2:	0021      	movs	r1, r4
    d2e4:	220e      	movs	r2, #14
    d2e6:	3150      	adds	r1, #80	; 0x50
    d2e8:	780b      	ldrb	r3, [r1, #0]
    d2ea:	4393      	bics	r3, r2
    d2ec:	001a      	movs	r2, r3
    d2ee:	2302      	movs	r3, #2
    d2f0:	4313      	orrs	r3, r2
    d2f2:	700b      	strb	r3, [r1, #0]
    d2f4:	2208      	movs	r2, #8
    d2f6:	3460      	adds	r4, #96	; 0x60
    d2f8:	7823      	ldrb	r3, [r4, #0]
    d2fa:	4393      	bics	r3, r2
    d2fc:	7023      	strb	r3, [r4, #0]
    d2fe:	e7c1      	b.n	d284 <LORAWAN_TxHandler+0x30>
    d300:	54e5      	strb	r5, [r4, r3]
    d302:	002a      	movs	r2, r5
    d304:	002b      	movs	r3, r5
    d306:	0029      	movs	r1, r5
    d308:	0028      	movs	r0, r5
    d30a:	e7de      	b.n	d2ca <LORAWAN_TxHandler+0x76>
    d30c:	0022      	movs	r2, r4
    d30e:	2120      	movs	r1, #32
    d310:	3260      	adds	r2, #96	; 0x60
    d312:	7813      	ldrb	r3, [r2, #0]
    d314:	438b      	bics	r3, r1
    d316:	7013      	strb	r3, [r2, #0]
    d318:	4b03      	ldr	r3, [pc, #12]	; (d328 <LORAWAN_TxHandler+0xd4>)
    d31a:	4798      	blx	r3
    d31c:	e7ea      	b.n	d2f4 <LORAWAN_TxHandler+0xa0>
    d31e:	46c0      	nop			; (mov r8, r8)
    d320:	20000f10 	.word	0x20000f10
    d324:	00006d79 	.word	0x00006d79
    d328:	0000a9c5 	.word	0x0000a9c5
    d32c:	0000e8c9 	.word	0x0000e8c9
    d330:	0000a2a1 	.word	0x0000a2a1
    d334:	0000a6dd 	.word	0x0000a6dd
    d338:	2000104d 	.word	0x2000104d
    d33c:	0000dee9 	.word	0x0000dee9

0000d340 <LORAWAN_JoinReqHandler>:
    d340:	b530      	push	{r4, r5, lr}
    d342:	b087      	sub	sp, #28
    d344:	466a      	mov	r2, sp
    d346:	2300      	movs	r3, #0
    d348:	4c1e      	ldr	r4, [pc, #120]	; (d3c4 <LORAWAN_JoinReqHandler+0x84>)
    d34a:	7013      	strb	r3, [r2, #0]
    d34c:	0023      	movs	r3, r4
    d34e:	33b5      	adds	r3, #181	; 0xb5
    d350:	781b      	ldrb	r3, [r3, #0]
    d352:	4669      	mov	r1, sp
    d354:	7053      	strb	r3, [r2, #1]
    d356:	0023      	movs	r3, r4
    d358:	33b3      	adds	r3, #179	; 0xb3
    d35a:	781b      	ldrb	r3, [r3, #0]
    d35c:	202d      	movs	r0, #45	; 0x2d
    d35e:	7093      	strb	r3, [r2, #2]
    d360:	aa03      	add	r2, sp, #12
    d362:	4b19      	ldr	r3, [pc, #100]	; (d3c8 <LORAWAN_JoinReqHandler+0x88>)
    d364:	4798      	blx	r3
    d366:	2808      	cmp	r0, #8
    d368:	d004      	beq.n	d374 <LORAWAN_JoinReqHandler+0x34>
    d36a:	4b18      	ldr	r3, [pc, #96]	; (d3cc <LORAWAN_JoinReqHandler+0x8c>)
    d36c:	4798      	blx	r3
    d36e:	2000      	movs	r0, #0
    d370:	b007      	add	sp, #28
    d372:	bd30      	pop	{r4, r5, pc}
    d374:	4b16      	ldr	r3, [pc, #88]	; (d3d0 <LORAWAN_JoinReqHandler+0x90>)
    d376:	9803      	ldr	r0, [sp, #12]
    d378:	9904      	ldr	r1, [sp, #16]
    d37a:	9a05      	ldr	r2, [sp, #20]
    d37c:	4798      	blx	r3
    d37e:	0023      	movs	r3, r4
    d380:	33c8      	adds	r3, #200	; 0xc8
    d382:	781b      	ldrb	r3, [r3, #0]
    d384:	ad01      	add	r5, sp, #4
    d386:	2b04      	cmp	r3, #4
    d388:	d104      	bne.n	d394 <LORAWAN_JoinReqHandler+0x54>
    d38a:	3b03      	subs	r3, #3
    d38c:	702b      	strb	r3, [r5, #0]
    d38e:	0028      	movs	r0, r5
    d390:	4b10      	ldr	r3, [pc, #64]	; (d3d4 <LORAWAN_JoinReqHandler+0x94>)
    d392:	4798      	blx	r3
    d394:	2395      	movs	r3, #149	; 0x95
    d396:	2200      	movs	r2, #0
    d398:	005b      	lsls	r3, r3, #1
    d39a:	54e2      	strb	r2, [r4, r3]
    d39c:	4b0e      	ldr	r3, [pc, #56]	; (d3d8 <LORAWAN_JoinReqHandler+0x98>)
    d39e:	4798      	blx	r3
    d3a0:	4b0e      	ldr	r3, [pc, #56]	; (d3dc <LORAWAN_JoinReqHandler+0x9c>)
    d3a2:	7028      	strb	r0, [r5, #0]
    d3a4:	606b      	str	r3, [r5, #4]
    d3a6:	0028      	movs	r0, r5
    d3a8:	4b0d      	ldr	r3, [pc, #52]	; (d3e0 <LORAWAN_JoinReqHandler+0xa0>)
    d3aa:	4798      	blx	r3
    d3ac:	2800      	cmp	r0, #0
    d3ae:	d1dc      	bne.n	d36a <LORAWAN_JoinReqHandler+0x2a>
    d3b0:	220e      	movs	r2, #14
    d3b2:	3450      	adds	r4, #80	; 0x50
    d3b4:	7823      	ldrb	r3, [r4, #0]
    d3b6:	4393      	bics	r3, r2
    d3b8:	001a      	movs	r2, r3
    d3ba:	2302      	movs	r3, #2
    d3bc:	4313      	orrs	r3, r2
    d3be:	7023      	strb	r3, [r4, #0]
    d3c0:	e7d5      	b.n	d36e <LORAWAN_JoinReqHandler+0x2e>
    d3c2:	46c0      	nop			; (mov r8, r8)
    d3c4:	20000f10 	.word	0x20000f10
    d3c8:	00006d79 	.word	0x00006d79
    d3cc:	00009d41 	.word	0x00009d41
    d3d0:	0000a2a1 	.word	0x0000a2a1
    d3d4:	0000e8c9 	.word	0x0000e8c9
    d3d8:	0000a119 	.word	0x0000a119
    d3dc:	2000103d 	.word	0x2000103d
    d3e0:	0000dee9 	.word	0x0000dee9

0000d3e4 <LORAWAN_RxHandler>:
    d3e4:	b513      	push	{r0, r1, r4, lr}
    d3e6:	4b0c      	ldr	r3, [pc, #48]	; (d418 <LORAWAN_RxHandler+0x34>)
    d3e8:	781b      	ldrb	r3, [r3, #0]
    d3ea:	2b08      	cmp	r3, #8
    d3ec:	d011      	beq.n	d412 <LORAWAN_RxHandler+0x2e>
    d3ee:	2b10      	cmp	r3, #16
    d3f0:	d001      	beq.n	d3f6 <LORAWAN_RxHandler+0x12>
    d3f2:	2b01      	cmp	r3, #1
    d3f4:	d10b      	bne.n	d40e <LORAWAN_RxHandler+0x2a>
    d3f6:	466b      	mov	r3, sp
    d3f8:	1c9c      	adds	r4, r3, #2
    d3fa:	0021      	movs	r1, r4
    d3fc:	a801      	add	r0, sp, #4
    d3fe:	4b07      	ldr	r3, [pc, #28]	; (d41c <LORAWAN_RxHandler+0x38>)
    d400:	4798      	blx	r3
    d402:	9801      	ldr	r0, [sp, #4]
    d404:	2800      	cmp	r0, #0
    d406:	d002      	beq.n	d40e <LORAWAN_RxHandler+0x2a>
    d408:	7821      	ldrb	r1, [r4, #0]
    d40a:	4b05      	ldr	r3, [pc, #20]	; (d420 <LORAWAN_RxHandler+0x3c>)
    d40c:	4798      	blx	r3
    d40e:	2000      	movs	r0, #0
    d410:	bd16      	pop	{r1, r2, r4, pc}
    d412:	4b04      	ldr	r3, [pc, #16]	; (d424 <LORAWAN_RxHandler+0x40>)
    d414:	4798      	blx	r3
    d416:	e7fa      	b.n	d40e <LORAWAN_RxHandler+0x2a>
    d418:	2000103c 	.word	0x2000103c
    d41c:	0000e0bd 	.word	0x0000e0bd
    d420:	0000bb1d 	.word	0x0000bb1d
    d424:	0000b485 	.word	0x0000b485

0000d428 <LORAWAN_PostTask>:
    d428:	b510      	push	{r4, lr}
    d42a:	4b08      	ldr	r3, [pc, #32]	; (d44c <LORAWAN_PostTask+0x24>)
    d42c:	0004      	movs	r4, r0
    d42e:	4798      	blx	r3
    d430:	2201      	movs	r2, #1
    d432:	40a2      	lsls	r2, r4
    d434:	4906      	ldr	r1, [pc, #24]	; (d450 <LORAWAN_PostTask+0x28>)
    d436:	780b      	ldrb	r3, [r1, #0]
    d438:	4313      	orrs	r3, r2
    d43a:	b2db      	uxtb	r3, r3
    d43c:	700b      	strb	r3, [r1, #0]
    d43e:	4b05      	ldr	r3, [pc, #20]	; (d454 <LORAWAN_PostTask+0x2c>)
    d440:	4798      	blx	r3
    d442:	2004      	movs	r0, #4
    d444:	4b04      	ldr	r3, [pc, #16]	; (d458 <LORAWAN_PostTask+0x30>)
    d446:	4798      	blx	r3
    d448:	bd10      	pop	{r4, pc}
    d44a:	46c0      	nop			; (mov r8, r8)
    d44c:	00007475 	.word	0x00007475
    d450:	2000058c 	.word	0x2000058c
    d454:	00007481 	.word	0x00007481
    d458:	000015d1 	.word	0x000015d1

0000d45c <LORAWAN_TaskHandler>:
    d45c:	b570      	push	{r4, r5, r6, lr}
    d45e:	2601      	movs	r6, #1
    d460:	4d0e      	ldr	r5, [pc, #56]	; (d49c <LORAWAN_TaskHandler+0x40>)
    d462:	e015      	b.n	d490 <LORAWAN_TaskHandler+0x34>
    d464:	2400      	movs	r4, #0
    d466:	782b      	ldrb	r3, [r5, #0]
    d468:	4123      	asrs	r3, r4
    d46a:	4233      	tst	r3, r6
    d46c:	d00d      	beq.n	d48a <LORAWAN_TaskHandler+0x2e>
    d46e:	4b0c      	ldr	r3, [pc, #48]	; (d4a0 <LORAWAN_TaskHandler+0x44>)
    d470:	4798      	blx	r3
    d472:	0032      	movs	r2, r6
    d474:	40a2      	lsls	r2, r4
    d476:	782b      	ldrb	r3, [r5, #0]
    d478:	00a4      	lsls	r4, r4, #2
    d47a:	4393      	bics	r3, r2
    d47c:	702b      	strb	r3, [r5, #0]
    d47e:	4b09      	ldr	r3, [pc, #36]	; (d4a4 <LORAWAN_TaskHandler+0x48>)
    d480:	4798      	blx	r3
    d482:	4b09      	ldr	r3, [pc, #36]	; (d4a8 <LORAWAN_TaskHandler+0x4c>)
    d484:	58e3      	ldr	r3, [r4, r3]
    d486:	4798      	blx	r3
    d488:	e7ea      	b.n	d460 <LORAWAN_TaskHandler+0x4>
    d48a:	3401      	adds	r4, #1
    d48c:	2c03      	cmp	r4, #3
    d48e:	d1ea      	bne.n	d466 <LORAWAN_TaskHandler+0xa>
    d490:	7828      	ldrb	r0, [r5, #0]
    d492:	b2c0      	uxtb	r0, r0
    d494:	2800      	cmp	r0, #0
    d496:	d1e5      	bne.n	d464 <LORAWAN_TaskHandler+0x8>
    d498:	bd70      	pop	{r4, r5, r6, pc}
    d49a:	46c0      	nop			; (mov r8, r8)
    d49c:	2000058c 	.word	0x2000058c
    d4a0:	00007475 	.word	0x00007475
    d4a4:	00007481 	.word	0x00007481
    d4a8:	00013008 	.word	0x00013008

0000d4ac <RADIO_GetAttr>:
    d4ac:	b510      	push	{r4, lr}
    d4ae:	000b      	movs	r3, r1
    d4b0:	281f      	cmp	r0, #31
    d4b2:	d900      	bls.n	d4b6 <RADIO_GetAttr+0xa>
    d4b4:	e067      	b.n	d586 <RADIO_GetAttr+0xda>
    d4b6:	f001 fd15 	bl	eee4 <__gnu_thumb1_case_uqi>
    d4ba:	1410      	.short	0x1410
    d4bc:	66201c19 	.word	0x66201c19
    d4c0:	312e2a27 	.word	0x312e2a27
    d4c4:	3d3a3734 	.word	0x3d3a3734
    d4c8:	46434054 	.word	0x46434054
    d4cc:	66245149 	.word	0x66245149
    d4d0:	66666659 	.word	0x66666659
    d4d4:	5c666617 	.word	0x5c666617
    d4d8:	6360      	.short	0x6360
    d4da:	4a2c      	ldr	r2, [pc, #176]	; (d58c <RADIO_GetAttr+0xe0>)
    d4dc:	7e12      	ldrb	r2, [r2, #24]
    d4de:	701a      	strb	r2, [r3, #0]
    d4e0:	e002      	b.n	d4e8 <RADIO_GetAttr+0x3c>
    d4e2:	4a2a      	ldr	r2, [pc, #168]	; (d58c <RADIO_GetAttr+0xe0>)
    d4e4:	6812      	ldr	r2, [r2, #0]
    d4e6:	601a      	str	r2, [r3, #0]
    d4e8:	2000      	movs	r0, #0
    d4ea:	bd10      	pop	{r4, pc}
    d4ec:	4a27      	ldr	r2, [pc, #156]	; (d58c <RADIO_GetAttr+0xe0>)
    d4ee:	6852      	ldr	r2, [r2, #4]
    d4f0:	e7f9      	b.n	d4e6 <RADIO_GetAttr+0x3a>
    d4f2:	4a26      	ldr	r2, [pc, #152]	; (d58c <RADIO_GetAttr+0xe0>)
    d4f4:	8a92      	ldrh	r2, [r2, #20]
    d4f6:	801a      	strh	r2, [r3, #0]
    d4f8:	e7f6      	b.n	d4e8 <RADIO_GetAttr+0x3c>
    d4fa:	4a24      	ldr	r2, [pc, #144]	; (d58c <RADIO_GetAttr+0xe0>)
    d4fc:	3203      	adds	r2, #3
    d4fe:	7fd2      	ldrb	r2, [r2, #31]
    d500:	e7ed      	b.n	d4de <RADIO_GetAttr+0x32>
    d502:	4a22      	ldr	r2, [pc, #136]	; (d58c <RADIO_GetAttr+0xe0>)
    d504:	3204      	adds	r2, #4
    d506:	e7fa      	b.n	d4fe <RADIO_GetAttr+0x52>
    d508:	4a20      	ldr	r2, [pc, #128]	; (d58c <RADIO_GetAttr+0xe0>)
    d50a:	3206      	adds	r2, #6
    d50c:	e7f7      	b.n	d4fe <RADIO_GetAttr+0x52>
    d50e:	4a1f      	ldr	r2, [pc, #124]	; (d58c <RADIO_GetAttr+0xe0>)
    d510:	3236      	adds	r2, #54	; 0x36
    d512:	7812      	ldrb	r2, [r2, #0]
    d514:	e7e3      	b.n	d4de <RADIO_GetAttr+0x32>
    d516:	4a1d      	ldr	r2, [pc, #116]	; (d58c <RADIO_GetAttr+0xe0>)
    d518:	3205      	adds	r2, #5
    d51a:	e7f0      	b.n	d4fe <RADIO_GetAttr+0x52>
    d51c:	4a1b      	ldr	r2, [pc, #108]	; (d58c <RADIO_GetAttr+0xe0>)
    d51e:	3234      	adds	r2, #52	; 0x34
    d520:	e7f7      	b.n	d512 <RADIO_GetAttr+0x66>
    d522:	4a1a      	ldr	r2, [pc, #104]	; (d58c <RADIO_GetAttr+0xe0>)
    d524:	8ad2      	ldrh	r2, [r2, #22]
    d526:	e7e6      	b.n	d4f6 <RADIO_GetAttr+0x4a>
    d528:	4a18      	ldr	r2, [pc, #96]	; (d58c <RADIO_GetAttr+0xe0>)
    d52a:	3233      	adds	r2, #51	; 0x33
    d52c:	e7f1      	b.n	d512 <RADIO_GetAttr+0x66>
    d52e:	4a17      	ldr	r2, [pc, #92]	; (d58c <RADIO_GetAttr+0xe0>)
    d530:	68d2      	ldr	r2, [r2, #12]
    d532:	e7d8      	b.n	d4e6 <RADIO_GetAttr+0x3a>
    d534:	4a15      	ldr	r2, [pc, #84]	; (d58c <RADIO_GetAttr+0xe0>)
    d536:	6892      	ldr	r2, [r2, #8]
    d538:	e7d5      	b.n	d4e6 <RADIO_GetAttr+0x3a>
    d53a:	4a14      	ldr	r2, [pc, #80]	; (d58c <RADIO_GetAttr+0xe0>)
    d53c:	3237      	adds	r2, #55	; 0x37
    d53e:	e7e8      	b.n	d512 <RADIO_GetAttr+0x66>
    d540:	4a12      	ldr	r2, [pc, #72]	; (d58c <RADIO_GetAttr+0xe0>)
    d542:	3238      	adds	r2, #56	; 0x38
    d544:	e7e5      	b.n	d512 <RADIO_GetAttr+0x66>
    d546:	4a11      	ldr	r2, [pc, #68]	; (d58c <RADIO_GetAttr+0xe0>)
    d548:	3239      	adds	r2, #57	; 0x39
    d54a:	e7e2      	b.n	d512 <RADIO_GetAttr+0x66>
    d54c:	4a0f      	ldr	r2, [pc, #60]	; (d58c <RADIO_GetAttr+0xe0>)
    d54e:	4910      	ldr	r1, [pc, #64]	; (d590 <RADIO_GetAttr+0xe4>)
    d550:	3202      	adds	r2, #2
    d552:	7fd2      	ldrb	r2, [r2, #31]
    d554:	0018      	movs	r0, r3
    d556:	4b0f      	ldr	r3, [pc, #60]	; (d594 <RADIO_GetAttr+0xe8>)
    d558:	4798      	blx	r3
    d55a:	e7c5      	b.n	d4e8 <RADIO_GetAttr+0x3c>
    d55c:	4a0b      	ldr	r2, [pc, #44]	; (d58c <RADIO_GetAttr+0xe0>)
    d55e:	3202      	adds	r2, #2
    d560:	e7cd      	b.n	d4fe <RADIO_GetAttr+0x52>
    d562:	4a0a      	ldr	r2, [pc, #40]	; (d58c <RADIO_GetAttr+0xe0>)
    d564:	3232      	adds	r2, #50	; 0x32
    d566:	7812      	ldrb	r2, [r2, #0]
    d568:	b252      	sxtb	r2, r2
    d56a:	e7b8      	b.n	d4de <RADIO_GetAttr+0x32>
    d56c:	4a07      	ldr	r2, [pc, #28]	; (d58c <RADIO_GetAttr+0xe0>)
    d56e:	3235      	adds	r2, #53	; 0x35
    d570:	e7cf      	b.n	d512 <RADIO_GetAttr+0x66>
    d572:	4906      	ldr	r1, [pc, #24]	; (d58c <RADIO_GetAttr+0xe0>)
    d574:	2206      	movs	r2, #6
    d576:	313c      	adds	r1, #60	; 0x3c
    d578:	e7ec      	b.n	d554 <RADIO_GetAttr+0xa8>
    d57a:	4a04      	ldr	r2, [pc, #16]	; (d58c <RADIO_GetAttr+0xe0>)
    d57c:	3254      	adds	r2, #84	; 0x54
    d57e:	e7c8      	b.n	d512 <RADIO_GetAttr+0x66>
    d580:	4a02      	ldr	r2, [pc, #8]	; (d58c <RADIO_GetAttr+0xe0>)
    d582:	3256      	adds	r2, #86	; 0x56
    d584:	e7ef      	b.n	d566 <RADIO_GetAttr+0xba>
    d586:	2005      	movs	r0, #5
    d588:	e7af      	b.n	d4ea <RADIO_GetAttr+0x3e>
    d58a:	46c0      	nop			; (mov r8, r8)
    d58c:	20000654 	.word	0x20000654
    d590:	2000066d 	.word	0x2000066d
    d594:	000112d5 	.word	0x000112d5

0000d598 <RADIO_SetAttr>:
    d598:	b5f0      	push	{r4, r5, r6, r7, lr}
    d59a:	4b77      	ldr	r3, [pc, #476]	; (d778 <RADIO_SetAttr+0x1e0>)
    d59c:	b085      	sub	sp, #20
    d59e:	0006      	movs	r6, r0
    d5a0:	000d      	movs	r5, r1
    d5a2:	4798      	blx	r3
    d5a4:	2404      	movs	r4, #4
    d5a6:	2801      	cmp	r0, #1
    d5a8:	d11a      	bne.n	d5e0 <RADIO_SetAttr+0x48>
    d5aa:	2e1d      	cmp	r6, #29
    d5ac:	d900      	bls.n	d5b0 <RADIO_SetAttr+0x18>
    d5ae:	e0e0      	b.n	d772 <RADIO_SetAttr+0x1da>
    d5b0:	0030      	movs	r0, r6
    d5b2:	f001 fc97 	bl	eee4 <__gnu_thumb1_case_uqi>
    d5b6:	514d      	.short	0x514d
    d5b8:	de6d6965 	.word	0xde6d6965
    d5bc:	8f8b8179 	.word	0x8f8b8179
    d5c0:	a7a49b97 	.word	0xa7a49b97
    d5c4:	bcb3abde 	.word	0xbcb3abde
    d5c8:	de72cdc5 	.word	0xde72cdc5
    d5cc:	dededed5 	.word	0xdededed5
    d5d0:	18dede0f 	.word	0x18dede0f
    d5d4:	2403      	movs	r4, #3
    d5d6:	2d00      	cmp	r5, #0
    d5d8:	d002      	beq.n	d5e0 <RADIO_SetAttr+0x48>
    d5da:	4b68      	ldr	r3, [pc, #416]	; (d77c <RADIO_SetAttr+0x1e4>)
    d5dc:	611d      	str	r5, [r3, #16]
    d5de:	2400      	movs	r4, #0
    d5e0:	0020      	movs	r0, r4
    d5e2:	b005      	add	sp, #20
    d5e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d5e6:	796e      	ldrb	r6, [r5, #5]
    d5e8:	2e00      	cmp	r6, #0
    d5ea:	d109      	bne.n	d600 <RADIO_SetAttr+0x68>
    d5ec:	4b63      	ldr	r3, [pc, #396]	; (d77c <RADIO_SetAttr+0x1e4>)
    d5ee:	001a      	movs	r2, r3
    d5f0:	649e      	str	r6, [r3, #72]	; 0x48
    d5f2:	879e      	strh	r6, [r3, #60]	; 0x3c
    d5f4:	87de      	strh	r6, [r3, #62]	; 0x3e
    d5f6:	3240      	adds	r2, #64	; 0x40
    d5f8:	3341      	adds	r3, #65	; 0x41
    d5fa:	7016      	strb	r6, [r2, #0]
    d5fc:	701e      	strb	r6, [r3, #0]
    d5fe:	e7ee      	b.n	d5de <RADIO_SetAttr+0x46>
    d600:	882b      	ldrh	r3, [r5, #0]
    d602:	2403      	movs	r4, #3
    d604:	9301      	str	r3, [sp, #4]
    d606:	2b00      	cmp	r3, #0
    d608:	d0ea      	beq.n	d5e0 <RADIO_SetAttr+0x48>
    d60a:	792f      	ldrb	r7, [r5, #4]
    d60c:	2f00      	cmp	r7, #0
    d60e:	d0e7      	beq.n	d5e0 <RADIO_SetAttr+0x48>
    d610:	20fa      	movs	r0, #250	; 0xfa
    d612:	0080      	lsls	r0, r0, #2
    d614:	0039      	movs	r1, r7
    d616:	4358      	muls	r0, r3
    d618:	4b59      	ldr	r3, [pc, #356]	; (d780 <RADIO_SetAttr+0x1e8>)
    d61a:	4798      	blx	r3
    d61c:	4b59      	ldr	r3, [pc, #356]	; (d784 <RADIO_SetAttr+0x1ec>)
    d61e:	4798      	blx	r3
    d620:	4959      	ldr	r1, [pc, #356]	; (d788 <RADIO_SetAttr+0x1f0>)
    d622:	9002      	str	r0, [sp, #8]
    d624:	4b59      	ldr	r3, [pc, #356]	; (d78c <RADIO_SetAttr+0x1f4>)
    d626:	4798      	blx	r3
    d628:	9003      	str	r0, [sp, #12]
    d62a:	2800      	cmp	r0, #0
    d62c:	d1d8      	bne.n	d5e0 <RADIO_SetAttr+0x48>
    d62e:	2302      	movs	r3, #2
    d630:	5eed      	ldrsh	r5, [r5, r3]
    d632:	9802      	ldr	r0, [sp, #8]
    d634:	4b56      	ldr	r3, [pc, #344]	; (d790 <RADIO_SetAttr+0x1f8>)
    d636:	4798      	blx	r3
    d638:	466b      	mov	r3, sp
    d63a:	4c50      	ldr	r4, [pc, #320]	; (d77c <RADIO_SetAttr+0x1e4>)
    d63c:	889b      	ldrh	r3, [r3, #4]
    d63e:	64a0      	str	r0, [r4, #72]	; 0x48
    d640:	87a3      	strh	r3, [r4, #60]	; 0x3c
    d642:	0023      	movs	r3, r4
    d644:	87e5      	strh	r5, [r4, #62]	; 0x3e
    d646:	3340      	adds	r3, #64	; 0x40
    d648:	3441      	adds	r4, #65	; 0x41
    d64a:	701f      	strb	r7, [r3, #0]
    d64c:	7026      	strb	r6, [r4, #0]
    d64e:	e7c6      	b.n	d5de <RADIO_SetAttr+0x46>
    d650:	782a      	ldrb	r2, [r5, #0]
    d652:	4b4a      	ldr	r3, [pc, #296]	; (d77c <RADIO_SetAttr+0x1e4>)
    d654:	761a      	strb	r2, [r3, #24]
    d656:	e7c2      	b.n	d5de <RADIO_SetAttr+0x46>
    d658:	4a4e      	ldr	r2, [pc, #312]	; (d794 <RADIO_SetAttr+0x1fc>)
    d65a:	682b      	ldr	r3, [r5, #0]
    d65c:	1899      	adds	r1, r3, r2
    d65e:	4a4e      	ldr	r2, [pc, #312]	; (d798 <RADIO_SetAttr+0x200>)
    d660:	4291      	cmp	r1, r2
    d662:	d90a      	bls.n	d67a <RADIO_SetAttr+0xe2>
    d664:	4a4d      	ldr	r2, [pc, #308]	; (d79c <RADIO_SetAttr+0x204>)
    d666:	494e      	ldr	r1, [pc, #312]	; (d7a0 <RADIO_SetAttr+0x208>)
    d668:	189a      	adds	r2, r3, r2
    d66a:	428a      	cmp	r2, r1
    d66c:	d905      	bls.n	d67a <RADIO_SetAttr+0xe2>
    d66e:	4a4d      	ldr	r2, [pc, #308]	; (d7a4 <RADIO_SetAttr+0x20c>)
    d670:	494d      	ldr	r1, [pc, #308]	; (d7a8 <RADIO_SetAttr+0x210>)
    d672:	189a      	adds	r2, r3, r2
    d674:	2405      	movs	r4, #5
    d676:	428a      	cmp	r2, r1
    d678:	d8b2      	bhi.n	d5e0 <RADIO_SetAttr+0x48>
    d67a:	4a40      	ldr	r2, [pc, #256]	; (d77c <RADIO_SetAttr+0x1e4>)
    d67c:	6013      	str	r3, [r2, #0]
    d67e:	e7ae      	b.n	d5de <RADIO_SetAttr+0x46>
    d680:	682a      	ldr	r2, [r5, #0]
    d682:	4b3e      	ldr	r3, [pc, #248]	; (d77c <RADIO_SetAttr+0x1e4>)
    d684:	605a      	str	r2, [r3, #4]
    d686:	e7aa      	b.n	d5de <RADIO_SetAttr+0x46>
    d688:	882a      	ldrh	r2, [r5, #0]
    d68a:	4b3c      	ldr	r3, [pc, #240]	; (d77c <RADIO_SetAttr+0x1e4>)
    d68c:	829a      	strh	r2, [r3, #20]
    d68e:	e7a6      	b.n	d5de <RADIO_SetAttr+0x46>
    d690:	4b3a      	ldr	r3, [pc, #232]	; (d77c <RADIO_SetAttr+0x1e4>)
    d692:	782a      	ldrb	r2, [r5, #0]
    d694:	3303      	adds	r3, #3
    d696:	77da      	strb	r2, [r3, #31]
    d698:	e7a1      	b.n	d5de <RADIO_SetAttr+0x46>
    d69a:	782a      	ldrb	r2, [r5, #0]
    d69c:	2405      	movs	r4, #5
    d69e:	2a01      	cmp	r2, #1
    d6a0:	d89e      	bhi.n	d5e0 <RADIO_SetAttr+0x48>
    d6a2:	4b36      	ldr	r3, [pc, #216]	; (d77c <RADIO_SetAttr+0x1e4>)
    d6a4:	3304      	adds	r3, #4
    d6a6:	e7f6      	b.n	d696 <RADIO_SetAttr+0xfe>
    d6a8:	782a      	ldrb	r2, [r5, #0]
    d6aa:	2405      	movs	r4, #5
    d6ac:	2a01      	cmp	r2, #1
    d6ae:	d900      	bls.n	d6b2 <RADIO_SetAttr+0x11a>
    d6b0:	e796      	b.n	d5e0 <RADIO_SetAttr+0x48>
    d6b2:	4b32      	ldr	r3, [pc, #200]	; (d77c <RADIO_SetAttr+0x1e4>)
    d6b4:	3306      	adds	r3, #6
    d6b6:	e7ee      	b.n	d696 <RADIO_SetAttr+0xfe>
    d6b8:	782a      	ldrb	r2, [r5, #0]
    d6ba:	2405      	movs	r4, #5
    d6bc:	1fd3      	subs	r3, r2, #7
    d6be:	2b02      	cmp	r3, #2
    d6c0:	d900      	bls.n	d6c4 <RADIO_SetAttr+0x12c>
    d6c2:	e78d      	b.n	d5e0 <RADIO_SetAttr+0x48>
    d6c4:	4b2d      	ldr	r3, [pc, #180]	; (d77c <RADIO_SetAttr+0x1e4>)
    d6c6:	3336      	adds	r3, #54	; 0x36
    d6c8:	701a      	strb	r2, [r3, #0]
    d6ca:	e788      	b.n	d5de <RADIO_SetAttr+0x46>
    d6cc:	4b2b      	ldr	r3, [pc, #172]	; (d77c <RADIO_SetAttr+0x1e4>)
    d6ce:	782a      	ldrb	r2, [r5, #0]
    d6d0:	3305      	adds	r3, #5
    d6d2:	e7e0      	b.n	d696 <RADIO_SetAttr+0xfe>
    d6d4:	782a      	ldrb	r2, [r5, #0]
    d6d6:	2405      	movs	r4, #5
    d6d8:	2a01      	cmp	r2, #1
    d6da:	d900      	bls.n	d6de <RADIO_SetAttr+0x146>
    d6dc:	e780      	b.n	d5e0 <RADIO_SetAttr+0x48>
    d6de:	4b27      	ldr	r3, [pc, #156]	; (d77c <RADIO_SetAttr+0x1e4>)
    d6e0:	3334      	adds	r3, #52	; 0x34
    d6e2:	e7f1      	b.n	d6c8 <RADIO_SetAttr+0x130>
    d6e4:	882a      	ldrh	r2, [r5, #0]
    d6e6:	4b25      	ldr	r3, [pc, #148]	; (d77c <RADIO_SetAttr+0x1e4>)
    d6e8:	82da      	strh	r2, [r3, #22]
    d6ea:	e778      	b.n	d5de <RADIO_SetAttr+0x46>
    d6ec:	782a      	ldrb	r2, [r5, #0]
    d6ee:	2405      	movs	r4, #5
    d6f0:	1e53      	subs	r3, r2, #1
    d6f2:	2b03      	cmp	r3, #3
    d6f4:	d900      	bls.n	d6f8 <RADIO_SetAttr+0x160>
    d6f6:	e773      	b.n	d5e0 <RADIO_SetAttr+0x48>
    d6f8:	4b20      	ldr	r3, [pc, #128]	; (d77c <RADIO_SetAttr+0x1e4>)
    d6fa:	3333      	adds	r3, #51	; 0x33
    d6fc:	e7e4      	b.n	d6c8 <RADIO_SetAttr+0x130>
    d6fe:	4b1f      	ldr	r3, [pc, #124]	; (d77c <RADIO_SetAttr+0x1e4>)
    d700:	682a      	ldr	r2, [r5, #0]
    d702:	60da      	str	r2, [r3, #12]
    d704:	682a      	ldr	r2, [r5, #0]
    d706:	4b1d      	ldr	r3, [pc, #116]	; (d77c <RADIO_SetAttr+0x1e4>)
    d708:	609a      	str	r2, [r3, #8]
    d70a:	e768      	b.n	d5de <RADIO_SetAttr+0x46>
    d70c:	782a      	ldrb	r2, [r5, #0]
    d70e:	2405      	movs	r4, #5
    d710:	2a03      	cmp	r2, #3
    d712:	d900      	bls.n	d716 <RADIO_SetAttr+0x17e>
    d714:	e764      	b.n	d5e0 <RADIO_SetAttr+0x48>
    d716:	4b19      	ldr	r3, [pc, #100]	; (d77c <RADIO_SetAttr+0x1e4>)
    d718:	3337      	adds	r3, #55	; 0x37
    d71a:	e7d5      	b.n	d6c8 <RADIO_SetAttr+0x130>
    d71c:	782a      	ldrb	r2, [r5, #0]
    d71e:	2405      	movs	r4, #5
    d720:	1e53      	subs	r3, r2, #1
    d722:	2b16      	cmp	r3, #22
    d724:	d900      	bls.n	d728 <RADIO_SetAttr+0x190>
    d726:	e75b      	b.n	d5e0 <RADIO_SetAttr+0x48>
    d728:	4b14      	ldr	r3, [pc, #80]	; (d77c <RADIO_SetAttr+0x1e4>)
    d72a:	3338      	adds	r3, #56	; 0x38
    d72c:	e7cc      	b.n	d6c8 <RADIO_SetAttr+0x130>
    d72e:	782a      	ldrb	r2, [r5, #0]
    d730:	2405      	movs	r4, #5
    d732:	1e53      	subs	r3, r2, #1
    d734:	2b16      	cmp	r3, #22
    d736:	d900      	bls.n	d73a <RADIO_SetAttr+0x1a2>
    d738:	e752      	b.n	d5e0 <RADIO_SetAttr+0x48>
    d73a:	4b10      	ldr	r3, [pc, #64]	; (d77c <RADIO_SetAttr+0x1e4>)
    d73c:	3339      	adds	r3, #57	; 0x39
    d73e:	e7c3      	b.n	d6c8 <RADIO_SetAttr+0x130>
    d740:	4b0e      	ldr	r3, [pc, #56]	; (d77c <RADIO_SetAttr+0x1e4>)
    d742:	0029      	movs	r1, r5
    d744:	3302      	adds	r3, #2
    d746:	7fda      	ldrb	r2, [r3, #31]
    d748:	4818      	ldr	r0, [pc, #96]	; (d7ac <RADIO_SetAttr+0x214>)
    d74a:	4b19      	ldr	r3, [pc, #100]	; (d7b0 <RADIO_SetAttr+0x218>)
    d74c:	4798      	blx	r3
    d74e:	e746      	b.n	d5de <RADIO_SetAttr+0x46>
    d750:	782b      	ldrb	r3, [r5, #0]
    d752:	1c1a      	adds	r2, r3, #0
    d754:	2b08      	cmp	r3, #8
    d756:	d900      	bls.n	d75a <RADIO_SetAttr+0x1c2>
    d758:	2208      	movs	r2, #8
    d75a:	4b08      	ldr	r3, [pc, #32]	; (d77c <RADIO_SetAttr+0x1e4>)
    d75c:	3302      	adds	r3, #2
    d75e:	e79a      	b.n	d696 <RADIO_SetAttr+0xfe>
    d760:	2405      	movs	r4, #5
    d762:	782a      	ldrb	r2, [r5, #0]
    d764:	1fd3      	subs	r3, r2, #7
    d766:	42a3      	cmp	r3, r4
    d768:	d900      	bls.n	d76c <RADIO_SetAttr+0x1d4>
    d76a:	e739      	b.n	d5e0 <RADIO_SetAttr+0x48>
    d76c:	4b03      	ldr	r3, [pc, #12]	; (d77c <RADIO_SetAttr+0x1e4>)
    d76e:	3335      	adds	r3, #53	; 0x35
    d770:	e7aa      	b.n	d6c8 <RADIO_SetAttr+0x130>
    d772:	2405      	movs	r4, #5
    d774:	e734      	b.n	d5e0 <RADIO_SetAttr+0x48>
    d776:	46c0      	nop			; (mov r8, r8)
    d778:	0000decd 	.word	0x0000decd
    d77c:	20000654 	.word	0x20000654
    d780:	0000f021 	.word	0x0000f021
    d784:	000101ad 	.word	0x000101ad
    d788:	43fa0000 	.word	0x43fa0000
    d78c:	0000f21d 	.word	0x0000f21d
    d790:	0000f301 	.word	0x0000f301
    d794:	f7d58bc0 	.word	0xf7d58bc0
    d798:	0243d580 	.word	0x0243d580
    d79c:	e78fe580 	.word	0xe78fe580
    d7a0:	06dac2c0 	.word	0x06dac2c0
    d7a4:	cc9eec80 	.word	0xcc9eec80
    d7a8:	096ae380 	.word	0x096ae380
    d7ac:	2000066d 	.word	0x2000066d
    d7b0:	000112d5 	.word	0x000112d5

0000d7b4 <RADIO_Init>:
    d7b4:	b510      	push	{r4, lr}
    d7b6:	4b0c      	ldr	r3, [pc, #48]	; (d7e8 <RADIO_Init+0x34>)
    d7b8:	4798      	blx	r3
    d7ba:	4b0c      	ldr	r3, [pc, #48]	; (d7ec <RADIO_Init+0x38>)
    d7bc:	201f      	movs	r0, #31
    d7be:	4798      	blx	r3
    d7c0:	4c0b      	ldr	r4, [pc, #44]	; (d7f0 <RADIO_Init+0x3c>)
    d7c2:	490c      	ldr	r1, [pc, #48]	; (d7f4 <RADIO_Init+0x40>)
    d7c4:	2001      	movs	r0, #1
    d7c6:	47a0      	blx	r4
    d7c8:	490b      	ldr	r1, [pc, #44]	; (d7f8 <RADIO_Init+0x44>)
    d7ca:	2002      	movs	r0, #2
    d7cc:	47a0      	blx	r4
    d7ce:	490b      	ldr	r1, [pc, #44]	; (d7fc <RADIO_Init+0x48>)
    d7d0:	2004      	movs	r0, #4
    d7d2:	47a0      	blx	r4
    d7d4:	490a      	ldr	r1, [pc, #40]	; (d800 <RADIO_Init+0x4c>)
    d7d6:	2008      	movs	r0, #8
    d7d8:	47a0      	blx	r4
    d7da:	490a      	ldr	r1, [pc, #40]	; (d804 <RADIO_Init+0x50>)
    d7dc:	2010      	movs	r0, #16
    d7de:	47a0      	blx	r4
    d7e0:	4909      	ldr	r1, [pc, #36]	; (d808 <RADIO_Init+0x54>)
    d7e2:	2020      	movs	r0, #32
    d7e4:	47a0      	blx	r4
    d7e6:	bd10      	pop	{r4, pc}
    d7e8:	0000e6d5 	.word	0x0000e6d5
    d7ec:	0000ded9 	.word	0x0000ded9
    d7f0:	000073d1 	.word	0x000073d1
    d7f4:	0000dc65 	.word	0x0000dc65
    d7f8:	0000dcdd 	.word	0x0000dcdd
    d7fc:	0000dd4d 	.word	0x0000dd4d
    d800:	0000dd9d 	.word	0x0000dd9d
    d804:	0000ddc5 	.word	0x0000ddc5
    d808:	0000dded 	.word	0x0000dded

0000d80c <Radio_WriteFrequency>:
    d80c:	b570      	push	{r4, r5, r6, lr}
    d80e:	490d      	ldr	r1, [pc, #52]	; (d844 <Radio_WriteFrequency+0x38>)
    d810:	4d0d      	ldr	r5, [pc, #52]	; (d848 <Radio_WriteFrequency+0x3c>)
    d812:	0006      	movs	r6, r0
    d814:	47a8      	blx	r5
    d816:	4b0d      	ldr	r3, [pc, #52]	; (d84c <Radio_WriteFrequency+0x40>)
    d818:	0004      	movs	r4, r0
    d81a:	490a      	ldr	r1, [pc, #40]	; (d844 <Radio_WriteFrequency+0x38>)
    d81c:	0030      	movs	r0, r6
    d81e:	4798      	blx	r3
    d820:	0208      	lsls	r0, r1, #8
    d822:	4908      	ldr	r1, [pc, #32]	; (d844 <Radio_WriteFrequency+0x38>)
    d824:	47a8      	blx	r5
    d826:	0224      	lsls	r4, r4, #8
    d828:	1904      	adds	r4, r0, r4
    d82a:	0c21      	lsrs	r1, r4, #16
    d82c:	4d08      	ldr	r5, [pc, #32]	; (d850 <Radio_WriteFrequency+0x44>)
    d82e:	b2c9      	uxtb	r1, r1
    d830:	2006      	movs	r0, #6
    d832:	47a8      	blx	r5
    d834:	0a21      	lsrs	r1, r4, #8
    d836:	b2c9      	uxtb	r1, r1
    d838:	2007      	movs	r0, #7
    d83a:	47a8      	blx	r5
    d83c:	b2e1      	uxtb	r1, r4
    d83e:	2008      	movs	r0, #8
    d840:	47a8      	blx	r5
    d842:	bd70      	pop	{r4, r5, r6, pc}
    d844:	00003d09 	.word	0x00003d09
    d848:	0000ef0d 	.word	0x0000ef0d
    d84c:	0000f019 	.word	0x0000f019
    d850:	000072fd 	.word	0x000072fd

0000d854 <Radio_WriteConfiguration>:
    d854:	b5f0      	push	{r4, r5, r6, r7, lr}
    d856:	4cb0      	ldr	r4, [pc, #704]	; (db18 <Radio_WriteConfiguration+0x2c4>)
    d858:	2200      	movs	r2, #0
    d85a:	0023      	movs	r3, r4
    d85c:	b085      	sub	sp, #20
    d85e:	9002      	str	r0, [sp, #8]
    d860:	3334      	adds	r3, #52	; 0x34
    d862:	0010      	movs	r0, r2
    d864:	7819      	ldrb	r1, [r3, #0]
    d866:	4bad      	ldr	r3, [pc, #692]	; (db1c <Radio_WriteConfiguration+0x2c8>)
    d868:	4798      	blx	r3
    d86a:	4bad      	ldr	r3, [pc, #692]	; (db20 <Radio_WriteConfiguration+0x2cc>)
    d86c:	6820      	ldr	r0, [r4, #0]
    d86e:	4798      	blx	r3
    d870:	1ce3      	adds	r3, r4, #3
    d872:	1d62      	adds	r2, r4, #5
    d874:	7fdb      	ldrb	r3, [r3, #31]
    d876:	7fd2      	ldrb	r2, [r2, #31]
    d878:	b25b      	sxtb	r3, r3
    d87a:	4eaa      	ldr	r6, [pc, #680]	; (db24 <Radio_WriteConfiguration+0x2d0>)
    d87c:	4daa      	ldr	r5, [pc, #680]	; (db28 <Radio_WriteConfiguration+0x2d4>)
    d87e:	2a00      	cmp	r2, #0
    d880:	d000      	beq.n	d884 <Radio_WriteConfiguration+0x30>
    d882:	e0fc      	b.n	da7e <Radio_WriteConfiguration+0x22a>
    d884:	1c1f      	adds	r7, r3, #0
    d886:	2b0f      	cmp	r3, #15
    d888:	dc00      	bgt.n	d88c <Radio_WriteConfiguration+0x38>
    d88a:	e0ec      	b.n	da66 <Radio_WriteConfiguration+0x212>
    d88c:	270f      	movs	r7, #15
    d88e:	b27b      	sxtb	r3, r7
    d890:	204d      	movs	r0, #77	; 0x4d
    d892:	9301      	str	r3, [sp, #4]
    d894:	47b0      	blx	r6
    d896:	21f8      	movs	r1, #248	; 0xf8
    d898:	4008      	ands	r0, r1
    d89a:	39f4      	subs	r1, #244	; 0xf4
    d89c:	4301      	orrs	r1, r0
    d89e:	204d      	movs	r0, #77	; 0x4d
    d8a0:	47a8      	blx	r5
    d8a2:	b27b      	sxtb	r3, r7
    d8a4:	2b00      	cmp	r3, #0
    d8a6:	db00      	blt.n	d8aa <Radio_WriteConfiguration+0x56>
    d8a8:	e0e4      	b.n	da74 <Radio_WriteConfiguration+0x220>
    d8aa:	3703      	adds	r7, #3
    d8ac:	b2f9      	uxtb	r1, r7
    d8ae:	2720      	movs	r7, #32
    d8b0:	4339      	orrs	r1, r7
    d8b2:	2009      	movs	r0, #9
    d8b4:	47a8      	blx	r5
    d8b6:	0023      	movs	r3, r4
    d8b8:	3334      	adds	r3, #52	; 0x34
    d8ba:	781f      	ldrb	r7, [r3, #0]
    d8bc:	2f01      	cmp	r7, #1
    d8be:	d000      	beq.n	d8c2 <Radio_WriteConfiguration+0x6e>
    d8c0:	e144      	b.n	db4c <Radio_WriteConfiguration+0x2f8>
    d8c2:	7e21      	ldrb	r1, [r4, #24]
    d8c4:	2039      	movs	r0, #57	; 0x39
    d8c6:	47a8      	blx	r5
    d8c8:	4b98      	ldr	r3, [pc, #608]	; (db2c <Radio_WriteConfiguration+0x2d8>)
    d8ca:	201d      	movs	r0, #29
    d8cc:	7819      	ldrb	r1, [r3, #0]
    d8ce:	0023      	movs	r3, r4
    d8d0:	3333      	adds	r3, #51	; 0x33
    d8d2:	781b      	ldrb	r3, [r3, #0]
    d8d4:	0109      	lsls	r1, r1, #4
    d8d6:	005b      	lsls	r3, r3, #1
    d8d8:	4319      	orrs	r1, r3
    d8da:	1de3      	adds	r3, r4, #7
    d8dc:	7fdb      	ldrb	r3, [r3, #31]
    d8de:	401f      	ands	r7, r3
    d8e0:	4339      	orrs	r1, r7
    d8e2:	b2c9      	uxtb	r1, r1
    d8e4:	47a8      	blx	r5
    d8e6:	1d23      	adds	r3, r4, #4
    d8e8:	7fd9      	ldrb	r1, [r3, #31]
    d8ea:	2304      	movs	r3, #4
    d8ec:	0089      	lsls	r1, r1, #2
    d8ee:	4019      	ands	r1, r3
    d8f0:	0023      	movs	r3, r4
    d8f2:	3335      	adds	r3, #53	; 0x35
    d8f4:	781b      	ldrb	r3, [r3, #0]
    d8f6:	201e      	movs	r0, #30
    d8f8:	011b      	lsls	r3, r3, #4
    d8fa:	4319      	orrs	r1, r3
    d8fc:	9b02      	ldr	r3, [sp, #8]
    d8fe:	059b      	lsls	r3, r3, #22
    d900:	0f9b      	lsrs	r3, r3, #30
    d902:	4319      	orrs	r1, r3
    d904:	b2c9      	uxtb	r1, r1
    d906:	47a8      	blx	r5
    d908:	2300      	movs	r3, #0
    d90a:	8ae1      	ldrh	r1, [r4, #22]
    d90c:	4299      	cmp	r1, r3
    d90e:	d011      	beq.n	d934 <Radio_WriteConfiguration+0xe0>
    d910:	4a86      	ldr	r2, [pc, #536]	; (db2c <Radio_WriteConfiguration+0x2d8>)
    d912:	7812      	ldrb	r2, [r2, #0]
    d914:	2a08      	cmp	r2, #8
    d916:	d100      	bne.n	d91a <Radio_WriteConfiguration+0xc6>
    d918:	e0e4      	b.n	dae4 <Radio_WriteConfiguration+0x290>
    d91a:	2a09      	cmp	r2, #9
    d91c:	d100      	bne.n	d920 <Radio_WriteConfiguration+0xcc>
    d91e:	e0e3      	b.n	dae8 <Radio_WriteConfiguration+0x294>
    d920:	2a07      	cmp	r2, #7
    d922:	d000      	beq.n	d926 <Radio_WriteConfiguration+0xd2>
    d924:	e0e3      	b.n	daee <Radio_WriteConfiguration+0x29a>
    d926:	337d      	adds	r3, #125	; 0x7d
    d928:	4359      	muls	r1, r3
    d92a:	0023      	movs	r3, r4
    d92c:	3335      	adds	r3, #53	; 0x35
    d92e:	781b      	ldrb	r3, [r3, #0]
    d930:	40d9      	lsrs	r1, r3
    d932:	000b      	movs	r3, r1
    d934:	b2d9      	uxtb	r1, r3
    d936:	2024      	movs	r0, #36	; 0x24
    d938:	4d7b      	ldr	r5, [pc, #492]	; (db28 <Radio_WriteConfiguration+0x2d4>)
    d93a:	47a8      	blx	r5
    d93c:	466b      	mov	r3, sp
    d93e:	201f      	movs	r0, #31
    d940:	7a19      	ldrb	r1, [r3, #8]
    d942:	47a8      	blx	r5
    d944:	2026      	movs	r0, #38	; 0x26
    d946:	47b0      	blx	r6
    d948:	0023      	movs	r3, r4
    d94a:	3335      	adds	r3, #53	; 0x35
    d94c:	781b      	ldrb	r3, [r3, #0]
    d94e:	2b0c      	cmp	r3, #12
    d950:	d105      	bne.n	d95e <Radio_WriteConfiguration+0x10a>
    d952:	0023      	movs	r3, r4
    d954:	3336      	adds	r3, #54	; 0x36
    d956:	781b      	ldrb	r3, [r3, #0]
    d958:	3b07      	subs	r3, #7
    d95a:	2b01      	cmp	r3, #1
    d95c:	d906      	bls.n	d96c <Radio_WriteConfiguration+0x118>
    d95e:	6b62      	ldr	r2, [r4, #52]	; 0x34
    d960:	4b73      	ldr	r3, [pc, #460]	; (db30 <Radio_WriteConfiguration+0x2dc>)
    d962:	4013      	ands	r3, r2
    d964:	4a73      	ldr	r2, [pc, #460]	; (db34 <Radio_WriteConfiguration+0x2e0>)
    d966:	4293      	cmp	r3, r2
    d968:	d000      	beq.n	d96c <Radio_WriteConfiguration+0x118>
    d96a:	e0c2      	b.n	daf2 <Radio_WriteConfiguration+0x29e>
    d96c:	2108      	movs	r1, #8
    d96e:	4308      	orrs	r0, r1
    d970:	b2c0      	uxtb	r0, r0
    d972:	2104      	movs	r1, #4
    d974:	4301      	orrs	r1, r0
    d976:	2026      	movs	r0, #38	; 0x26
    d978:	47a8      	blx	r5
    d97a:	2031      	movs	r0, #49	; 0x31
    d97c:	47b0      	blx	r6
    d97e:	21f8      	movs	r1, #248	; 0xf8
    d980:	4008      	ands	r0, r1
    d982:	39f5      	subs	r1, #245	; 0xf5
    d984:	4301      	orrs	r1, r0
    d986:	2031      	movs	r0, #49	; 0x31
    d988:	47a8      	blx	r5
    d98a:	210a      	movs	r1, #10
    d98c:	2037      	movs	r0, #55	; 0x37
    d98e:	47a8      	blx	r5
    d990:	0023      	movs	r3, r4
    d992:	3331      	adds	r3, #49	; 0x31
    d994:	781b      	ldrb	r3, [r3, #0]
    d996:	2b12      	cmp	r3, #18
    d998:	d11e      	bne.n	d9d8 <Radio_WriteConfiguration+0x184>
    d99a:	0023      	movs	r3, r4
    d99c:	3336      	adds	r3, #54	; 0x36
    d99e:	781b      	ldrb	r3, [r3, #0]
    d9a0:	3b07      	subs	r3, #7
    d9a2:	2b01      	cmp	r3, #1
    d9a4:	d80b      	bhi.n	d9be <Radio_WriteConfiguration+0x16a>
    d9a6:	2031      	movs	r0, #49	; 0x31
    d9a8:	47b0      	blx	r6
    d9aa:	217f      	movs	r1, #127	; 0x7f
    d9ac:	4001      	ands	r1, r0
    d9ae:	2031      	movs	r0, #49	; 0x31
    d9b0:	47a8      	blx	r5
    d9b2:	2140      	movs	r1, #64	; 0x40
    d9b4:	202f      	movs	r0, #47	; 0x2f
    d9b6:	47a8      	blx	r5
    d9b8:	2100      	movs	r1, #0
    d9ba:	2030      	movs	r0, #48	; 0x30
    d9bc:	47a8      	blx	r5
    d9be:	0023      	movs	r3, r4
    d9c0:	3336      	adds	r3, #54	; 0x36
    d9c2:	781b      	ldrb	r3, [r3, #0]
    d9c4:	2b09      	cmp	r3, #9
    d9c6:	d107      	bne.n	d9d8 <Radio_WriteConfiguration+0x184>
    d9c8:	2031      	movs	r0, #49	; 0x31
    d9ca:	47b0      	blx	r6
    d9cc:	2180      	movs	r1, #128	; 0x80
    d9ce:	4249      	negs	r1, r1
    d9d0:	4301      	orrs	r1, r0
    d9d2:	b2c9      	uxtb	r1, r1
    d9d4:	2031      	movs	r0, #49	; 0x31
    d9d6:	47a8      	blx	r5
    d9d8:	2033      	movs	r0, #51	; 0x33
    d9da:	47b0      	blx	r6
    d9dc:	1da3      	adds	r3, r4, #6
    d9de:	7fd9      	ldrb	r1, [r3, #31]
    d9e0:	2340      	movs	r3, #64	; 0x40
    d9e2:	0189      	lsls	r1, r1, #6
    d9e4:	4398      	bics	r0, r3
    d9e6:	4019      	ands	r1, r3
    d9e8:	4301      	orrs	r1, r0
    d9ea:	b2c9      	uxtb	r1, r1
    d9ec:	2033      	movs	r0, #51	; 0x33
    d9ee:	47a8      	blx	r5
    d9f0:	8aa1      	ldrh	r1, [r4, #20]
    d9f2:	2020      	movs	r0, #32
    d9f4:	0a09      	lsrs	r1, r1, #8
    d9f6:	47a8      	blx	r5
    d9f8:	7d21      	ldrb	r1, [r4, #20]
    d9fa:	2021      	movs	r0, #33	; 0x21
    d9fc:	47a8      	blx	r5
    d9fe:	2100      	movs	r1, #0
    da00:	200d      	movs	r0, #13
    da02:	47a8      	blx	r5
    da04:	2100      	movs	r1, #0
    da06:	200e      	movs	r0, #14
    da08:	47a8      	blx	r5
    da0a:	2100      	movs	r1, #0
    da0c:	200f      	movs	r0, #15
    da0e:	47a8      	blx	r5
    da10:	0023      	movs	r3, r4
    da12:	3331      	adds	r3, #49	; 0x31
    da14:	781b      	ldrb	r3, [r3, #0]
    da16:	2b12      	cmp	r3, #18
    da18:	d120      	bne.n	da5c <Radio_WriteConfiguration+0x208>
    da1a:	0023      	movs	r3, r4
    da1c:	3336      	adds	r3, #54	; 0x36
    da1e:	781b      	ldrb	r3, [r3, #0]
    da20:	2b09      	cmp	r3, #9
    da22:	d000      	beq.n	da26 <Radio_WriteConfiguration+0x1d2>
    da24:	e072      	b.n	db0c <Radio_WriteConfiguration+0x2b8>
    da26:	4a44      	ldr	r2, [pc, #272]	; (db38 <Radio_WriteConfiguration+0x2e4>)
    da28:	6823      	ldr	r3, [r4, #0]
    da2a:	1899      	adds	r1, r3, r2
    da2c:	4a43      	ldr	r2, [pc, #268]	; (db3c <Radio_WriteConfiguration+0x2e8>)
    da2e:	4291      	cmp	r1, r2
    da30:	d862      	bhi.n	daf8 <Radio_WriteConfiguration+0x2a4>
    da32:	2102      	movs	r1, #2
    da34:	2036      	movs	r0, #54	; 0x36
    da36:	47a8      	blx	r5
    da38:	2164      	movs	r1, #100	; 0x64
    da3a:	203a      	movs	r0, #58	; 0x3a
    da3c:	47a8      	blx	r5
    da3e:	0023      	movs	r3, r4
    da40:	3336      	adds	r3, #54	; 0x36
    da42:	781b      	ldrb	r3, [r3, #0]
    da44:	2165      	movs	r1, #101	; 0x65
    da46:	203a      	movs	r0, #58	; 0x3a
    da48:	2b09      	cmp	r3, #9
    da4a:	d162      	bne.n	db12 <Radio_WriteConfiguration+0x2be>
    da4c:	3406      	adds	r4, #6
    da4e:	7fe3      	ldrb	r3, [r4, #31]
    da50:	2b01      	cmp	r3, #1
    da52:	d15e      	bne.n	db12 <Radio_WriteConfiguration+0x2be>
    da54:	47a8      	blx	r5
    da56:	2119      	movs	r1, #25
    da58:	203b      	movs	r0, #59	; 0x3b
    da5a:	47a8      	blx	r5
    da5c:	21ff      	movs	r1, #255	; 0xff
    da5e:	2012      	movs	r0, #18
    da60:	47a8      	blx	r5
    da62:	b005      	add	sp, #20
    da64:	bdf0      	pop	{r4, r5, r6, r7, pc}
    da66:	b25b      	sxtb	r3, r3
    da68:	3303      	adds	r3, #3
    da6a:	db00      	blt.n	da6e <Radio_WriteConfiguration+0x21a>
    da6c:	e70f      	b.n	d88e <Radio_WriteConfiguration+0x3a>
    da6e:	4b34      	ldr	r3, [pc, #208]	; (db40 <Radio_WriteConfiguration+0x2ec>)
    da70:	781f      	ldrb	r7, [r3, #0]
    da72:	e70c      	b.n	d88e <Radio_WriteConfiguration+0x3a>
    da74:	2170      	movs	r1, #112	; 0x70
    da76:	9b01      	ldr	r3, [sp, #4]
    da78:	4319      	orrs	r1, r3
    da7a:	b2c9      	uxtb	r1, r1
    da7c:	e719      	b.n	d8b2 <Radio_WriteConfiguration+0x5e>
    da7e:	2b01      	cmp	r3, #1
    da80:	dd07      	ble.n	da92 <Radio_WriteConfiguration+0x23e>
    da82:	2714      	movs	r7, #20
    da84:	2b13      	cmp	r3, #19
    da86:	dc06      	bgt.n	da96 <Radio_WriteConfiguration+0x242>
    da88:	1c1f      	adds	r7, r3, #0
    da8a:	2b11      	cmp	r3, #17
    da8c:	dd02      	ble.n	da94 <Radio_WriteConfiguration+0x240>
    da8e:	2711      	movs	r7, #17
    da90:	e000      	b.n	da94 <Radio_WriteConfiguration+0x240>
    da92:	2702      	movs	r7, #2
    da94:	b27f      	sxtb	r7, r7
    da96:	200b      	movs	r0, #11
    da98:	47b0      	blx	r6
    da9a:	9003      	str	r0, [sp, #12]
    da9c:	204d      	movs	r0, #77	; 0x4d
    da9e:	47b0      	blx	r6
    daa0:	2307      	movs	r3, #7
    daa2:	4398      	bics	r0, r3
    daa4:	b2c1      	uxtb	r1, r0
    daa6:	2f14      	cmp	r7, #20
    daa8:	d112      	bne.n	dad0 <Radio_WriteConfiguration+0x27c>
    daaa:	4319      	orrs	r1, r3
    daac:	9b03      	ldr	r3, [sp, #12]
    daae:	37cb      	adds	r7, #203	; 0xcb
    dab0:	403b      	ands	r3, r7
    dab2:	001f      	movs	r7, r3
    dab4:	230f      	movs	r3, #15
    dab6:	9301      	str	r3, [sp, #4]
    dab8:	204d      	movs	r0, #77	; 0x4d
    daba:	47a8      	blx	r5
    dabc:	2180      	movs	r1, #128	; 0x80
    dabe:	9b01      	ldr	r3, [sp, #4]
    dac0:	4249      	negs	r1, r1
    dac2:	4319      	orrs	r1, r3
    dac4:	b2c9      	uxtb	r1, r1
    dac6:	2009      	movs	r0, #9
    dac8:	47a8      	blx	r5
    daca:	0039      	movs	r1, r7
    dacc:	200b      	movs	r0, #11
    dace:	e6f1      	b.n	d8b4 <Radio_WriteConfiguration+0x60>
    dad0:	3f02      	subs	r7, #2
    dad2:	b27b      	sxtb	r3, r7
    dad4:	2720      	movs	r7, #32
    dad6:	2004      	movs	r0, #4
    dad8:	9301      	str	r3, [sp, #4]
    dada:	9b03      	ldr	r3, [sp, #12]
    dadc:	4301      	orrs	r1, r0
    dade:	431f      	orrs	r7, r3
    dae0:	b2ff      	uxtb	r7, r7
    dae2:	e7e9      	b.n	dab8 <Radio_WriteConfiguration+0x264>
    dae4:	23fa      	movs	r3, #250	; 0xfa
    dae6:	e71f      	b.n	d928 <Radio_WriteConfiguration+0xd4>
    dae8:	23fa      	movs	r3, #250	; 0xfa
    daea:	005b      	lsls	r3, r3, #1
    daec:	e71c      	b.n	d928 <Radio_WriteConfiguration+0xd4>
    daee:	0019      	movs	r1, r3
    daf0:	e71b      	b.n	d92a <Radio_WriteConfiguration+0xd6>
    daf2:	21f7      	movs	r1, #247	; 0xf7
    daf4:	4008      	ands	r0, r1
    daf6:	e73c      	b.n	d972 <Radio_WriteConfiguration+0x11e>
    daf8:	4a12      	ldr	r2, [pc, #72]	; (db44 <Radio_WriteConfiguration+0x2f0>)
    dafa:	189b      	adds	r3, r3, r2
    dafc:	4a12      	ldr	r2, [pc, #72]	; (db48 <Radio_WriteConfiguration+0x2f4>)
    dafe:	4293      	cmp	r3, r2
    db00:	d804      	bhi.n	db0c <Radio_WriteConfiguration+0x2b8>
    db02:	2102      	movs	r1, #2
    db04:	2036      	movs	r0, #54	; 0x36
    db06:	47a8      	blx	r5
    db08:	217f      	movs	r1, #127	; 0x7f
    db0a:	e796      	b.n	da3a <Radio_WriteConfiguration+0x1e6>
    db0c:	2103      	movs	r1, #3
    db0e:	2036      	movs	r0, #54	; 0x36
    db10:	e794      	b.n	da3c <Radio_WriteConfiguration+0x1e8>
    db12:	47a8      	blx	r5
    db14:	211d      	movs	r1, #29
    db16:	e79f      	b.n	da58 <Radio_WriteConfiguration+0x204>
    db18:	20000654 	.word	0x20000654
    db1c:	00001339 	.word	0x00001339
    db20:	0000d80d 	.word	0x0000d80d
    db24:	00007325 	.word	0x00007325
    db28:	000072fd 	.word	0x000072fd
    db2c:	2000068a 	.word	0x2000068a
    db30:	00ffff00 	.word	0x00ffff00
    db34:	00070b00 	.word	0x00070b00
    db38:	cc9eec80 	.word	0xcc9eec80
    db3c:	096ae380 	.word	0x096ae380
    db40:	00013014 	.word	0x00013014
    db44:	e78fe580 	.word	0xe78fe580
    db48:	06dac2c0 	.word	0x06dac2c0
    db4c:	6863      	ldr	r3, [r4, #4]
    db4e:	492c      	ldr	r1, [pc, #176]	; (dc00 <Radio_WriteConfiguration+0x3ac>)
    db50:	0218      	lsls	r0, r3, #8
    db52:	4b2c      	ldr	r3, [pc, #176]	; (dc04 <Radio_WriteConfiguration+0x3b0>)
    db54:	4798      	blx	r3
    db56:	0007      	movs	r7, r0
    db58:	0a01      	lsrs	r1, r0, #8
    db5a:	b2c9      	uxtb	r1, r1
    db5c:	2004      	movs	r0, #4
    db5e:	47a8      	blx	r5
    db60:	b2f9      	uxtb	r1, r7
    db62:	2005      	movs	r0, #5
    db64:	47a8      	blx	r5
    db66:	4b27      	ldr	r3, [pc, #156]	; (dc04 <Radio_WriteConfiguration+0x3b0>)
    db68:	68a1      	ldr	r1, [r4, #8]
    db6a:	4827      	ldr	r0, [pc, #156]	; (dc08 <Radio_WriteConfiguration+0x3b4>)
    db6c:	4798      	blx	r3
    db6e:	0007      	movs	r7, r0
    db70:	0a01      	lsrs	r1, r0, #8
    db72:	b2c9      	uxtb	r1, r1
    db74:	2002      	movs	r0, #2
    db76:	47a8      	blx	r5
    db78:	b2f9      	uxtb	r1, r7
    db7a:	2003      	movs	r0, #3
    db7c:	47a8      	blx	r5
    db7e:	2100      	movs	r1, #0
    db80:	205d      	movs	r0, #93	; 0x5d
    db82:	47a8      	blx	r5
    db84:	8aa1      	ldrh	r1, [r4, #20]
    db86:	2025      	movs	r0, #37	; 0x25
    db88:	0a09      	lsrs	r1, r1, #8
    db8a:	47a8      	blx	r5
    db8c:	7d21      	ldrb	r1, [r4, #20]
    db8e:	2026      	movs	r0, #38	; 0x26
    db90:	47a8      	blx	r5
    db92:	219e      	movs	r1, #158	; 0x9e
    db94:	200d      	movs	r0, #13
    db96:	47a8      	blx	r5
    db98:	21a0      	movs	r1, #160	; 0xa0
    db9a:	2035      	movs	r0, #53	; 0x35
    db9c:	47a8      	blx	r5
    db9e:	200a      	movs	r0, #10
    dba0:	47b0      	blx	r6
    dba2:	0023      	movs	r3, r4
    dba4:	3337      	adds	r3, #55	; 0x37
    dba6:	7819      	ldrb	r1, [r3, #0]
    dba8:	2360      	movs	r3, #96	; 0x60
    dbaa:	0149      	lsls	r1, r1, #5
    dbac:	4398      	bics	r0, r3
    dbae:	4301      	orrs	r1, r0
    dbb0:	b2c9      	uxtb	r1, r1
    dbb2:	200a      	movs	r0, #10
    dbb4:	47a8      	blx	r5
    dbb6:	1d23      	adds	r3, r4, #4
    dbb8:	7fdb      	ldrb	r3, [r3, #31]
    dbba:	21c0      	movs	r1, #192	; 0xc0
    dbbc:	2b00      	cmp	r3, #0
    dbbe:	d000      	beq.n	dbc2 <Radio_WriteConfiguration+0x36e>
    dbc0:	3110      	adds	r1, #16
    dbc2:	2030      	movs	r0, #48	; 0x30
    dbc4:	47a8      	blx	r5
    dbc6:	2600      	movs	r6, #0
    dbc8:	1ca3      	adds	r3, r4, #2
    dbca:	7fd9      	ldrb	r1, [r3, #31]
    dbcc:	428e      	cmp	r6, r1
    dbce:	d30d      	bcc.n	dbec <Radio_WriteConfiguration+0x398>
    dbd0:	2900      	cmp	r1, #0
    dbd2:	d003      	beq.n	dbdc <Radio_WriteConfiguration+0x388>
    dbd4:	2310      	movs	r3, #16
    dbd6:	3901      	subs	r1, #1
    dbd8:	4319      	orrs	r1, r3
    dbda:	b2c9      	uxtb	r1, r1
    dbdc:	2027      	movs	r0, #39	; 0x27
    dbde:	47a8      	blx	r5
    dbe0:	21ff      	movs	r1, #255	; 0xff
    dbe2:	203e      	movs	r0, #62	; 0x3e
    dbe4:	47a8      	blx	r5
    dbe6:	21ff      	movs	r1, #255	; 0xff
    dbe8:	203f      	movs	r0, #63	; 0x3f
    dbea:	e739      	b.n	da60 <Radio_WriteConfiguration+0x20c>
    dbec:	0030      	movs	r0, r6
    dbee:	19a3      	adds	r3, r4, r6
    dbf0:	3028      	adds	r0, #40	; 0x28
    dbf2:	7e59      	ldrb	r1, [r3, #25]
    dbf4:	b2c0      	uxtb	r0, r0
    dbf6:	3601      	adds	r6, #1
    dbf8:	47a8      	blx	r5
    dbfa:	b2f6      	uxtb	r6, r6
    dbfc:	e7e4      	b.n	dbc8 <Radio_WriteConfiguration+0x374>
    dbfe:	46c0      	nop			; (mov r8, r8)
    dc00:	00003d09 	.word	0x00003d09
    dc04:	0000ef0d 	.word	0x0000ef0d
    dc08:	01e84800 	.word	0x01e84800

0000dc0c <RADIO_getMappingAndOpmode>:
    dc0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    dc0e:	0006      	movs	r6, r0
    dc10:	4d06      	ldr	r5, [pc, #24]	; (dc2c <RADIO_getMappingAndOpmode+0x20>)
    dc12:	2040      	movs	r0, #64	; 0x40
    dc14:	001f      	movs	r7, r3
    dc16:	0014      	movs	r4, r2
    dc18:	9101      	str	r1, [sp, #4]
    dc1a:	47a8      	blx	r5
    dc1c:	4004      	ands	r4, r0
    dc1e:	413c      	asrs	r4, r7
    dc20:	2001      	movs	r0, #1
    dc22:	7034      	strb	r4, [r6, #0]
    dc24:	47a8      	blx	r5
    dc26:	9b01      	ldr	r3, [sp, #4]
    dc28:	7018      	strb	r0, [r3, #0]
    dc2a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    dc2c:	00007325 	.word	0x00007325

0000dc30 <RADIO_UnhandledInterrupt.part.0>:
    dc30:	b510      	push	{r4, lr}
    dc32:	21ff      	movs	r1, #255	; 0xff
    dc34:	2012      	movs	r0, #18
    dc36:	4b01      	ldr	r3, [pc, #4]	; (dc3c <RADIO_UnhandledInterrupt.part.0+0xc>)
    dc38:	4798      	blx	r3
    dc3a:	bd10      	pop	{r4, pc}
    dc3c:	000072fd 	.word	0x000072fd

0000dc40 <RADIO_UnhandledInterrupt>:
    dc40:	b510      	push	{r4, lr}
    dc42:	2801      	cmp	r0, #1
    dc44:	d102      	bne.n	dc4c <RADIO_UnhandledInterrupt+0xc>
    dc46:	4b05      	ldr	r3, [pc, #20]	; (dc5c <RADIO_UnhandledInterrupt+0x1c>)
    dc48:	4798      	blx	r3
    dc4a:	bd10      	pop	{r4, pc}
    dc4c:	21ff      	movs	r1, #255	; 0xff
    dc4e:	203e      	movs	r0, #62	; 0x3e
    dc50:	4c03      	ldr	r4, [pc, #12]	; (dc60 <RADIO_UnhandledInterrupt+0x20>)
    dc52:	47a0      	blx	r4
    dc54:	21ff      	movs	r1, #255	; 0xff
    dc56:	203f      	movs	r0, #63	; 0x3f
    dc58:	47a0      	blx	r4
    dc5a:	e7f6      	b.n	dc4a <RADIO_UnhandledInterrupt+0xa>
    dc5c:	0000dc31 	.word	0x0000dc31
    dc60:	000072fd 	.word	0x000072fd

0000dc64 <RADIO_DIO0>:
    dc64:	b573      	push	{r0, r1, r4, r5, r6, lr}
    dc66:	466b      	mov	r3, sp
    dc68:	1ddc      	adds	r4, r3, #7
    dc6a:	1d9d      	adds	r5, r3, #6
    dc6c:	22c0      	movs	r2, #192	; 0xc0
    dc6e:	2306      	movs	r3, #6
    dc70:	0028      	movs	r0, r5
    dc72:	0021      	movs	r1, r4
    dc74:	4e12      	ldr	r6, [pc, #72]	; (dcc0 <RADIO_DIO0+0x5c>)
    dc76:	47b0      	blx	r6
    dc78:	7823      	ldrb	r3, [r4, #0]
    dc7a:	7828      	ldrb	r0, [r5, #0]
    dc7c:	b25a      	sxtb	r2, r3
    dc7e:	b2c0      	uxtb	r0, r0
    dc80:	2a00      	cmp	r2, #0
    dc82:	da0b      	bge.n	dc9c <RADIO_DIO0+0x38>
    dc84:	2800      	cmp	r0, #0
    dc86:	d004      	beq.n	dc92 <RADIO_DIO0+0x2e>
    dc88:	2801      	cmp	r0, #1
    dc8a:	d005      	beq.n	dc98 <RADIO_DIO0+0x34>
    dc8c:	4b0d      	ldr	r3, [pc, #52]	; (dcc4 <RADIO_DIO0+0x60>)
    dc8e:	4798      	blx	r3
    dc90:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    dc92:	4b0d      	ldr	r3, [pc, #52]	; (dcc8 <RADIO_DIO0+0x64>)
    dc94:	4798      	blx	r3
    dc96:	e7fb      	b.n	dc90 <RADIO_DIO0+0x2c>
    dc98:	4b0c      	ldr	r3, [pc, #48]	; (dccc <RADIO_DIO0+0x68>)
    dc9a:	e7fb      	b.n	dc94 <RADIO_DIO0+0x30>
    dc9c:	2800      	cmp	r0, #0
    dc9e:	d10a      	bne.n	dcb6 <RADIO_DIO0+0x52>
    dca0:	2207      	movs	r2, #7
    dca2:	4013      	ands	r3, r2
    dca4:	7023      	strb	r3, [r4, #0]
    dca6:	2b03      	cmp	r3, #3
    dca8:	d101      	bne.n	dcae <RADIO_DIO0+0x4a>
    dcaa:	4b09      	ldr	r3, [pc, #36]	; (dcd0 <RADIO_DIO0+0x6c>)
    dcac:	e7f2      	b.n	dc94 <RADIO_DIO0+0x30>
    dcae:	2b05      	cmp	r3, #5
    dcb0:	d102      	bne.n	dcb8 <RADIO_DIO0+0x54>
    dcb2:	4b08      	ldr	r3, [pc, #32]	; (dcd4 <RADIO_DIO0+0x70>)
    dcb4:	e7ee      	b.n	dc94 <RADIO_DIO0+0x30>
    dcb6:	2000      	movs	r0, #0
    dcb8:	4b07      	ldr	r3, [pc, #28]	; (dcd8 <RADIO_DIO0+0x74>)
    dcba:	4798      	blx	r3
    dcbc:	e7e8      	b.n	dc90 <RADIO_DIO0+0x2c>
    dcbe:	46c0      	nop			; (mov r8, r8)
    dcc0:	0000dc0d 	.word	0x0000dc0d
    dcc4:	0000dc31 	.word	0x0000dc31
    dcc8:	0000e3e5 	.word	0x0000e3e5
    dccc:	0000e2f5 	.word	0x0000e2f5
    dcd0:	0000e371 	.word	0x0000e371
    dcd4:	0000e461 	.word	0x0000e461
    dcd8:	0000dc41 	.word	0x0000dc41

0000dcdc <RADIO_DIO1>:
    dcdc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    dcde:	466b      	mov	r3, sp
    dce0:	1ddc      	adds	r4, r3, #7
    dce2:	1d9d      	adds	r5, r3, #6
    dce4:	2230      	movs	r2, #48	; 0x30
    dce6:	2304      	movs	r3, #4
    dce8:	0021      	movs	r1, r4
    dcea:	0028      	movs	r0, r5
    dcec:	4e11      	ldr	r6, [pc, #68]	; (dd34 <RADIO_DIO1+0x58>)
    dcee:	47b0      	blx	r6
    dcf0:	7822      	ldrb	r2, [r4, #0]
    dcf2:	782b      	ldrb	r3, [r5, #0]
    dcf4:	b251      	sxtb	r1, r2
    dcf6:	2900      	cmp	r1, #0
    dcf8:	da0c      	bge.n	dd14 <RADIO_DIO1+0x38>
    dcfa:	b2db      	uxtb	r3, r3
    dcfc:	2b00      	cmp	r3, #0
    dcfe:	d004      	beq.n	dd0a <RADIO_DIO1+0x2e>
    dd00:	2b01      	cmp	r3, #1
    dd02:	d005      	beq.n	dd10 <RADIO_DIO1+0x34>
    dd04:	4b0c      	ldr	r3, [pc, #48]	; (dd38 <RADIO_DIO1+0x5c>)
    dd06:	4798      	blx	r3
    dd08:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    dd0a:	4b0c      	ldr	r3, [pc, #48]	; (dd3c <RADIO_DIO1+0x60>)
    dd0c:	4798      	blx	r3
    dd0e:	e7fb      	b.n	dd08 <RADIO_DIO1+0x2c>
    dd10:	4b0b      	ldr	r3, [pc, #44]	; (dd40 <RADIO_DIO1+0x64>)
    dd12:	e7fb      	b.n	dd0c <RADIO_DIO1+0x30>
    dd14:	2107      	movs	r1, #7
    dd16:	b2db      	uxtb	r3, r3
    dd18:	400a      	ands	r2, r1
    dd1a:	7022      	strb	r2, [r4, #0]
    dd1c:	2b00      	cmp	r3, #0
    dd1e:	d005      	beq.n	dd2c <RADIO_DIO1+0x50>
    dd20:	2b01      	cmp	r3, #1
    dd22:	d1f1      	bne.n	dd08 <RADIO_DIO1+0x2c>
    dd24:	2a03      	cmp	r2, #3
    dd26:	d1ef      	bne.n	dd08 <RADIO_DIO1+0x2c>
    dd28:	4b06      	ldr	r3, [pc, #24]	; (dd44 <RADIO_DIO1+0x68>)
    dd2a:	e7ef      	b.n	dd0c <RADIO_DIO1+0x30>
    dd2c:	4b06      	ldr	r3, [pc, #24]	; (dd48 <RADIO_DIO1+0x6c>)
    dd2e:	2a05      	cmp	r2, #5
    dd30:	d1ea      	bne.n	dd08 <RADIO_DIO1+0x2c>
    dd32:	e7eb      	b.n	dd0c <RADIO_DIO1+0x30>
    dd34:	0000dc0d 	.word	0x0000dc0d
    dd38:	0000dc31 	.word	0x0000dc31
    dd3c:	0000e279 	.word	0x0000e279
    dd40:	0000141d 	.word	0x0000141d
    dd44:	0000e0a1 	.word	0x0000e0a1
    dd48:	0000e005 	.word	0x0000e005

0000dd4c <RADIO_DIO2>:
    dd4c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    dd4e:	466b      	mov	r3, sp
    dd50:	1ddc      	adds	r4, r3, #7
    dd52:	1d9d      	adds	r5, r3, #6
    dd54:	220c      	movs	r2, #12
    dd56:	2302      	movs	r3, #2
    dd58:	0021      	movs	r1, r4
    dd5a:	0028      	movs	r0, r5
    dd5c:	4e0b      	ldr	r6, [pc, #44]	; (dd8c <RADIO_DIO2+0x40>)
    dd5e:	47b0      	blx	r6
    dd60:	7823      	ldrb	r3, [r4, #0]
    dd62:	782a      	ldrb	r2, [r5, #0]
    dd64:	b259      	sxtb	r1, r3
    dd66:	2900      	cmp	r1, #0
    dd68:	da05      	bge.n	dd76 <RADIO_DIO2+0x2a>
    dd6a:	4b09      	ldr	r3, [pc, #36]	; (dd90 <RADIO_DIO2+0x44>)
    dd6c:	2a02      	cmp	r2, #2
    dd6e:	d90a      	bls.n	dd86 <RADIO_DIO2+0x3a>
    dd70:	4b08      	ldr	r3, [pc, #32]	; (dd94 <RADIO_DIO2+0x48>)
    dd72:	4798      	blx	r3
    dd74:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    dd76:	2107      	movs	r1, #7
    dd78:	400b      	ands	r3, r1
    dd7a:	7023      	strb	r3, [r4, #0]
    dd7c:	2a03      	cmp	r2, #3
    dd7e:	d1f9      	bne.n	dd74 <RADIO_DIO2+0x28>
    dd80:	2b05      	cmp	r3, #5
    dd82:	d1f7      	bne.n	dd74 <RADIO_DIO2+0x28>
    dd84:	4b04      	ldr	r3, [pc, #16]	; (dd98 <RADIO_DIO2+0x4c>)
    dd86:	4798      	blx	r3
    dd88:	e7f4      	b.n	dd74 <RADIO_DIO2+0x28>
    dd8a:	46c0      	nop			; (mov r8, r8)
    dd8c:	0000dc0d 	.word	0x0000dc0d
    dd90:	0000141d 	.word	0x0000141d
    dd94:	0000dc31 	.word	0x0000dc31
    dd98:	0000dfd5 	.word	0x0000dfd5

0000dd9c <RADIO_DIO3>:
    dd9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    dd9e:	466b      	mov	r3, sp
    dda0:	4668      	mov	r0, sp
    dda2:	1ddc      	adds	r4, r3, #7
    dda4:	2203      	movs	r2, #3
    dda6:	2300      	movs	r3, #0
    dda8:	0021      	movs	r1, r4
    ddaa:	3006      	adds	r0, #6
    ddac:	4d03      	ldr	r5, [pc, #12]	; (ddbc <RADIO_DIO3+0x20>)
    ddae:	47a8      	blx	r5
    ddb0:	7823      	ldrb	r3, [r4, #0]
    ddb2:	2b7f      	cmp	r3, #127	; 0x7f
    ddb4:	d901      	bls.n	ddba <RADIO_DIO3+0x1e>
    ddb6:	4b02      	ldr	r3, [pc, #8]	; (ddc0 <RADIO_DIO3+0x24>)
    ddb8:	4798      	blx	r3
    ddba:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    ddbc:	0000dc0d 	.word	0x0000dc0d
    ddc0:	0000dc31 	.word	0x0000dc31

0000ddc4 <RADIO_DIO4>:
    ddc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    ddc6:	466b      	mov	r3, sp
    ddc8:	4668      	mov	r0, sp
    ddca:	1ddc      	adds	r4, r3, #7
    ddcc:	2306      	movs	r3, #6
    ddce:	22c0      	movs	r2, #192	; 0xc0
    ddd0:	18c0      	adds	r0, r0, r3
    ddd2:	0021      	movs	r1, r4
    ddd4:	4d03      	ldr	r5, [pc, #12]	; (dde4 <RADIO_DIO4+0x20>)
    ddd6:	47a8      	blx	r5
    ddd8:	7823      	ldrb	r3, [r4, #0]
    ddda:	2b7f      	cmp	r3, #127	; 0x7f
    dddc:	d901      	bls.n	dde2 <RADIO_DIO4+0x1e>
    ddde:	4b02      	ldr	r3, [pc, #8]	; (dde8 <RADIO_DIO4+0x24>)
    dde0:	4798      	blx	r3
    dde2:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    dde4:	0000dc0d 	.word	0x0000dc0d
    dde8:	0000dc31 	.word	0x0000dc31

0000ddec <RADIO_DIO5>:
    ddec:	b537      	push	{r0, r1, r2, r4, r5, lr}
    ddee:	466b      	mov	r3, sp
    ddf0:	4668      	mov	r0, sp
    ddf2:	1ddc      	adds	r4, r3, #7
    ddf4:	2230      	movs	r2, #48	; 0x30
    ddf6:	2304      	movs	r3, #4
    ddf8:	0021      	movs	r1, r4
    ddfa:	3006      	adds	r0, #6
    ddfc:	4d03      	ldr	r5, [pc, #12]	; (de0c <RADIO_DIO5+0x20>)
    ddfe:	47a8      	blx	r5
    de00:	7823      	ldrb	r3, [r4, #0]
    de02:	2b7f      	cmp	r3, #127	; 0x7f
    de04:	d901      	bls.n	de0a <RADIO_DIO5+0x1e>
    de06:	4b02      	ldr	r3, [pc, #8]	; (de10 <RADIO_DIO5+0x24>)
    de08:	4798      	blx	r3
    de0a:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    de0c:	0000dc0d 	.word	0x0000dc0d
    de10:	0000dc31 	.word	0x0000dc31

0000de14 <radioPostTask>:
    de14:	b510      	push	{r4, lr}
    de16:	0004      	movs	r4, r0
    de18:	4b05      	ldr	r3, [pc, #20]	; (de30 <radioPostTask+0x1c>)
    de1a:	4798      	blx	r3
    de1c:	4b05      	ldr	r3, [pc, #20]	; (de34 <radioPostTask+0x20>)
    de1e:	8818      	ldrh	r0, [r3, #0]
    de20:	4320      	orrs	r0, r4
    de22:	8018      	strh	r0, [r3, #0]
    de24:	4b04      	ldr	r3, [pc, #16]	; (de38 <radioPostTask+0x24>)
    de26:	4798      	blx	r3
    de28:	2002      	movs	r0, #2
    de2a:	4b04      	ldr	r3, [pc, #16]	; (de3c <radioPostTask+0x28>)
    de2c:	4798      	blx	r3
    de2e:	bd10      	pop	{r4, pc}
    de30:	00007475 	.word	0x00007475
    de34:	2000058e 	.word	0x2000058e
    de38:	00007481 	.word	0x00007481
    de3c:	000015d1 	.word	0x000015d1

0000de40 <radioClearTask>:
    de40:	b510      	push	{r4, lr}
    de42:	0004      	movs	r4, r0
    de44:	4b04      	ldr	r3, [pc, #16]	; (de58 <radioClearTask+0x18>)
    de46:	4798      	blx	r3
    de48:	4a04      	ldr	r2, [pc, #16]	; (de5c <radioClearTask+0x1c>)
    de4a:	8813      	ldrh	r3, [r2, #0]
    de4c:	43a3      	bics	r3, r4
    de4e:	8013      	strh	r3, [r2, #0]
    de50:	4b03      	ldr	r3, [pc, #12]	; (de60 <radioClearTask+0x20>)
    de52:	4798      	blx	r3
    de54:	bd10      	pop	{r4, pc}
    de56:	46c0      	nop			; (mov r8, r8)
    de58:	00007475 	.word	0x00007475
    de5c:	2000058e 	.word	0x2000058e
    de60:	00007481 	.word	0x00007481

0000de64 <RADIO_TaskHandler>:
    de64:	b570      	push	{r4, r5, r6, lr}
    de66:	2400      	movs	r4, #0
    de68:	4d10      	ldr	r5, [pc, #64]	; (deac <RADIO_TaskHandler+0x48>)
    de6a:	2601      	movs	r6, #1
    de6c:	882b      	ldrh	r3, [r5, #0]
    de6e:	42a3      	cmp	r3, r4
    de70:	d015      	beq.n	de9e <RADIO_TaskHandler+0x3a>
    de72:	882b      	ldrh	r3, [r5, #0]
    de74:	4123      	asrs	r3, r4
    de76:	4233      	tst	r3, r6
    de78:	d013      	beq.n	dea2 <RADIO_TaskHandler+0x3e>
    de7a:	40a6      	lsls	r6, r4
    de7c:	4b0c      	ldr	r3, [pc, #48]	; (deb0 <RADIO_TaskHandler+0x4c>)
    de7e:	4798      	blx	r3
    de80:	882b      	ldrh	r3, [r5, #0]
    de82:	00a4      	lsls	r4, r4, #2
    de84:	43b3      	bics	r3, r6
    de86:	802b      	strh	r3, [r5, #0]
    de88:	4b0a      	ldr	r3, [pc, #40]	; (deb4 <RADIO_TaskHandler+0x50>)
    de8a:	4798      	blx	r3
    de8c:	4b0a      	ldr	r3, [pc, #40]	; (deb8 <RADIO_TaskHandler+0x54>)
    de8e:	58e3      	ldr	r3, [r4, r3]
    de90:	4798      	blx	r3
    de92:	882b      	ldrh	r3, [r5, #0]
    de94:	2b00      	cmp	r3, #0
    de96:	d002      	beq.n	de9e <RADIO_TaskHandler+0x3a>
    de98:	2002      	movs	r0, #2
    de9a:	4b08      	ldr	r3, [pc, #32]	; (debc <RADIO_TaskHandler+0x58>)
    de9c:	4798      	blx	r3
    de9e:	2000      	movs	r0, #0
    dea0:	bd70      	pop	{r4, r5, r6, pc}
    dea2:	3401      	adds	r4, #1
    dea4:	2c05      	cmp	r4, #5
    dea6:	d1e4      	bne.n	de72 <RADIO_TaskHandler+0xe>
    dea8:	e7f9      	b.n	de9e <RADIO_TaskHandler+0x3a>
    deaa:	46c0      	nop			; (mov r8, r8)
    deac:	2000058e 	.word	0x2000058e
    deb0:	00007475 	.word	0x00007475
    deb4:	00007481 	.word	0x00007481
    deb8:	00013018 	.word	0x00013018
    debc:	000015d1 	.word	0x000015d1

0000dec0 <RadioSetState>:
    dec0:	4b01      	ldr	r3, [pc, #4]	; (dec8 <RadioSetState+0x8>)
    dec2:	7018      	strb	r0, [r3, #0]
    dec4:	4770      	bx	lr
    dec6:	46c0      	nop			; (mov r8, r8)
    dec8:	2000126b 	.word	0x2000126b

0000decc <RADIO_GetState>:
    decc:	4b01      	ldr	r3, [pc, #4]	; (ded4 <RADIO_GetState+0x8>)
    dece:	7818      	ldrb	r0, [r3, #0]
    ded0:	b2c0      	uxtb	r0, r0
    ded2:	4770      	bx	lr
    ded4:	2000126b 	.word	0x2000126b

0000ded8 <RADIO_SetCallbackBitmask>:
    ded8:	4a02      	ldr	r2, [pc, #8]	; (dee4 <RADIO_SetCallbackBitmask+0xc>)
    deda:	7813      	ldrb	r3, [r2, #0]
    dedc:	4318      	orrs	r0, r3
    dede:	7010      	strb	r0, [r2, #0]
    dee0:	4770      	bx	lr
    dee2:	46c0      	nop			; (mov r8, r8)
    dee4:	2000126a 	.word	0x2000126a

0000dee8 <RADIO_Transmit>:
    dee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    deea:	4e12      	ldr	r6, [pc, #72]	; (df34 <RADIO_Transmit+0x4c>)
    deec:	0007      	movs	r7, r0
    deee:	7833      	ldrb	r3, [r6, #0]
    def0:	2404      	movs	r4, #4
    def2:	2b01      	cmp	r3, #1
    def4:	d115      	bne.n	df22 <RADIO_Transmit+0x3a>
    def6:	4d10      	ldr	r5, [pc, #64]	; (df38 <RADIO_Transmit+0x50>)
    def8:	002b      	movs	r3, r5
    defa:	332f      	adds	r3, #47	; 0x2f
    defc:	7818      	ldrb	r0, [r3, #0]
    defe:	4b0f      	ldr	r3, [pc, #60]	; (df3c <RADIO_Transmit+0x54>)
    df00:	4798      	blx	r3
    df02:	783a      	ldrb	r2, [r7, #0]
    df04:	4b0e      	ldr	r3, [pc, #56]	; (df40 <RADIO_Transmit+0x58>)
    df06:	3541      	adds	r5, #65	; 0x41
    df08:	701a      	strb	r2, [r3, #0]
    df0a:	4b0e      	ldr	r3, [pc, #56]	; (df44 <RADIO_Transmit+0x5c>)
    df0c:	687a      	ldr	r2, [r7, #4]
    df0e:	601a      	str	r2, [r3, #0]
    df10:	782d      	ldrb	r5, [r5, #0]
    df12:	4b0d      	ldr	r3, [pc, #52]	; (df48 <RADIO_Transmit+0x60>)
    df14:	2d00      	cmp	r5, #0
    df16:	d006      	beq.n	df26 <RADIO_Transmit+0x3e>
    df18:	2203      	movs	r2, #3
    df1a:	2010      	movs	r0, #16
    df1c:	7032      	strb	r2, [r6, #0]
    df1e:	2400      	movs	r4, #0
    df20:	4798      	blx	r3
    df22:	0020      	movs	r0, r4
    df24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    df26:	2202      	movs	r2, #2
    df28:	0020      	movs	r0, r4
    df2a:	7032      	strb	r2, [r6, #0]
    df2c:	002c      	movs	r4, r5
    df2e:	4798      	blx	r3
    df30:	e7f7      	b.n	df22 <RADIO_Transmit+0x3a>
    df32:	46c0      	nop			; (mov r8, r8)
    df34:	2000126b 	.word	0x2000126b
    df38:	20000654 	.word	0x20000654
    df3c:	00001bf5 	.word	0x00001bf5
    df40:	200005a4 	.word	0x200005a4
    df44:	200005a0 	.word	0x200005a0
    df48:	0000de15 	.word	0x0000de15

0000df4c <Radio_FSKTxPayloadHandler>:
    df4c:	b570      	push	{r4, r5, r6, lr}
    df4e:	4b1c      	ldr	r3, [pc, #112]	; (dfc0 <Radio_FSKTxPayloadHandler+0x74>)
    df50:	000d      	movs	r5, r1
    df52:	4798      	blx	r3
    df54:	4c1b      	ldr	r4, [pc, #108]	; (dfc4 <Radio_FSKTxPayloadHandler+0x78>)
    df56:	3457      	adds	r4, #87	; 0x57
    df58:	7820      	ldrb	r0, [r4, #0]
    df5a:	b2c0      	uxtb	r0, r0
    df5c:	2800      	cmp	r0, #0
    df5e:	d112      	bne.n	df86 <Radio_FSKTxPayloadHandler+0x3a>
    df60:	2d00      	cmp	r5, #0
    df62:	d007      	beq.n	df74 <Radio_FSKTxPayloadHandler+0x28>
    df64:	4918      	ldr	r1, [pc, #96]	; (dfc8 <Radio_FSKTxPayloadHandler+0x7c>)
    df66:	4b19      	ldr	r3, [pc, #100]	; (dfcc <Radio_FSKTxPayloadHandler+0x80>)
    df68:	2d13      	cmp	r5, #19
    df6a:	d806      	bhi.n	df7a <Radio_FSKTxPayloadHandler+0x2e>
    df6c:	002a      	movs	r2, r5
    df6e:	6809      	ldr	r1, [r1, #0]
    df70:	4798      	blx	r3
    df72:	7025      	strb	r5, [r4, #0]
    df74:	4b16      	ldr	r3, [pc, #88]	; (dfd0 <Radio_FSKTxPayloadHandler+0x84>)
    df76:	4798      	blx	r3
    df78:	bd70      	pop	{r4, r5, r6, pc}
    df7a:	2214      	movs	r2, #20
    df7c:	6809      	ldr	r1, [r1, #0]
    df7e:	4798      	blx	r3
    df80:	2314      	movs	r3, #20
    df82:	7023      	strb	r3, [r4, #0]
    df84:	e7f6      	b.n	df74 <Radio_FSKTxPayloadHandler+0x28>
    df86:	7823      	ldrb	r3, [r4, #0]
    df88:	429d      	cmp	r5, r3
    df8a:	d0f3      	beq.n	df74 <Radio_FSKTxPayloadHandler+0x28>
    df8c:	7822      	ldrb	r2, [r4, #0]
    df8e:	480e      	ldr	r0, [pc, #56]	; (dfc8 <Radio_FSKTxPayloadHandler+0x7c>)
    df90:	1aaa      	subs	r2, r5, r2
    df92:	b2d2      	uxtb	r2, r2
    df94:	4b0d      	ldr	r3, [pc, #52]	; (dfcc <Radio_FSKTxPayloadHandler+0x80>)
    df96:	2a14      	cmp	r2, #20
    df98:	d807      	bhi.n	dfaa <Radio_FSKTxPayloadHandler+0x5e>
    df9a:	7826      	ldrb	r6, [r4, #0]
    df9c:	7822      	ldrb	r2, [r4, #0]
    df9e:	6801      	ldr	r1, [r0, #0]
    dfa0:	1aaa      	subs	r2, r5, r2
    dfa2:	b2d2      	uxtb	r2, r2
    dfa4:	1989      	adds	r1, r1, r6
    dfa6:	2000      	movs	r0, #0
    dfa8:	e7e2      	b.n	df70 <Radio_FSKTxPayloadHandler+0x24>
    dfaa:	7822      	ldrb	r2, [r4, #0]
    dfac:	6801      	ldr	r1, [r0, #0]
    dfae:	2000      	movs	r0, #0
    dfb0:	1889      	adds	r1, r1, r2
    dfb2:	2214      	movs	r2, #20
    dfb4:	4798      	blx	r3
    dfb6:	7823      	ldrb	r3, [r4, #0]
    dfb8:	3314      	adds	r3, #20
    dfba:	b2db      	uxtb	r3, r3
    dfbc:	e7e1      	b.n	df82 <Radio_FSKTxPayloadHandler+0x36>
    dfbe:	46c0      	nop			; (mov r8, r8)
    dfc0:	000085c5 	.word	0x000085c5
    dfc4:	20000654 	.word	0x20000654
    dfc8:	200005a0 	.word	0x200005a0
    dfcc:	00007351 	.word	0x00007351
    dfd0:	00008605 	.word	0x00008605

0000dfd4 <RADIO_FSKSyncAddr>:
    dfd4:	4b08      	ldr	r3, [pc, #32]	; (dff8 <RADIO_FSKSyncAddr+0x24>)
    dfd6:	b510      	push	{r4, lr}
    dfd8:	4798      	blx	r3
    dfda:	4b08      	ldr	r3, [pc, #32]	; (dffc <RADIO_FSKSyncAddr+0x28>)
    dfdc:	001a      	movs	r2, r3
    dfde:	3234      	adds	r2, #52	; 0x34
    dfe0:	7812      	ldrb	r2, [r2, #0]
    dfe2:	2a00      	cmp	r2, #0
    dfe4:	d104      	bne.n	dff0 <RADIO_FSKSyncAddr+0x1c>
    dfe6:	0019      	movs	r1, r3
    dfe8:	3357      	adds	r3, #87	; 0x57
    dfea:	312c      	adds	r1, #44	; 0x2c
    dfec:	700a      	strb	r2, [r1, #0]
    dfee:	701a      	strb	r2, [r3, #0]
    dff0:	4b03      	ldr	r3, [pc, #12]	; (e000 <RADIO_FSKSyncAddr+0x2c>)
    dff2:	4798      	blx	r3
    dff4:	bd10      	pop	{r4, pc}
    dff6:	46c0      	nop			; (mov r8, r8)
    dff8:	000085c5 	.word	0x000085c5
    dffc:	20000654 	.word	0x20000654
    e000:	00008605 	.word	0x00008605

0000e004 <RADIO_FSKFifoLevel>:
    e004:	b570      	push	{r4, r5, r6, lr}
    e006:	4b22      	ldr	r3, [pc, #136]	; (e090 <RADIO_FSKFifoLevel+0x8c>)
    e008:	4798      	blx	r3
    e00a:	4d22      	ldr	r5, [pc, #136]	; (e094 <RADIO_FSKFifoLevel+0x90>)
    e00c:	002a      	movs	r2, r5
    e00e:	002b      	movs	r3, r5
    e010:	322c      	adds	r2, #44	; 0x2c
    e012:	3357      	adds	r3, #87	; 0x57
    e014:	7810      	ldrb	r0, [r2, #0]
    e016:	7819      	ldrb	r1, [r3, #0]
    e018:	4288      	cmp	r0, r1
    e01a:	d105      	bne.n	e028 <RADIO_FSKFifoLevel+0x24>
    e01c:	7812      	ldrb	r2, [r2, #0]
    e01e:	2a00      	cmp	r2, #0
    e020:	d002      	beq.n	e028 <RADIO_FSKFifoLevel+0x24>
    e022:	781b      	ldrb	r3, [r3, #0]
    e024:	2b00      	cmp	r3, #0
    e026:	d11f      	bne.n	e068 <RADIO_FSKFifoLevel+0x64>
    e028:	0029      	movs	r1, r5
    e02a:	312c      	adds	r1, #44	; 0x2c
    e02c:	7808      	ldrb	r0, [r1, #0]
    e02e:	b2c0      	uxtb	r0, r0
    e030:	2800      	cmp	r0, #0
    e032:	d102      	bne.n	e03a <RADIO_FSKFifoLevel+0x36>
    e034:	2201      	movs	r2, #1
    e036:	4b18      	ldr	r3, [pc, #96]	; (e098 <RADIO_FSKFifoLevel+0x94>)
    e038:	4798      	blx	r3
    e03a:	002e      	movs	r6, r5
    e03c:	002c      	movs	r4, r5
    e03e:	362c      	adds	r6, #44	; 0x2c
    e040:	3457      	adds	r4, #87	; 0x57
    e042:	7833      	ldrb	r3, [r6, #0]
    e044:	7822      	ldrb	r2, [r4, #0]
    e046:	1a9b      	subs	r3, r3, r2
    e048:	b2db      	uxtb	r3, r3
    e04a:	2b1f      	cmp	r3, #31
    e04c:	d80f      	bhi.n	e06e <RADIO_FSKFifoLevel+0x6a>
    e04e:	7823      	ldrb	r3, [r4, #0]
    e050:	7832      	ldrb	r2, [r6, #0]
    e052:	7821      	ldrb	r1, [r4, #0]
    e054:	2000      	movs	r0, #0
    e056:	1a52      	subs	r2, r2, r1
    e058:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    e05a:	b2d2      	uxtb	r2, r2
    e05c:	18c9      	adds	r1, r1, r3
    e05e:	4b0e      	ldr	r3, [pc, #56]	; (e098 <RADIO_FSKFifoLevel+0x94>)
    e060:	4798      	blx	r3
    e062:	7833      	ldrb	r3, [r6, #0]
    e064:	b2db      	uxtb	r3, r3
    e066:	7023      	strb	r3, [r4, #0]
    e068:	4b0c      	ldr	r3, [pc, #48]	; (e09c <RADIO_FSKFifoLevel+0x98>)
    e06a:	4798      	blx	r3
    e06c:	bd70      	pop	{r4, r5, r6, pc}
    e06e:	7833      	ldrb	r3, [r6, #0]
    e070:	7822      	ldrb	r2, [r4, #0]
    e072:	1a9b      	subs	r3, r3, r2
    e074:	b2db      	uxtb	r3, r3
    e076:	2b20      	cmp	r3, #32
    e078:	d9f6      	bls.n	e068 <RADIO_FSKFifoLevel+0x64>
    e07a:	7823      	ldrb	r3, [r4, #0]
    e07c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    e07e:	2220      	movs	r2, #32
    e080:	18c9      	adds	r1, r1, r3
    e082:	2000      	movs	r0, #0
    e084:	4b04      	ldr	r3, [pc, #16]	; (e098 <RADIO_FSKFifoLevel+0x94>)
    e086:	4798      	blx	r3
    e088:	7823      	ldrb	r3, [r4, #0]
    e08a:	3320      	adds	r3, #32
    e08c:	e7ea      	b.n	e064 <RADIO_FSKFifoLevel+0x60>
    e08e:	46c0      	nop			; (mov r8, r8)
    e090:	000085c5 	.word	0x000085c5
    e094:	20000654 	.word	0x20000654
    e098:	00007391 	.word	0x00007391
    e09c:	00008605 	.word	0x00008605

0000e0a0 <RADIO_FSKFifoEmpty>:
    e0a0:	b510      	push	{r4, lr}
    e0a2:	4b03      	ldr	r3, [pc, #12]	; (e0b0 <RADIO_FSKFifoEmpty+0x10>)
    e0a4:	7819      	ldrb	r1, [r3, #0]
    e0a6:	4b03      	ldr	r3, [pc, #12]	; (e0b4 <RADIO_FSKFifoEmpty+0x14>)
    e0a8:	6818      	ldr	r0, [r3, #0]
    e0aa:	4b03      	ldr	r3, [pc, #12]	; (e0b8 <RADIO_FSKFifoEmpty+0x18>)
    e0ac:	4798      	blx	r3
    e0ae:	bd10      	pop	{r4, pc}
    e0b0:	200005a4 	.word	0x200005a4
    e0b4:	200005a0 	.word	0x200005a0
    e0b8:	0000df4d 	.word	0x0000df4d

0000e0bc <RADIO_GetData>:
    e0bc:	4b03      	ldr	r3, [pc, #12]	; (e0cc <RADIO_GetData+0x10>)
    e0be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    e0c0:	332c      	adds	r3, #44	; 0x2c
    e0c2:	6002      	str	r2, [r0, #0]
    e0c4:	781b      	ldrb	r3, [r3, #0]
    e0c6:	2000      	movs	r0, #0
    e0c8:	800b      	strh	r3, [r1, #0]
    e0ca:	4770      	bx	lr
    e0cc:	20000654 	.word	0x20000654

0000e0d0 <Radio_EnableRfControl>:
    e0d0:	b510      	push	{r4, lr}
    e0d2:	4b08      	ldr	r3, [pc, #32]	; (e0f4 <Radio_EnableRfControl+0x24>)
    e0d4:	0001      	movs	r1, r0
    e0d6:	681a      	ldr	r2, [r3, #0]
    e0d8:	4807      	ldr	r0, [pc, #28]	; (e0f8 <Radio_EnableRfControl+0x28>)
    e0da:	4c08      	ldr	r4, [pc, #32]	; (e0fc <Radio_EnableRfControl+0x2c>)
    e0dc:	1812      	adds	r2, r2, r0
    e0de:	2000      	movs	r0, #0
    e0e0:	42a2      	cmp	r2, r4
    e0e2:	d804      	bhi.n	e0ee <Radio_EnableRfControl+0x1e>
    e0e4:	3305      	adds	r3, #5
    e0e6:	7fdb      	ldrb	r3, [r3, #31]
    e0e8:	1e58      	subs	r0, r3, #1
    e0ea:	4183      	sbcs	r3, r0
    e0ec:	1c58      	adds	r0, r3, #1
    e0ee:	4b04      	ldr	r3, [pc, #16]	; (e100 <Radio_EnableRfControl+0x30>)
    e0f0:	4798      	blx	r3
    e0f2:	bd10      	pop	{r4, pc}
    e0f4:	20000654 	.word	0x20000654
    e0f8:	cc9eec80 	.word	0xcc9eec80
    e0fc:	096ae380 	.word	0x096ae380
    e100:	000073fd 	.word	0x000073fd

0000e104 <RADIO_RxHandler>:
    e104:	b573      	push	{r0, r1, r4, r5, r6, lr}
    e106:	4b33      	ldr	r3, [pc, #204]	; (e1d4 <RADIO_RxHandler+0xd0>)
    e108:	2000      	movs	r0, #0
    e10a:	4798      	blx	r3
    e10c:	4e32      	ldr	r6, [pc, #200]	; (e1d8 <RADIO_RxHandler+0xd4>)
    e10e:	4b33      	ldr	r3, [pc, #204]	; (e1dc <RADIO_RxHandler+0xd8>)
    e110:	8830      	ldrh	r0, [r6, #0]
    e112:	2800      	cmp	r0, #0
    e114:	d100      	bne.n	e118 <RADIO_RxHandler+0x14>
    e116:	3004      	adds	r0, #4
    e118:	4798      	blx	r3
    e11a:	4c31      	ldr	r4, [pc, #196]	; (e1e0 <RADIO_RxHandler+0xdc>)
    e11c:	4d31      	ldr	r5, [pc, #196]	; (e1e4 <RADIO_RxHandler+0xe0>)
    e11e:	0023      	movs	r3, r4
    e120:	3334      	adds	r3, #52	; 0x34
    e122:	7819      	ldrb	r1, [r3, #0]
    e124:	2901      	cmp	r1, #1
    e126:	d122      	bne.n	e16e <RADIO_RxHandler+0x6a>
    e128:	2022      	movs	r0, #34	; 0x22
    e12a:	47a8      	blx	r5
    e12c:	2100      	movs	r1, #0
    e12e:	2040      	movs	r0, #64	; 0x40
    e130:	47a8      	blx	r5
    e132:	2100      	movs	r1, #0
    e134:	2041      	movs	r0, #65	; 0x41
    e136:	47a8      	blx	r5
    e138:	8832      	ldrh	r2, [r6, #0]
    e13a:	4b2b      	ldr	r3, [pc, #172]	; (e1e8 <RADIO_RxHandler+0xe4>)
    e13c:	2a00      	cmp	r2, #0
    e13e:	d131      	bne.n	e1a4 <RADIO_RxHandler+0xa0>
    e140:	0021      	movs	r1, r4
    e142:	2005      	movs	r0, #5
    e144:	3134      	adds	r1, #52	; 0x34
    e146:	7809      	ldrb	r1, [r1, #0]
    e148:	4798      	blx	r3
    e14a:	68e3      	ldr	r3, [r4, #12]
    e14c:	2b00      	cmp	r3, #0
    e14e:	d00c      	beq.n	e16a <RADIO_RxHandler+0x66>
    e150:	8832      	ldrh	r2, [r6, #0]
    e152:	2a00      	cmp	r2, #0
    e154:	d009      	beq.n	e16a <RADIO_RxHandler+0x66>
    e156:	21fa      	movs	r1, #250	; 0xfa
    e158:	2200      	movs	r2, #0
    e15a:	342f      	adds	r4, #47	; 0x2f
    e15c:	0089      	lsls	r1, r1, #2
    e15e:	7820      	ldrb	r0, [r4, #0]
    e160:	4359      	muls	r1, r3
    e162:	9200      	str	r2, [sp, #0]
    e164:	4b21      	ldr	r3, [pc, #132]	; (e1ec <RADIO_RxHandler+0xe8>)
    e166:	4c22      	ldr	r4, [pc, #136]	; (e1f0 <RADIO_RxHandler+0xec>)
    e168:	47a0      	blx	r4
    e16a:	2000      	movs	r0, #0
    e16c:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    e16e:	0023      	movs	r3, r4
    e170:	3338      	adds	r3, #56	; 0x38
    e172:	7819      	ldrb	r1, [r3, #0]
    e174:	2012      	movs	r0, #18
    e176:	47a8      	blx	r5
    e178:	0023      	movs	r3, r4
    e17a:	3339      	adds	r3, #57	; 0x39
    e17c:	7819      	ldrb	r1, [r3, #0]
    e17e:	2013      	movs	r0, #19
    e180:	47a8      	blx	r5
    e182:	210c      	movs	r1, #12
    e184:	2040      	movs	r0, #64	; 0x40
    e186:	47a8      	blx	r5
    e188:	2100      	movs	r1, #0
    e18a:	2041      	movs	r0, #65	; 0x41
    e18c:	47a8      	blx	r5
    e18e:	0022      	movs	r2, r4
    e190:	2300      	movs	r3, #0
    e192:	3256      	adds	r2, #86	; 0x56
    e194:	7013      	strb	r3, [r2, #0]
    e196:	0022      	movs	r2, r4
    e198:	322c      	adds	r2, #44	; 0x2c
    e19a:	7013      	strb	r3, [r2, #0]
    e19c:	0022      	movs	r2, r4
    e19e:	3257      	adds	r2, #87	; 0x57
    e1a0:	7013      	strb	r3, [r2, #0]
    e1a2:	e7c9      	b.n	e138 <RADIO_RxHandler+0x34>
    e1a4:	0022      	movs	r2, r4
    e1a6:	3234      	adds	r2, #52	; 0x34
    e1a8:	7811      	ldrb	r1, [r2, #0]
    e1aa:	2200      	movs	r2, #0
    e1ac:	2901      	cmp	r1, #1
    e1ae:	d101      	bne.n	e1b4 <RADIO_RxHandler+0xb0>
    e1b0:	2006      	movs	r0, #6
    e1b2:	e7c9      	b.n	e148 <RADIO_RxHandler+0x44>
    e1b4:	0011      	movs	r1, r2
    e1b6:	2005      	movs	r0, #5
    e1b8:	4798      	blx	r3
    e1ba:	21fa      	movs	r1, #250	; 0xfa
    e1bc:	8833      	ldrh	r3, [r6, #0]
    e1be:	0089      	lsls	r1, r1, #2
    e1c0:	4359      	muls	r1, r3
    e1c2:	0023      	movs	r3, r4
    e1c4:	2200      	movs	r2, #0
    e1c6:	332e      	adds	r3, #46	; 0x2e
    e1c8:	7818      	ldrb	r0, [r3, #0]
    e1ca:	4d09      	ldr	r5, [pc, #36]	; (e1f0 <RADIO_RxHandler+0xec>)
    e1cc:	9200      	str	r2, [sp, #0]
    e1ce:	4b09      	ldr	r3, [pc, #36]	; (e1f4 <RADIO_RxHandler+0xf0>)
    e1d0:	47a8      	blx	r5
    e1d2:	e7ba      	b.n	e14a <RADIO_RxHandler+0x46>
    e1d4:	0000e0d1 	.word	0x0000e0d1
    e1d8:	20000590 	.word	0x20000590
    e1dc:	0000d855 	.word	0x0000d855
    e1e0:	20000654 	.word	0x20000654
    e1e4:	000072fd 	.word	0x000072fd
    e1e8:	00001339 	.word	0x00001339
    e1ec:	0000e22d 	.word	0x0000e22d
    e1f0:	000018f1 	.word	0x000018f1
    e1f4:	0000e2bd 	.word	0x0000e2bd

0000e1f8 <Radio_DisableRfControl>:
    e1f8:	b510      	push	{r4, lr}
    e1fa:	4b08      	ldr	r3, [pc, #32]	; (e21c <Radio_DisableRfControl+0x24>)
    e1fc:	0001      	movs	r1, r0
    e1fe:	681a      	ldr	r2, [r3, #0]
    e200:	4807      	ldr	r0, [pc, #28]	; (e220 <Radio_DisableRfControl+0x28>)
    e202:	4c08      	ldr	r4, [pc, #32]	; (e224 <Radio_DisableRfControl+0x2c>)
    e204:	1812      	adds	r2, r2, r0
    e206:	2000      	movs	r0, #0
    e208:	42a2      	cmp	r2, r4
    e20a:	d804      	bhi.n	e216 <Radio_DisableRfControl+0x1e>
    e20c:	3305      	adds	r3, #5
    e20e:	7fdb      	ldrb	r3, [r3, #31]
    e210:	1e58      	subs	r0, r3, #1
    e212:	4183      	sbcs	r3, r0
    e214:	1c58      	adds	r0, r3, #1
    e216:	4b04      	ldr	r3, [pc, #16]	; (e228 <Radio_DisableRfControl+0x30>)
    e218:	4798      	blx	r3
    e21a:	bd10      	pop	{r4, pc}
    e21c:	20000654 	.word	0x20000654
    e220:	cc9eec80 	.word	0xcc9eec80
    e224:	096ae380 	.word	0x096ae380
    e228:	00007411 	.word	0x00007411

0000e22c <Radio_WatchdogTimeout>:
    e22c:	b510      	push	{r4, lr}
    e22e:	4b0e      	ldr	r3, [pc, #56]	; (e268 <Radio_WatchdogTimeout+0x3c>)
    e230:	781a      	ldrb	r2, [r3, #0]
    e232:	2a04      	cmp	r2, #4
    e234:	d10b      	bne.n	e24e <Radio_WatchdogTimeout+0x22>
    e236:	2320      	movs	r3, #32
    e238:	4a0c      	ldr	r2, [pc, #48]	; (e26c <Radio_WatchdogTimeout+0x40>)
    e23a:	2000      	movs	r0, #0
    e23c:	8811      	ldrh	r1, [r2, #0]
    e23e:	430b      	orrs	r3, r1
    e240:	8013      	strh	r3, [r2, #0]
    e242:	4b0b      	ldr	r3, [pc, #44]	; (e270 <Radio_WatchdogTimeout+0x44>)
    e244:	4798      	blx	r3
    e246:	2002      	movs	r0, #2
    e248:	4b0a      	ldr	r3, [pc, #40]	; (e274 <Radio_WatchdogTimeout+0x48>)
    e24a:	4798      	blx	r3
    e24c:	bd10      	pop	{r4, pc}
    e24e:	781b      	ldrb	r3, [r3, #0]
    e250:	2b02      	cmp	r3, #2
    e252:	d1fb      	bne.n	e24c <Radio_WatchdogTimeout+0x20>
    e254:	4a05      	ldr	r2, [pc, #20]	; (e26c <Radio_WatchdogTimeout+0x40>)
    e256:	330e      	adds	r3, #14
    e258:	8811      	ldrh	r1, [r2, #0]
    e25a:	2001      	movs	r0, #1
    e25c:	430b      	orrs	r3, r1
    e25e:	8013      	strh	r3, [r2, #0]
    e260:	4b03      	ldr	r3, [pc, #12]	; (e270 <Radio_WatchdogTimeout+0x44>)
    e262:	4798      	blx	r3
    e264:	2001      	movs	r0, #1
    e266:	e7ef      	b.n	e248 <Radio_WatchdogTimeout+0x1c>
    e268:	2000126b 	.word	0x2000126b
    e26c:	20001268 	.word	0x20001268
    e270:	0000e1f9 	.word	0x0000e1f9
    e274:	0000de15 	.word	0x0000de15

0000e278 <RADIO_RxTimeout>:
    e278:	b510      	push	{r4, lr}
    e27a:	4b0a      	ldr	r3, [pc, #40]	; (e2a4 <RADIO_RxTimeout+0x2c>)
    e27c:	332f      	adds	r3, #47	; 0x2f
    e27e:	7818      	ldrb	r0, [r3, #0]
    e280:	4b09      	ldr	r3, [pc, #36]	; (e2a8 <RADIO_RxTimeout+0x30>)
    e282:	4798      	blx	r3
    e284:	2000      	movs	r0, #0
    e286:	4b09      	ldr	r3, [pc, #36]	; (e2ac <RADIO_RxTimeout+0x34>)
    e288:	4798      	blx	r3
    e28a:	2180      	movs	r1, #128	; 0x80
    e28c:	2012      	movs	r0, #18
    e28e:	4b08      	ldr	r3, [pc, #32]	; (e2b0 <RADIO_RxTimeout+0x38>)
    e290:	4798      	blx	r3
    e292:	2340      	movs	r3, #64	; 0x40
    e294:	4a07      	ldr	r2, [pc, #28]	; (e2b4 <RADIO_RxTimeout+0x3c>)
    e296:	2002      	movs	r0, #2
    e298:	8811      	ldrh	r1, [r2, #0]
    e29a:	430b      	orrs	r3, r1
    e29c:	8013      	strh	r3, [r2, #0]
    e29e:	4b06      	ldr	r3, [pc, #24]	; (e2b8 <RADIO_RxTimeout+0x40>)
    e2a0:	4798      	blx	r3
    e2a2:	bd10      	pop	{r4, pc}
    e2a4:	20000654 	.word	0x20000654
    e2a8:	00001bf5 	.word	0x00001bf5
    e2ac:	0000e1f9 	.word	0x0000e1f9
    e2b0:	000072fd 	.word	0x000072fd
    e2b4:	20001268 	.word	0x20001268
    e2b8:	0000de15 	.word	0x0000de15

0000e2bc <Radio_RxFSKTimeout>:
    e2bc:	b510      	push	{r4, lr}
    e2be:	4b08      	ldr	r3, [pc, #32]	; (e2e0 <Radio_RxFSKTimeout+0x24>)
    e2c0:	332f      	adds	r3, #47	; 0x2f
    e2c2:	7818      	ldrb	r0, [r3, #0]
    e2c4:	4b07      	ldr	r3, [pc, #28]	; (e2e4 <Radio_RxFSKTimeout+0x28>)
    e2c6:	4798      	blx	r3
    e2c8:	2000      	movs	r0, #0
    e2ca:	4b07      	ldr	r3, [pc, #28]	; (e2e8 <Radio_RxFSKTimeout+0x2c>)
    e2cc:	4798      	blx	r3
    e2ce:	2380      	movs	r3, #128	; 0x80
    e2d0:	4a06      	ldr	r2, [pc, #24]	; (e2ec <Radio_RxFSKTimeout+0x30>)
    e2d2:	2002      	movs	r0, #2
    e2d4:	8811      	ldrh	r1, [r2, #0]
    e2d6:	430b      	orrs	r3, r1
    e2d8:	8013      	strh	r3, [r2, #0]
    e2da:	4b05      	ldr	r3, [pc, #20]	; (e2f0 <Radio_RxFSKTimeout+0x34>)
    e2dc:	4798      	blx	r3
    e2de:	bd10      	pop	{r4, pc}
    e2e0:	20000654 	.word	0x20000654
    e2e4:	00001bf5 	.word	0x00001bf5
    e2e8:	0000e1f9 	.word	0x0000e1f9
    e2ec:	20001268 	.word	0x20001268
    e2f0:	0000de15 	.word	0x0000de15

0000e2f4 <RADIO_TxDone>:
    e2f4:	b570      	push	{r4, r5, r6, lr}
    e2f6:	4b14      	ldr	r3, [pc, #80]	; (e348 <RADIO_TxDone+0x54>)
    e2f8:	332f      	adds	r3, #47	; 0x2f
    e2fa:	7818      	ldrb	r0, [r3, #0]
    e2fc:	4b13      	ldr	r3, [pc, #76]	; (e34c <RADIO_TxDone+0x58>)
    e2fe:	4798      	blx	r3
    e300:	2001      	movs	r0, #1
    e302:	4b13      	ldr	r3, [pc, #76]	; (e350 <RADIO_TxDone+0x5c>)
    e304:	4798      	blx	r3
    e306:	4b13      	ldr	r3, [pc, #76]	; (e354 <RADIO_TxDone+0x60>)
    e308:	2108      	movs	r1, #8
    e30a:	2012      	movs	r0, #18
    e30c:	4798      	blx	r3
    e30e:	4b12      	ldr	r3, [pc, #72]	; (e358 <RADIO_TxDone+0x64>)
    e310:	781a      	ldrb	r2, [r3, #0]
    e312:	4b12      	ldr	r3, [pc, #72]	; (e35c <RADIO_TxDone+0x68>)
    e314:	2a02      	cmp	r2, #2
    e316:	d002      	beq.n	e31e <RADIO_TxDone+0x2a>
    e318:	881a      	ldrh	r2, [r3, #0]
    e31a:	0692      	lsls	r2, r2, #26
    e31c:	d413      	bmi.n	e346 <RADIO_TxDone+0x52>
    e31e:	2001      	movs	r0, #1
    e320:	881a      	ldrh	r2, [r3, #0]
    e322:	4302      	orrs	r2, r0
    e324:	801a      	strh	r2, [r3, #0]
    e326:	4b0e      	ldr	r3, [pc, #56]	; (e360 <RADIO_TxDone+0x6c>)
    e328:	4798      	blx	r3
    e32a:	4b0e      	ldr	r3, [pc, #56]	; (e364 <RADIO_TxDone+0x70>)
    e32c:	4798      	blx	r3
    e32e:	4c0e      	ldr	r4, [pc, #56]	; (e368 <RADIO_TxDone+0x74>)
    e330:	4d0e      	ldr	r5, [pc, #56]	; (e36c <RADIO_TxDone+0x78>)
    e332:	6822      	ldr	r2, [r4, #0]
    e334:	6863      	ldr	r3, [r4, #4]
    e336:	1a80      	subs	r0, r0, r2
    e338:	4199      	sbcs	r1, r3
    e33a:	22fa      	movs	r2, #250	; 0xfa
    e33c:	2300      	movs	r3, #0
    e33e:	0092      	lsls	r2, r2, #2
    e340:	47a8      	blx	r5
    e342:	6020      	str	r0, [r4, #0]
    e344:	6061      	str	r1, [r4, #4]
    e346:	bd70      	pop	{r4, r5, r6, pc}
    e348:	20000654 	.word	0x20000654
    e34c:	00001bf5 	.word	0x00001bf5
    e350:	0000e1f9 	.word	0x0000e1f9
    e354:	000072fd 	.word	0x000072fd
    e358:	2000126b 	.word	0x2000126b
    e35c:	20001268 	.word	0x20001268
    e360:	0000de15 	.word	0x0000de15
    e364:	00001899 	.word	0x00001899
    e368:	20000598 	.word	0x20000598
    e36c:	0000f26d 	.word	0x0000f26d

0000e370 <RADIO_FSKPacketSent>:
    e370:	b570      	push	{r4, r5, r6, lr}
    e372:	4b13      	ldr	r3, [pc, #76]	; (e3c0 <RADIO_FSKPacketSent+0x50>)
    e374:	203f      	movs	r0, #63	; 0x3f
    e376:	4798      	blx	r3
    e378:	0703      	lsls	r3, r0, #28
    e37a:	d51f      	bpl.n	e3bc <RADIO_FSKPacketSent+0x4c>
    e37c:	4b11      	ldr	r3, [pc, #68]	; (e3c4 <RADIO_FSKPacketSent+0x54>)
    e37e:	332f      	adds	r3, #47	; 0x2f
    e380:	7818      	ldrb	r0, [r3, #0]
    e382:	4b11      	ldr	r3, [pc, #68]	; (e3c8 <RADIO_FSKPacketSent+0x58>)
    e384:	4798      	blx	r3
    e386:	4b11      	ldr	r3, [pc, #68]	; (e3cc <RADIO_FSKPacketSent+0x5c>)
    e388:	2001      	movs	r0, #1
    e38a:	4798      	blx	r3
    e38c:	4b10      	ldr	r3, [pc, #64]	; (e3d0 <RADIO_FSKPacketSent+0x60>)
    e38e:	4c11      	ldr	r4, [pc, #68]	; (e3d4 <RADIO_FSKPacketSent+0x64>)
    e390:	781b      	ldrb	r3, [r3, #0]
    e392:	2b02      	cmp	r3, #2
    e394:	d002      	beq.n	e39c <RADIO_FSKPacketSent+0x2c>
    e396:	8823      	ldrh	r3, [r4, #0]
    e398:	069b      	lsls	r3, r3, #26
    e39a:	d40f      	bmi.n	e3bc <RADIO_FSKPacketSent+0x4c>
    e39c:	4b0e      	ldr	r3, [pc, #56]	; (e3d8 <RADIO_FSKPacketSent+0x68>)
    e39e:	4798      	blx	r3
    e3a0:	4b0e      	ldr	r3, [pc, #56]	; (e3dc <RADIO_FSKPacketSent+0x6c>)
    e3a2:	681d      	ldr	r5, [r3, #0]
    e3a4:	685e      	ldr	r6, [r3, #4]
    e3a6:	1b40      	subs	r0, r0, r5
    e3a8:	41b1      	sbcs	r1, r6
    e3aa:	6018      	str	r0, [r3, #0]
    e3ac:	6059      	str	r1, [r3, #4]
    e3ae:	4b0c      	ldr	r3, [pc, #48]	; (e3e0 <RADIO_FSKPacketSent+0x70>)
    e3b0:	2001      	movs	r0, #1
    e3b2:	4798      	blx	r3
    e3b4:	2304      	movs	r3, #4
    e3b6:	8822      	ldrh	r2, [r4, #0]
    e3b8:	4313      	orrs	r3, r2
    e3ba:	8023      	strh	r3, [r4, #0]
    e3bc:	bd70      	pop	{r4, r5, r6, pc}
    e3be:	46c0      	nop			; (mov r8, r8)
    e3c0:	00007325 	.word	0x00007325
    e3c4:	20000654 	.word	0x20000654
    e3c8:	00001bf5 	.word	0x00001bf5
    e3cc:	0000e1f9 	.word	0x0000e1f9
    e3d0:	2000126b 	.word	0x2000126b
    e3d4:	20001268 	.word	0x20001268
    e3d8:	00001899 	.word	0x00001899
    e3dc:	20000598 	.word	0x20000598
    e3e0:	0000de15 	.word	0x0000de15

0000e3e4 <RADIO_RxDone>:
    e3e4:	b570      	push	{r4, r5, r6, lr}
    e3e6:	2012      	movs	r0, #18
    e3e8:	4e16      	ldr	r6, [pc, #88]	; (e444 <RADIO_RxDone+0x60>)
    e3ea:	47b0      	blx	r6
    e3ec:	4b16      	ldr	r3, [pc, #88]	; (e448 <RADIO_RxDone+0x64>)
    e3ee:	0005      	movs	r5, r0
    e3f0:	2170      	movs	r1, #112	; 0x70
    e3f2:	2012      	movs	r0, #18
    e3f4:	4798      	blx	r3
    e3f6:	2350      	movs	r3, #80	; 0x50
    e3f8:	402b      	ands	r3, r5
    e3fa:	2b50      	cmp	r3, #80	; 0x50
    e3fc:	d119      	bne.n	e432 <RADIO_RxDone+0x4e>
    e3fe:	4c13      	ldr	r4, [pc, #76]	; (e44c <RADIO_RxDone+0x68>)
    e400:	0023      	movs	r3, r4
    e402:	332f      	adds	r3, #47	; 0x2f
    e404:	7818      	ldrb	r0, [r3, #0]
    e406:	4b12      	ldr	r3, [pc, #72]	; (e450 <RADIO_RxDone+0x6c>)
    e408:	4798      	blx	r3
    e40a:	4b12      	ldr	r3, [pc, #72]	; (e454 <RADIO_RxDone+0x70>)
    e40c:	2000      	movs	r0, #0
    e40e:	4798      	blx	r3
    e410:	3404      	adds	r4, #4
    e412:	201c      	movs	r0, #28
    e414:	47b0      	blx	r6
    e416:	7fe2      	ldrb	r2, [r4, #31]
    e418:	4b0f      	ldr	r3, [pc, #60]	; (e458 <RADIO_RxDone+0x74>)
    e41a:	4910      	ldr	r1, [pc, #64]	; (e45c <RADIO_RxDone+0x78>)
    e41c:	2a00      	cmp	r2, #0
    e41e:	d003      	beq.n	e428 <RADIO_RxDone+0x44>
    e420:	06aa      	lsls	r2, r5, #26
    e422:	d407      	bmi.n	e434 <RADIO_RxDone+0x50>
    e424:	0642      	lsls	r2, r0, #25
    e426:	d505      	bpl.n	e434 <RADIO_RxDone+0x50>
    e428:	2002      	movs	r0, #2
    e42a:	881a      	ldrh	r2, [r3, #0]
    e42c:	4302      	orrs	r2, r0
    e42e:	801a      	strh	r2, [r3, #0]
    e430:	4788      	blx	r1
    e432:	bd70      	pop	{r4, r5, r6, pc}
    e434:	2280      	movs	r2, #128	; 0x80
    e436:	8818      	ldrh	r0, [r3, #0]
    e438:	0052      	lsls	r2, r2, #1
    e43a:	4302      	orrs	r2, r0
    e43c:	801a      	strh	r2, [r3, #0]
    e43e:	2002      	movs	r0, #2
    e440:	e7f6      	b.n	e430 <RADIO_RxDone+0x4c>
    e442:	46c0      	nop			; (mov r8, r8)
    e444:	00007325 	.word	0x00007325
    e448:	000072fd 	.word	0x000072fd
    e44c:	20000654 	.word	0x20000654
    e450:	00001bf5 	.word	0x00001bf5
    e454:	0000e1f9 	.word	0x0000e1f9
    e458:	20001268 	.word	0x20001268
    e45c:	0000de15 	.word	0x0000de15

0000e460 <RADIO_FSKPayloadReady>:
    e460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e462:	203f      	movs	r0, #63	; 0x3f
    e464:	4b39      	ldr	r3, [pc, #228]	; (e54c <RADIO_FSKPayloadReady+0xec>)
    e466:	4798      	blx	r3
    e468:	0743      	lsls	r3, r0, #29
    e46a:	d559      	bpl.n	e520 <RADIO_FSKPayloadReady+0xc0>
    e46c:	4c38      	ldr	r4, [pc, #224]	; (e550 <RADIO_FSKPayloadReady+0xf0>)
    e46e:	4d39      	ldr	r5, [pc, #228]	; (e554 <RADIO_FSKPayloadReady+0xf4>)
    e470:	1d23      	adds	r3, r4, #4
    e472:	7fdb      	ldrb	r3, [r3, #31]
    e474:	2b01      	cmp	r3, #1
    e476:	d154      	bne.n	e522 <RADIO_FSKPayloadReady+0xc2>
    e478:	2202      	movs	r2, #2
    e47a:	4210      	tst	r0, r2
    e47c:	d048      	beq.n	e510 <RADIO_FSKPayloadReady+0xb0>
    e47e:	0023      	movs	r3, r4
    e480:	332f      	adds	r3, #47	; 0x2f
    e482:	7818      	ldrb	r0, [r3, #0]
    e484:	4e34      	ldr	r6, [pc, #208]	; (e558 <RADIO_FSKPayloadReady+0xf8>)
    e486:	47b0      	blx	r6
    e488:	0023      	movs	r3, r4
    e48a:	332e      	adds	r3, #46	; 0x2e
    e48c:	7818      	ldrb	r0, [r3, #0]
    e48e:	47b0      	blx	r6
    e490:	4b32      	ldr	r3, [pc, #200]	; (e55c <RADIO_FSKPayloadReady+0xfc>)
    e492:	4798      	blx	r3
    e494:	0022      	movs	r2, r4
    e496:	0023      	movs	r3, r4
    e498:	322c      	adds	r2, #44	; 0x2c
    e49a:	3357      	adds	r3, #87	; 0x57
    e49c:	7810      	ldrb	r0, [r2, #0]
    e49e:	7819      	ldrb	r1, [r3, #0]
    e4a0:	4288      	cmp	r0, r1
    e4a2:	d105      	bne.n	e4b0 <RADIO_FSKPayloadReady+0x50>
    e4a4:	7812      	ldrb	r2, [r2, #0]
    e4a6:	2a00      	cmp	r2, #0
    e4a8:	d002      	beq.n	e4b0 <RADIO_FSKPayloadReady+0x50>
    e4aa:	781b      	ldrb	r3, [r3, #0]
    e4ac:	2b00      	cmp	r3, #0
    e4ae:	d118      	bne.n	e4e2 <RADIO_FSKPayloadReady+0x82>
    e4b0:	0021      	movs	r1, r4
    e4b2:	312c      	adds	r1, #44	; 0x2c
    e4b4:	7808      	ldrb	r0, [r1, #0]
    e4b6:	b2c0      	uxtb	r0, r0
    e4b8:	2800      	cmp	r0, #0
    e4ba:	d102      	bne.n	e4c2 <RADIO_FSKPayloadReady+0x62>
    e4bc:	2201      	movs	r2, #1
    e4be:	4b28      	ldr	r3, [pc, #160]	; (e560 <RADIO_FSKPayloadReady+0x100>)
    e4c0:	4798      	blx	r3
    e4c2:	0026      	movs	r6, r4
    e4c4:	0027      	movs	r7, r4
    e4c6:	3657      	adds	r6, #87	; 0x57
    e4c8:	7830      	ldrb	r0, [r6, #0]
    e4ca:	372c      	adds	r7, #44	; 0x2c
    e4cc:	b2c0      	uxtb	r0, r0
    e4ce:	2800      	cmp	r0, #0
    e4d0:	d110      	bne.n	e4f4 <RADIO_FSKPayloadReady+0x94>
    e4d2:	783a      	ldrb	r2, [r7, #0]
    e4d4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    e4d6:	b2d2      	uxtb	r2, r2
    e4d8:	4b21      	ldr	r3, [pc, #132]	; (e560 <RADIO_FSKPayloadReady+0x100>)
    e4da:	4798      	blx	r3
    e4dc:	783b      	ldrb	r3, [r7, #0]
    e4de:	b2db      	uxtb	r3, r3
    e4e0:	7033      	strb	r3, [r6, #0]
    e4e2:	4b20      	ldr	r3, [pc, #128]	; (e564 <RADIO_FSKPayloadReady+0x104>)
    e4e4:	4798      	blx	r3
    e4e6:	4b20      	ldr	r3, [pc, #128]	; (e568 <RADIO_FSKPayloadReady+0x108>)
    e4e8:	2000      	movs	r0, #0
    e4ea:	4798      	blx	r3
    e4ec:	2308      	movs	r3, #8
    e4ee:	882a      	ldrh	r2, [r5, #0]
    e4f0:	4313      	orrs	r3, r2
    e4f2:	e011      	b.n	e518 <RADIO_FSKPayloadReady+0xb8>
    e4f4:	783b      	ldrb	r3, [r7, #0]
    e4f6:	7832      	ldrb	r2, [r6, #0]
    e4f8:	1a9b      	subs	r3, r3, r2
    e4fa:	2b00      	cmp	r3, #0
    e4fc:	ddf1      	ble.n	e4e2 <RADIO_FSKPayloadReady+0x82>
    e4fe:	7833      	ldrb	r3, [r6, #0]
    e500:	783a      	ldrb	r2, [r7, #0]
    e502:	7831      	ldrb	r1, [r6, #0]
    e504:	2000      	movs	r0, #0
    e506:	1a52      	subs	r2, r2, r1
    e508:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    e50a:	b2d2      	uxtb	r2, r2
    e50c:	18c9      	adds	r1, r1, r3
    e50e:	e7e3      	b.n	e4d8 <RADIO_FSKPayloadReady+0x78>
    e510:	2380      	movs	r3, #128	; 0x80
    e512:	8829      	ldrh	r1, [r5, #0]
    e514:	005b      	lsls	r3, r3, #1
    e516:	430b      	orrs	r3, r1
    e518:	802b      	strh	r3, [r5, #0]
    e51a:	2002      	movs	r0, #2
    e51c:	4b13      	ldr	r3, [pc, #76]	; (e56c <RADIO_FSKPayloadReady+0x10c>)
    e51e:	4798      	blx	r3
    e520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e522:	0023      	movs	r3, r4
    e524:	332f      	adds	r3, #47	; 0x2f
    e526:	4e0c      	ldr	r6, [pc, #48]	; (e558 <RADIO_FSKPayloadReady+0xf8>)
    e528:	7818      	ldrb	r0, [r3, #0]
    e52a:	47b0      	blx	r6
    e52c:	0023      	movs	r3, r4
    e52e:	332e      	adds	r3, #46	; 0x2e
    e530:	7818      	ldrb	r0, [r3, #0]
    e532:	47b0      	blx	r6
    e534:	4e0e      	ldr	r6, [pc, #56]	; (e570 <RADIO_FSKPayloadReady+0x110>)
    e536:	2201      	movs	r2, #1
    e538:	0031      	movs	r1, r6
    e53a:	2000      	movs	r0, #0
    e53c:	4f08      	ldr	r7, [pc, #32]	; (e560 <RADIO_FSKPayloadReady+0x100>)
    e53e:	47b8      	blx	r7
    e540:	7832      	ldrb	r2, [r6, #0]
    e542:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    e544:	b2d2      	uxtb	r2, r2
    e546:	2000      	movs	r0, #0
    e548:	47b8      	blx	r7
    e54a:	e7cc      	b.n	e4e6 <RADIO_FSKPayloadReady+0x86>
    e54c:	00007325 	.word	0x00007325
    e550:	20000654 	.word	0x20000654
    e554:	20001268 	.word	0x20001268
    e558:	00001bf5 	.word	0x00001bf5
    e55c:	000085c5 	.word	0x000085c5
    e560:	00007391 	.word	0x00007391
    e564:	00008605 	.word	0x00008605
    e568:	0000e1f9 	.word	0x0000e1f9
    e56c:	0000de15 	.word	0x0000de15
    e570:	20000680 	.word	0x20000680

0000e574 <Radio_SetClockInput>:
    e574:	b510      	push	{r4, lr}
    e576:	4b08      	ldr	r3, [pc, #32]	; (e598 <Radio_SetClockInput+0x24>)
    e578:	3355      	adds	r3, #85	; 0x55
    e57a:	781b      	ldrb	r3, [r3, #0]
    e57c:	2b00      	cmp	r3, #0
    e57e:	d10a      	bne.n	e596 <Radio_SetClockInput+0x22>
    e580:	4b06      	ldr	r3, [pc, #24]	; (e59c <Radio_SetClockInput+0x28>)
    e582:	204b      	movs	r0, #75	; 0x4b
    e584:	4798      	blx	r3
    e586:	2110      	movs	r1, #16
    e588:	4301      	orrs	r1, r0
    e58a:	4b05      	ldr	r3, [pc, #20]	; (e5a0 <Radio_SetClockInput+0x2c>)
    e58c:	b2c9      	uxtb	r1, r1
    e58e:	204b      	movs	r0, #75	; 0x4b
    e590:	4798      	blx	r3
    e592:	4b04      	ldr	r3, [pc, #16]	; (e5a4 <Radio_SetClockInput+0x30>)
    e594:	4798      	blx	r3
    e596:	bd10      	pop	{r4, pc}
    e598:	20000654 	.word	0x20000654
    e59c:	00007325 	.word	0x00007325
    e5a0:	000072fd 	.word	0x000072fd
    e5a4:	0000742d 	.word	0x0000742d

0000e5a8 <RADIO_TxHandler>:
    e5a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e5aa:	4b32      	ldr	r3, [pc, #200]	; (e674 <RADIO_TxHandler+0xcc>)
    e5ac:	4798      	blx	r3
    e5ae:	2001      	movs	r0, #1
    e5b0:	4b31      	ldr	r3, [pc, #196]	; (e678 <RADIO_TxHandler+0xd0>)
    e5b2:	4798      	blx	r3
    e5b4:	4c31      	ldr	r4, [pc, #196]	; (e67c <RADIO_TxHandler+0xd4>)
    e5b6:	0023      	movs	r3, r4
    e5b8:	332d      	adds	r3, #45	; 0x2d
    e5ba:	7818      	ldrb	r0, [r3, #0]
    e5bc:	4b30      	ldr	r3, [pc, #192]	; (e680 <RADIO_TxHandler+0xd8>)
    e5be:	4798      	blx	r3
    e5c0:	0023      	movs	r3, r4
    e5c2:	3341      	adds	r3, #65	; 0x41
    e5c4:	781b      	ldrb	r3, [r3, #0]
    e5c6:	2b00      	cmp	r3, #0
    e5c8:	d102      	bne.n	e5d0 <RADIO_TxHandler+0x28>
    e5ca:	2004      	movs	r0, #4
    e5cc:	4b2d      	ldr	r3, [pc, #180]	; (e684 <RADIO_TxHandler+0xdc>)
    e5ce:	4798      	blx	r3
    e5d0:	4b2d      	ldr	r3, [pc, #180]	; (e688 <RADIO_TxHandler+0xe0>)
    e5d2:	4e2e      	ldr	r6, [pc, #184]	; (e68c <RADIO_TxHandler+0xe4>)
    e5d4:	781f      	ldrb	r7, [r3, #0]
    e5d6:	4d2e      	ldr	r5, [pc, #184]	; (e690 <RADIO_TxHandler+0xe8>)
    e5d8:	2f01      	cmp	r7, #1
    e5da:	d138      	bne.n	e64e <RADIO_TxHandler+0xa6>
    e5dc:	7831      	ldrb	r1, [r6, #0]
    e5de:	2022      	movs	r0, #34	; 0x22
    e5e0:	47a8      	blx	r5
    e5e2:	4b2c      	ldr	r3, [pc, #176]	; (e694 <RADIO_TxHandler+0xec>)
    e5e4:	200a      	movs	r0, #10
    e5e6:	4798      	blx	r3
    e5e8:	21f0      	movs	r1, #240	; 0xf0
    e5ea:	4008      	ands	r0, r1
    e5ec:	39e8      	subs	r1, #232	; 0xe8
    e5ee:	4301      	orrs	r1, r0
    e5f0:	200a      	movs	r0, #10
    e5f2:	47a8      	blx	r5
    e5f4:	2140      	movs	r1, #64	; 0x40
    e5f6:	0008      	movs	r0, r1
    e5f8:	47a8      	blx	r5
    e5fa:	2100      	movs	r1, #0
    e5fc:	2041      	movs	r0, #65	; 0x41
    e5fe:	47a8      	blx	r5
    e600:	4b21      	ldr	r3, [pc, #132]	; (e688 <RADIO_TxHandler+0xe0>)
    e602:	003a      	movs	r2, r7
    e604:	7819      	ldrb	r1, [r3, #0]
    e606:	0038      	movs	r0, r7
    e608:	4b23      	ldr	r3, [pc, #140]	; (e698 <RADIO_TxHandler+0xf0>)
    e60a:	4798      	blx	r3
    e60c:	4b23      	ldr	r3, [pc, #140]	; (e69c <RADIO_TxHandler+0xf4>)
    e60e:	7832      	ldrb	r2, [r6, #0]
    e610:	6819      	ldr	r1, [r3, #0]
    e612:	2000      	movs	r0, #0
    e614:	4b22      	ldr	r3, [pc, #136]	; (e6a0 <RADIO_TxHandler+0xf8>)
    e616:	4798      	blx	r3
    e618:	0023      	movs	r3, r4
    e61a:	3334      	adds	r3, #52	; 0x34
    e61c:	7819      	ldrb	r1, [r3, #0]
    e61e:	2200      	movs	r2, #0
    e620:	2003      	movs	r0, #3
    e622:	4b1d      	ldr	r3, [pc, #116]	; (e698 <RADIO_TxHandler+0xf0>)
    e624:	4798      	blx	r3
    e626:	4b1f      	ldr	r3, [pc, #124]	; (e6a4 <RADIO_TxHandler+0xfc>)
    e628:	4798      	blx	r3
    e62a:	4b1f      	ldr	r3, [pc, #124]	; (e6a8 <RADIO_TxHandler+0x100>)
    e62c:	6018      	str	r0, [r3, #0]
    e62e:	6059      	str	r1, [r3, #4]
    e630:	68e3      	ldr	r3, [r4, #12]
    e632:	2b00      	cmp	r3, #0
    e634:	d009      	beq.n	e64a <RADIO_TxHandler+0xa2>
    e636:	21fa      	movs	r1, #250	; 0xfa
    e638:	2200      	movs	r2, #0
    e63a:	342f      	adds	r4, #47	; 0x2f
    e63c:	0089      	lsls	r1, r1, #2
    e63e:	7820      	ldrb	r0, [r4, #0]
    e640:	4359      	muls	r1, r3
    e642:	9200      	str	r2, [sp, #0]
    e644:	4b19      	ldr	r3, [pc, #100]	; (e6ac <RADIO_TxHandler+0x104>)
    e646:	4c1a      	ldr	r4, [pc, #104]	; (e6b0 <RADIO_TxHandler+0x108>)
    e648:	47a0      	blx	r4
    e64a:	2000      	movs	r0, #0
    e64c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    e64e:	2110      	movs	r1, #16
    e650:	2040      	movs	r0, #64	; 0x40
    e652:	47a8      	blx	r5
    e654:	2100      	movs	r1, #0
    e656:	2041      	movs	r0, #65	; 0x41
    e658:	47a8      	blx	r5
    e65a:	0023      	movs	r3, r4
    e65c:	2000      	movs	r0, #0
    e65e:	3357      	adds	r3, #87	; 0x57
    e660:	7831      	ldrb	r1, [r6, #0]
    e662:	7018      	strb	r0, [r3, #0]
    e664:	47a8      	blx	r5
    e666:	4b0d      	ldr	r3, [pc, #52]	; (e69c <RADIO_TxHandler+0xf4>)
    e668:	7831      	ldrb	r1, [r6, #0]
    e66a:	6818      	ldr	r0, [r3, #0]
    e66c:	4b11      	ldr	r3, [pc, #68]	; (e6b4 <RADIO_TxHandler+0x10c>)
    e66e:	4798      	blx	r3
    e670:	e7d2      	b.n	e618 <RADIO_TxHandler+0x70>
    e672:	46c0      	nop			; (mov r8, r8)
    e674:	0000e575 	.word	0x0000e575
    e678:	0000e0d1 	.word	0x0000e0d1
    e67c:	20000654 	.word	0x20000654
    e680:	00001bf5 	.word	0x00001bf5
    e684:	0000d855 	.word	0x0000d855
    e688:	20000688 	.word	0x20000688
    e68c:	200005a4 	.word	0x200005a4
    e690:	000072fd 	.word	0x000072fd
    e694:	00007325 	.word	0x00007325
    e698:	00001339 	.word	0x00001339
    e69c:	200005a0 	.word	0x200005a0
    e6a0:	00007351 	.word	0x00007351
    e6a4:	00001899 	.word	0x00001899
    e6a8:	20000598 	.word	0x20000598
    e6ac:	0000e22d 	.word	0x0000e22d
    e6b0:	000018f1 	.word	0x000018f1
    e6b4:	0000df4d 	.word	0x0000df4d

0000e6b8 <Radio_ResetClockInput>:
    e6b8:	b510      	push	{r4, lr}
    e6ba:	4b04      	ldr	r3, [pc, #16]	; (e6cc <Radio_ResetClockInput+0x14>)
    e6bc:	3355      	adds	r3, #85	; 0x55
    e6be:	781b      	ldrb	r3, [r3, #0]
    e6c0:	2b00      	cmp	r3, #0
    e6c2:	d101      	bne.n	e6c8 <Radio_ResetClockInput+0x10>
    e6c4:	4b02      	ldr	r3, [pc, #8]	; (e6d0 <Radio_ResetClockInput+0x18>)
    e6c6:	4798      	blx	r3
    e6c8:	bd10      	pop	{r4, pc}
    e6ca:	46c0      	nop			; (mov r8, r8)
    e6cc:	20000654 	.word	0x20000654
    e6d0:	00007449 	.word	0x00007449

0000e6d4 <RADIO_InitDefaultAttributes>:
    e6d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e6d6:	2501      	movs	r5, #1
    e6d8:	4b64      	ldr	r3, [pc, #400]	; (e86c <RADIO_InitDefaultAttributes+0x198>)
    e6da:	4c65      	ldr	r4, [pc, #404]	; (e870 <RADIO_InitDefaultAttributes+0x19c>)
    e6dc:	701d      	strb	r5, [r3, #0]
    e6de:	4b65      	ldr	r3, [pc, #404]	; (e874 <RADIO_InitDefaultAttributes+0x1a0>)
    e6e0:	2207      	movs	r2, #7
    e6e2:	6023      	str	r3, [r4, #0]
    e6e4:	4b64      	ldr	r3, [pc, #400]	; (e878 <RADIO_InitDefaultAttributes+0x1a4>)
    e6e6:	18a1      	adds	r1, r4, r2
    e6e8:	6063      	str	r3, [r4, #4]
    e6ea:	4b64      	ldr	r3, [pc, #400]	; (e87c <RADIO_InitDefaultAttributes+0x1a8>)
    e6ec:	0027      	movs	r7, r4
    e6ee:	60a3      	str	r3, [r4, #8]
    e6f0:	0023      	movs	r3, r4
    e6f2:	3334      	adds	r3, #52	; 0x34
    e6f4:	701d      	strb	r5, [r3, #0]
    e6f6:	0023      	movs	r3, r4
    e6f8:	3336      	adds	r3, #54	; 0x36
    e6fa:	701a      	strb	r2, [r3, #0]
    e6fc:	1ce3      	adds	r3, r4, #3
    e6fe:	77dd      	strb	r5, [r3, #31]
    e700:	0023      	movs	r3, r4
    e702:	3333      	adds	r3, #51	; 0x33
    e704:	701d      	strb	r5, [r3, #0]
    e706:	2300      	movs	r3, #0
    e708:	77cb      	strb	r3, [r1, #31]
    e70a:	2108      	movs	r1, #8
    e70c:	82a1      	strh	r1, [r4, #20]
    e70e:	0021      	movs	r1, r4
    e710:	3135      	adds	r1, #53	; 0x35
    e712:	700a      	strb	r2, [r1, #0]
    e714:	1d22      	adds	r2, r4, #4
    e716:	77d5      	strb	r5, [r2, #31]
    e718:	1d62      	adds	r2, r4, #5
    e71a:	77d3      	strb	r3, [r2, #31]
    e71c:	1da2      	adds	r2, r4, #6
    e71e:	77d3      	strb	r3, [r2, #31]
    e720:	2194      	movs	r1, #148	; 0x94
    e722:	22c1      	movs	r2, #193	; 0xc1
    e724:	76a1      	strb	r1, [r4, #26]
    e726:	7662      	strb	r2, [r4, #25]
    e728:	76e2      	strb	r2, [r4, #27]
    e72a:	3991      	subs	r1, #145	; 0x91
    e72c:	1ca2      	adds	r2, r4, #2
    e72e:	77d1      	strb	r1, [r2, #31]
    e730:	2234      	movs	r2, #52	; 0x34
    e732:	7622      	strb	r2, [r4, #24]
    e734:	0022      	movs	r2, r4
    e736:	317d      	adds	r1, #125	; 0x7d
    e738:	3232      	adds	r2, #50	; 0x32
    e73a:	7011      	strb	r1, [r2, #0]
    e73c:	4a50      	ldr	r2, [pc, #320]	; (e880 <RADIO_InitDefaultAttributes+0x1ac>)
    e73e:	397e      	subs	r1, #126	; 0x7e
    e740:	60e2      	str	r2, [r4, #12]
    e742:	0022      	movs	r2, r4
    e744:	3237      	adds	r2, #55	; 0x37
    e746:	7011      	strb	r1, [r2, #0]
    e748:	0022      	movs	r2, r4
    e74a:	3109      	adds	r1, #9
    e74c:	3238      	adds	r2, #56	; 0x38
    e74e:	7011      	strb	r1, [r2, #0]
    e750:	0022      	movs	r2, r4
    e752:	3107      	adds	r1, #7
    e754:	3239      	adds	r2, #57	; 0x39
    e756:	7011      	strb	r1, [r2, #0]
    e758:	0022      	movs	r2, r4
    e75a:	322c      	adds	r2, #44	; 0x2c
    e75c:	7013      	strb	r3, [r2, #0]
    e75e:	4a49      	ldr	r2, [pc, #292]	; (e884 <RADIO_InitDefaultAttributes+0x1b0>)
    e760:	82e3      	strh	r3, [r4, #22]
    e762:	62a2      	str	r2, [r4, #40]	; 0x28
    e764:	0022      	movs	r2, r4
    e766:	324c      	adds	r2, #76	; 0x4c
    e768:	8013      	strh	r3, [r2, #0]
    e76a:	0022      	movs	r2, r4
    e76c:	324e      	adds	r2, #78	; 0x4e
    e76e:	7013      	strb	r3, [r2, #0]
    e770:	0022      	movs	r2, r4
    e772:	324f      	adds	r2, #79	; 0x4f
    e774:	7013      	strb	r3, [r2, #0]
    e776:	0022      	movs	r2, r4
    e778:	3240      	adds	r2, #64	; 0x40
    e77a:	7013      	strb	r3, [r2, #0]
    e77c:	0022      	movs	r2, r4
    e77e:	3241      	adds	r2, #65	; 0x41
    e780:	7013      	strb	r3, [r2, #0]
    e782:	0022      	movs	r2, r4
    e784:	3254      	adds	r2, #84	; 0x54
    e786:	7013      	strb	r3, [r2, #0]
    e788:	0022      	movs	r2, r4
    e78a:	3255      	adds	r2, #85	; 0x55
    e78c:	7015      	strb	r5, [r2, #0]
    e78e:	0022      	movs	r2, r4
    e790:	3257      	adds	r2, #87	; 0x57
    e792:	6463      	str	r3, [r4, #68]	; 0x44
    e794:	64a3      	str	r3, [r4, #72]	; 0x48
    e796:	87a3      	strh	r3, [r4, #60]	; 0x3c
    e798:	87e3      	strh	r3, [r4, #62]	; 0x3e
    e79a:	7013      	strb	r3, [r2, #0]
    e79c:	3730      	adds	r7, #48	; 0x30
    e79e:	783b      	ldrb	r3, [r7, #0]
    e7a0:	2b00      	cmp	r3, #0
    e7a2:	d151      	bne.n	e848 <RADIO_InitDefaultAttributes+0x174>
    e7a4:	4838      	ldr	r0, [pc, #224]	; (e888 <RADIO_InitDefaultAttributes+0x1b4>)
    e7a6:	4e39      	ldr	r6, [pc, #228]	; (e88c <RADIO_InitDefaultAttributes+0x1b8>)
    e7a8:	47b0      	blx	r6
    e7aa:	2808      	cmp	r0, #8
    e7ac:	d149      	bne.n	e842 <RADIO_InitDefaultAttributes+0x16e>
    e7ae:	4838      	ldr	r0, [pc, #224]	; (e890 <RADIO_InitDefaultAttributes+0x1bc>)
    e7b0:	47b0      	blx	r6
    e7b2:	2808      	cmp	r0, #8
    e7b4:	d145      	bne.n	e842 <RADIO_InitDefaultAttributes+0x16e>
    e7b6:	4837      	ldr	r0, [pc, #220]	; (e894 <RADIO_InitDefaultAttributes+0x1c0>)
    e7b8:	47b0      	blx	r6
    e7ba:	2808      	cmp	r0, #8
    e7bc:	d141      	bne.n	e842 <RADIO_InitDefaultAttributes+0x16e>
    e7be:	4836      	ldr	r0, [pc, #216]	; (e898 <RADIO_InitDefaultAttributes+0x1c4>)
    e7c0:	47b0      	blx	r6
    e7c2:	2808      	cmp	r0, #8
    e7c4:	d13d      	bne.n	e842 <RADIO_InitDefaultAttributes+0x16e>
    e7c6:	703d      	strb	r5, [r7, #0]
    e7c8:	4b34      	ldr	r3, [pc, #208]	; (e89c <RADIO_InitDefaultAttributes+0x1c8>)
    e7ca:	4798      	blx	r3
    e7cc:	4b34      	ldr	r3, [pc, #208]	; (e8a0 <RADIO_InitDefaultAttributes+0x1cc>)
    e7ce:	4798      	blx	r3
    e7d0:	2800      	cmp	r0, #0
    e7d2:	d107      	bne.n	e7e4 <RADIO_InitDefaultAttributes+0x110>
    e7d4:	0023      	movs	r3, r4
    e7d6:	3355      	adds	r3, #85	; 0x55
    e7d8:	7018      	strb	r0, [r3, #0]
    e7da:	4b32      	ldr	r3, [pc, #200]	; (e8a4 <RADIO_InitDefaultAttributes+0x1d0>)
    e7dc:	4798      	blx	r3
    e7de:	0023      	movs	r3, r4
    e7e0:	3354      	adds	r3, #84	; 0x54
    e7e2:	7018      	strb	r0, [r3, #0]
    e7e4:	4b30      	ldr	r3, [pc, #192]	; (e8a8 <RADIO_InitDefaultAttributes+0x1d4>)
    e7e6:	4798      	blx	r3
    e7e8:	2201      	movs	r2, #1
    e7ea:	2100      	movs	r1, #0
    e7ec:	0010      	movs	r0, r2
    e7ee:	4f2f      	ldr	r7, [pc, #188]	; (e8ac <RADIO_InitDefaultAttributes+0x1d8>)
    e7f0:	47b8      	blx	r7
    e7f2:	6820      	ldr	r0, [r4, #0]
    e7f4:	4b2e      	ldr	r3, [pc, #184]	; (e8b0 <RADIO_InitDefaultAttributes+0x1dc>)
    e7f6:	4798      	blx	r3
    e7f8:	2142      	movs	r1, #66	; 0x42
    e7fa:	203b      	movs	r0, #59	; 0x3b
    e7fc:	4d2d      	ldr	r5, [pc, #180]	; (e8b4 <RADIO_InitDefaultAttributes+0x1e0>)
    e7fe:	47a8      	blx	r5
    e800:	203b      	movs	r0, #59	; 0x3b
    e802:	4b2d      	ldr	r3, [pc, #180]	; (e8b8 <RADIO_InitDefaultAttributes+0x1e4>)
    e804:	4798      	blx	r3
    e806:	2620      	movs	r6, #32
    e808:	4006      	ands	r6, r0
    e80a:	d1f9      	bne.n	e800 <RADIO_InitDefaultAttributes+0x12c>
    e80c:	2123      	movs	r1, #35	; 0x23
    e80e:	200c      	movs	r0, #12
    e810:	47a8      	blx	r5
    e812:	21aa      	movs	r1, #170	; 0xaa
    e814:	201f      	movs	r0, #31
    e816:	47a8      	blx	r5
    e818:	21ff      	movs	r1, #255	; 0xff
    e81a:	2032      	movs	r0, #50	; 0x32
    e81c:	47a8      	blx	r5
    e81e:	2140      	movs	r1, #64	; 0x40
    e820:	2031      	movs	r0, #49	; 0x31
    e822:	47a8      	blx	r5
    e824:	2201      	movs	r2, #1
    e826:	0030      	movs	r0, r6
    e828:	0011      	movs	r1, r2
    e82a:	47b8      	blx	r7
    e82c:	21ff      	movs	r1, #255	; 0xff
    e82e:	2023      	movs	r0, #35	; 0x23
    e830:	47a8      	blx	r5
    e832:	4b21      	ldr	r3, [pc, #132]	; (e8b8 <RADIO_InitDefaultAttributes+0x1e4>)
    e834:	2042      	movs	r0, #66	; 0x42
    e836:	4798      	blx	r3
    e838:	3431      	adds	r4, #49	; 0x31
    e83a:	4b20      	ldr	r3, [pc, #128]	; (e8bc <RADIO_InitDefaultAttributes+0x1e8>)
    e83c:	7020      	strb	r0, [r4, #0]
    e83e:	4798      	blx	r3
    e840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e842:	4b1f      	ldr	r3, [pc, #124]	; (e8c0 <RADIO_InitDefaultAttributes+0x1ec>)
    e844:	4798      	blx	r3
    e846:	e7bf      	b.n	e7c8 <RADIO_InitDefaultAttributes+0xf4>
    e848:	0023      	movs	r3, r4
    e84a:	332d      	adds	r3, #45	; 0x2d
    e84c:	4d1d      	ldr	r5, [pc, #116]	; (e8c4 <RADIO_InitDefaultAttributes+0x1f0>)
    e84e:	7818      	ldrb	r0, [r3, #0]
    e850:	47a8      	blx	r5
    e852:	0023      	movs	r3, r4
    e854:	332e      	adds	r3, #46	; 0x2e
    e856:	7818      	ldrb	r0, [r3, #0]
    e858:	47a8      	blx	r5
    e85a:	0023      	movs	r3, r4
    e85c:	332f      	adds	r3, #47	; 0x2f
    e85e:	7818      	ldrb	r0, [r3, #0]
    e860:	47a8      	blx	r5
    e862:	0023      	movs	r3, r4
    e864:	3350      	adds	r3, #80	; 0x50
    e866:	7818      	ldrb	r0, [r3, #0]
    e868:	47a8      	blx	r5
    e86a:	e7ad      	b.n	e7c8 <RADIO_InitDefaultAttributes+0xf4>
    e86c:	2000126b 	.word	0x2000126b
    e870:	20000654 	.word	0x20000654
    e874:	33be27a0 	.word	0x33be27a0
    e878:	000061a8 	.word	0x000061a8
    e87c:	0000c350 	.word	0x0000c350
    e880:	00003a98 	.word	0x00003a98
    e884:	20001168 	.word	0x20001168
    e888:	20000681 	.word	0x20000681
    e88c:	000018bd 	.word	0x000018bd
    e890:	20000682 	.word	0x20000682
    e894:	20000683 	.word	0x20000683
    e898:	200006a4 	.word	0x200006a4
    e89c:	000072bd 	.word	0x000072bd
    e8a0:	00007429 	.word	0x00007429
    e8a4:	00007425 	.word	0x00007425
    e8a8:	0000e575 	.word	0x0000e575
    e8ac:	00001339 	.word	0x00001339
    e8b0:	0000d80d 	.word	0x0000d80d
    e8b4:	000072fd 	.word	0x000072fd
    e8b8:	00007325 	.word	0x00007325
    e8bc:	0000e6b9 	.word	0x0000e6b9
    e8c0:	00001801 	.word	0x00001801
    e8c4:	00001bf5 	.word	0x00001bf5

0000e8c8 <RADIO_Receive>:
    e8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e8ca:	7803      	ldrb	r3, [r0, #0]
    e8cc:	0006      	movs	r6, r0
    e8ce:	4d24      	ldr	r5, [pc, #144]	; (e960 <RADIO_Receive+0x98>)
    e8d0:	2b00      	cmp	r3, #0
    e8d2:	d11d      	bne.n	e910 <RADIO_Receive+0x48>
    e8d4:	782b      	ldrb	r3, [r5, #0]
    e8d6:	2004      	movs	r0, #4
    e8d8:	2b01      	cmp	r3, #1
    e8da:	d118      	bne.n	e90e <RADIO_Receive+0x46>
    e8dc:	4c21      	ldr	r4, [pc, #132]	; (e964 <RADIO_Receive+0x9c>)
    e8de:	4f22      	ldr	r7, [pc, #136]	; (e968 <RADIO_Receive+0xa0>)
    e8e0:	0023      	movs	r3, r4
    e8e2:	332f      	adds	r3, #47	; 0x2f
    e8e4:	7818      	ldrb	r0, [r3, #0]
    e8e6:	47b8      	blx	r7
    e8e8:	0023      	movs	r3, r4
    e8ea:	3334      	adds	r3, #52	; 0x34
    e8ec:	781b      	ldrb	r3, [r3, #0]
    e8ee:	2b00      	cmp	r3, #0
    e8f0:	d102      	bne.n	e8f8 <RADIO_Receive+0x30>
    e8f2:	342e      	adds	r4, #46	; 0x2e
    e8f4:	7820      	ldrb	r0, [r4, #0]
    e8f6:	47b8      	blx	r7
    e8f8:	8872      	ldrh	r2, [r6, #2]
    e8fa:	4b1c      	ldr	r3, [pc, #112]	; (e96c <RADIO_Receive+0xa4>)
    e8fc:	2008      	movs	r0, #8
    e8fe:	801a      	strh	r2, [r3, #0]
    e900:	2304      	movs	r3, #4
    e902:	702b      	strb	r3, [r5, #0]
    e904:	4b1a      	ldr	r3, [pc, #104]	; (e970 <RADIO_Receive+0xa8>)
    e906:	4798      	blx	r3
    e908:	4b1a      	ldr	r3, [pc, #104]	; (e974 <RADIO_Receive+0xac>)
    e90a:	4798      	blx	r3
    e90c:	2000      	movs	r0, #0
    e90e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e910:	782b      	ldrb	r3, [r5, #0]
    e912:	2000      	movs	r0, #0
    e914:	2b01      	cmp	r3, #1
    e916:	d0fa      	beq.n	e90e <RADIO_Receive+0x46>
    e918:	782b      	ldrb	r3, [r5, #0]
    e91a:	3003      	adds	r0, #3
    e91c:	2b04      	cmp	r3, #4
    e91e:	d1f6      	bne.n	e90e <RADIO_Receive+0x46>
    e920:	4c10      	ldr	r4, [pc, #64]	; (e964 <RADIO_Receive+0x9c>)
    e922:	4e11      	ldr	r6, [pc, #68]	; (e968 <RADIO_Receive+0xa0>)
    e924:	0023      	movs	r3, r4
    e926:	332f      	adds	r3, #47	; 0x2f
    e928:	7818      	ldrb	r0, [r3, #0]
    e92a:	47b0      	blx	r6
    e92c:	0023      	movs	r3, r4
    e92e:	3334      	adds	r3, #52	; 0x34
    e930:	781b      	ldrb	r3, [r3, #0]
    e932:	2b00      	cmp	r3, #0
    e934:	d103      	bne.n	e93e <RADIO_Receive+0x76>
    e936:	0023      	movs	r3, r4
    e938:	332e      	adds	r3, #46	; 0x2e
    e93a:	7818      	ldrb	r0, [r3, #0]
    e93c:	47b0      	blx	r6
    e93e:	2200      	movs	r2, #0
    e940:	3434      	adds	r4, #52	; 0x34
    e942:	7821      	ldrb	r1, [r4, #0]
    e944:	0010      	movs	r0, r2
    e946:	4b0c      	ldr	r3, [pc, #48]	; (e978 <RADIO_Receive+0xb0>)
    e948:	4798      	blx	r3
    e94a:	4b0c      	ldr	r3, [pc, #48]	; (e97c <RADIO_Receive+0xb4>)
    e94c:	4798      	blx	r3
    e94e:	2301      	movs	r3, #1
    e950:	2008      	movs	r0, #8
    e952:	4c0b      	ldr	r4, [pc, #44]	; (e980 <RADIO_Receive+0xb8>)
    e954:	702b      	strb	r3, [r5, #0]
    e956:	47a0      	blx	r4
    e958:	2002      	movs	r0, #2
    e95a:	47a0      	blx	r4
    e95c:	e7d6      	b.n	e90c <RADIO_Receive+0x44>
    e95e:	46c0      	nop			; (mov r8, r8)
    e960:	2000126b 	.word	0x2000126b
    e964:	20000654 	.word	0x20000654
    e968:	00001bf5 	.word	0x00001bf5
    e96c:	20000590 	.word	0x20000590
    e970:	0000de15 	.word	0x0000de15
    e974:	0000e575 	.word	0x0000e575
    e978:	00001339 	.word	0x00001339
    e97c:	0000e6b9 	.word	0x0000e6b9
    e980:	0000de41 	.word	0x0000de41

0000e984 <RADIO_TxDoneHandler>:
    e984:	b5f0      	push	{r4, r5, r6, r7, lr}
    e986:	4b35      	ldr	r3, [pc, #212]	; (ea5c <RADIO_TxDoneHandler+0xd8>)
    e988:	b087      	sub	sp, #28
    e98a:	881a      	ldrh	r2, [r3, #0]
    e98c:	06d2      	lsls	r2, r2, #27
    e98e:	0fd2      	lsrs	r2, r2, #31
    e990:	9200      	str	r2, [sp, #0]
    e992:	466a      	mov	r2, sp
    e994:	7810      	ldrb	r0, [r2, #0]
    e996:	881a      	ldrh	r2, [r3, #0]
    e998:	2801      	cmp	r0, #1
    e99a:	d12b      	bne.n	e9f4 <RADIO_TxDoneHandler+0x70>
    e99c:	4c30      	ldr	r4, [pc, #192]	; (ea60 <RADIO_TxDoneHandler+0xdc>)
    e99e:	2110      	movs	r1, #16
    e9a0:	0027      	movs	r7, r4
    e9a2:	2500      	movs	r5, #0
    e9a4:	438a      	bics	r2, r1
    e9a6:	801a      	strh	r2, [r3, #0]
    e9a8:	3734      	adds	r7, #52	; 0x34
    e9aa:	0002      	movs	r2, r0
    e9ac:	7839      	ldrb	r1, [r7, #0]
    e9ae:	4b2d      	ldr	r3, [pc, #180]	; (ea64 <RADIO_TxDoneHandler+0xe0>)
    e9b0:	4798      	blx	r3
    e9b2:	68e3      	ldr	r3, [r4, #12]
    e9b4:	ae03      	add	r6, sp, #12
    e9b6:	9304      	str	r3, [sp, #16]
    e9b8:	7035      	strb	r5, [r6, #0]
    e9ba:	002a      	movs	r2, r5
    e9bc:	4b29      	ldr	r3, [pc, #164]	; (ea64 <RADIO_TxDoneHandler+0xe0>)
    e9be:	7839      	ldrb	r1, [r7, #0]
    e9c0:	0028      	movs	r0, r5
    e9c2:	4798      	blx	r3
    e9c4:	466a      	mov	r2, sp
    e9c6:	4b28      	ldr	r3, [pc, #160]	; (ea68 <RADIO_TxDoneHandler+0xe4>)
    e9c8:	7812      	ldrb	r2, [r2, #0]
    e9ca:	701a      	strb	r2, [r3, #0]
    e9cc:	0023      	movs	r3, r4
    e9ce:	3357      	adds	r3, #87	; 0x57
    e9d0:	701d      	strb	r5, [r3, #0]
    e9d2:	4b26      	ldr	r3, [pc, #152]	; (ea6c <RADIO_TxDoneHandler+0xe8>)
    e9d4:	781b      	ldrb	r3, [r3, #0]
    e9d6:	075b      	lsls	r3, r3, #29
    e9d8:	d505      	bpl.n	e9e6 <RADIO_TxDoneHandler+0x62>
    e9da:	6923      	ldr	r3, [r4, #16]
    e9dc:	42ab      	cmp	r3, r5
    e9de:	d002      	beq.n	e9e6 <RADIO_TxDoneHandler+0x62>
    e9e0:	0031      	movs	r1, r6
    e9e2:	2004      	movs	r0, #4
    e9e4:	4798      	blx	r3
    e9e6:	4b22      	ldr	r3, [pc, #136]	; (ea70 <RADIO_TxDoneHandler+0xec>)
    e9e8:	4798      	blx	r3
    e9ea:	4b22      	ldr	r3, [pc, #136]	; (ea74 <RADIO_TxDoneHandler+0xf0>)
    e9ec:	4798      	blx	r3
    e9ee:	2000      	movs	r0, #0
    e9f0:	b007      	add	sp, #28
    e9f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e9f4:	07d2      	lsls	r2, r2, #31
    e9f6:	d402      	bmi.n	e9fe <RADIO_TxDoneHandler+0x7a>
    e9f8:	881a      	ldrh	r2, [r3, #0]
    e9fa:	0752      	lsls	r2, r2, #29
    e9fc:	d527      	bpl.n	ea4e <RADIO_TxDoneHandler+0xca>
    e9fe:	2601      	movs	r6, #1
    ea00:	2104      	movs	r1, #4
    ea02:	881a      	ldrh	r2, [r3, #0]
    ea04:	4f16      	ldr	r7, [pc, #88]	; (ea60 <RADIO_TxDoneHandler+0xdc>)
    ea06:	43b2      	bics	r2, r6
    ea08:	801a      	strh	r2, [r3, #0]
    ea0a:	881a      	ldrh	r2, [r3, #0]
    ea0c:	2400      	movs	r4, #0
    ea0e:	438a      	bics	r2, r1
    ea10:	801a      	strh	r2, [r3, #0]
    ea12:	4b19      	ldr	r3, [pc, #100]	; (ea78 <RADIO_TxDoneHandler+0xf4>)
    ea14:	ad03      	add	r5, sp, #12
    ea16:	681b      	ldr	r3, [r3, #0]
    ea18:	702c      	strb	r4, [r5, #0]
    ea1a:	9304      	str	r3, [sp, #16]
    ea1c:	003b      	movs	r3, r7
    ea1e:	3334      	adds	r3, #52	; 0x34
    ea20:	7819      	ldrb	r1, [r3, #0]
    ea22:	0022      	movs	r2, r4
    ea24:	0020      	movs	r0, r4
    ea26:	4b0f      	ldr	r3, [pc, #60]	; (ea64 <RADIO_TxDoneHandler+0xe0>)
    ea28:	4798      	blx	r3
    ea2a:	4b14      	ldr	r3, [pc, #80]	; (ea7c <RADIO_TxDoneHandler+0xf8>)
    ea2c:	4798      	blx	r3
    ea2e:	4b0e      	ldr	r3, [pc, #56]	; (ea68 <RADIO_TxDoneHandler+0xe4>)
    ea30:	701e      	strb	r6, [r3, #0]
    ea32:	003b      	movs	r3, r7
    ea34:	3357      	adds	r3, #87	; 0x57
    ea36:	701c      	strb	r4, [r3, #0]
    ea38:	4b0c      	ldr	r3, [pc, #48]	; (ea6c <RADIO_TxDoneHandler+0xe8>)
    ea3a:	781b      	ldrb	r3, [r3, #0]
    ea3c:	079b      	lsls	r3, r3, #30
    ea3e:	d5d6      	bpl.n	e9ee <RADIO_TxDoneHandler+0x6a>
    ea40:	693b      	ldr	r3, [r7, #16]
    ea42:	42a3      	cmp	r3, r4
    ea44:	d0d3      	beq.n	e9ee <RADIO_TxDoneHandler+0x6a>
    ea46:	0029      	movs	r1, r5
    ea48:	2002      	movs	r0, #2
    ea4a:	4798      	blx	r3
    ea4c:	e7cf      	b.n	e9ee <RADIO_TxDoneHandler+0x6a>
    ea4e:	881b      	ldrh	r3, [r3, #0]
    ea50:	059b      	lsls	r3, r3, #22
    ea52:	d5cc      	bpl.n	e9ee <RADIO_TxDoneHandler+0x6a>
    ea54:	4b0a      	ldr	r3, [pc, #40]	; (ea80 <RADIO_TxDoneHandler+0xfc>)
    ea56:	4798      	blx	r3
    ea58:	e7c9      	b.n	e9ee <RADIO_TxDoneHandler+0x6a>
    ea5a:	46c0      	nop			; (mov r8, r8)
    ea5c:	20001268 	.word	0x20001268
    ea60:	20000654 	.word	0x20000654
    ea64:	00001339 	.word	0x00001339
    ea68:	2000126b 	.word	0x2000126b
    ea6c:	2000126a 	.word	0x2000126a
    ea70:	000072bd 	.word	0x000072bd
    ea74:	0000e6d5 	.word	0x0000e6d5
    ea78:	20000598 	.word	0x20000598
    ea7c:	0000e6b9 	.word	0x0000e6b9
    ea80:	0000ee1d 	.word	0x0000ee1d

0000ea84 <RADIO_RxDoneHandler>:
    ea84:	b5f0      	push	{r4, r5, r6, r7, lr}
    ea86:	4b8b      	ldr	r3, [pc, #556]	; (ecb4 <RADIO_RxDoneHandler+0x230>)
    ea88:	b085      	sub	sp, #20
    ea8a:	881c      	ldrh	r4, [r3, #0]
    ea8c:	881a      	ldrh	r2, [r3, #0]
    ea8e:	06a4      	lsls	r4, r4, #26
    ea90:	0fe4      	lsrs	r4, r4, #31
    ea92:	b2e0      	uxtb	r0, r4
    ea94:	2801      	cmp	r0, #1
    ea96:	d126      	bne.n	eae6 <RADIO_RxDoneHandler+0x62>
    ea98:	4d87      	ldr	r5, [pc, #540]	; (ecb8 <RADIO_RxDoneHandler+0x234>)
    ea9a:	2120      	movs	r1, #32
    ea9c:	002e      	movs	r6, r5
    ea9e:	438a      	bics	r2, r1
    eaa0:	801a      	strh	r2, [r3, #0]
    eaa2:	3634      	adds	r6, #52	; 0x34
    eaa4:	0002      	movs	r2, r0
    eaa6:	7831      	ldrb	r1, [r6, #0]
    eaa8:	4f84      	ldr	r7, [pc, #528]	; (ecbc <RADIO_RxDoneHandler+0x238>)
    eaaa:	47b8      	blx	r7
    eaac:	2200      	movs	r2, #0
    eaae:	7831      	ldrb	r1, [r6, #0]
    eab0:	0010      	movs	r0, r2
    eab2:	47b8      	blx	r7
    eab4:	4b82      	ldr	r3, [pc, #520]	; (ecc0 <RADIO_RxDoneHandler+0x23c>)
    eab6:	4798      	blx	r3
    eab8:	4b82      	ldr	r3, [pc, #520]	; (ecc4 <RADIO_RxDoneHandler+0x240>)
    eaba:	002a      	movs	r2, r5
    eabc:	701c      	strb	r4, [r3, #0]
    eabe:	2300      	movs	r3, #0
    eac0:	322c      	adds	r2, #44	; 0x2c
    eac2:	7013      	strb	r3, [r2, #0]
    eac4:	002a      	movs	r2, r5
    eac6:	a901      	add	r1, sp, #4
    eac8:	3257      	adds	r2, #87	; 0x57
    eaca:	7013      	strb	r3, [r2, #0]
    eacc:	700b      	strb	r3, [r1, #0]
    eace:	4b7e      	ldr	r3, [pc, #504]	; (ecc8 <RADIO_RxDoneHandler+0x244>)
    ead0:	781b      	ldrb	r3, [r3, #0]
    ead2:	071b      	lsls	r3, r3, #28
    ead4:	d504      	bpl.n	eae0 <RADIO_RxDoneHandler+0x5c>
    ead6:	692b      	ldr	r3, [r5, #16]
    ead8:	2008      	movs	r0, #8
    eada:	2b00      	cmp	r3, #0
    eadc:	d000      	beq.n	eae0 <RADIO_RxDoneHandler+0x5c>
    eade:	e07e      	b.n	ebde <RADIO_RxDoneHandler+0x15a>
    eae0:	2000      	movs	r0, #0
    eae2:	b005      	add	sp, #20
    eae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    eae6:	0652      	lsls	r2, r2, #25
    eae8:	d402      	bmi.n	eaf0 <RADIO_RxDoneHandler+0x6c>
    eaea:	881a      	ldrh	r2, [r3, #0]
    eaec:	0612      	lsls	r2, r2, #24
    eaee:	d523      	bpl.n	eb38 <RADIO_RxDoneHandler+0xb4>
    eaf0:	2140      	movs	r1, #64	; 0x40
    eaf2:	881a      	ldrh	r2, [r3, #0]
    eaf4:	4c70      	ldr	r4, [pc, #448]	; (ecb8 <RADIO_RxDoneHandler+0x234>)
    eaf6:	438a      	bics	r2, r1
    eaf8:	801a      	strh	r2, [r3, #0]
    eafa:	881a      	ldrh	r2, [r3, #0]
    eafc:	1849      	adds	r1, r1, r1
    eafe:	438a      	bics	r2, r1
    eb00:	801a      	strh	r2, [r3, #0]
    eb02:	0023      	movs	r3, r4
    eb04:	2200      	movs	r2, #0
    eb06:	3334      	adds	r3, #52	; 0x34
    eb08:	7819      	ldrb	r1, [r3, #0]
    eb0a:	0010      	movs	r0, r2
    eb0c:	4b6b      	ldr	r3, [pc, #428]	; (ecbc <RADIO_RxDoneHandler+0x238>)
    eb0e:	4798      	blx	r3
    eb10:	4b6b      	ldr	r3, [pc, #428]	; (ecc0 <RADIO_RxDoneHandler+0x23c>)
    eb12:	4798      	blx	r3
    eb14:	2201      	movs	r2, #1
    eb16:	4b6b      	ldr	r3, [pc, #428]	; (ecc4 <RADIO_RxDoneHandler+0x240>)
    eb18:	a901      	add	r1, sp, #4
    eb1a:	701a      	strb	r2, [r3, #0]
    eb1c:	0022      	movs	r2, r4
    eb1e:	2300      	movs	r3, #0
    eb20:	322c      	adds	r2, #44	; 0x2c
    eb22:	7013      	strb	r3, [r2, #0]
    eb24:	0022      	movs	r2, r4
    eb26:	3257      	adds	r2, #87	; 0x57
    eb28:	7013      	strb	r3, [r2, #0]
    eb2a:	700b      	strb	r3, [r1, #0]
    eb2c:	4b66      	ldr	r3, [pc, #408]	; (ecc8 <RADIO_RxDoneHandler+0x244>)
    eb2e:	781b      	ldrb	r3, [r3, #0]
    eb30:	071b      	lsls	r3, r3, #28
    eb32:	d5d5      	bpl.n	eae0 <RADIO_RxDoneHandler+0x5c>
    eb34:	6923      	ldr	r3, [r4, #16]
    eb36:	e7cf      	b.n	ead8 <RADIO_RxDoneHandler+0x54>
    eb38:	881a      	ldrh	r2, [r3, #0]
    eb3a:	0792      	lsls	r2, r2, #30
    eb3c:	d55a      	bpl.n	ebf4 <RADIO_RxDoneHandler+0x170>
    eb3e:	2102      	movs	r1, #2
    eb40:	881a      	ldrh	r2, [r3, #0]
    eb42:	4d62      	ldr	r5, [pc, #392]	; (eccc <RADIO_RxDoneHandler+0x248>)
    eb44:	438a      	bics	r2, r1
    eb46:	801a      	strh	r2, [r3, #0]
    eb48:	2013      	movs	r0, #19
    eb4a:	47a8      	blx	r5
    eb4c:	4c5a      	ldr	r4, [pc, #360]	; (ecb8 <RADIO_RxDoneHandler+0x234>)
    eb4e:	2100      	movs	r1, #0
    eb50:	0026      	movs	r6, r4
    eb52:	362c      	adds	r6, #44	; 0x2c
    eb54:	7030      	strb	r0, [r6, #0]
    eb56:	4b5e      	ldr	r3, [pc, #376]	; (ecd0 <RADIO_RxDoneHandler+0x24c>)
    eb58:	200d      	movs	r0, #13
    eb5a:	4798      	blx	r3
    eb5c:	7832      	ldrb	r2, [r6, #0]
    eb5e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    eb60:	b2d2      	uxtb	r2, r2
    eb62:	4b5c      	ldr	r3, [pc, #368]	; (ecd4 <RADIO_RxDoneHandler+0x250>)
    eb64:	2000      	movs	r0, #0
    eb66:	4798      	blx	r3
    eb68:	2019      	movs	r0, #25
    eb6a:	47a8      	blx	r5
    eb6c:	0023      	movs	r3, r4
    eb6e:	3332      	adds	r3, #50	; 0x32
    eb70:	4a59      	ldr	r2, [pc, #356]	; (ecd8 <RADIO_RxDoneHandler+0x254>)
    eb72:	7018      	strb	r0, [r3, #0]
    eb74:	6823      	ldr	r3, [r4, #0]
    eb76:	1899      	adds	r1, r3, r2
    eb78:	4a58      	ldr	r2, [pc, #352]	; (ecdc <RADIO_RxDoneHandler+0x258>)
    eb7a:	4291      	cmp	r1, r2
    eb7c:	d831      	bhi.n	ebe2 <RADIO_RxDoneHandler+0x15e>
    eb7e:	201a      	movs	r0, #26
    eb80:	47a8      	blx	r5
    eb82:	3063      	adds	r0, #99	; 0x63
    eb84:	0023      	movs	r3, r4
    eb86:	3356      	adds	r3, #86	; 0x56
    eb88:	7018      	strb	r0, [r3, #0]
    eb8a:	0022      	movs	r2, r4
    eb8c:	2100      	movs	r1, #0
    eb8e:	2003      	movs	r0, #3
    eb90:	3232      	adds	r2, #50	; 0x32
    eb92:	5651      	ldrsb	r1, [r2, r1]
    eb94:	17cb      	asrs	r3, r1, #31
    eb96:	4003      	ands	r3, r0
    eb98:	185b      	adds	r3, r3, r1
    eb9a:	109b      	asrs	r3, r3, #2
    eb9c:	7013      	strb	r3, [r2, #0]
    eb9e:	0023      	movs	r3, r4
    eba0:	2200      	movs	r2, #0
    eba2:	3334      	adds	r3, #52	; 0x34
    eba4:	7819      	ldrb	r1, [r3, #0]
    eba6:	0010      	movs	r0, r2
    eba8:	4b44      	ldr	r3, [pc, #272]	; (ecbc <RADIO_RxDoneHandler+0x238>)
    ebaa:	4798      	blx	r3
    ebac:	4b44      	ldr	r3, [pc, #272]	; (ecc0 <RADIO_RxDoneHandler+0x23c>)
    ebae:	4798      	blx	r3
    ebb0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    ebb2:	a901      	add	r1, sp, #4
    ebb4:	604b      	str	r3, [r1, #4]
    ebb6:	0023      	movs	r3, r4
    ebb8:	332c      	adds	r3, #44	; 0x2c
    ebba:	781b      	ldrb	r3, [r3, #0]
    ebbc:	2201      	movs	r2, #1
    ebbe:	720b      	strb	r3, [r1, #8]
    ebc0:	2300      	movs	r3, #0
    ebc2:	700b      	strb	r3, [r1, #0]
    ebc4:	4b3f      	ldr	r3, [pc, #252]	; (ecc4 <RADIO_RxDoneHandler+0x240>)
    ebc6:	701a      	strb	r2, [r3, #0]
    ebc8:	4b3f      	ldr	r3, [pc, #252]	; (ecc8 <RADIO_RxDoneHandler+0x244>)
    ebca:	7818      	ldrb	r0, [r3, #0]
    ebcc:	07c0      	lsls	r0, r0, #31
    ebce:	0fc0      	lsrs	r0, r0, #31
    ebd0:	4290      	cmp	r0, r2
    ebd2:	d000      	beq.n	ebd6 <RADIO_RxDoneHandler+0x152>
    ebd4:	e784      	b.n	eae0 <RADIO_RxDoneHandler+0x5c>
    ebd6:	6923      	ldr	r3, [r4, #16]
    ebd8:	2b00      	cmp	r3, #0
    ebda:	d100      	bne.n	ebde <RADIO_RxDoneHandler+0x15a>
    ebdc:	e780      	b.n	eae0 <RADIO_RxDoneHandler+0x5c>
    ebde:	4798      	blx	r3
    ebe0:	e77e      	b.n	eae0 <RADIO_RxDoneHandler+0x5c>
    ebe2:	4a3f      	ldr	r2, [pc, #252]	; (ece0 <RADIO_RxDoneHandler+0x25c>)
    ebe4:	189b      	adds	r3, r3, r2
    ebe6:	4a3f      	ldr	r2, [pc, #252]	; (ece4 <RADIO_RxDoneHandler+0x260>)
    ebe8:	4293      	cmp	r3, r2
    ebea:	d8ce      	bhi.n	eb8a <RADIO_RxDoneHandler+0x106>
    ebec:	201a      	movs	r0, #26
    ebee:	47a8      	blx	r5
    ebf0:	305c      	adds	r0, #92	; 0x5c
    ebf2:	e7c7      	b.n	eb84 <RADIO_RxDoneHandler+0x100>
    ebf4:	881a      	ldrh	r2, [r3, #0]
    ebf6:	0712      	lsls	r2, r2, #28
    ebf8:	0fd5      	lsrs	r5, r2, #31
    ebfa:	2a00      	cmp	r2, #0
    ebfc:	da27      	bge.n	ec4e <RADIO_RxDoneHandler+0x1ca>
    ebfe:	2108      	movs	r1, #8
    ec00:	881a      	ldrh	r2, [r3, #0]
    ec02:	4c2d      	ldr	r4, [pc, #180]	; (ecb8 <RADIO_RxDoneHandler+0x234>)
    ec04:	438a      	bics	r2, r1
    ec06:	801a      	strh	r2, [r3, #0]
    ec08:	0023      	movs	r3, r4
    ec0a:	2280      	movs	r2, #128	; 0x80
    ec0c:	3332      	adds	r3, #50	; 0x32
    ec0e:	701a      	strb	r2, [r3, #0]
    ec10:	0023      	movs	r3, r4
    ec12:	2200      	movs	r2, #0
    ec14:	3334      	adds	r3, #52	; 0x34
    ec16:	7819      	ldrb	r1, [r3, #0]
    ec18:	0010      	movs	r0, r2
    ec1a:	4b28      	ldr	r3, [pc, #160]	; (ecbc <RADIO_RxDoneHandler+0x238>)
    ec1c:	4798      	blx	r3
    ec1e:	4b28      	ldr	r3, [pc, #160]	; (ecc0 <RADIO_RxDoneHandler+0x23c>)
    ec20:	4798      	blx	r3
    ec22:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    ec24:	a901      	add	r1, sp, #4
    ec26:	604b      	str	r3, [r1, #4]
    ec28:	0023      	movs	r3, r4
    ec2a:	332c      	adds	r3, #44	; 0x2c
    ec2c:	781b      	ldrb	r3, [r3, #0]
    ec2e:	0022      	movs	r2, r4
    ec30:	720b      	strb	r3, [r1, #8]
    ec32:	2300      	movs	r3, #0
    ec34:	3257      	adds	r2, #87	; 0x57
    ec36:	7013      	strb	r3, [r2, #0]
    ec38:	700b      	strb	r3, [r1, #0]
    ec3a:	4b22      	ldr	r3, [pc, #136]	; (ecc4 <RADIO_RxDoneHandler+0x240>)
    ec3c:	701d      	strb	r5, [r3, #0]
    ec3e:	4b22      	ldr	r3, [pc, #136]	; (ecc8 <RADIO_RxDoneHandler+0x244>)
    ec40:	7818      	ldrb	r0, [r3, #0]
    ec42:	07c0      	lsls	r0, r0, #31
    ec44:	0fc0      	lsrs	r0, r0, #31
    ec46:	2801      	cmp	r0, #1
    ec48:	d000      	beq.n	ec4c <RADIO_RxDoneHandler+0x1c8>
    ec4a:	e749      	b.n	eae0 <RADIO_RxDoneHandler+0x5c>
    ec4c:	e7c3      	b.n	ebd6 <RADIO_RxDoneHandler+0x152>
    ec4e:	881a      	ldrh	r2, [r3, #0]
    ec50:	05d2      	lsls	r2, r2, #23
    ec52:	0fd5      	lsrs	r5, r2, #31
    ec54:	2a00      	cmp	r2, #0
    ec56:	db00      	blt.n	ec5a <RADIO_RxDoneHandler+0x1d6>
    ec58:	e742      	b.n	eae0 <RADIO_RxDoneHandler+0x5c>
    ec5a:	4c17      	ldr	r4, [pc, #92]	; (ecb8 <RADIO_RxDoneHandler+0x234>)
    ec5c:	881a      	ldrh	r2, [r3, #0]
    ec5e:	0026      	movs	r6, r4
    ec60:	4921      	ldr	r1, [pc, #132]	; (ece8 <RADIO_RxDoneHandler+0x264>)
    ec62:	362c      	adds	r6, #44	; 0x2c
    ec64:	400a      	ands	r2, r1
    ec66:	801a      	strh	r2, [r3, #0]
    ec68:	7832      	ldrb	r2, [r6, #0]
    ec6a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    ec6c:	b2d2      	uxtb	r2, r2
    ec6e:	2000      	movs	r0, #0
    ec70:	4b18      	ldr	r3, [pc, #96]	; (ecd4 <RADIO_RxDoneHandler+0x250>)
    ec72:	4798      	blx	r3
    ec74:	0023      	movs	r3, r4
    ec76:	2200      	movs	r2, #0
    ec78:	3334      	adds	r3, #52	; 0x34
    ec7a:	7819      	ldrb	r1, [r3, #0]
    ec7c:	0010      	movs	r0, r2
    ec7e:	4b0f      	ldr	r3, [pc, #60]	; (ecbc <RADIO_RxDoneHandler+0x238>)
    ec80:	4798      	blx	r3
    ec82:	4b0f      	ldr	r3, [pc, #60]	; (ecc0 <RADIO_RxDoneHandler+0x23c>)
    ec84:	4798      	blx	r3
    ec86:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    ec88:	a901      	add	r1, sp, #4
    ec8a:	604b      	str	r3, [r1, #4]
    ec8c:	7833      	ldrb	r3, [r6, #0]
    ec8e:	0022      	movs	r2, r4
    ec90:	720b      	strb	r3, [r1, #8]
    ec92:	2300      	movs	r3, #0
    ec94:	3257      	adds	r2, #87	; 0x57
    ec96:	7013      	strb	r3, [r2, #0]
    ec98:	700b      	strb	r3, [r1, #0]
    ec9a:	4b0a      	ldr	r3, [pc, #40]	; (ecc4 <RADIO_RxDoneHandler+0x240>)
    ec9c:	701d      	strb	r5, [r3, #0]
    ec9e:	4b0a      	ldr	r3, [pc, #40]	; (ecc8 <RADIO_RxDoneHandler+0x244>)
    eca0:	781b      	ldrb	r3, [r3, #0]
    eca2:	06db      	lsls	r3, r3, #27
    eca4:	d400      	bmi.n	eca8 <RADIO_RxDoneHandler+0x224>
    eca6:	e71b      	b.n	eae0 <RADIO_RxDoneHandler+0x5c>
    eca8:	6923      	ldr	r3, [r4, #16]
    ecaa:	2b00      	cmp	r3, #0
    ecac:	d100      	bne.n	ecb0 <RADIO_RxDoneHandler+0x22c>
    ecae:	e717      	b.n	eae0 <RADIO_RxDoneHandler+0x5c>
    ecb0:	2010      	movs	r0, #16
    ecb2:	e794      	b.n	ebde <RADIO_RxDoneHandler+0x15a>
    ecb4:	20001268 	.word	0x20001268
    ecb8:	20000654 	.word	0x20000654
    ecbc:	00001339 	.word	0x00001339
    ecc0:	0000e6b9 	.word	0x0000e6b9
    ecc4:	2000126b 	.word	0x2000126b
    ecc8:	2000126a 	.word	0x2000126a
    eccc:	00007325 	.word	0x00007325
    ecd0:	000072fd 	.word	0x000072fd
    ecd4:	00007391 	.word	0x00007391
    ecd8:	cc9eec80 	.word	0xcc9eec80
    ecdc:	096ae380 	.word	0x096ae380
    ece0:	e78fe580 	.word	0xe78fe580
    ece4:	06dac2c0 	.word	0x06dac2c0
    ece8:	fffffeff 	.word	0xfffffeff

0000ecec <Radio_LBTScanTimeout>:
    ecec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    ecee:	4c1c      	ldr	r4, [pc, #112]	; (ed60 <Radio_LBTScanTimeout+0x74>)
    ecf0:	0025      	movs	r5, r4
    ecf2:	0023      	movs	r3, r4
    ecf4:	354f      	adds	r5, #79	; 0x4f
    ecf6:	7829      	ldrb	r1, [r5, #0]
    ecf8:	3340      	adds	r3, #64	; 0x40
    ecfa:	3101      	adds	r1, #1
    ecfc:	b2c9      	uxtb	r1, r1
    ecfe:	7029      	strb	r1, [r5, #0]
    ed00:	781b      	ldrb	r3, [r3, #0]
    ed02:	428b      	cmp	r3, r1
    ed04:	d315      	bcc.n	ed32 <Radio_LBTScanTimeout+0x46>
    ed06:	260e      	movs	r6, #14
    ed08:	446e      	add	r6, sp
    ed0a:	4b16      	ldr	r3, [pc, #88]	; (ed64 <Radio_LBTScanTimeout+0x78>)
    ed0c:	0030      	movs	r0, r6
    ed0e:	4798      	blx	r3
    ed10:	2300      	movs	r3, #0
    ed12:	5ef2      	ldrsh	r2, [r6, r3]
    ed14:	782b      	ldrb	r3, [r5, #0]
    ed16:	4353      	muls	r3, r2
    ed18:	6c62      	ldr	r2, [r4, #68]	; 0x44
    ed1a:	189b      	adds	r3, r3, r2
    ed1c:	6463      	str	r3, [r4, #68]	; 0x44
    ed1e:	0023      	movs	r3, r4
    ed20:	2200      	movs	r2, #0
    ed22:	3350      	adds	r3, #80	; 0x50
    ed24:	7818      	ldrb	r0, [r3, #0]
    ed26:	9200      	str	r2, [sp, #0]
    ed28:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    ed2a:	4b0f      	ldr	r3, [pc, #60]	; (ed68 <Radio_LBTScanTimeout+0x7c>)
    ed2c:	4c0f      	ldr	r4, [pc, #60]	; (ed6c <Radio_LBTScanTimeout+0x80>)
    ed2e:	47a0      	blx	r4
    ed30:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    ed32:	2380      	movs	r3, #128	; 0x80
    ed34:	4a0e      	ldr	r2, [pc, #56]	; (ed70 <Radio_LBTScanTimeout+0x84>)
    ed36:	009b      	lsls	r3, r3, #2
    ed38:	8810      	ldrh	r0, [r2, #0]
    ed3a:	4303      	orrs	r3, r0
    ed3c:	8013      	strh	r3, [r2, #0]
    ed3e:	6c63      	ldr	r3, [r4, #68]	; 0x44
    ed40:	0058      	lsls	r0, r3, #1
    ed42:	1e4b      	subs	r3, r1, #1
    ed44:	4359      	muls	r1, r3
    ed46:	4b0b      	ldr	r3, [pc, #44]	; (ed74 <Radio_LBTScanTimeout+0x88>)
    ed48:	b289      	uxth	r1, r1
    ed4a:	4798      	blx	r3
    ed4c:	0023      	movs	r3, r4
    ed4e:	334c      	adds	r3, #76	; 0x4c
    ed50:	8018      	strh	r0, [r3, #0]
    ed52:	2300      	movs	r3, #0
    ed54:	2001      	movs	r0, #1
    ed56:	702b      	strb	r3, [r5, #0]
    ed58:	6463      	str	r3, [r4, #68]	; 0x44
    ed5a:	4b07      	ldr	r3, [pc, #28]	; (ed78 <Radio_LBTScanTimeout+0x8c>)
    ed5c:	4798      	blx	r3
    ed5e:	e7e7      	b.n	ed30 <Radio_LBTScanTimeout+0x44>
    ed60:	20000654 	.word	0x20000654
    ed64:	000014fd 	.word	0x000014fd
    ed68:	0000eced 	.word	0x0000eced
    ed6c:	000018f1 	.word	0x000018f1
    ed70:	20001268 	.word	0x20001268
    ed74:	0000f021 	.word	0x0000f021
    ed78:	0000de15 	.word	0x0000de15

0000ed7c <RADIO_ScanHandler>:
    ed7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ed7e:	4b1e      	ldr	r3, [pc, #120]	; (edf8 <RADIO_ScanHandler+0x7c>)
    ed80:	4798      	blx	r3
    ed82:	2000      	movs	r0, #0
    ed84:	4b1d      	ldr	r3, [pc, #116]	; (edfc <RADIO_ScanHandler+0x80>)
    ed86:	4798      	blx	r3
    ed88:	4b1d      	ldr	r3, [pc, #116]	; (ee00 <RADIO_ScanHandler+0x84>)
    ed8a:	2004      	movs	r0, #4
    ed8c:	4798      	blx	r3
    ed8e:	4d1d      	ldr	r5, [pc, #116]	; (ee04 <RADIO_ScanHandler+0x88>)
    ed90:	2600      	movs	r6, #0
    ed92:	002b      	movs	r3, r5
    ed94:	334c      	adds	r3, #76	; 0x4c
    ed96:	801e      	strh	r6, [r3, #0]
    ed98:	002b      	movs	r3, r5
    ed9a:	3334      	adds	r3, #52	; 0x34
    ed9c:	781c      	ldrb	r4, [r3, #0]
    ed9e:	2c01      	cmp	r4, #1
    eda0:	d11e      	bne.n	ede0 <RADIO_ScanHandler+0x64>
    eda2:	0022      	movs	r2, r4
    eda4:	0021      	movs	r1, r4
    eda6:	0030      	movs	r0, r6
    eda8:	4f17      	ldr	r7, [pc, #92]	; (ee08 <RADIO_ScanHandler+0x8c>)
    edaa:	47b8      	blx	r7
    edac:	4b17      	ldr	r3, [pc, #92]	; (ee0c <RADIO_ScanHandler+0x90>)
    edae:	2011      	movs	r0, #17
    edb0:	4798      	blx	r3
    edb2:	002b      	movs	r3, r5
    edb4:	334e      	adds	r3, #78	; 0x4e
    edb6:	7018      	strb	r0, [r3, #0]
    edb8:	21ff      	movs	r1, #255	; 0xff
    edba:	2011      	movs	r0, #17
    edbc:	4b14      	ldr	r3, [pc, #80]	; (ee10 <RADIO_ScanHandler+0x94>)
    edbe:	4798      	blx	r3
    edc0:	0032      	movs	r2, r6
    edc2:	0021      	movs	r1, r4
    edc4:	2005      	movs	r0, #5
    edc6:	47b8      	blx	r7
    edc8:	2400      	movs	r4, #0
    edca:	21fa      	movs	r1, #250	; 0xfa
    edcc:	3550      	adds	r5, #80	; 0x50
    edce:	7828      	ldrb	r0, [r5, #0]
    edd0:	4b10      	ldr	r3, [pc, #64]	; (ee14 <RADIO_ScanHandler+0x98>)
    edd2:	4d11      	ldr	r5, [pc, #68]	; (ee18 <RADIO_ScanHandler+0x9c>)
    edd4:	9400      	str	r4, [sp, #0]
    edd6:	0022      	movs	r2, r4
    edd8:	0089      	lsls	r1, r1, #2
    edda:	47a8      	blx	r5
    eddc:	0020      	movs	r0, r4
    edde:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    ede0:	2c00      	cmp	r4, #0
    ede2:	d1f1      	bne.n	edc8 <RADIO_ScanHandler+0x4c>
    ede4:	0021      	movs	r1, r4
    ede6:	0020      	movs	r0, r4
    ede8:	2201      	movs	r2, #1
    edea:	4e07      	ldr	r6, [pc, #28]	; (ee08 <RADIO_ScanHandler+0x8c>)
    edec:	47b0      	blx	r6
    edee:	0022      	movs	r2, r4
    edf0:	0021      	movs	r1, r4
    edf2:	2005      	movs	r0, #5
    edf4:	47b0      	blx	r6
    edf6:	e7e7      	b.n	edc8 <RADIO_ScanHandler+0x4c>
    edf8:	0000e575 	.word	0x0000e575
    edfc:	0000e0d1 	.word	0x0000e0d1
    ee00:	0000d855 	.word	0x0000d855
    ee04:	20000654 	.word	0x20000654
    ee08:	00001339 	.word	0x00001339
    ee0c:	00007325 	.word	0x00007325
    ee10:	000072fd 	.word	0x000072fd
    ee14:	0000eced 	.word	0x0000eced
    ee18:	000018f1 	.word	0x000018f1

0000ee1c <radioScanDoneHandler>:
    ee1c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    ee1e:	4a22      	ldr	r2, [pc, #136]	; (eea8 <radioScanDoneHandler+0x8c>)
    ee20:	4922      	ldr	r1, [pc, #136]	; (eeac <radioScanDoneHandler+0x90>)
    ee22:	8813      	ldrh	r3, [r2, #0]
    ee24:	4d22      	ldr	r5, [pc, #136]	; (eeb0 <radioScanDoneHandler+0x94>)
    ee26:	400b      	ands	r3, r1
    ee28:	8013      	strh	r3, [r2, #0]
    ee2a:	002b      	movs	r3, r5
    ee2c:	3334      	adds	r3, #52	; 0x34
    ee2e:	781c      	ldrb	r4, [r3, #0]
    ee30:	2c01      	cmp	r4, #1
    ee32:	d122      	bne.n	ee7a <radioScanDoneHandler+0x5e>
    ee34:	21ff      	movs	r1, #255	; 0xff
    ee36:	2012      	movs	r0, #18
    ee38:	4e1e      	ldr	r6, [pc, #120]	; (eeb4 <radioScanDoneHandler+0x98>)
    ee3a:	47b0      	blx	r6
    ee3c:	002b      	movs	r3, r5
    ee3e:	334e      	adds	r3, #78	; 0x4e
    ee40:	7819      	ldrb	r1, [r3, #0]
    ee42:	2011      	movs	r0, #17
    ee44:	47b0      	blx	r6
    ee46:	2200      	movs	r2, #0
    ee48:	0021      	movs	r1, r4
    ee4a:	0010      	movs	r0, r2
    ee4c:	4b1a      	ldr	r3, [pc, #104]	; (eeb8 <radioScanDoneHandler+0x9c>)
    ee4e:	4798      	blx	r3
    ee50:	2000      	movs	r0, #0
    ee52:	4b1a      	ldr	r3, [pc, #104]	; (eebc <radioScanDoneHandler+0xa0>)
    ee54:	4798      	blx	r3
    ee56:	4b1a      	ldr	r3, [pc, #104]	; (eec0 <radioScanDoneHandler+0xa4>)
    ee58:	4798      	blx	r3
    ee5a:	002b      	movs	r3, r5
    ee5c:	334c      	adds	r3, #76	; 0x4c
    ee5e:	2100      	movs	r1, #0
    ee60:	5e59      	ldrsh	r1, [r3, r1]
    ee62:	233e      	movs	r3, #62	; 0x3e
    ee64:	5eea      	ldrsh	r2, [r5, r3]
    ee66:	4b17      	ldr	r3, [pc, #92]	; (eec4 <radioScanDoneHandler+0xa8>)
    ee68:	4291      	cmp	r1, r2
    ee6a:	da0c      	bge.n	ee86 <radioScanDoneHandler+0x6a>
    ee6c:	2002      	movs	r0, #2
    ee6e:	4798      	blx	r3
    ee70:	4b15      	ldr	r3, [pc, #84]	; (eec8 <radioScanDoneHandler+0xac>)
    ee72:	4798      	blx	r3
    ee74:	2000      	movs	r0, #0
    ee76:	b004      	add	sp, #16
    ee78:	bd70      	pop	{r4, r5, r6, pc}
    ee7a:	2c00      	cmp	r4, #0
    ee7c:	d1e8      	bne.n	ee50 <radioScanDoneHandler+0x34>
    ee7e:	0022      	movs	r2, r4
    ee80:	0021      	movs	r1, r4
    ee82:	0020      	movs	r0, r4
    ee84:	e7e2      	b.n	ee4c <radioScanDoneHandler+0x30>
    ee86:	2207      	movs	r2, #7
    ee88:	ac01      	add	r4, sp, #4
    ee8a:	2001      	movs	r0, #1
    ee8c:	7022      	strb	r2, [r4, #0]
    ee8e:	4798      	blx	r3
    ee90:	4b0e      	ldr	r3, [pc, #56]	; (eecc <radioScanDoneHandler+0xb0>)
    ee92:	781b      	ldrb	r3, [r3, #0]
    ee94:	079b      	lsls	r3, r3, #30
    ee96:	d5ed      	bpl.n	ee74 <radioScanDoneHandler+0x58>
    ee98:	692b      	ldr	r3, [r5, #16]
    ee9a:	2b00      	cmp	r3, #0
    ee9c:	d0ea      	beq.n	ee74 <radioScanDoneHandler+0x58>
    ee9e:	0021      	movs	r1, r4
    eea0:	2002      	movs	r0, #2
    eea2:	4798      	blx	r3
    eea4:	e7e6      	b.n	ee74 <radioScanDoneHandler+0x58>
    eea6:	46c0      	nop			; (mov r8, r8)
    eea8:	20001268 	.word	0x20001268
    eeac:	fffffdff 	.word	0xfffffdff
    eeb0:	20000654 	.word	0x20000654
    eeb4:	000072fd 	.word	0x000072fd
    eeb8:	00001339 	.word	0x00001339
    eebc:	0000e1f9 	.word	0x0000e1f9
    eec0:	0000e6b9 	.word	0x0000e6b9
    eec4:	0000dec1 	.word	0x0000dec1
    eec8:	0000e5a9 	.word	0x0000e5a9
    eecc:	2000126a 	.word	0x2000126a

0000eed0 <__gnu_thumb1_case_sqi>:
    eed0:	b402      	push	{r1}
    eed2:	4671      	mov	r1, lr
    eed4:	0849      	lsrs	r1, r1, #1
    eed6:	0049      	lsls	r1, r1, #1
    eed8:	5609      	ldrsb	r1, [r1, r0]
    eeda:	0049      	lsls	r1, r1, #1
    eedc:	448e      	add	lr, r1
    eede:	bc02      	pop	{r1}
    eee0:	4770      	bx	lr
    eee2:	46c0      	nop			; (mov r8, r8)

0000eee4 <__gnu_thumb1_case_uqi>:
    eee4:	b402      	push	{r1}
    eee6:	4671      	mov	r1, lr
    eee8:	0849      	lsrs	r1, r1, #1
    eeea:	0049      	lsls	r1, r1, #1
    eeec:	5c09      	ldrb	r1, [r1, r0]
    eeee:	0049      	lsls	r1, r1, #1
    eef0:	448e      	add	lr, r1
    eef2:	bc02      	pop	{r1}
    eef4:	4770      	bx	lr
    eef6:	46c0      	nop			; (mov r8, r8)

0000eef8 <__gnu_thumb1_case_uhi>:
    eef8:	b403      	push	{r0, r1}
    eefa:	4671      	mov	r1, lr
    eefc:	0849      	lsrs	r1, r1, #1
    eefe:	0040      	lsls	r0, r0, #1
    ef00:	0049      	lsls	r1, r1, #1
    ef02:	5a09      	ldrh	r1, [r1, r0]
    ef04:	0049      	lsls	r1, r1, #1
    ef06:	448e      	add	lr, r1
    ef08:	bc03      	pop	{r0, r1}
    ef0a:	4770      	bx	lr

0000ef0c <__udivsi3>:
    ef0c:	2200      	movs	r2, #0
    ef0e:	0843      	lsrs	r3, r0, #1
    ef10:	428b      	cmp	r3, r1
    ef12:	d374      	bcc.n	effe <__udivsi3+0xf2>
    ef14:	0903      	lsrs	r3, r0, #4
    ef16:	428b      	cmp	r3, r1
    ef18:	d35f      	bcc.n	efda <__udivsi3+0xce>
    ef1a:	0a03      	lsrs	r3, r0, #8
    ef1c:	428b      	cmp	r3, r1
    ef1e:	d344      	bcc.n	efaa <__udivsi3+0x9e>
    ef20:	0b03      	lsrs	r3, r0, #12
    ef22:	428b      	cmp	r3, r1
    ef24:	d328      	bcc.n	ef78 <__udivsi3+0x6c>
    ef26:	0c03      	lsrs	r3, r0, #16
    ef28:	428b      	cmp	r3, r1
    ef2a:	d30d      	bcc.n	ef48 <__udivsi3+0x3c>
    ef2c:	22ff      	movs	r2, #255	; 0xff
    ef2e:	0209      	lsls	r1, r1, #8
    ef30:	ba12      	rev	r2, r2
    ef32:	0c03      	lsrs	r3, r0, #16
    ef34:	428b      	cmp	r3, r1
    ef36:	d302      	bcc.n	ef3e <__udivsi3+0x32>
    ef38:	1212      	asrs	r2, r2, #8
    ef3a:	0209      	lsls	r1, r1, #8
    ef3c:	d065      	beq.n	f00a <__udivsi3+0xfe>
    ef3e:	0b03      	lsrs	r3, r0, #12
    ef40:	428b      	cmp	r3, r1
    ef42:	d319      	bcc.n	ef78 <__udivsi3+0x6c>
    ef44:	e000      	b.n	ef48 <__udivsi3+0x3c>
    ef46:	0a09      	lsrs	r1, r1, #8
    ef48:	0bc3      	lsrs	r3, r0, #15
    ef4a:	428b      	cmp	r3, r1
    ef4c:	d301      	bcc.n	ef52 <__udivsi3+0x46>
    ef4e:	03cb      	lsls	r3, r1, #15
    ef50:	1ac0      	subs	r0, r0, r3
    ef52:	4152      	adcs	r2, r2
    ef54:	0b83      	lsrs	r3, r0, #14
    ef56:	428b      	cmp	r3, r1
    ef58:	d301      	bcc.n	ef5e <__udivsi3+0x52>
    ef5a:	038b      	lsls	r3, r1, #14
    ef5c:	1ac0      	subs	r0, r0, r3
    ef5e:	4152      	adcs	r2, r2
    ef60:	0b43      	lsrs	r3, r0, #13
    ef62:	428b      	cmp	r3, r1
    ef64:	d301      	bcc.n	ef6a <__udivsi3+0x5e>
    ef66:	034b      	lsls	r3, r1, #13
    ef68:	1ac0      	subs	r0, r0, r3
    ef6a:	4152      	adcs	r2, r2
    ef6c:	0b03      	lsrs	r3, r0, #12
    ef6e:	428b      	cmp	r3, r1
    ef70:	d301      	bcc.n	ef76 <__udivsi3+0x6a>
    ef72:	030b      	lsls	r3, r1, #12
    ef74:	1ac0      	subs	r0, r0, r3
    ef76:	4152      	adcs	r2, r2
    ef78:	0ac3      	lsrs	r3, r0, #11
    ef7a:	428b      	cmp	r3, r1
    ef7c:	d301      	bcc.n	ef82 <__udivsi3+0x76>
    ef7e:	02cb      	lsls	r3, r1, #11
    ef80:	1ac0      	subs	r0, r0, r3
    ef82:	4152      	adcs	r2, r2
    ef84:	0a83      	lsrs	r3, r0, #10
    ef86:	428b      	cmp	r3, r1
    ef88:	d301      	bcc.n	ef8e <__udivsi3+0x82>
    ef8a:	028b      	lsls	r3, r1, #10
    ef8c:	1ac0      	subs	r0, r0, r3
    ef8e:	4152      	adcs	r2, r2
    ef90:	0a43      	lsrs	r3, r0, #9
    ef92:	428b      	cmp	r3, r1
    ef94:	d301      	bcc.n	ef9a <__udivsi3+0x8e>
    ef96:	024b      	lsls	r3, r1, #9
    ef98:	1ac0      	subs	r0, r0, r3
    ef9a:	4152      	adcs	r2, r2
    ef9c:	0a03      	lsrs	r3, r0, #8
    ef9e:	428b      	cmp	r3, r1
    efa0:	d301      	bcc.n	efa6 <__udivsi3+0x9a>
    efa2:	020b      	lsls	r3, r1, #8
    efa4:	1ac0      	subs	r0, r0, r3
    efa6:	4152      	adcs	r2, r2
    efa8:	d2cd      	bcs.n	ef46 <__udivsi3+0x3a>
    efaa:	09c3      	lsrs	r3, r0, #7
    efac:	428b      	cmp	r3, r1
    efae:	d301      	bcc.n	efb4 <__udivsi3+0xa8>
    efb0:	01cb      	lsls	r3, r1, #7
    efb2:	1ac0      	subs	r0, r0, r3
    efb4:	4152      	adcs	r2, r2
    efb6:	0983      	lsrs	r3, r0, #6
    efb8:	428b      	cmp	r3, r1
    efba:	d301      	bcc.n	efc0 <__udivsi3+0xb4>
    efbc:	018b      	lsls	r3, r1, #6
    efbe:	1ac0      	subs	r0, r0, r3
    efc0:	4152      	adcs	r2, r2
    efc2:	0943      	lsrs	r3, r0, #5
    efc4:	428b      	cmp	r3, r1
    efc6:	d301      	bcc.n	efcc <__udivsi3+0xc0>
    efc8:	014b      	lsls	r3, r1, #5
    efca:	1ac0      	subs	r0, r0, r3
    efcc:	4152      	adcs	r2, r2
    efce:	0903      	lsrs	r3, r0, #4
    efd0:	428b      	cmp	r3, r1
    efd2:	d301      	bcc.n	efd8 <__udivsi3+0xcc>
    efd4:	010b      	lsls	r3, r1, #4
    efd6:	1ac0      	subs	r0, r0, r3
    efd8:	4152      	adcs	r2, r2
    efda:	08c3      	lsrs	r3, r0, #3
    efdc:	428b      	cmp	r3, r1
    efde:	d301      	bcc.n	efe4 <__udivsi3+0xd8>
    efe0:	00cb      	lsls	r3, r1, #3
    efe2:	1ac0      	subs	r0, r0, r3
    efe4:	4152      	adcs	r2, r2
    efe6:	0883      	lsrs	r3, r0, #2
    efe8:	428b      	cmp	r3, r1
    efea:	d301      	bcc.n	eff0 <__udivsi3+0xe4>
    efec:	008b      	lsls	r3, r1, #2
    efee:	1ac0      	subs	r0, r0, r3
    eff0:	4152      	adcs	r2, r2
    eff2:	0843      	lsrs	r3, r0, #1
    eff4:	428b      	cmp	r3, r1
    eff6:	d301      	bcc.n	effc <__udivsi3+0xf0>
    eff8:	004b      	lsls	r3, r1, #1
    effa:	1ac0      	subs	r0, r0, r3
    effc:	4152      	adcs	r2, r2
    effe:	1a41      	subs	r1, r0, r1
    f000:	d200      	bcs.n	f004 <__udivsi3+0xf8>
    f002:	4601      	mov	r1, r0
    f004:	4152      	adcs	r2, r2
    f006:	4610      	mov	r0, r2
    f008:	4770      	bx	lr
    f00a:	e7ff      	b.n	f00c <__udivsi3+0x100>
    f00c:	b501      	push	{r0, lr}
    f00e:	2000      	movs	r0, #0
    f010:	f000 f8f0 	bl	f1f4 <__aeabi_idiv0>
    f014:	bd02      	pop	{r1, pc}
    f016:	46c0      	nop			; (mov r8, r8)

0000f018 <__aeabi_uidivmod>:
    f018:	2900      	cmp	r1, #0
    f01a:	d0f7      	beq.n	f00c <__udivsi3+0x100>
    f01c:	e776      	b.n	ef0c <__udivsi3>
    f01e:	4770      	bx	lr

0000f020 <__divsi3>:
    f020:	4603      	mov	r3, r0
    f022:	430b      	orrs	r3, r1
    f024:	d47f      	bmi.n	f126 <__divsi3+0x106>
    f026:	2200      	movs	r2, #0
    f028:	0843      	lsrs	r3, r0, #1
    f02a:	428b      	cmp	r3, r1
    f02c:	d374      	bcc.n	f118 <__divsi3+0xf8>
    f02e:	0903      	lsrs	r3, r0, #4
    f030:	428b      	cmp	r3, r1
    f032:	d35f      	bcc.n	f0f4 <__divsi3+0xd4>
    f034:	0a03      	lsrs	r3, r0, #8
    f036:	428b      	cmp	r3, r1
    f038:	d344      	bcc.n	f0c4 <__divsi3+0xa4>
    f03a:	0b03      	lsrs	r3, r0, #12
    f03c:	428b      	cmp	r3, r1
    f03e:	d328      	bcc.n	f092 <__divsi3+0x72>
    f040:	0c03      	lsrs	r3, r0, #16
    f042:	428b      	cmp	r3, r1
    f044:	d30d      	bcc.n	f062 <__divsi3+0x42>
    f046:	22ff      	movs	r2, #255	; 0xff
    f048:	0209      	lsls	r1, r1, #8
    f04a:	ba12      	rev	r2, r2
    f04c:	0c03      	lsrs	r3, r0, #16
    f04e:	428b      	cmp	r3, r1
    f050:	d302      	bcc.n	f058 <__divsi3+0x38>
    f052:	1212      	asrs	r2, r2, #8
    f054:	0209      	lsls	r1, r1, #8
    f056:	d065      	beq.n	f124 <__divsi3+0x104>
    f058:	0b03      	lsrs	r3, r0, #12
    f05a:	428b      	cmp	r3, r1
    f05c:	d319      	bcc.n	f092 <__divsi3+0x72>
    f05e:	e000      	b.n	f062 <__divsi3+0x42>
    f060:	0a09      	lsrs	r1, r1, #8
    f062:	0bc3      	lsrs	r3, r0, #15
    f064:	428b      	cmp	r3, r1
    f066:	d301      	bcc.n	f06c <__divsi3+0x4c>
    f068:	03cb      	lsls	r3, r1, #15
    f06a:	1ac0      	subs	r0, r0, r3
    f06c:	4152      	adcs	r2, r2
    f06e:	0b83      	lsrs	r3, r0, #14
    f070:	428b      	cmp	r3, r1
    f072:	d301      	bcc.n	f078 <__divsi3+0x58>
    f074:	038b      	lsls	r3, r1, #14
    f076:	1ac0      	subs	r0, r0, r3
    f078:	4152      	adcs	r2, r2
    f07a:	0b43      	lsrs	r3, r0, #13
    f07c:	428b      	cmp	r3, r1
    f07e:	d301      	bcc.n	f084 <__divsi3+0x64>
    f080:	034b      	lsls	r3, r1, #13
    f082:	1ac0      	subs	r0, r0, r3
    f084:	4152      	adcs	r2, r2
    f086:	0b03      	lsrs	r3, r0, #12
    f088:	428b      	cmp	r3, r1
    f08a:	d301      	bcc.n	f090 <__divsi3+0x70>
    f08c:	030b      	lsls	r3, r1, #12
    f08e:	1ac0      	subs	r0, r0, r3
    f090:	4152      	adcs	r2, r2
    f092:	0ac3      	lsrs	r3, r0, #11
    f094:	428b      	cmp	r3, r1
    f096:	d301      	bcc.n	f09c <__divsi3+0x7c>
    f098:	02cb      	lsls	r3, r1, #11
    f09a:	1ac0      	subs	r0, r0, r3
    f09c:	4152      	adcs	r2, r2
    f09e:	0a83      	lsrs	r3, r0, #10
    f0a0:	428b      	cmp	r3, r1
    f0a2:	d301      	bcc.n	f0a8 <__divsi3+0x88>
    f0a4:	028b      	lsls	r3, r1, #10
    f0a6:	1ac0      	subs	r0, r0, r3
    f0a8:	4152      	adcs	r2, r2
    f0aa:	0a43      	lsrs	r3, r0, #9
    f0ac:	428b      	cmp	r3, r1
    f0ae:	d301      	bcc.n	f0b4 <__divsi3+0x94>
    f0b0:	024b      	lsls	r3, r1, #9
    f0b2:	1ac0      	subs	r0, r0, r3
    f0b4:	4152      	adcs	r2, r2
    f0b6:	0a03      	lsrs	r3, r0, #8
    f0b8:	428b      	cmp	r3, r1
    f0ba:	d301      	bcc.n	f0c0 <__divsi3+0xa0>
    f0bc:	020b      	lsls	r3, r1, #8
    f0be:	1ac0      	subs	r0, r0, r3
    f0c0:	4152      	adcs	r2, r2
    f0c2:	d2cd      	bcs.n	f060 <__divsi3+0x40>
    f0c4:	09c3      	lsrs	r3, r0, #7
    f0c6:	428b      	cmp	r3, r1
    f0c8:	d301      	bcc.n	f0ce <__divsi3+0xae>
    f0ca:	01cb      	lsls	r3, r1, #7
    f0cc:	1ac0      	subs	r0, r0, r3
    f0ce:	4152      	adcs	r2, r2
    f0d0:	0983      	lsrs	r3, r0, #6
    f0d2:	428b      	cmp	r3, r1
    f0d4:	d301      	bcc.n	f0da <__divsi3+0xba>
    f0d6:	018b      	lsls	r3, r1, #6
    f0d8:	1ac0      	subs	r0, r0, r3
    f0da:	4152      	adcs	r2, r2
    f0dc:	0943      	lsrs	r3, r0, #5
    f0de:	428b      	cmp	r3, r1
    f0e0:	d301      	bcc.n	f0e6 <__divsi3+0xc6>
    f0e2:	014b      	lsls	r3, r1, #5
    f0e4:	1ac0      	subs	r0, r0, r3
    f0e6:	4152      	adcs	r2, r2
    f0e8:	0903      	lsrs	r3, r0, #4
    f0ea:	428b      	cmp	r3, r1
    f0ec:	d301      	bcc.n	f0f2 <__divsi3+0xd2>
    f0ee:	010b      	lsls	r3, r1, #4
    f0f0:	1ac0      	subs	r0, r0, r3
    f0f2:	4152      	adcs	r2, r2
    f0f4:	08c3      	lsrs	r3, r0, #3
    f0f6:	428b      	cmp	r3, r1
    f0f8:	d301      	bcc.n	f0fe <__divsi3+0xde>
    f0fa:	00cb      	lsls	r3, r1, #3
    f0fc:	1ac0      	subs	r0, r0, r3
    f0fe:	4152      	adcs	r2, r2
    f100:	0883      	lsrs	r3, r0, #2
    f102:	428b      	cmp	r3, r1
    f104:	d301      	bcc.n	f10a <__divsi3+0xea>
    f106:	008b      	lsls	r3, r1, #2
    f108:	1ac0      	subs	r0, r0, r3
    f10a:	4152      	adcs	r2, r2
    f10c:	0843      	lsrs	r3, r0, #1
    f10e:	428b      	cmp	r3, r1
    f110:	d301      	bcc.n	f116 <__divsi3+0xf6>
    f112:	004b      	lsls	r3, r1, #1
    f114:	1ac0      	subs	r0, r0, r3
    f116:	4152      	adcs	r2, r2
    f118:	1a41      	subs	r1, r0, r1
    f11a:	d200      	bcs.n	f11e <__divsi3+0xfe>
    f11c:	4601      	mov	r1, r0
    f11e:	4152      	adcs	r2, r2
    f120:	4610      	mov	r0, r2
    f122:	4770      	bx	lr
    f124:	e05d      	b.n	f1e2 <__divsi3+0x1c2>
    f126:	0fca      	lsrs	r2, r1, #31
    f128:	d000      	beq.n	f12c <__divsi3+0x10c>
    f12a:	4249      	negs	r1, r1
    f12c:	1003      	asrs	r3, r0, #32
    f12e:	d300      	bcc.n	f132 <__divsi3+0x112>
    f130:	4240      	negs	r0, r0
    f132:	4053      	eors	r3, r2
    f134:	2200      	movs	r2, #0
    f136:	469c      	mov	ip, r3
    f138:	0903      	lsrs	r3, r0, #4
    f13a:	428b      	cmp	r3, r1
    f13c:	d32d      	bcc.n	f19a <__divsi3+0x17a>
    f13e:	0a03      	lsrs	r3, r0, #8
    f140:	428b      	cmp	r3, r1
    f142:	d312      	bcc.n	f16a <__divsi3+0x14a>
    f144:	22fc      	movs	r2, #252	; 0xfc
    f146:	0189      	lsls	r1, r1, #6
    f148:	ba12      	rev	r2, r2
    f14a:	0a03      	lsrs	r3, r0, #8
    f14c:	428b      	cmp	r3, r1
    f14e:	d30c      	bcc.n	f16a <__divsi3+0x14a>
    f150:	0189      	lsls	r1, r1, #6
    f152:	1192      	asrs	r2, r2, #6
    f154:	428b      	cmp	r3, r1
    f156:	d308      	bcc.n	f16a <__divsi3+0x14a>
    f158:	0189      	lsls	r1, r1, #6
    f15a:	1192      	asrs	r2, r2, #6
    f15c:	428b      	cmp	r3, r1
    f15e:	d304      	bcc.n	f16a <__divsi3+0x14a>
    f160:	0189      	lsls	r1, r1, #6
    f162:	d03a      	beq.n	f1da <__divsi3+0x1ba>
    f164:	1192      	asrs	r2, r2, #6
    f166:	e000      	b.n	f16a <__divsi3+0x14a>
    f168:	0989      	lsrs	r1, r1, #6
    f16a:	09c3      	lsrs	r3, r0, #7
    f16c:	428b      	cmp	r3, r1
    f16e:	d301      	bcc.n	f174 <__divsi3+0x154>
    f170:	01cb      	lsls	r3, r1, #7
    f172:	1ac0      	subs	r0, r0, r3
    f174:	4152      	adcs	r2, r2
    f176:	0983      	lsrs	r3, r0, #6
    f178:	428b      	cmp	r3, r1
    f17a:	d301      	bcc.n	f180 <__divsi3+0x160>
    f17c:	018b      	lsls	r3, r1, #6
    f17e:	1ac0      	subs	r0, r0, r3
    f180:	4152      	adcs	r2, r2
    f182:	0943      	lsrs	r3, r0, #5
    f184:	428b      	cmp	r3, r1
    f186:	d301      	bcc.n	f18c <__divsi3+0x16c>
    f188:	014b      	lsls	r3, r1, #5
    f18a:	1ac0      	subs	r0, r0, r3
    f18c:	4152      	adcs	r2, r2
    f18e:	0903      	lsrs	r3, r0, #4
    f190:	428b      	cmp	r3, r1
    f192:	d301      	bcc.n	f198 <__divsi3+0x178>
    f194:	010b      	lsls	r3, r1, #4
    f196:	1ac0      	subs	r0, r0, r3
    f198:	4152      	adcs	r2, r2
    f19a:	08c3      	lsrs	r3, r0, #3
    f19c:	428b      	cmp	r3, r1
    f19e:	d301      	bcc.n	f1a4 <__divsi3+0x184>
    f1a0:	00cb      	lsls	r3, r1, #3
    f1a2:	1ac0      	subs	r0, r0, r3
    f1a4:	4152      	adcs	r2, r2
    f1a6:	0883      	lsrs	r3, r0, #2
    f1a8:	428b      	cmp	r3, r1
    f1aa:	d301      	bcc.n	f1b0 <__divsi3+0x190>
    f1ac:	008b      	lsls	r3, r1, #2
    f1ae:	1ac0      	subs	r0, r0, r3
    f1b0:	4152      	adcs	r2, r2
    f1b2:	d2d9      	bcs.n	f168 <__divsi3+0x148>
    f1b4:	0843      	lsrs	r3, r0, #1
    f1b6:	428b      	cmp	r3, r1
    f1b8:	d301      	bcc.n	f1be <__divsi3+0x19e>
    f1ba:	004b      	lsls	r3, r1, #1
    f1bc:	1ac0      	subs	r0, r0, r3
    f1be:	4152      	adcs	r2, r2
    f1c0:	1a41      	subs	r1, r0, r1
    f1c2:	d200      	bcs.n	f1c6 <__divsi3+0x1a6>
    f1c4:	4601      	mov	r1, r0
    f1c6:	4663      	mov	r3, ip
    f1c8:	4152      	adcs	r2, r2
    f1ca:	105b      	asrs	r3, r3, #1
    f1cc:	4610      	mov	r0, r2
    f1ce:	d301      	bcc.n	f1d4 <__divsi3+0x1b4>
    f1d0:	4240      	negs	r0, r0
    f1d2:	2b00      	cmp	r3, #0
    f1d4:	d500      	bpl.n	f1d8 <__divsi3+0x1b8>
    f1d6:	4249      	negs	r1, r1
    f1d8:	4770      	bx	lr
    f1da:	4663      	mov	r3, ip
    f1dc:	105b      	asrs	r3, r3, #1
    f1de:	d300      	bcc.n	f1e2 <__divsi3+0x1c2>
    f1e0:	4240      	negs	r0, r0
    f1e2:	b501      	push	{r0, lr}
    f1e4:	2000      	movs	r0, #0
    f1e6:	f000 f805 	bl	f1f4 <__aeabi_idiv0>
    f1ea:	bd02      	pop	{r1, pc}

0000f1ec <__aeabi_idivmod>:
    f1ec:	2900      	cmp	r1, #0
    f1ee:	d0f8      	beq.n	f1e2 <__divsi3+0x1c2>
    f1f0:	e716      	b.n	f020 <__divsi3>
    f1f2:	4770      	bx	lr

0000f1f4 <__aeabi_idiv0>:
    f1f4:	4770      	bx	lr
    f1f6:	46c0      	nop			; (mov r8, r8)

0000f1f8 <__aeabi_cfrcmple>:
    f1f8:	4684      	mov	ip, r0
    f1fa:	1c08      	adds	r0, r1, #0
    f1fc:	4661      	mov	r1, ip
    f1fe:	e7ff      	b.n	f200 <__aeabi_cfcmpeq>

0000f200 <__aeabi_cfcmpeq>:
    f200:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    f202:	f000 fcb5 	bl	fb70 <__lesf2>
    f206:	2800      	cmp	r0, #0
    f208:	d401      	bmi.n	f20e <__aeabi_cfcmpeq+0xe>
    f20a:	2100      	movs	r1, #0
    f20c:	42c8      	cmn	r0, r1
    f20e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0000f210 <__aeabi_fcmpeq>:
    f210:	b510      	push	{r4, lr}
    f212:	f000 fc47 	bl	faa4 <__eqsf2>
    f216:	4240      	negs	r0, r0
    f218:	3001      	adds	r0, #1
    f21a:	bd10      	pop	{r4, pc}

0000f21c <__aeabi_fcmplt>:
    f21c:	b510      	push	{r4, lr}
    f21e:	f000 fca7 	bl	fb70 <__lesf2>
    f222:	2800      	cmp	r0, #0
    f224:	db01      	blt.n	f22a <__aeabi_fcmplt+0xe>
    f226:	2000      	movs	r0, #0
    f228:	bd10      	pop	{r4, pc}
    f22a:	2001      	movs	r0, #1
    f22c:	bd10      	pop	{r4, pc}
    f22e:	46c0      	nop			; (mov r8, r8)

0000f230 <__aeabi_fcmple>:
    f230:	b510      	push	{r4, lr}
    f232:	f000 fc9d 	bl	fb70 <__lesf2>
    f236:	2800      	cmp	r0, #0
    f238:	dd01      	ble.n	f23e <__aeabi_fcmple+0xe>
    f23a:	2000      	movs	r0, #0
    f23c:	bd10      	pop	{r4, pc}
    f23e:	2001      	movs	r0, #1
    f240:	bd10      	pop	{r4, pc}
    f242:	46c0      	nop			; (mov r8, r8)

0000f244 <__aeabi_fcmpgt>:
    f244:	b510      	push	{r4, lr}
    f246:	f000 fc53 	bl	faf0 <__gesf2>
    f24a:	2800      	cmp	r0, #0
    f24c:	dc01      	bgt.n	f252 <__aeabi_fcmpgt+0xe>
    f24e:	2000      	movs	r0, #0
    f250:	bd10      	pop	{r4, pc}
    f252:	2001      	movs	r0, #1
    f254:	bd10      	pop	{r4, pc}
    f256:	46c0      	nop			; (mov r8, r8)

0000f258 <__aeabi_fcmpge>:
    f258:	b510      	push	{r4, lr}
    f25a:	f000 fc49 	bl	faf0 <__gesf2>
    f25e:	2800      	cmp	r0, #0
    f260:	da01      	bge.n	f266 <__aeabi_fcmpge+0xe>
    f262:	2000      	movs	r0, #0
    f264:	bd10      	pop	{r4, pc}
    f266:	2001      	movs	r0, #1
    f268:	bd10      	pop	{r4, pc}
    f26a:	46c0      	nop			; (mov r8, r8)

0000f26c <__aeabi_uldivmod>:
    f26c:	2b00      	cmp	r3, #0
    f26e:	d111      	bne.n	f294 <__aeabi_uldivmod+0x28>
    f270:	2a00      	cmp	r2, #0
    f272:	d10f      	bne.n	f294 <__aeabi_uldivmod+0x28>
    f274:	2900      	cmp	r1, #0
    f276:	d100      	bne.n	f27a <__aeabi_uldivmod+0xe>
    f278:	2800      	cmp	r0, #0
    f27a:	d002      	beq.n	f282 <__aeabi_uldivmod+0x16>
    f27c:	2100      	movs	r1, #0
    f27e:	43c9      	mvns	r1, r1
    f280:	1c08      	adds	r0, r1, #0
    f282:	b407      	push	{r0, r1, r2}
    f284:	4802      	ldr	r0, [pc, #8]	; (f290 <__aeabi_uldivmod+0x24>)
    f286:	a102      	add	r1, pc, #8	; (adr r1, f290 <__aeabi_uldivmod+0x24>)
    f288:	1840      	adds	r0, r0, r1
    f28a:	9002      	str	r0, [sp, #8]
    f28c:	bd03      	pop	{r0, r1, pc}
    f28e:	46c0      	nop			; (mov r8, r8)
    f290:	ffffff65 	.word	0xffffff65
    f294:	b403      	push	{r0, r1}
    f296:	4668      	mov	r0, sp
    f298:	b501      	push	{r0, lr}
    f29a:	9802      	ldr	r0, [sp, #8]
    f29c:	f000 f868 	bl	f370 <__udivmoddi4>
    f2a0:	9b01      	ldr	r3, [sp, #4]
    f2a2:	469e      	mov	lr, r3
    f2a4:	b002      	add	sp, #8
    f2a6:	bc0c      	pop	{r2, r3}
    f2a8:	4770      	bx	lr
    f2aa:	46c0      	nop			; (mov r8, r8)

0000f2ac <__aeabi_lmul>:
    f2ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    f2ae:	46ce      	mov	lr, r9
    f2b0:	4647      	mov	r7, r8
    f2b2:	0415      	lsls	r5, r2, #16
    f2b4:	0c2d      	lsrs	r5, r5, #16
    f2b6:	002e      	movs	r6, r5
    f2b8:	b580      	push	{r7, lr}
    f2ba:	0407      	lsls	r7, r0, #16
    f2bc:	0c14      	lsrs	r4, r2, #16
    f2be:	0c3f      	lsrs	r7, r7, #16
    f2c0:	4699      	mov	r9, r3
    f2c2:	0c03      	lsrs	r3, r0, #16
    f2c4:	437e      	muls	r6, r7
    f2c6:	435d      	muls	r5, r3
    f2c8:	4367      	muls	r7, r4
    f2ca:	4363      	muls	r3, r4
    f2cc:	197f      	adds	r7, r7, r5
    f2ce:	0c34      	lsrs	r4, r6, #16
    f2d0:	19e4      	adds	r4, r4, r7
    f2d2:	469c      	mov	ip, r3
    f2d4:	42a5      	cmp	r5, r4
    f2d6:	d903      	bls.n	f2e0 <__aeabi_lmul+0x34>
    f2d8:	2380      	movs	r3, #128	; 0x80
    f2da:	025b      	lsls	r3, r3, #9
    f2dc:	4698      	mov	r8, r3
    f2de:	44c4      	add	ip, r8
    f2e0:	464b      	mov	r3, r9
    f2e2:	4351      	muls	r1, r2
    f2e4:	4343      	muls	r3, r0
    f2e6:	0436      	lsls	r6, r6, #16
    f2e8:	0c36      	lsrs	r6, r6, #16
    f2ea:	0c25      	lsrs	r5, r4, #16
    f2ec:	0424      	lsls	r4, r4, #16
    f2ee:	4465      	add	r5, ip
    f2f0:	19a4      	adds	r4, r4, r6
    f2f2:	1859      	adds	r1, r3, r1
    f2f4:	1949      	adds	r1, r1, r5
    f2f6:	0020      	movs	r0, r4
    f2f8:	bc0c      	pop	{r2, r3}
    f2fa:	4690      	mov	r8, r2
    f2fc:	4699      	mov	r9, r3
    f2fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000f300 <__aeabi_f2uiz>:
    f300:	219e      	movs	r1, #158	; 0x9e
    f302:	b510      	push	{r4, lr}
    f304:	05c9      	lsls	r1, r1, #23
    f306:	1c04      	adds	r4, r0, #0
    f308:	f7ff ffa6 	bl	f258 <__aeabi_fcmpge>
    f30c:	2800      	cmp	r0, #0
    f30e:	d103      	bne.n	f318 <__aeabi_f2uiz+0x18>
    f310:	1c20      	adds	r0, r4, #0
    f312:	f000 ff2b 	bl	1016c <__aeabi_f2iz>
    f316:	bd10      	pop	{r4, pc}
    f318:	219e      	movs	r1, #158	; 0x9e
    f31a:	1c20      	adds	r0, r4, #0
    f31c:	05c9      	lsls	r1, r1, #23
    f31e:	f000 fd89 	bl	fe34 <__aeabi_fsub>
    f322:	f000 ff23 	bl	1016c <__aeabi_f2iz>
    f326:	2380      	movs	r3, #128	; 0x80
    f328:	061b      	lsls	r3, r3, #24
    f32a:	469c      	mov	ip, r3
    f32c:	4460      	add	r0, ip
    f32e:	e7f2      	b.n	f316 <__aeabi_f2uiz+0x16>

0000f330 <__aeabi_f2ulz>:
    f330:	b570      	push	{r4, r5, r6, lr}
    f332:	f001 fd9f 	bl	10e74 <__aeabi_f2d>
    f336:	2200      	movs	r2, #0
    f338:	4b0b      	ldr	r3, [pc, #44]	; (f368 <__aeabi_f2ulz+0x38>)
    f33a:	000d      	movs	r5, r1
    f33c:	0004      	movs	r4, r0
    f33e:	f000 ffcb 	bl	102d8 <__aeabi_dmul>
    f342:	f001 fe13 	bl	10f6c <__aeabi_d2uiz>
    f346:	0006      	movs	r6, r0
    f348:	f001 fd5c 	bl	10e04 <__aeabi_ui2d>
    f34c:	2200      	movs	r2, #0
    f34e:	4b07      	ldr	r3, [pc, #28]	; (f36c <__aeabi_f2ulz+0x3c>)
    f350:	f000 ffc2 	bl	102d8 <__aeabi_dmul>
    f354:	0002      	movs	r2, r0
    f356:	000b      	movs	r3, r1
    f358:	0020      	movs	r0, r4
    f35a:	0029      	movs	r1, r5
    f35c:	f001 fa3c 	bl	107d8 <__aeabi_dsub>
    f360:	f001 fe04 	bl	10f6c <__aeabi_d2uiz>
    f364:	0031      	movs	r1, r6
    f366:	bd70      	pop	{r4, r5, r6, pc}
    f368:	3df00000 	.word	0x3df00000
    f36c:	41f00000 	.word	0x41f00000

0000f370 <__udivmoddi4>:
    f370:	b5f0      	push	{r4, r5, r6, r7, lr}
    f372:	4657      	mov	r7, sl
    f374:	464e      	mov	r6, r9
    f376:	4645      	mov	r5, r8
    f378:	46de      	mov	lr, fp
    f37a:	b5e0      	push	{r5, r6, r7, lr}
    f37c:	0004      	movs	r4, r0
    f37e:	b083      	sub	sp, #12
    f380:	000d      	movs	r5, r1
    f382:	4692      	mov	sl, r2
    f384:	4699      	mov	r9, r3
    f386:	428b      	cmp	r3, r1
    f388:	d82f      	bhi.n	f3ea <__udivmoddi4+0x7a>
    f38a:	d02c      	beq.n	f3e6 <__udivmoddi4+0x76>
    f38c:	4649      	mov	r1, r9
    f38e:	4650      	mov	r0, sl
    f390:	f001 fde0 	bl	10f54 <__clzdi2>
    f394:	0029      	movs	r1, r5
    f396:	0006      	movs	r6, r0
    f398:	0020      	movs	r0, r4
    f39a:	f001 fddb 	bl	10f54 <__clzdi2>
    f39e:	1a33      	subs	r3, r6, r0
    f3a0:	4698      	mov	r8, r3
    f3a2:	3b20      	subs	r3, #32
    f3a4:	469b      	mov	fp, r3
    f3a6:	d500      	bpl.n	f3aa <__udivmoddi4+0x3a>
    f3a8:	e074      	b.n	f494 <__udivmoddi4+0x124>
    f3aa:	4653      	mov	r3, sl
    f3ac:	465a      	mov	r2, fp
    f3ae:	4093      	lsls	r3, r2
    f3b0:	001f      	movs	r7, r3
    f3b2:	4653      	mov	r3, sl
    f3b4:	4642      	mov	r2, r8
    f3b6:	4093      	lsls	r3, r2
    f3b8:	001e      	movs	r6, r3
    f3ba:	42af      	cmp	r7, r5
    f3bc:	d829      	bhi.n	f412 <__udivmoddi4+0xa2>
    f3be:	d026      	beq.n	f40e <__udivmoddi4+0x9e>
    f3c0:	465b      	mov	r3, fp
    f3c2:	1ba4      	subs	r4, r4, r6
    f3c4:	41bd      	sbcs	r5, r7
    f3c6:	2b00      	cmp	r3, #0
    f3c8:	da00      	bge.n	f3cc <__udivmoddi4+0x5c>
    f3ca:	e079      	b.n	f4c0 <__udivmoddi4+0x150>
    f3cc:	2200      	movs	r2, #0
    f3ce:	2300      	movs	r3, #0
    f3d0:	9200      	str	r2, [sp, #0]
    f3d2:	9301      	str	r3, [sp, #4]
    f3d4:	2301      	movs	r3, #1
    f3d6:	465a      	mov	r2, fp
    f3d8:	4093      	lsls	r3, r2
    f3da:	9301      	str	r3, [sp, #4]
    f3dc:	2301      	movs	r3, #1
    f3de:	4642      	mov	r2, r8
    f3e0:	4093      	lsls	r3, r2
    f3e2:	9300      	str	r3, [sp, #0]
    f3e4:	e019      	b.n	f41a <__udivmoddi4+0xaa>
    f3e6:	4282      	cmp	r2, r0
    f3e8:	d9d0      	bls.n	f38c <__udivmoddi4+0x1c>
    f3ea:	2200      	movs	r2, #0
    f3ec:	2300      	movs	r3, #0
    f3ee:	9200      	str	r2, [sp, #0]
    f3f0:	9301      	str	r3, [sp, #4]
    f3f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f3f4:	2b00      	cmp	r3, #0
    f3f6:	d001      	beq.n	f3fc <__udivmoddi4+0x8c>
    f3f8:	601c      	str	r4, [r3, #0]
    f3fa:	605d      	str	r5, [r3, #4]
    f3fc:	9800      	ldr	r0, [sp, #0]
    f3fe:	9901      	ldr	r1, [sp, #4]
    f400:	b003      	add	sp, #12
    f402:	bc3c      	pop	{r2, r3, r4, r5}
    f404:	4690      	mov	r8, r2
    f406:	4699      	mov	r9, r3
    f408:	46a2      	mov	sl, r4
    f40a:	46ab      	mov	fp, r5
    f40c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f40e:	42a3      	cmp	r3, r4
    f410:	d9d6      	bls.n	f3c0 <__udivmoddi4+0x50>
    f412:	2200      	movs	r2, #0
    f414:	2300      	movs	r3, #0
    f416:	9200      	str	r2, [sp, #0]
    f418:	9301      	str	r3, [sp, #4]
    f41a:	4643      	mov	r3, r8
    f41c:	2b00      	cmp	r3, #0
    f41e:	d0e8      	beq.n	f3f2 <__udivmoddi4+0x82>
    f420:	07fb      	lsls	r3, r7, #31
    f422:	0872      	lsrs	r2, r6, #1
    f424:	431a      	orrs	r2, r3
    f426:	4646      	mov	r6, r8
    f428:	087b      	lsrs	r3, r7, #1
    f42a:	e00e      	b.n	f44a <__udivmoddi4+0xda>
    f42c:	42ab      	cmp	r3, r5
    f42e:	d101      	bne.n	f434 <__udivmoddi4+0xc4>
    f430:	42a2      	cmp	r2, r4
    f432:	d80c      	bhi.n	f44e <__udivmoddi4+0xde>
    f434:	1aa4      	subs	r4, r4, r2
    f436:	419d      	sbcs	r5, r3
    f438:	2001      	movs	r0, #1
    f43a:	1924      	adds	r4, r4, r4
    f43c:	416d      	adcs	r5, r5
    f43e:	2100      	movs	r1, #0
    f440:	3e01      	subs	r6, #1
    f442:	1824      	adds	r4, r4, r0
    f444:	414d      	adcs	r5, r1
    f446:	2e00      	cmp	r6, #0
    f448:	d006      	beq.n	f458 <__udivmoddi4+0xe8>
    f44a:	42ab      	cmp	r3, r5
    f44c:	d9ee      	bls.n	f42c <__udivmoddi4+0xbc>
    f44e:	3e01      	subs	r6, #1
    f450:	1924      	adds	r4, r4, r4
    f452:	416d      	adcs	r5, r5
    f454:	2e00      	cmp	r6, #0
    f456:	d1f8      	bne.n	f44a <__udivmoddi4+0xda>
    f458:	465b      	mov	r3, fp
    f45a:	9800      	ldr	r0, [sp, #0]
    f45c:	9901      	ldr	r1, [sp, #4]
    f45e:	1900      	adds	r0, r0, r4
    f460:	4169      	adcs	r1, r5
    f462:	2b00      	cmp	r3, #0
    f464:	db22      	blt.n	f4ac <__udivmoddi4+0x13c>
    f466:	002b      	movs	r3, r5
    f468:	465a      	mov	r2, fp
    f46a:	40d3      	lsrs	r3, r2
    f46c:	002a      	movs	r2, r5
    f46e:	4644      	mov	r4, r8
    f470:	40e2      	lsrs	r2, r4
    f472:	001c      	movs	r4, r3
    f474:	465b      	mov	r3, fp
    f476:	0015      	movs	r5, r2
    f478:	2b00      	cmp	r3, #0
    f47a:	db2c      	blt.n	f4d6 <__udivmoddi4+0x166>
    f47c:	0026      	movs	r6, r4
    f47e:	409e      	lsls	r6, r3
    f480:	0033      	movs	r3, r6
    f482:	0026      	movs	r6, r4
    f484:	4647      	mov	r7, r8
    f486:	40be      	lsls	r6, r7
    f488:	0032      	movs	r2, r6
    f48a:	1a80      	subs	r0, r0, r2
    f48c:	4199      	sbcs	r1, r3
    f48e:	9000      	str	r0, [sp, #0]
    f490:	9101      	str	r1, [sp, #4]
    f492:	e7ae      	b.n	f3f2 <__udivmoddi4+0x82>
    f494:	4642      	mov	r2, r8
    f496:	2320      	movs	r3, #32
    f498:	1a9b      	subs	r3, r3, r2
    f49a:	4652      	mov	r2, sl
    f49c:	40da      	lsrs	r2, r3
    f49e:	4641      	mov	r1, r8
    f4a0:	0013      	movs	r3, r2
    f4a2:	464a      	mov	r2, r9
    f4a4:	408a      	lsls	r2, r1
    f4a6:	0017      	movs	r7, r2
    f4a8:	431f      	orrs	r7, r3
    f4aa:	e782      	b.n	f3b2 <__udivmoddi4+0x42>
    f4ac:	4642      	mov	r2, r8
    f4ae:	2320      	movs	r3, #32
    f4b0:	1a9b      	subs	r3, r3, r2
    f4b2:	002a      	movs	r2, r5
    f4b4:	4646      	mov	r6, r8
    f4b6:	409a      	lsls	r2, r3
    f4b8:	0023      	movs	r3, r4
    f4ba:	40f3      	lsrs	r3, r6
    f4bc:	4313      	orrs	r3, r2
    f4be:	e7d5      	b.n	f46c <__udivmoddi4+0xfc>
    f4c0:	4642      	mov	r2, r8
    f4c2:	2320      	movs	r3, #32
    f4c4:	2100      	movs	r1, #0
    f4c6:	1a9b      	subs	r3, r3, r2
    f4c8:	2200      	movs	r2, #0
    f4ca:	9100      	str	r1, [sp, #0]
    f4cc:	9201      	str	r2, [sp, #4]
    f4ce:	2201      	movs	r2, #1
    f4d0:	40da      	lsrs	r2, r3
    f4d2:	9201      	str	r2, [sp, #4]
    f4d4:	e782      	b.n	f3dc <__udivmoddi4+0x6c>
    f4d6:	4642      	mov	r2, r8
    f4d8:	2320      	movs	r3, #32
    f4da:	0026      	movs	r6, r4
    f4dc:	1a9b      	subs	r3, r3, r2
    f4de:	40de      	lsrs	r6, r3
    f4e0:	002f      	movs	r7, r5
    f4e2:	46b4      	mov	ip, r6
    f4e4:	4097      	lsls	r7, r2
    f4e6:	4666      	mov	r6, ip
    f4e8:	003b      	movs	r3, r7
    f4ea:	4333      	orrs	r3, r6
    f4ec:	e7c9      	b.n	f482 <__udivmoddi4+0x112>
    f4ee:	46c0      	nop			; (mov r8, r8)

0000f4f0 <__aeabi_fadd>:
    f4f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    f4f2:	46c6      	mov	lr, r8
    f4f4:	024e      	lsls	r6, r1, #9
    f4f6:	0247      	lsls	r7, r0, #9
    f4f8:	0a76      	lsrs	r6, r6, #9
    f4fa:	0a7b      	lsrs	r3, r7, #9
    f4fc:	0044      	lsls	r4, r0, #1
    f4fe:	0fc5      	lsrs	r5, r0, #31
    f500:	00f7      	lsls	r7, r6, #3
    f502:	0048      	lsls	r0, r1, #1
    f504:	4698      	mov	r8, r3
    f506:	b500      	push	{lr}
    f508:	0e24      	lsrs	r4, r4, #24
    f50a:	002a      	movs	r2, r5
    f50c:	00db      	lsls	r3, r3, #3
    f50e:	0e00      	lsrs	r0, r0, #24
    f510:	0fc9      	lsrs	r1, r1, #31
    f512:	46bc      	mov	ip, r7
    f514:	428d      	cmp	r5, r1
    f516:	d067      	beq.n	f5e8 <__aeabi_fadd+0xf8>
    f518:	1a22      	subs	r2, r4, r0
    f51a:	2a00      	cmp	r2, #0
    f51c:	dc00      	bgt.n	f520 <__aeabi_fadd+0x30>
    f51e:	e0a5      	b.n	f66c <__aeabi_fadd+0x17c>
    f520:	2800      	cmp	r0, #0
    f522:	d13a      	bne.n	f59a <__aeabi_fadd+0xaa>
    f524:	2f00      	cmp	r7, #0
    f526:	d100      	bne.n	f52a <__aeabi_fadd+0x3a>
    f528:	e093      	b.n	f652 <__aeabi_fadd+0x162>
    f52a:	1e51      	subs	r1, r2, #1
    f52c:	2900      	cmp	r1, #0
    f52e:	d000      	beq.n	f532 <__aeabi_fadd+0x42>
    f530:	e0bc      	b.n	f6ac <__aeabi_fadd+0x1bc>
    f532:	2401      	movs	r4, #1
    f534:	1bdb      	subs	r3, r3, r7
    f536:	015a      	lsls	r2, r3, #5
    f538:	d546      	bpl.n	f5c8 <__aeabi_fadd+0xd8>
    f53a:	019b      	lsls	r3, r3, #6
    f53c:	099e      	lsrs	r6, r3, #6
    f53e:	0030      	movs	r0, r6
    f540:	f001 fcea 	bl	10f18 <__clzsi2>
    f544:	3805      	subs	r0, #5
    f546:	4086      	lsls	r6, r0
    f548:	4284      	cmp	r4, r0
    f54a:	dd00      	ble.n	f54e <__aeabi_fadd+0x5e>
    f54c:	e09d      	b.n	f68a <__aeabi_fadd+0x19a>
    f54e:	1b04      	subs	r4, r0, r4
    f550:	0032      	movs	r2, r6
    f552:	2020      	movs	r0, #32
    f554:	3401      	adds	r4, #1
    f556:	40e2      	lsrs	r2, r4
    f558:	1b04      	subs	r4, r0, r4
    f55a:	40a6      	lsls	r6, r4
    f55c:	0033      	movs	r3, r6
    f55e:	1e5e      	subs	r6, r3, #1
    f560:	41b3      	sbcs	r3, r6
    f562:	2400      	movs	r4, #0
    f564:	4313      	orrs	r3, r2
    f566:	075a      	lsls	r2, r3, #29
    f568:	d004      	beq.n	f574 <__aeabi_fadd+0x84>
    f56a:	220f      	movs	r2, #15
    f56c:	401a      	ands	r2, r3
    f56e:	2a04      	cmp	r2, #4
    f570:	d000      	beq.n	f574 <__aeabi_fadd+0x84>
    f572:	3304      	adds	r3, #4
    f574:	015a      	lsls	r2, r3, #5
    f576:	d529      	bpl.n	f5cc <__aeabi_fadd+0xdc>
    f578:	3401      	adds	r4, #1
    f57a:	2cff      	cmp	r4, #255	; 0xff
    f57c:	d100      	bne.n	f580 <__aeabi_fadd+0x90>
    f57e:	e081      	b.n	f684 <__aeabi_fadd+0x194>
    f580:	002a      	movs	r2, r5
    f582:	019b      	lsls	r3, r3, #6
    f584:	0a5b      	lsrs	r3, r3, #9
    f586:	b2e4      	uxtb	r4, r4
    f588:	025b      	lsls	r3, r3, #9
    f58a:	05e4      	lsls	r4, r4, #23
    f58c:	0a58      	lsrs	r0, r3, #9
    f58e:	07d2      	lsls	r2, r2, #31
    f590:	4320      	orrs	r0, r4
    f592:	4310      	orrs	r0, r2
    f594:	bc04      	pop	{r2}
    f596:	4690      	mov	r8, r2
    f598:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f59a:	2cff      	cmp	r4, #255	; 0xff
    f59c:	d0e3      	beq.n	f566 <__aeabi_fadd+0x76>
    f59e:	2180      	movs	r1, #128	; 0x80
    f5a0:	0038      	movs	r0, r7
    f5a2:	04c9      	lsls	r1, r1, #19
    f5a4:	4308      	orrs	r0, r1
    f5a6:	4684      	mov	ip, r0
    f5a8:	2a1b      	cmp	r2, #27
    f5aa:	dd00      	ble.n	f5ae <__aeabi_fadd+0xbe>
    f5ac:	e082      	b.n	f6b4 <__aeabi_fadd+0x1c4>
    f5ae:	2020      	movs	r0, #32
    f5b0:	4661      	mov	r1, ip
    f5b2:	40d1      	lsrs	r1, r2
    f5b4:	1a82      	subs	r2, r0, r2
    f5b6:	4660      	mov	r0, ip
    f5b8:	4090      	lsls	r0, r2
    f5ba:	0002      	movs	r2, r0
    f5bc:	1e50      	subs	r0, r2, #1
    f5be:	4182      	sbcs	r2, r0
    f5c0:	430a      	orrs	r2, r1
    f5c2:	1a9b      	subs	r3, r3, r2
    f5c4:	015a      	lsls	r2, r3, #5
    f5c6:	d4b8      	bmi.n	f53a <__aeabi_fadd+0x4a>
    f5c8:	075a      	lsls	r2, r3, #29
    f5ca:	d1ce      	bne.n	f56a <__aeabi_fadd+0x7a>
    f5cc:	08de      	lsrs	r6, r3, #3
    f5ce:	002a      	movs	r2, r5
    f5d0:	2cff      	cmp	r4, #255	; 0xff
    f5d2:	d13a      	bne.n	f64a <__aeabi_fadd+0x15a>
    f5d4:	2e00      	cmp	r6, #0
    f5d6:	d100      	bne.n	f5da <__aeabi_fadd+0xea>
    f5d8:	e0ae      	b.n	f738 <__aeabi_fadd+0x248>
    f5da:	2380      	movs	r3, #128	; 0x80
    f5dc:	03db      	lsls	r3, r3, #15
    f5de:	4333      	orrs	r3, r6
    f5e0:	025b      	lsls	r3, r3, #9
    f5e2:	0a5b      	lsrs	r3, r3, #9
    f5e4:	24ff      	movs	r4, #255	; 0xff
    f5e6:	e7cf      	b.n	f588 <__aeabi_fadd+0x98>
    f5e8:	1a21      	subs	r1, r4, r0
    f5ea:	2900      	cmp	r1, #0
    f5ec:	dd52      	ble.n	f694 <__aeabi_fadd+0x1a4>
    f5ee:	2800      	cmp	r0, #0
    f5f0:	d031      	beq.n	f656 <__aeabi_fadd+0x166>
    f5f2:	2cff      	cmp	r4, #255	; 0xff
    f5f4:	d0b7      	beq.n	f566 <__aeabi_fadd+0x76>
    f5f6:	2080      	movs	r0, #128	; 0x80
    f5f8:	003e      	movs	r6, r7
    f5fa:	04c0      	lsls	r0, r0, #19
    f5fc:	4306      	orrs	r6, r0
    f5fe:	46b4      	mov	ip, r6
    f600:	291b      	cmp	r1, #27
    f602:	dd00      	ble.n	f606 <__aeabi_fadd+0x116>
    f604:	e0aa      	b.n	f75c <__aeabi_fadd+0x26c>
    f606:	2620      	movs	r6, #32
    f608:	4660      	mov	r0, ip
    f60a:	40c8      	lsrs	r0, r1
    f60c:	1a71      	subs	r1, r6, r1
    f60e:	4666      	mov	r6, ip
    f610:	408e      	lsls	r6, r1
    f612:	0031      	movs	r1, r6
    f614:	1e4e      	subs	r6, r1, #1
    f616:	41b1      	sbcs	r1, r6
    f618:	4301      	orrs	r1, r0
    f61a:	185b      	adds	r3, r3, r1
    f61c:	0159      	lsls	r1, r3, #5
    f61e:	d5d3      	bpl.n	f5c8 <__aeabi_fadd+0xd8>
    f620:	3401      	adds	r4, #1
    f622:	2cff      	cmp	r4, #255	; 0xff
    f624:	d100      	bne.n	f628 <__aeabi_fadd+0x138>
    f626:	e087      	b.n	f738 <__aeabi_fadd+0x248>
    f628:	2201      	movs	r2, #1
    f62a:	4978      	ldr	r1, [pc, #480]	; (f80c <__aeabi_fadd+0x31c>)
    f62c:	401a      	ands	r2, r3
    f62e:	085b      	lsrs	r3, r3, #1
    f630:	400b      	ands	r3, r1
    f632:	4313      	orrs	r3, r2
    f634:	e797      	b.n	f566 <__aeabi_fadd+0x76>
    f636:	2c00      	cmp	r4, #0
    f638:	d000      	beq.n	f63c <__aeabi_fadd+0x14c>
    f63a:	e0a7      	b.n	f78c <__aeabi_fadd+0x29c>
    f63c:	2b00      	cmp	r3, #0
    f63e:	d000      	beq.n	f642 <__aeabi_fadd+0x152>
    f640:	e0b6      	b.n	f7b0 <__aeabi_fadd+0x2c0>
    f642:	1e3b      	subs	r3, r7, #0
    f644:	d162      	bne.n	f70c <__aeabi_fadd+0x21c>
    f646:	2600      	movs	r6, #0
    f648:	2200      	movs	r2, #0
    f64a:	0273      	lsls	r3, r6, #9
    f64c:	0a5b      	lsrs	r3, r3, #9
    f64e:	b2e4      	uxtb	r4, r4
    f650:	e79a      	b.n	f588 <__aeabi_fadd+0x98>
    f652:	0014      	movs	r4, r2
    f654:	e787      	b.n	f566 <__aeabi_fadd+0x76>
    f656:	2f00      	cmp	r7, #0
    f658:	d04d      	beq.n	f6f6 <__aeabi_fadd+0x206>
    f65a:	1e48      	subs	r0, r1, #1
    f65c:	2800      	cmp	r0, #0
    f65e:	d157      	bne.n	f710 <__aeabi_fadd+0x220>
    f660:	4463      	add	r3, ip
    f662:	2401      	movs	r4, #1
    f664:	015a      	lsls	r2, r3, #5
    f666:	d5af      	bpl.n	f5c8 <__aeabi_fadd+0xd8>
    f668:	2402      	movs	r4, #2
    f66a:	e7dd      	b.n	f628 <__aeabi_fadd+0x138>
    f66c:	2a00      	cmp	r2, #0
    f66e:	d124      	bne.n	f6ba <__aeabi_fadd+0x1ca>
    f670:	1c62      	adds	r2, r4, #1
    f672:	b2d2      	uxtb	r2, r2
    f674:	2a01      	cmp	r2, #1
    f676:	ddde      	ble.n	f636 <__aeabi_fadd+0x146>
    f678:	1bde      	subs	r6, r3, r7
    f67a:	0172      	lsls	r2, r6, #5
    f67c:	d535      	bpl.n	f6ea <__aeabi_fadd+0x1fa>
    f67e:	1afe      	subs	r6, r7, r3
    f680:	000d      	movs	r5, r1
    f682:	e75c      	b.n	f53e <__aeabi_fadd+0x4e>
    f684:	002a      	movs	r2, r5
    f686:	2300      	movs	r3, #0
    f688:	e77e      	b.n	f588 <__aeabi_fadd+0x98>
    f68a:	0033      	movs	r3, r6
    f68c:	4a60      	ldr	r2, [pc, #384]	; (f810 <__aeabi_fadd+0x320>)
    f68e:	1a24      	subs	r4, r4, r0
    f690:	4013      	ands	r3, r2
    f692:	e768      	b.n	f566 <__aeabi_fadd+0x76>
    f694:	2900      	cmp	r1, #0
    f696:	d163      	bne.n	f760 <__aeabi_fadd+0x270>
    f698:	1c61      	adds	r1, r4, #1
    f69a:	b2c8      	uxtb	r0, r1
    f69c:	2801      	cmp	r0, #1
    f69e:	dd4e      	ble.n	f73e <__aeabi_fadd+0x24e>
    f6a0:	29ff      	cmp	r1, #255	; 0xff
    f6a2:	d049      	beq.n	f738 <__aeabi_fadd+0x248>
    f6a4:	4463      	add	r3, ip
    f6a6:	085b      	lsrs	r3, r3, #1
    f6a8:	000c      	movs	r4, r1
    f6aa:	e75c      	b.n	f566 <__aeabi_fadd+0x76>
    f6ac:	2aff      	cmp	r2, #255	; 0xff
    f6ae:	d041      	beq.n	f734 <__aeabi_fadd+0x244>
    f6b0:	000a      	movs	r2, r1
    f6b2:	e779      	b.n	f5a8 <__aeabi_fadd+0xb8>
    f6b4:	2201      	movs	r2, #1
    f6b6:	1a9b      	subs	r3, r3, r2
    f6b8:	e784      	b.n	f5c4 <__aeabi_fadd+0xd4>
    f6ba:	2c00      	cmp	r4, #0
    f6bc:	d01d      	beq.n	f6fa <__aeabi_fadd+0x20a>
    f6be:	28ff      	cmp	r0, #255	; 0xff
    f6c0:	d022      	beq.n	f708 <__aeabi_fadd+0x218>
    f6c2:	2480      	movs	r4, #128	; 0x80
    f6c4:	04e4      	lsls	r4, r4, #19
    f6c6:	4252      	negs	r2, r2
    f6c8:	4323      	orrs	r3, r4
    f6ca:	2a1b      	cmp	r2, #27
    f6cc:	dd00      	ble.n	f6d0 <__aeabi_fadd+0x1e0>
    f6ce:	e08a      	b.n	f7e6 <__aeabi_fadd+0x2f6>
    f6d0:	001c      	movs	r4, r3
    f6d2:	2520      	movs	r5, #32
    f6d4:	40d4      	lsrs	r4, r2
    f6d6:	1aaa      	subs	r2, r5, r2
    f6d8:	4093      	lsls	r3, r2
    f6da:	1e5a      	subs	r2, r3, #1
    f6dc:	4193      	sbcs	r3, r2
    f6de:	4323      	orrs	r3, r4
    f6e0:	4662      	mov	r2, ip
    f6e2:	0004      	movs	r4, r0
    f6e4:	1ad3      	subs	r3, r2, r3
    f6e6:	000d      	movs	r5, r1
    f6e8:	e725      	b.n	f536 <__aeabi_fadd+0x46>
    f6ea:	2e00      	cmp	r6, #0
    f6ec:	d000      	beq.n	f6f0 <__aeabi_fadd+0x200>
    f6ee:	e726      	b.n	f53e <__aeabi_fadd+0x4e>
    f6f0:	2200      	movs	r2, #0
    f6f2:	2400      	movs	r4, #0
    f6f4:	e7a9      	b.n	f64a <__aeabi_fadd+0x15a>
    f6f6:	000c      	movs	r4, r1
    f6f8:	e735      	b.n	f566 <__aeabi_fadd+0x76>
    f6fa:	2b00      	cmp	r3, #0
    f6fc:	d04d      	beq.n	f79a <__aeabi_fadd+0x2aa>
    f6fe:	43d2      	mvns	r2, r2
    f700:	2a00      	cmp	r2, #0
    f702:	d0ed      	beq.n	f6e0 <__aeabi_fadd+0x1f0>
    f704:	28ff      	cmp	r0, #255	; 0xff
    f706:	d1e0      	bne.n	f6ca <__aeabi_fadd+0x1da>
    f708:	4663      	mov	r3, ip
    f70a:	24ff      	movs	r4, #255	; 0xff
    f70c:	000d      	movs	r5, r1
    f70e:	e72a      	b.n	f566 <__aeabi_fadd+0x76>
    f710:	29ff      	cmp	r1, #255	; 0xff
    f712:	d00f      	beq.n	f734 <__aeabi_fadd+0x244>
    f714:	0001      	movs	r1, r0
    f716:	e773      	b.n	f600 <__aeabi_fadd+0x110>
    f718:	2b00      	cmp	r3, #0
    f71a:	d061      	beq.n	f7e0 <__aeabi_fadd+0x2f0>
    f71c:	24ff      	movs	r4, #255	; 0xff
    f71e:	2f00      	cmp	r7, #0
    f720:	d100      	bne.n	f724 <__aeabi_fadd+0x234>
    f722:	e720      	b.n	f566 <__aeabi_fadd+0x76>
    f724:	2280      	movs	r2, #128	; 0x80
    f726:	4641      	mov	r1, r8
    f728:	03d2      	lsls	r2, r2, #15
    f72a:	4211      	tst	r1, r2
    f72c:	d002      	beq.n	f734 <__aeabi_fadd+0x244>
    f72e:	4216      	tst	r6, r2
    f730:	d100      	bne.n	f734 <__aeabi_fadd+0x244>
    f732:	003b      	movs	r3, r7
    f734:	24ff      	movs	r4, #255	; 0xff
    f736:	e716      	b.n	f566 <__aeabi_fadd+0x76>
    f738:	24ff      	movs	r4, #255	; 0xff
    f73a:	2300      	movs	r3, #0
    f73c:	e724      	b.n	f588 <__aeabi_fadd+0x98>
    f73e:	2c00      	cmp	r4, #0
    f740:	d1ea      	bne.n	f718 <__aeabi_fadd+0x228>
    f742:	2b00      	cmp	r3, #0
    f744:	d058      	beq.n	f7f8 <__aeabi_fadd+0x308>
    f746:	2f00      	cmp	r7, #0
    f748:	d100      	bne.n	f74c <__aeabi_fadd+0x25c>
    f74a:	e70c      	b.n	f566 <__aeabi_fadd+0x76>
    f74c:	4463      	add	r3, ip
    f74e:	015a      	lsls	r2, r3, #5
    f750:	d400      	bmi.n	f754 <__aeabi_fadd+0x264>
    f752:	e739      	b.n	f5c8 <__aeabi_fadd+0xd8>
    f754:	4a2e      	ldr	r2, [pc, #184]	; (f810 <__aeabi_fadd+0x320>)
    f756:	000c      	movs	r4, r1
    f758:	4013      	ands	r3, r2
    f75a:	e704      	b.n	f566 <__aeabi_fadd+0x76>
    f75c:	2101      	movs	r1, #1
    f75e:	e75c      	b.n	f61a <__aeabi_fadd+0x12a>
    f760:	2c00      	cmp	r4, #0
    f762:	d11e      	bne.n	f7a2 <__aeabi_fadd+0x2b2>
    f764:	2b00      	cmp	r3, #0
    f766:	d040      	beq.n	f7ea <__aeabi_fadd+0x2fa>
    f768:	43c9      	mvns	r1, r1
    f76a:	2900      	cmp	r1, #0
    f76c:	d00b      	beq.n	f786 <__aeabi_fadd+0x296>
    f76e:	28ff      	cmp	r0, #255	; 0xff
    f770:	d036      	beq.n	f7e0 <__aeabi_fadd+0x2f0>
    f772:	291b      	cmp	r1, #27
    f774:	dc47      	bgt.n	f806 <__aeabi_fadd+0x316>
    f776:	001c      	movs	r4, r3
    f778:	2620      	movs	r6, #32
    f77a:	40cc      	lsrs	r4, r1
    f77c:	1a71      	subs	r1, r6, r1
    f77e:	408b      	lsls	r3, r1
    f780:	1e59      	subs	r1, r3, #1
    f782:	418b      	sbcs	r3, r1
    f784:	4323      	orrs	r3, r4
    f786:	4463      	add	r3, ip
    f788:	0004      	movs	r4, r0
    f78a:	e747      	b.n	f61c <__aeabi_fadd+0x12c>
    f78c:	2b00      	cmp	r3, #0
    f78e:	d118      	bne.n	f7c2 <__aeabi_fadd+0x2d2>
    f790:	1e3b      	subs	r3, r7, #0
    f792:	d02d      	beq.n	f7f0 <__aeabi_fadd+0x300>
    f794:	000d      	movs	r5, r1
    f796:	24ff      	movs	r4, #255	; 0xff
    f798:	e6e5      	b.n	f566 <__aeabi_fadd+0x76>
    f79a:	003b      	movs	r3, r7
    f79c:	0004      	movs	r4, r0
    f79e:	000d      	movs	r5, r1
    f7a0:	e6e1      	b.n	f566 <__aeabi_fadd+0x76>
    f7a2:	28ff      	cmp	r0, #255	; 0xff
    f7a4:	d01c      	beq.n	f7e0 <__aeabi_fadd+0x2f0>
    f7a6:	2480      	movs	r4, #128	; 0x80
    f7a8:	04e4      	lsls	r4, r4, #19
    f7aa:	4249      	negs	r1, r1
    f7ac:	4323      	orrs	r3, r4
    f7ae:	e7e0      	b.n	f772 <__aeabi_fadd+0x282>
    f7b0:	2f00      	cmp	r7, #0
    f7b2:	d100      	bne.n	f7b6 <__aeabi_fadd+0x2c6>
    f7b4:	e6d7      	b.n	f566 <__aeabi_fadd+0x76>
    f7b6:	1bde      	subs	r6, r3, r7
    f7b8:	0172      	lsls	r2, r6, #5
    f7ba:	d51f      	bpl.n	f7fc <__aeabi_fadd+0x30c>
    f7bc:	1afb      	subs	r3, r7, r3
    f7be:	000d      	movs	r5, r1
    f7c0:	e6d1      	b.n	f566 <__aeabi_fadd+0x76>
    f7c2:	24ff      	movs	r4, #255	; 0xff
    f7c4:	2f00      	cmp	r7, #0
    f7c6:	d100      	bne.n	f7ca <__aeabi_fadd+0x2da>
    f7c8:	e6cd      	b.n	f566 <__aeabi_fadd+0x76>
    f7ca:	2280      	movs	r2, #128	; 0x80
    f7cc:	4640      	mov	r0, r8
    f7ce:	03d2      	lsls	r2, r2, #15
    f7d0:	4210      	tst	r0, r2
    f7d2:	d0af      	beq.n	f734 <__aeabi_fadd+0x244>
    f7d4:	4216      	tst	r6, r2
    f7d6:	d1ad      	bne.n	f734 <__aeabi_fadd+0x244>
    f7d8:	003b      	movs	r3, r7
    f7da:	000d      	movs	r5, r1
    f7dc:	24ff      	movs	r4, #255	; 0xff
    f7de:	e6c2      	b.n	f566 <__aeabi_fadd+0x76>
    f7e0:	4663      	mov	r3, ip
    f7e2:	24ff      	movs	r4, #255	; 0xff
    f7e4:	e6bf      	b.n	f566 <__aeabi_fadd+0x76>
    f7e6:	2301      	movs	r3, #1
    f7e8:	e77a      	b.n	f6e0 <__aeabi_fadd+0x1f0>
    f7ea:	003b      	movs	r3, r7
    f7ec:	0004      	movs	r4, r0
    f7ee:	e6ba      	b.n	f566 <__aeabi_fadd+0x76>
    f7f0:	2680      	movs	r6, #128	; 0x80
    f7f2:	2200      	movs	r2, #0
    f7f4:	03f6      	lsls	r6, r6, #15
    f7f6:	e6f0      	b.n	f5da <__aeabi_fadd+0xea>
    f7f8:	003b      	movs	r3, r7
    f7fa:	e6b4      	b.n	f566 <__aeabi_fadd+0x76>
    f7fc:	1e33      	subs	r3, r6, #0
    f7fe:	d000      	beq.n	f802 <__aeabi_fadd+0x312>
    f800:	e6e2      	b.n	f5c8 <__aeabi_fadd+0xd8>
    f802:	2200      	movs	r2, #0
    f804:	e721      	b.n	f64a <__aeabi_fadd+0x15a>
    f806:	2301      	movs	r3, #1
    f808:	e7bd      	b.n	f786 <__aeabi_fadd+0x296>
    f80a:	46c0      	nop			; (mov r8, r8)
    f80c:	7dffffff 	.word	0x7dffffff
    f810:	fbffffff 	.word	0xfbffffff

0000f814 <__aeabi_fdiv>:
    f814:	b5f0      	push	{r4, r5, r6, r7, lr}
    f816:	4657      	mov	r7, sl
    f818:	464e      	mov	r6, r9
    f81a:	46de      	mov	lr, fp
    f81c:	4645      	mov	r5, r8
    f81e:	b5e0      	push	{r5, r6, r7, lr}
    f820:	0244      	lsls	r4, r0, #9
    f822:	0043      	lsls	r3, r0, #1
    f824:	0fc6      	lsrs	r6, r0, #31
    f826:	b083      	sub	sp, #12
    f828:	1c0f      	adds	r7, r1, #0
    f82a:	0a64      	lsrs	r4, r4, #9
    f82c:	0e1b      	lsrs	r3, r3, #24
    f82e:	46b2      	mov	sl, r6
    f830:	d053      	beq.n	f8da <__aeabi_fdiv+0xc6>
    f832:	2bff      	cmp	r3, #255	; 0xff
    f834:	d027      	beq.n	f886 <__aeabi_fdiv+0x72>
    f836:	2280      	movs	r2, #128	; 0x80
    f838:	00e4      	lsls	r4, r4, #3
    f83a:	04d2      	lsls	r2, r2, #19
    f83c:	4314      	orrs	r4, r2
    f83e:	227f      	movs	r2, #127	; 0x7f
    f840:	4252      	negs	r2, r2
    f842:	4690      	mov	r8, r2
    f844:	4498      	add	r8, r3
    f846:	2300      	movs	r3, #0
    f848:	4699      	mov	r9, r3
    f84a:	469b      	mov	fp, r3
    f84c:	027d      	lsls	r5, r7, #9
    f84e:	0078      	lsls	r0, r7, #1
    f850:	0ffb      	lsrs	r3, r7, #31
    f852:	0a6d      	lsrs	r5, r5, #9
    f854:	0e00      	lsrs	r0, r0, #24
    f856:	9300      	str	r3, [sp, #0]
    f858:	d024      	beq.n	f8a4 <__aeabi_fdiv+0x90>
    f85a:	28ff      	cmp	r0, #255	; 0xff
    f85c:	d046      	beq.n	f8ec <__aeabi_fdiv+0xd8>
    f85e:	2380      	movs	r3, #128	; 0x80
    f860:	2100      	movs	r1, #0
    f862:	00ed      	lsls	r5, r5, #3
    f864:	04db      	lsls	r3, r3, #19
    f866:	431d      	orrs	r5, r3
    f868:	387f      	subs	r0, #127	; 0x7f
    f86a:	4647      	mov	r7, r8
    f86c:	1a38      	subs	r0, r7, r0
    f86e:	464f      	mov	r7, r9
    f870:	430f      	orrs	r7, r1
    f872:	00bf      	lsls	r7, r7, #2
    f874:	46b9      	mov	r9, r7
    f876:	0033      	movs	r3, r6
    f878:	9a00      	ldr	r2, [sp, #0]
    f87a:	4f87      	ldr	r7, [pc, #540]	; (fa98 <__aeabi_fdiv+0x284>)
    f87c:	4053      	eors	r3, r2
    f87e:	464a      	mov	r2, r9
    f880:	58ba      	ldr	r2, [r7, r2]
    f882:	9301      	str	r3, [sp, #4]
    f884:	4697      	mov	pc, r2
    f886:	2c00      	cmp	r4, #0
    f888:	d14e      	bne.n	f928 <__aeabi_fdiv+0x114>
    f88a:	2308      	movs	r3, #8
    f88c:	4699      	mov	r9, r3
    f88e:	33f7      	adds	r3, #247	; 0xf7
    f890:	4698      	mov	r8, r3
    f892:	3bfd      	subs	r3, #253	; 0xfd
    f894:	469b      	mov	fp, r3
    f896:	027d      	lsls	r5, r7, #9
    f898:	0078      	lsls	r0, r7, #1
    f89a:	0ffb      	lsrs	r3, r7, #31
    f89c:	0a6d      	lsrs	r5, r5, #9
    f89e:	0e00      	lsrs	r0, r0, #24
    f8a0:	9300      	str	r3, [sp, #0]
    f8a2:	d1da      	bne.n	f85a <__aeabi_fdiv+0x46>
    f8a4:	2d00      	cmp	r5, #0
    f8a6:	d126      	bne.n	f8f6 <__aeabi_fdiv+0xe2>
    f8a8:	2000      	movs	r0, #0
    f8aa:	2101      	movs	r1, #1
    f8ac:	0033      	movs	r3, r6
    f8ae:	9a00      	ldr	r2, [sp, #0]
    f8b0:	4f7a      	ldr	r7, [pc, #488]	; (fa9c <__aeabi_fdiv+0x288>)
    f8b2:	4053      	eors	r3, r2
    f8b4:	4642      	mov	r2, r8
    f8b6:	1a10      	subs	r0, r2, r0
    f8b8:	464a      	mov	r2, r9
    f8ba:	430a      	orrs	r2, r1
    f8bc:	0092      	lsls	r2, r2, #2
    f8be:	58ba      	ldr	r2, [r7, r2]
    f8c0:	001d      	movs	r5, r3
    f8c2:	4697      	mov	pc, r2
    f8c4:	9b00      	ldr	r3, [sp, #0]
    f8c6:	002c      	movs	r4, r5
    f8c8:	469a      	mov	sl, r3
    f8ca:	468b      	mov	fp, r1
    f8cc:	465b      	mov	r3, fp
    f8ce:	2b02      	cmp	r3, #2
    f8d0:	d131      	bne.n	f936 <__aeabi_fdiv+0x122>
    f8d2:	4653      	mov	r3, sl
    f8d4:	21ff      	movs	r1, #255	; 0xff
    f8d6:	2400      	movs	r4, #0
    f8d8:	e038      	b.n	f94c <__aeabi_fdiv+0x138>
    f8da:	2c00      	cmp	r4, #0
    f8dc:	d117      	bne.n	f90e <__aeabi_fdiv+0xfa>
    f8de:	2304      	movs	r3, #4
    f8e0:	4699      	mov	r9, r3
    f8e2:	2300      	movs	r3, #0
    f8e4:	4698      	mov	r8, r3
    f8e6:	3301      	adds	r3, #1
    f8e8:	469b      	mov	fp, r3
    f8ea:	e7af      	b.n	f84c <__aeabi_fdiv+0x38>
    f8ec:	20ff      	movs	r0, #255	; 0xff
    f8ee:	2d00      	cmp	r5, #0
    f8f0:	d10b      	bne.n	f90a <__aeabi_fdiv+0xf6>
    f8f2:	2102      	movs	r1, #2
    f8f4:	e7da      	b.n	f8ac <__aeabi_fdiv+0x98>
    f8f6:	0028      	movs	r0, r5
    f8f8:	f001 fb0e 	bl	10f18 <__clzsi2>
    f8fc:	1f43      	subs	r3, r0, #5
    f8fe:	409d      	lsls	r5, r3
    f900:	2376      	movs	r3, #118	; 0x76
    f902:	425b      	negs	r3, r3
    f904:	1a18      	subs	r0, r3, r0
    f906:	2100      	movs	r1, #0
    f908:	e7af      	b.n	f86a <__aeabi_fdiv+0x56>
    f90a:	2103      	movs	r1, #3
    f90c:	e7ad      	b.n	f86a <__aeabi_fdiv+0x56>
    f90e:	0020      	movs	r0, r4
    f910:	f001 fb02 	bl	10f18 <__clzsi2>
    f914:	1f43      	subs	r3, r0, #5
    f916:	409c      	lsls	r4, r3
    f918:	2376      	movs	r3, #118	; 0x76
    f91a:	425b      	negs	r3, r3
    f91c:	1a1b      	subs	r3, r3, r0
    f91e:	4698      	mov	r8, r3
    f920:	2300      	movs	r3, #0
    f922:	4699      	mov	r9, r3
    f924:	469b      	mov	fp, r3
    f926:	e791      	b.n	f84c <__aeabi_fdiv+0x38>
    f928:	230c      	movs	r3, #12
    f92a:	4699      	mov	r9, r3
    f92c:	33f3      	adds	r3, #243	; 0xf3
    f92e:	4698      	mov	r8, r3
    f930:	3bfc      	subs	r3, #252	; 0xfc
    f932:	469b      	mov	fp, r3
    f934:	e78a      	b.n	f84c <__aeabi_fdiv+0x38>
    f936:	2b03      	cmp	r3, #3
    f938:	d100      	bne.n	f93c <__aeabi_fdiv+0x128>
    f93a:	e0a5      	b.n	fa88 <__aeabi_fdiv+0x274>
    f93c:	4655      	mov	r5, sl
    f93e:	2b01      	cmp	r3, #1
    f940:	d000      	beq.n	f944 <__aeabi_fdiv+0x130>
    f942:	e081      	b.n	fa48 <__aeabi_fdiv+0x234>
    f944:	2301      	movs	r3, #1
    f946:	2100      	movs	r1, #0
    f948:	2400      	movs	r4, #0
    f94a:	402b      	ands	r3, r5
    f94c:	0264      	lsls	r4, r4, #9
    f94e:	05c9      	lsls	r1, r1, #23
    f950:	0a60      	lsrs	r0, r4, #9
    f952:	07db      	lsls	r3, r3, #31
    f954:	4308      	orrs	r0, r1
    f956:	4318      	orrs	r0, r3
    f958:	b003      	add	sp, #12
    f95a:	bc3c      	pop	{r2, r3, r4, r5}
    f95c:	4690      	mov	r8, r2
    f95e:	4699      	mov	r9, r3
    f960:	46a2      	mov	sl, r4
    f962:	46ab      	mov	fp, r5
    f964:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f966:	2480      	movs	r4, #128	; 0x80
    f968:	2300      	movs	r3, #0
    f96a:	03e4      	lsls	r4, r4, #15
    f96c:	21ff      	movs	r1, #255	; 0xff
    f96e:	e7ed      	b.n	f94c <__aeabi_fdiv+0x138>
    f970:	21ff      	movs	r1, #255	; 0xff
    f972:	2400      	movs	r4, #0
    f974:	e7ea      	b.n	f94c <__aeabi_fdiv+0x138>
    f976:	2301      	movs	r3, #1
    f978:	1a59      	subs	r1, r3, r1
    f97a:	291b      	cmp	r1, #27
    f97c:	dd66      	ble.n	fa4c <__aeabi_fdiv+0x238>
    f97e:	9a01      	ldr	r2, [sp, #4]
    f980:	4013      	ands	r3, r2
    f982:	2100      	movs	r1, #0
    f984:	2400      	movs	r4, #0
    f986:	e7e1      	b.n	f94c <__aeabi_fdiv+0x138>
    f988:	2380      	movs	r3, #128	; 0x80
    f98a:	03db      	lsls	r3, r3, #15
    f98c:	421c      	tst	r4, r3
    f98e:	d038      	beq.n	fa02 <__aeabi_fdiv+0x1ee>
    f990:	421d      	tst	r5, r3
    f992:	d051      	beq.n	fa38 <__aeabi_fdiv+0x224>
    f994:	431c      	orrs	r4, r3
    f996:	0264      	lsls	r4, r4, #9
    f998:	0a64      	lsrs	r4, r4, #9
    f99a:	0033      	movs	r3, r6
    f99c:	21ff      	movs	r1, #255	; 0xff
    f99e:	e7d5      	b.n	f94c <__aeabi_fdiv+0x138>
    f9a0:	0163      	lsls	r3, r4, #5
    f9a2:	016c      	lsls	r4, r5, #5
    f9a4:	42a3      	cmp	r3, r4
    f9a6:	d23b      	bcs.n	fa20 <__aeabi_fdiv+0x20c>
    f9a8:	261b      	movs	r6, #27
    f9aa:	2100      	movs	r1, #0
    f9ac:	3801      	subs	r0, #1
    f9ae:	2501      	movs	r5, #1
    f9b0:	001f      	movs	r7, r3
    f9b2:	0049      	lsls	r1, r1, #1
    f9b4:	005b      	lsls	r3, r3, #1
    f9b6:	2f00      	cmp	r7, #0
    f9b8:	db01      	blt.n	f9be <__aeabi_fdiv+0x1aa>
    f9ba:	429c      	cmp	r4, r3
    f9bc:	d801      	bhi.n	f9c2 <__aeabi_fdiv+0x1ae>
    f9be:	1b1b      	subs	r3, r3, r4
    f9c0:	4329      	orrs	r1, r5
    f9c2:	3e01      	subs	r6, #1
    f9c4:	2e00      	cmp	r6, #0
    f9c6:	d1f3      	bne.n	f9b0 <__aeabi_fdiv+0x19c>
    f9c8:	001c      	movs	r4, r3
    f9ca:	1e63      	subs	r3, r4, #1
    f9cc:	419c      	sbcs	r4, r3
    f9ce:	430c      	orrs	r4, r1
    f9d0:	0001      	movs	r1, r0
    f9d2:	317f      	adds	r1, #127	; 0x7f
    f9d4:	2900      	cmp	r1, #0
    f9d6:	ddce      	ble.n	f976 <__aeabi_fdiv+0x162>
    f9d8:	0763      	lsls	r3, r4, #29
    f9da:	d004      	beq.n	f9e6 <__aeabi_fdiv+0x1d2>
    f9dc:	230f      	movs	r3, #15
    f9de:	4023      	ands	r3, r4
    f9e0:	2b04      	cmp	r3, #4
    f9e2:	d000      	beq.n	f9e6 <__aeabi_fdiv+0x1d2>
    f9e4:	3404      	adds	r4, #4
    f9e6:	0123      	lsls	r3, r4, #4
    f9e8:	d503      	bpl.n	f9f2 <__aeabi_fdiv+0x1de>
    f9ea:	0001      	movs	r1, r0
    f9ec:	4b2c      	ldr	r3, [pc, #176]	; (faa0 <__aeabi_fdiv+0x28c>)
    f9ee:	3180      	adds	r1, #128	; 0x80
    f9f0:	401c      	ands	r4, r3
    f9f2:	29fe      	cmp	r1, #254	; 0xfe
    f9f4:	dd0d      	ble.n	fa12 <__aeabi_fdiv+0x1fe>
    f9f6:	2301      	movs	r3, #1
    f9f8:	9a01      	ldr	r2, [sp, #4]
    f9fa:	21ff      	movs	r1, #255	; 0xff
    f9fc:	4013      	ands	r3, r2
    f9fe:	2400      	movs	r4, #0
    fa00:	e7a4      	b.n	f94c <__aeabi_fdiv+0x138>
    fa02:	2380      	movs	r3, #128	; 0x80
    fa04:	03db      	lsls	r3, r3, #15
    fa06:	431c      	orrs	r4, r3
    fa08:	0264      	lsls	r4, r4, #9
    fa0a:	0a64      	lsrs	r4, r4, #9
    fa0c:	0033      	movs	r3, r6
    fa0e:	21ff      	movs	r1, #255	; 0xff
    fa10:	e79c      	b.n	f94c <__aeabi_fdiv+0x138>
    fa12:	2301      	movs	r3, #1
    fa14:	9a01      	ldr	r2, [sp, #4]
    fa16:	01a4      	lsls	r4, r4, #6
    fa18:	0a64      	lsrs	r4, r4, #9
    fa1a:	b2c9      	uxtb	r1, r1
    fa1c:	4013      	ands	r3, r2
    fa1e:	e795      	b.n	f94c <__aeabi_fdiv+0x138>
    fa20:	1b1b      	subs	r3, r3, r4
    fa22:	261a      	movs	r6, #26
    fa24:	2101      	movs	r1, #1
    fa26:	e7c2      	b.n	f9ae <__aeabi_fdiv+0x19a>
    fa28:	9b00      	ldr	r3, [sp, #0]
    fa2a:	468b      	mov	fp, r1
    fa2c:	469a      	mov	sl, r3
    fa2e:	2400      	movs	r4, #0
    fa30:	e74c      	b.n	f8cc <__aeabi_fdiv+0xb8>
    fa32:	0263      	lsls	r3, r4, #9
    fa34:	d5e5      	bpl.n	fa02 <__aeabi_fdiv+0x1ee>
    fa36:	2500      	movs	r5, #0
    fa38:	2480      	movs	r4, #128	; 0x80
    fa3a:	03e4      	lsls	r4, r4, #15
    fa3c:	432c      	orrs	r4, r5
    fa3e:	0264      	lsls	r4, r4, #9
    fa40:	0a64      	lsrs	r4, r4, #9
    fa42:	9b00      	ldr	r3, [sp, #0]
    fa44:	21ff      	movs	r1, #255	; 0xff
    fa46:	e781      	b.n	f94c <__aeabi_fdiv+0x138>
    fa48:	9501      	str	r5, [sp, #4]
    fa4a:	e7c1      	b.n	f9d0 <__aeabi_fdiv+0x1bc>
    fa4c:	0023      	movs	r3, r4
    fa4e:	2020      	movs	r0, #32
    fa50:	40cb      	lsrs	r3, r1
    fa52:	1a41      	subs	r1, r0, r1
    fa54:	408c      	lsls	r4, r1
    fa56:	1e61      	subs	r1, r4, #1
    fa58:	418c      	sbcs	r4, r1
    fa5a:	431c      	orrs	r4, r3
    fa5c:	0763      	lsls	r3, r4, #29
    fa5e:	d004      	beq.n	fa6a <__aeabi_fdiv+0x256>
    fa60:	230f      	movs	r3, #15
    fa62:	4023      	ands	r3, r4
    fa64:	2b04      	cmp	r3, #4
    fa66:	d000      	beq.n	fa6a <__aeabi_fdiv+0x256>
    fa68:	3404      	adds	r4, #4
    fa6a:	0163      	lsls	r3, r4, #5
    fa6c:	d505      	bpl.n	fa7a <__aeabi_fdiv+0x266>
    fa6e:	2301      	movs	r3, #1
    fa70:	9a01      	ldr	r2, [sp, #4]
    fa72:	2101      	movs	r1, #1
    fa74:	4013      	ands	r3, r2
    fa76:	2400      	movs	r4, #0
    fa78:	e768      	b.n	f94c <__aeabi_fdiv+0x138>
    fa7a:	2301      	movs	r3, #1
    fa7c:	9a01      	ldr	r2, [sp, #4]
    fa7e:	01a4      	lsls	r4, r4, #6
    fa80:	0a64      	lsrs	r4, r4, #9
    fa82:	4013      	ands	r3, r2
    fa84:	2100      	movs	r1, #0
    fa86:	e761      	b.n	f94c <__aeabi_fdiv+0x138>
    fa88:	2380      	movs	r3, #128	; 0x80
    fa8a:	03db      	lsls	r3, r3, #15
    fa8c:	431c      	orrs	r4, r3
    fa8e:	0264      	lsls	r4, r4, #9
    fa90:	0a64      	lsrs	r4, r4, #9
    fa92:	4653      	mov	r3, sl
    fa94:	21ff      	movs	r1, #255	; 0xff
    fa96:	e759      	b.n	f94c <__aeabi_fdiv+0x138>
    fa98:	0001302c 	.word	0x0001302c
    fa9c:	0001306c 	.word	0x0001306c
    faa0:	f7ffffff 	.word	0xf7ffffff

0000faa4 <__eqsf2>:
    faa4:	b570      	push	{r4, r5, r6, lr}
    faa6:	0042      	lsls	r2, r0, #1
    faa8:	0245      	lsls	r5, r0, #9
    faaa:	024e      	lsls	r6, r1, #9
    faac:	004c      	lsls	r4, r1, #1
    faae:	0fc3      	lsrs	r3, r0, #31
    fab0:	0a6d      	lsrs	r5, r5, #9
    fab2:	0e12      	lsrs	r2, r2, #24
    fab4:	0a76      	lsrs	r6, r6, #9
    fab6:	0e24      	lsrs	r4, r4, #24
    fab8:	0fc9      	lsrs	r1, r1, #31
    faba:	2001      	movs	r0, #1
    fabc:	2aff      	cmp	r2, #255	; 0xff
    fabe:	d006      	beq.n	face <__eqsf2+0x2a>
    fac0:	2cff      	cmp	r4, #255	; 0xff
    fac2:	d003      	beq.n	facc <__eqsf2+0x28>
    fac4:	42a2      	cmp	r2, r4
    fac6:	d101      	bne.n	facc <__eqsf2+0x28>
    fac8:	42b5      	cmp	r5, r6
    faca:	d006      	beq.n	fada <__eqsf2+0x36>
    facc:	bd70      	pop	{r4, r5, r6, pc}
    face:	2d00      	cmp	r5, #0
    fad0:	d1fc      	bne.n	facc <__eqsf2+0x28>
    fad2:	2cff      	cmp	r4, #255	; 0xff
    fad4:	d1fa      	bne.n	facc <__eqsf2+0x28>
    fad6:	2e00      	cmp	r6, #0
    fad8:	d1f8      	bne.n	facc <__eqsf2+0x28>
    fada:	428b      	cmp	r3, r1
    fadc:	d006      	beq.n	faec <__eqsf2+0x48>
    fade:	2001      	movs	r0, #1
    fae0:	2a00      	cmp	r2, #0
    fae2:	d1f3      	bne.n	facc <__eqsf2+0x28>
    fae4:	0028      	movs	r0, r5
    fae6:	1e45      	subs	r5, r0, #1
    fae8:	41a8      	sbcs	r0, r5
    faea:	e7ef      	b.n	facc <__eqsf2+0x28>
    faec:	2000      	movs	r0, #0
    faee:	e7ed      	b.n	facc <__eqsf2+0x28>

0000faf0 <__gesf2>:
    faf0:	b5f0      	push	{r4, r5, r6, r7, lr}
    faf2:	0042      	lsls	r2, r0, #1
    faf4:	0245      	lsls	r5, r0, #9
    faf6:	024c      	lsls	r4, r1, #9
    faf8:	0fc3      	lsrs	r3, r0, #31
    fafa:	0048      	lsls	r0, r1, #1
    fafc:	0a6d      	lsrs	r5, r5, #9
    fafe:	0e12      	lsrs	r2, r2, #24
    fb00:	0a64      	lsrs	r4, r4, #9
    fb02:	0e00      	lsrs	r0, r0, #24
    fb04:	0fc9      	lsrs	r1, r1, #31
    fb06:	2aff      	cmp	r2, #255	; 0xff
    fb08:	d01e      	beq.n	fb48 <__gesf2+0x58>
    fb0a:	28ff      	cmp	r0, #255	; 0xff
    fb0c:	d021      	beq.n	fb52 <__gesf2+0x62>
    fb0e:	2a00      	cmp	r2, #0
    fb10:	d10a      	bne.n	fb28 <__gesf2+0x38>
    fb12:	426e      	negs	r6, r5
    fb14:	416e      	adcs	r6, r5
    fb16:	b2f6      	uxtb	r6, r6
    fb18:	2800      	cmp	r0, #0
    fb1a:	d10f      	bne.n	fb3c <__gesf2+0x4c>
    fb1c:	2c00      	cmp	r4, #0
    fb1e:	d10d      	bne.n	fb3c <__gesf2+0x4c>
    fb20:	2000      	movs	r0, #0
    fb22:	2d00      	cmp	r5, #0
    fb24:	d009      	beq.n	fb3a <__gesf2+0x4a>
    fb26:	e005      	b.n	fb34 <__gesf2+0x44>
    fb28:	2800      	cmp	r0, #0
    fb2a:	d101      	bne.n	fb30 <__gesf2+0x40>
    fb2c:	2c00      	cmp	r4, #0
    fb2e:	d001      	beq.n	fb34 <__gesf2+0x44>
    fb30:	428b      	cmp	r3, r1
    fb32:	d011      	beq.n	fb58 <__gesf2+0x68>
    fb34:	2101      	movs	r1, #1
    fb36:	4258      	negs	r0, r3
    fb38:	4308      	orrs	r0, r1
    fb3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fb3c:	2e00      	cmp	r6, #0
    fb3e:	d0f7      	beq.n	fb30 <__gesf2+0x40>
    fb40:	2001      	movs	r0, #1
    fb42:	3901      	subs	r1, #1
    fb44:	4308      	orrs	r0, r1
    fb46:	e7f8      	b.n	fb3a <__gesf2+0x4a>
    fb48:	2d00      	cmp	r5, #0
    fb4a:	d0de      	beq.n	fb0a <__gesf2+0x1a>
    fb4c:	2002      	movs	r0, #2
    fb4e:	4240      	negs	r0, r0
    fb50:	e7f3      	b.n	fb3a <__gesf2+0x4a>
    fb52:	2c00      	cmp	r4, #0
    fb54:	d0db      	beq.n	fb0e <__gesf2+0x1e>
    fb56:	e7f9      	b.n	fb4c <__gesf2+0x5c>
    fb58:	4282      	cmp	r2, r0
    fb5a:	dceb      	bgt.n	fb34 <__gesf2+0x44>
    fb5c:	db04      	blt.n	fb68 <__gesf2+0x78>
    fb5e:	42a5      	cmp	r5, r4
    fb60:	d8e8      	bhi.n	fb34 <__gesf2+0x44>
    fb62:	2000      	movs	r0, #0
    fb64:	42a5      	cmp	r5, r4
    fb66:	d2e8      	bcs.n	fb3a <__gesf2+0x4a>
    fb68:	2101      	movs	r1, #1
    fb6a:	1e58      	subs	r0, r3, #1
    fb6c:	4308      	orrs	r0, r1
    fb6e:	e7e4      	b.n	fb3a <__gesf2+0x4a>

0000fb70 <__lesf2>:
    fb70:	b5f0      	push	{r4, r5, r6, r7, lr}
    fb72:	0042      	lsls	r2, r0, #1
    fb74:	024d      	lsls	r5, r1, #9
    fb76:	004c      	lsls	r4, r1, #1
    fb78:	0246      	lsls	r6, r0, #9
    fb7a:	0a76      	lsrs	r6, r6, #9
    fb7c:	0e12      	lsrs	r2, r2, #24
    fb7e:	0fc3      	lsrs	r3, r0, #31
    fb80:	0a6d      	lsrs	r5, r5, #9
    fb82:	0e24      	lsrs	r4, r4, #24
    fb84:	0fc9      	lsrs	r1, r1, #31
    fb86:	2aff      	cmp	r2, #255	; 0xff
    fb88:	d016      	beq.n	fbb8 <__lesf2+0x48>
    fb8a:	2cff      	cmp	r4, #255	; 0xff
    fb8c:	d018      	beq.n	fbc0 <__lesf2+0x50>
    fb8e:	2a00      	cmp	r2, #0
    fb90:	d10a      	bne.n	fba8 <__lesf2+0x38>
    fb92:	4270      	negs	r0, r6
    fb94:	4170      	adcs	r0, r6
    fb96:	b2c0      	uxtb	r0, r0
    fb98:	2c00      	cmp	r4, #0
    fb9a:	d015      	beq.n	fbc8 <__lesf2+0x58>
    fb9c:	2800      	cmp	r0, #0
    fb9e:	d005      	beq.n	fbac <__lesf2+0x3c>
    fba0:	2001      	movs	r0, #1
    fba2:	3901      	subs	r1, #1
    fba4:	4308      	orrs	r0, r1
    fba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fba8:	2c00      	cmp	r4, #0
    fbaa:	d013      	beq.n	fbd4 <__lesf2+0x64>
    fbac:	4299      	cmp	r1, r3
    fbae:	d014      	beq.n	fbda <__lesf2+0x6a>
    fbb0:	2001      	movs	r0, #1
    fbb2:	425b      	negs	r3, r3
    fbb4:	4318      	orrs	r0, r3
    fbb6:	e7f6      	b.n	fba6 <__lesf2+0x36>
    fbb8:	2002      	movs	r0, #2
    fbba:	2e00      	cmp	r6, #0
    fbbc:	d1f3      	bne.n	fba6 <__lesf2+0x36>
    fbbe:	e7e4      	b.n	fb8a <__lesf2+0x1a>
    fbc0:	2002      	movs	r0, #2
    fbc2:	2d00      	cmp	r5, #0
    fbc4:	d1ef      	bne.n	fba6 <__lesf2+0x36>
    fbc6:	e7e2      	b.n	fb8e <__lesf2+0x1e>
    fbc8:	2d00      	cmp	r5, #0
    fbca:	d1e7      	bne.n	fb9c <__lesf2+0x2c>
    fbcc:	2000      	movs	r0, #0
    fbce:	2e00      	cmp	r6, #0
    fbd0:	d0e9      	beq.n	fba6 <__lesf2+0x36>
    fbd2:	e7ed      	b.n	fbb0 <__lesf2+0x40>
    fbd4:	2d00      	cmp	r5, #0
    fbd6:	d1e9      	bne.n	fbac <__lesf2+0x3c>
    fbd8:	e7ea      	b.n	fbb0 <__lesf2+0x40>
    fbda:	42a2      	cmp	r2, r4
    fbdc:	dc06      	bgt.n	fbec <__lesf2+0x7c>
    fbde:	dbdf      	blt.n	fba0 <__lesf2+0x30>
    fbe0:	42ae      	cmp	r6, r5
    fbe2:	d803      	bhi.n	fbec <__lesf2+0x7c>
    fbe4:	2000      	movs	r0, #0
    fbe6:	42ae      	cmp	r6, r5
    fbe8:	d3da      	bcc.n	fba0 <__lesf2+0x30>
    fbea:	e7dc      	b.n	fba6 <__lesf2+0x36>
    fbec:	2001      	movs	r0, #1
    fbee:	4249      	negs	r1, r1
    fbf0:	4308      	orrs	r0, r1
    fbf2:	e7d8      	b.n	fba6 <__lesf2+0x36>

0000fbf4 <__aeabi_fmul>:
    fbf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fbf6:	4657      	mov	r7, sl
    fbf8:	464e      	mov	r6, r9
    fbfa:	4645      	mov	r5, r8
    fbfc:	46de      	mov	lr, fp
    fbfe:	b5e0      	push	{r5, r6, r7, lr}
    fc00:	0247      	lsls	r7, r0, #9
    fc02:	0046      	lsls	r6, r0, #1
    fc04:	4688      	mov	r8, r1
    fc06:	0a7f      	lsrs	r7, r7, #9
    fc08:	0e36      	lsrs	r6, r6, #24
    fc0a:	0fc4      	lsrs	r4, r0, #31
    fc0c:	2e00      	cmp	r6, #0
    fc0e:	d047      	beq.n	fca0 <__aeabi_fmul+0xac>
    fc10:	2eff      	cmp	r6, #255	; 0xff
    fc12:	d024      	beq.n	fc5e <__aeabi_fmul+0x6a>
    fc14:	00fb      	lsls	r3, r7, #3
    fc16:	2780      	movs	r7, #128	; 0x80
    fc18:	04ff      	lsls	r7, r7, #19
    fc1a:	431f      	orrs	r7, r3
    fc1c:	2300      	movs	r3, #0
    fc1e:	4699      	mov	r9, r3
    fc20:	469a      	mov	sl, r3
    fc22:	3e7f      	subs	r6, #127	; 0x7f
    fc24:	4643      	mov	r3, r8
    fc26:	025d      	lsls	r5, r3, #9
    fc28:	0058      	lsls	r0, r3, #1
    fc2a:	0fdb      	lsrs	r3, r3, #31
    fc2c:	0a6d      	lsrs	r5, r5, #9
    fc2e:	0e00      	lsrs	r0, r0, #24
    fc30:	4698      	mov	r8, r3
    fc32:	d043      	beq.n	fcbc <__aeabi_fmul+0xc8>
    fc34:	28ff      	cmp	r0, #255	; 0xff
    fc36:	d03b      	beq.n	fcb0 <__aeabi_fmul+0xbc>
    fc38:	00eb      	lsls	r3, r5, #3
    fc3a:	2580      	movs	r5, #128	; 0x80
    fc3c:	2200      	movs	r2, #0
    fc3e:	04ed      	lsls	r5, r5, #19
    fc40:	431d      	orrs	r5, r3
    fc42:	387f      	subs	r0, #127	; 0x7f
    fc44:	1836      	adds	r6, r6, r0
    fc46:	1c73      	adds	r3, r6, #1
    fc48:	4641      	mov	r1, r8
    fc4a:	469b      	mov	fp, r3
    fc4c:	464b      	mov	r3, r9
    fc4e:	4061      	eors	r1, r4
    fc50:	4313      	orrs	r3, r2
    fc52:	2b0f      	cmp	r3, #15
    fc54:	d864      	bhi.n	fd20 <__aeabi_fmul+0x12c>
    fc56:	4875      	ldr	r0, [pc, #468]	; (fe2c <__aeabi_fmul+0x238>)
    fc58:	009b      	lsls	r3, r3, #2
    fc5a:	58c3      	ldr	r3, [r0, r3]
    fc5c:	469f      	mov	pc, r3
    fc5e:	2f00      	cmp	r7, #0
    fc60:	d142      	bne.n	fce8 <__aeabi_fmul+0xf4>
    fc62:	2308      	movs	r3, #8
    fc64:	4699      	mov	r9, r3
    fc66:	3b06      	subs	r3, #6
    fc68:	26ff      	movs	r6, #255	; 0xff
    fc6a:	469a      	mov	sl, r3
    fc6c:	e7da      	b.n	fc24 <__aeabi_fmul+0x30>
    fc6e:	4641      	mov	r1, r8
    fc70:	2a02      	cmp	r2, #2
    fc72:	d028      	beq.n	fcc6 <__aeabi_fmul+0xd2>
    fc74:	2a03      	cmp	r2, #3
    fc76:	d100      	bne.n	fc7a <__aeabi_fmul+0x86>
    fc78:	e0ce      	b.n	fe18 <__aeabi_fmul+0x224>
    fc7a:	2a01      	cmp	r2, #1
    fc7c:	d000      	beq.n	fc80 <__aeabi_fmul+0x8c>
    fc7e:	e0ac      	b.n	fdda <__aeabi_fmul+0x1e6>
    fc80:	4011      	ands	r1, r2
    fc82:	2000      	movs	r0, #0
    fc84:	2200      	movs	r2, #0
    fc86:	b2cc      	uxtb	r4, r1
    fc88:	0240      	lsls	r0, r0, #9
    fc8a:	05d2      	lsls	r2, r2, #23
    fc8c:	0a40      	lsrs	r0, r0, #9
    fc8e:	07e4      	lsls	r4, r4, #31
    fc90:	4310      	orrs	r0, r2
    fc92:	4320      	orrs	r0, r4
    fc94:	bc3c      	pop	{r2, r3, r4, r5}
    fc96:	4690      	mov	r8, r2
    fc98:	4699      	mov	r9, r3
    fc9a:	46a2      	mov	sl, r4
    fc9c:	46ab      	mov	fp, r5
    fc9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fca0:	2f00      	cmp	r7, #0
    fca2:	d115      	bne.n	fcd0 <__aeabi_fmul+0xdc>
    fca4:	2304      	movs	r3, #4
    fca6:	4699      	mov	r9, r3
    fca8:	3b03      	subs	r3, #3
    fcaa:	2600      	movs	r6, #0
    fcac:	469a      	mov	sl, r3
    fcae:	e7b9      	b.n	fc24 <__aeabi_fmul+0x30>
    fcb0:	20ff      	movs	r0, #255	; 0xff
    fcb2:	2202      	movs	r2, #2
    fcb4:	2d00      	cmp	r5, #0
    fcb6:	d0c5      	beq.n	fc44 <__aeabi_fmul+0x50>
    fcb8:	2203      	movs	r2, #3
    fcba:	e7c3      	b.n	fc44 <__aeabi_fmul+0x50>
    fcbc:	2d00      	cmp	r5, #0
    fcbe:	d119      	bne.n	fcf4 <__aeabi_fmul+0x100>
    fcc0:	2000      	movs	r0, #0
    fcc2:	2201      	movs	r2, #1
    fcc4:	e7be      	b.n	fc44 <__aeabi_fmul+0x50>
    fcc6:	2401      	movs	r4, #1
    fcc8:	22ff      	movs	r2, #255	; 0xff
    fcca:	400c      	ands	r4, r1
    fccc:	2000      	movs	r0, #0
    fcce:	e7db      	b.n	fc88 <__aeabi_fmul+0x94>
    fcd0:	0038      	movs	r0, r7
    fcd2:	f001 f921 	bl	10f18 <__clzsi2>
    fcd6:	2676      	movs	r6, #118	; 0x76
    fcd8:	1f43      	subs	r3, r0, #5
    fcda:	409f      	lsls	r7, r3
    fcdc:	2300      	movs	r3, #0
    fcde:	4276      	negs	r6, r6
    fce0:	1a36      	subs	r6, r6, r0
    fce2:	4699      	mov	r9, r3
    fce4:	469a      	mov	sl, r3
    fce6:	e79d      	b.n	fc24 <__aeabi_fmul+0x30>
    fce8:	230c      	movs	r3, #12
    fcea:	4699      	mov	r9, r3
    fcec:	3b09      	subs	r3, #9
    fcee:	26ff      	movs	r6, #255	; 0xff
    fcf0:	469a      	mov	sl, r3
    fcf2:	e797      	b.n	fc24 <__aeabi_fmul+0x30>
    fcf4:	0028      	movs	r0, r5
    fcf6:	f001 f90f 	bl	10f18 <__clzsi2>
    fcfa:	1f43      	subs	r3, r0, #5
    fcfc:	409d      	lsls	r5, r3
    fcfe:	2376      	movs	r3, #118	; 0x76
    fd00:	425b      	negs	r3, r3
    fd02:	1a18      	subs	r0, r3, r0
    fd04:	2200      	movs	r2, #0
    fd06:	e79d      	b.n	fc44 <__aeabi_fmul+0x50>
    fd08:	2080      	movs	r0, #128	; 0x80
    fd0a:	2400      	movs	r4, #0
    fd0c:	03c0      	lsls	r0, r0, #15
    fd0e:	22ff      	movs	r2, #255	; 0xff
    fd10:	e7ba      	b.n	fc88 <__aeabi_fmul+0x94>
    fd12:	003d      	movs	r5, r7
    fd14:	4652      	mov	r2, sl
    fd16:	e7ab      	b.n	fc70 <__aeabi_fmul+0x7c>
    fd18:	003d      	movs	r5, r7
    fd1a:	0021      	movs	r1, r4
    fd1c:	4652      	mov	r2, sl
    fd1e:	e7a7      	b.n	fc70 <__aeabi_fmul+0x7c>
    fd20:	0c3b      	lsrs	r3, r7, #16
    fd22:	469c      	mov	ip, r3
    fd24:	042a      	lsls	r2, r5, #16
    fd26:	0c12      	lsrs	r2, r2, #16
    fd28:	0c2b      	lsrs	r3, r5, #16
    fd2a:	0014      	movs	r4, r2
    fd2c:	4660      	mov	r0, ip
    fd2e:	4665      	mov	r5, ip
    fd30:	043f      	lsls	r7, r7, #16
    fd32:	0c3f      	lsrs	r7, r7, #16
    fd34:	437c      	muls	r4, r7
    fd36:	4342      	muls	r2, r0
    fd38:	435d      	muls	r5, r3
    fd3a:	437b      	muls	r3, r7
    fd3c:	0c27      	lsrs	r7, r4, #16
    fd3e:	189b      	adds	r3, r3, r2
    fd40:	18ff      	adds	r7, r7, r3
    fd42:	42ba      	cmp	r2, r7
    fd44:	d903      	bls.n	fd4e <__aeabi_fmul+0x15a>
    fd46:	2380      	movs	r3, #128	; 0x80
    fd48:	025b      	lsls	r3, r3, #9
    fd4a:	469c      	mov	ip, r3
    fd4c:	4465      	add	r5, ip
    fd4e:	0424      	lsls	r4, r4, #16
    fd50:	043a      	lsls	r2, r7, #16
    fd52:	0c24      	lsrs	r4, r4, #16
    fd54:	1912      	adds	r2, r2, r4
    fd56:	0193      	lsls	r3, r2, #6
    fd58:	1e5c      	subs	r4, r3, #1
    fd5a:	41a3      	sbcs	r3, r4
    fd5c:	0c3f      	lsrs	r7, r7, #16
    fd5e:	0e92      	lsrs	r2, r2, #26
    fd60:	197d      	adds	r5, r7, r5
    fd62:	431a      	orrs	r2, r3
    fd64:	01ad      	lsls	r5, r5, #6
    fd66:	4315      	orrs	r5, r2
    fd68:	012b      	lsls	r3, r5, #4
    fd6a:	d504      	bpl.n	fd76 <__aeabi_fmul+0x182>
    fd6c:	2301      	movs	r3, #1
    fd6e:	465e      	mov	r6, fp
    fd70:	086a      	lsrs	r2, r5, #1
    fd72:	401d      	ands	r5, r3
    fd74:	4315      	orrs	r5, r2
    fd76:	0032      	movs	r2, r6
    fd78:	327f      	adds	r2, #127	; 0x7f
    fd7a:	2a00      	cmp	r2, #0
    fd7c:	dd25      	ble.n	fdca <__aeabi_fmul+0x1d6>
    fd7e:	076b      	lsls	r3, r5, #29
    fd80:	d004      	beq.n	fd8c <__aeabi_fmul+0x198>
    fd82:	230f      	movs	r3, #15
    fd84:	402b      	ands	r3, r5
    fd86:	2b04      	cmp	r3, #4
    fd88:	d000      	beq.n	fd8c <__aeabi_fmul+0x198>
    fd8a:	3504      	adds	r5, #4
    fd8c:	012b      	lsls	r3, r5, #4
    fd8e:	d503      	bpl.n	fd98 <__aeabi_fmul+0x1a4>
    fd90:	0032      	movs	r2, r6
    fd92:	4b27      	ldr	r3, [pc, #156]	; (fe30 <__aeabi_fmul+0x23c>)
    fd94:	3280      	adds	r2, #128	; 0x80
    fd96:	401d      	ands	r5, r3
    fd98:	2afe      	cmp	r2, #254	; 0xfe
    fd9a:	dc94      	bgt.n	fcc6 <__aeabi_fmul+0xd2>
    fd9c:	2401      	movs	r4, #1
    fd9e:	01a8      	lsls	r0, r5, #6
    fda0:	0a40      	lsrs	r0, r0, #9
    fda2:	b2d2      	uxtb	r2, r2
    fda4:	400c      	ands	r4, r1
    fda6:	e76f      	b.n	fc88 <__aeabi_fmul+0x94>
    fda8:	2080      	movs	r0, #128	; 0x80
    fdaa:	03c0      	lsls	r0, r0, #15
    fdac:	4207      	tst	r7, r0
    fdae:	d007      	beq.n	fdc0 <__aeabi_fmul+0x1cc>
    fdb0:	4205      	tst	r5, r0
    fdb2:	d105      	bne.n	fdc0 <__aeabi_fmul+0x1cc>
    fdb4:	4328      	orrs	r0, r5
    fdb6:	0240      	lsls	r0, r0, #9
    fdb8:	0a40      	lsrs	r0, r0, #9
    fdba:	4644      	mov	r4, r8
    fdbc:	22ff      	movs	r2, #255	; 0xff
    fdbe:	e763      	b.n	fc88 <__aeabi_fmul+0x94>
    fdc0:	4338      	orrs	r0, r7
    fdc2:	0240      	lsls	r0, r0, #9
    fdc4:	0a40      	lsrs	r0, r0, #9
    fdc6:	22ff      	movs	r2, #255	; 0xff
    fdc8:	e75e      	b.n	fc88 <__aeabi_fmul+0x94>
    fdca:	2401      	movs	r4, #1
    fdcc:	1aa3      	subs	r3, r4, r2
    fdce:	2b1b      	cmp	r3, #27
    fdd0:	dd05      	ble.n	fdde <__aeabi_fmul+0x1ea>
    fdd2:	400c      	ands	r4, r1
    fdd4:	2200      	movs	r2, #0
    fdd6:	2000      	movs	r0, #0
    fdd8:	e756      	b.n	fc88 <__aeabi_fmul+0x94>
    fdda:	465e      	mov	r6, fp
    fddc:	e7cb      	b.n	fd76 <__aeabi_fmul+0x182>
    fdde:	002a      	movs	r2, r5
    fde0:	2020      	movs	r0, #32
    fde2:	40da      	lsrs	r2, r3
    fde4:	1ac3      	subs	r3, r0, r3
    fde6:	409d      	lsls	r5, r3
    fde8:	002b      	movs	r3, r5
    fdea:	1e5d      	subs	r5, r3, #1
    fdec:	41ab      	sbcs	r3, r5
    fdee:	4313      	orrs	r3, r2
    fdf0:	075a      	lsls	r2, r3, #29
    fdf2:	d004      	beq.n	fdfe <__aeabi_fmul+0x20a>
    fdf4:	220f      	movs	r2, #15
    fdf6:	401a      	ands	r2, r3
    fdf8:	2a04      	cmp	r2, #4
    fdfa:	d000      	beq.n	fdfe <__aeabi_fmul+0x20a>
    fdfc:	3304      	adds	r3, #4
    fdfe:	015a      	lsls	r2, r3, #5
    fe00:	d504      	bpl.n	fe0c <__aeabi_fmul+0x218>
    fe02:	2401      	movs	r4, #1
    fe04:	2201      	movs	r2, #1
    fe06:	400c      	ands	r4, r1
    fe08:	2000      	movs	r0, #0
    fe0a:	e73d      	b.n	fc88 <__aeabi_fmul+0x94>
    fe0c:	2401      	movs	r4, #1
    fe0e:	019b      	lsls	r3, r3, #6
    fe10:	0a58      	lsrs	r0, r3, #9
    fe12:	400c      	ands	r4, r1
    fe14:	2200      	movs	r2, #0
    fe16:	e737      	b.n	fc88 <__aeabi_fmul+0x94>
    fe18:	2080      	movs	r0, #128	; 0x80
    fe1a:	2401      	movs	r4, #1
    fe1c:	03c0      	lsls	r0, r0, #15
    fe1e:	4328      	orrs	r0, r5
    fe20:	0240      	lsls	r0, r0, #9
    fe22:	0a40      	lsrs	r0, r0, #9
    fe24:	400c      	ands	r4, r1
    fe26:	22ff      	movs	r2, #255	; 0xff
    fe28:	e72e      	b.n	fc88 <__aeabi_fmul+0x94>
    fe2a:	46c0      	nop			; (mov r8, r8)
    fe2c:	000130ac 	.word	0x000130ac
    fe30:	f7ffffff 	.word	0xf7ffffff

0000fe34 <__aeabi_fsub>:
    fe34:	b5f0      	push	{r4, r5, r6, r7, lr}
    fe36:	464f      	mov	r7, r9
    fe38:	46d6      	mov	lr, sl
    fe3a:	4646      	mov	r6, r8
    fe3c:	0044      	lsls	r4, r0, #1
    fe3e:	b5c0      	push	{r6, r7, lr}
    fe40:	0fc2      	lsrs	r2, r0, #31
    fe42:	0247      	lsls	r7, r0, #9
    fe44:	0248      	lsls	r0, r1, #9
    fe46:	0a40      	lsrs	r0, r0, #9
    fe48:	4684      	mov	ip, r0
    fe4a:	4666      	mov	r6, ip
    fe4c:	0a7b      	lsrs	r3, r7, #9
    fe4e:	0048      	lsls	r0, r1, #1
    fe50:	0fc9      	lsrs	r1, r1, #31
    fe52:	469a      	mov	sl, r3
    fe54:	0e24      	lsrs	r4, r4, #24
    fe56:	0015      	movs	r5, r2
    fe58:	00db      	lsls	r3, r3, #3
    fe5a:	0e00      	lsrs	r0, r0, #24
    fe5c:	4689      	mov	r9, r1
    fe5e:	00f6      	lsls	r6, r6, #3
    fe60:	28ff      	cmp	r0, #255	; 0xff
    fe62:	d100      	bne.n	fe66 <__aeabi_fsub+0x32>
    fe64:	e08f      	b.n	ff86 <__aeabi_fsub+0x152>
    fe66:	2101      	movs	r1, #1
    fe68:	464f      	mov	r7, r9
    fe6a:	404f      	eors	r7, r1
    fe6c:	0039      	movs	r1, r7
    fe6e:	4291      	cmp	r1, r2
    fe70:	d066      	beq.n	ff40 <__aeabi_fsub+0x10c>
    fe72:	1a22      	subs	r2, r4, r0
    fe74:	2a00      	cmp	r2, #0
    fe76:	dc00      	bgt.n	fe7a <__aeabi_fsub+0x46>
    fe78:	e09d      	b.n	ffb6 <__aeabi_fsub+0x182>
    fe7a:	2800      	cmp	r0, #0
    fe7c:	d13d      	bne.n	fefa <__aeabi_fsub+0xc6>
    fe7e:	2e00      	cmp	r6, #0
    fe80:	d100      	bne.n	fe84 <__aeabi_fsub+0x50>
    fe82:	e08b      	b.n	ff9c <__aeabi_fsub+0x168>
    fe84:	1e51      	subs	r1, r2, #1
    fe86:	2900      	cmp	r1, #0
    fe88:	d000      	beq.n	fe8c <__aeabi_fsub+0x58>
    fe8a:	e0b5      	b.n	fff8 <__aeabi_fsub+0x1c4>
    fe8c:	2401      	movs	r4, #1
    fe8e:	1b9b      	subs	r3, r3, r6
    fe90:	015a      	lsls	r2, r3, #5
    fe92:	d544      	bpl.n	ff1e <__aeabi_fsub+0xea>
    fe94:	019b      	lsls	r3, r3, #6
    fe96:	099f      	lsrs	r7, r3, #6
    fe98:	0038      	movs	r0, r7
    fe9a:	f001 f83d 	bl	10f18 <__clzsi2>
    fe9e:	3805      	subs	r0, #5
    fea0:	4087      	lsls	r7, r0
    fea2:	4284      	cmp	r4, r0
    fea4:	dd00      	ble.n	fea8 <__aeabi_fsub+0x74>
    fea6:	e096      	b.n	ffd6 <__aeabi_fsub+0x1a2>
    fea8:	1b04      	subs	r4, r0, r4
    feaa:	003a      	movs	r2, r7
    feac:	2020      	movs	r0, #32
    feae:	3401      	adds	r4, #1
    feb0:	40e2      	lsrs	r2, r4
    feb2:	1b04      	subs	r4, r0, r4
    feb4:	40a7      	lsls	r7, r4
    feb6:	003b      	movs	r3, r7
    feb8:	1e5f      	subs	r7, r3, #1
    feba:	41bb      	sbcs	r3, r7
    febc:	2400      	movs	r4, #0
    febe:	4313      	orrs	r3, r2
    fec0:	075a      	lsls	r2, r3, #29
    fec2:	d004      	beq.n	fece <__aeabi_fsub+0x9a>
    fec4:	220f      	movs	r2, #15
    fec6:	401a      	ands	r2, r3
    fec8:	2a04      	cmp	r2, #4
    feca:	d000      	beq.n	fece <__aeabi_fsub+0x9a>
    fecc:	3304      	adds	r3, #4
    fece:	015a      	lsls	r2, r3, #5
    fed0:	d527      	bpl.n	ff22 <__aeabi_fsub+0xee>
    fed2:	3401      	adds	r4, #1
    fed4:	2cff      	cmp	r4, #255	; 0xff
    fed6:	d100      	bne.n	feda <__aeabi_fsub+0xa6>
    fed8:	e079      	b.n	ffce <__aeabi_fsub+0x19a>
    feda:	2201      	movs	r2, #1
    fedc:	019b      	lsls	r3, r3, #6
    fede:	0a5b      	lsrs	r3, r3, #9
    fee0:	b2e4      	uxtb	r4, r4
    fee2:	402a      	ands	r2, r5
    fee4:	025b      	lsls	r3, r3, #9
    fee6:	05e4      	lsls	r4, r4, #23
    fee8:	0a58      	lsrs	r0, r3, #9
    feea:	07d2      	lsls	r2, r2, #31
    feec:	4320      	orrs	r0, r4
    feee:	4310      	orrs	r0, r2
    fef0:	bc1c      	pop	{r2, r3, r4}
    fef2:	4690      	mov	r8, r2
    fef4:	4699      	mov	r9, r3
    fef6:	46a2      	mov	sl, r4
    fef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fefa:	2cff      	cmp	r4, #255	; 0xff
    fefc:	d0e0      	beq.n	fec0 <__aeabi_fsub+0x8c>
    fefe:	2180      	movs	r1, #128	; 0x80
    ff00:	04c9      	lsls	r1, r1, #19
    ff02:	430e      	orrs	r6, r1
    ff04:	2a1b      	cmp	r2, #27
    ff06:	dc7b      	bgt.n	10000 <__aeabi_fsub+0x1cc>
    ff08:	0031      	movs	r1, r6
    ff0a:	2020      	movs	r0, #32
    ff0c:	40d1      	lsrs	r1, r2
    ff0e:	1a82      	subs	r2, r0, r2
    ff10:	4096      	lsls	r6, r2
    ff12:	1e72      	subs	r2, r6, #1
    ff14:	4196      	sbcs	r6, r2
    ff16:	430e      	orrs	r6, r1
    ff18:	1b9b      	subs	r3, r3, r6
    ff1a:	015a      	lsls	r2, r3, #5
    ff1c:	d4ba      	bmi.n	fe94 <__aeabi_fsub+0x60>
    ff1e:	075a      	lsls	r2, r3, #29
    ff20:	d1d0      	bne.n	fec4 <__aeabi_fsub+0x90>
    ff22:	2201      	movs	r2, #1
    ff24:	08df      	lsrs	r7, r3, #3
    ff26:	402a      	ands	r2, r5
    ff28:	2cff      	cmp	r4, #255	; 0xff
    ff2a:	d133      	bne.n	ff94 <__aeabi_fsub+0x160>
    ff2c:	2f00      	cmp	r7, #0
    ff2e:	d100      	bne.n	ff32 <__aeabi_fsub+0xfe>
    ff30:	e0a8      	b.n	10084 <__aeabi_fsub+0x250>
    ff32:	2380      	movs	r3, #128	; 0x80
    ff34:	03db      	lsls	r3, r3, #15
    ff36:	433b      	orrs	r3, r7
    ff38:	025b      	lsls	r3, r3, #9
    ff3a:	0a5b      	lsrs	r3, r3, #9
    ff3c:	24ff      	movs	r4, #255	; 0xff
    ff3e:	e7d1      	b.n	fee4 <__aeabi_fsub+0xb0>
    ff40:	1a21      	subs	r1, r4, r0
    ff42:	2900      	cmp	r1, #0
    ff44:	dd4c      	ble.n	ffe0 <__aeabi_fsub+0x1ac>
    ff46:	2800      	cmp	r0, #0
    ff48:	d02a      	beq.n	ffa0 <__aeabi_fsub+0x16c>
    ff4a:	2cff      	cmp	r4, #255	; 0xff
    ff4c:	d0b8      	beq.n	fec0 <__aeabi_fsub+0x8c>
    ff4e:	2080      	movs	r0, #128	; 0x80
    ff50:	04c0      	lsls	r0, r0, #19
    ff52:	4306      	orrs	r6, r0
    ff54:	291b      	cmp	r1, #27
    ff56:	dd00      	ble.n	ff5a <__aeabi_fsub+0x126>
    ff58:	e0af      	b.n	100ba <__aeabi_fsub+0x286>
    ff5a:	0030      	movs	r0, r6
    ff5c:	2720      	movs	r7, #32
    ff5e:	40c8      	lsrs	r0, r1
    ff60:	1a79      	subs	r1, r7, r1
    ff62:	408e      	lsls	r6, r1
    ff64:	1e71      	subs	r1, r6, #1
    ff66:	418e      	sbcs	r6, r1
    ff68:	4306      	orrs	r6, r0
    ff6a:	199b      	adds	r3, r3, r6
    ff6c:	0159      	lsls	r1, r3, #5
    ff6e:	d5d6      	bpl.n	ff1e <__aeabi_fsub+0xea>
    ff70:	3401      	adds	r4, #1
    ff72:	2cff      	cmp	r4, #255	; 0xff
    ff74:	d100      	bne.n	ff78 <__aeabi_fsub+0x144>
    ff76:	e085      	b.n	10084 <__aeabi_fsub+0x250>
    ff78:	2201      	movs	r2, #1
    ff7a:	497a      	ldr	r1, [pc, #488]	; (10164 <__aeabi_fsub+0x330>)
    ff7c:	401a      	ands	r2, r3
    ff7e:	085b      	lsrs	r3, r3, #1
    ff80:	400b      	ands	r3, r1
    ff82:	4313      	orrs	r3, r2
    ff84:	e79c      	b.n	fec0 <__aeabi_fsub+0x8c>
    ff86:	2e00      	cmp	r6, #0
    ff88:	d000      	beq.n	ff8c <__aeabi_fsub+0x158>
    ff8a:	e770      	b.n	fe6e <__aeabi_fsub+0x3a>
    ff8c:	e76b      	b.n	fe66 <__aeabi_fsub+0x32>
    ff8e:	1e3b      	subs	r3, r7, #0
    ff90:	d1c5      	bne.n	ff1e <__aeabi_fsub+0xea>
    ff92:	2200      	movs	r2, #0
    ff94:	027b      	lsls	r3, r7, #9
    ff96:	0a5b      	lsrs	r3, r3, #9
    ff98:	b2e4      	uxtb	r4, r4
    ff9a:	e7a3      	b.n	fee4 <__aeabi_fsub+0xb0>
    ff9c:	0014      	movs	r4, r2
    ff9e:	e78f      	b.n	fec0 <__aeabi_fsub+0x8c>
    ffa0:	2e00      	cmp	r6, #0
    ffa2:	d04d      	beq.n	10040 <__aeabi_fsub+0x20c>
    ffa4:	1e48      	subs	r0, r1, #1
    ffa6:	2800      	cmp	r0, #0
    ffa8:	d157      	bne.n	1005a <__aeabi_fsub+0x226>
    ffaa:	199b      	adds	r3, r3, r6
    ffac:	2401      	movs	r4, #1
    ffae:	015a      	lsls	r2, r3, #5
    ffb0:	d5b5      	bpl.n	ff1e <__aeabi_fsub+0xea>
    ffb2:	2402      	movs	r4, #2
    ffb4:	e7e0      	b.n	ff78 <__aeabi_fsub+0x144>
    ffb6:	2a00      	cmp	r2, #0
    ffb8:	d125      	bne.n	10006 <__aeabi_fsub+0x1d2>
    ffba:	1c62      	adds	r2, r4, #1
    ffbc:	b2d2      	uxtb	r2, r2
    ffbe:	2a01      	cmp	r2, #1
    ffc0:	dd72      	ble.n	100a8 <__aeabi_fsub+0x274>
    ffc2:	1b9f      	subs	r7, r3, r6
    ffc4:	017a      	lsls	r2, r7, #5
    ffc6:	d535      	bpl.n	10034 <__aeabi_fsub+0x200>
    ffc8:	1af7      	subs	r7, r6, r3
    ffca:	000d      	movs	r5, r1
    ffcc:	e764      	b.n	fe98 <__aeabi_fsub+0x64>
    ffce:	2201      	movs	r2, #1
    ffd0:	2300      	movs	r3, #0
    ffd2:	402a      	ands	r2, r5
    ffd4:	e786      	b.n	fee4 <__aeabi_fsub+0xb0>
    ffd6:	003b      	movs	r3, r7
    ffd8:	4a63      	ldr	r2, [pc, #396]	; (10168 <__aeabi_fsub+0x334>)
    ffda:	1a24      	subs	r4, r4, r0
    ffdc:	4013      	ands	r3, r2
    ffde:	e76f      	b.n	fec0 <__aeabi_fsub+0x8c>
    ffe0:	2900      	cmp	r1, #0
    ffe2:	d16c      	bne.n	100be <__aeabi_fsub+0x28a>
    ffe4:	1c61      	adds	r1, r4, #1
    ffe6:	b2c8      	uxtb	r0, r1
    ffe8:	2801      	cmp	r0, #1
    ffea:	dd4e      	ble.n	1008a <__aeabi_fsub+0x256>
    ffec:	29ff      	cmp	r1, #255	; 0xff
    ffee:	d049      	beq.n	10084 <__aeabi_fsub+0x250>
    fff0:	199b      	adds	r3, r3, r6
    fff2:	085b      	lsrs	r3, r3, #1
    fff4:	000c      	movs	r4, r1
    fff6:	e763      	b.n	fec0 <__aeabi_fsub+0x8c>
    fff8:	2aff      	cmp	r2, #255	; 0xff
    fffa:	d041      	beq.n	10080 <__aeabi_fsub+0x24c>
    fffc:	000a      	movs	r2, r1
    fffe:	e781      	b.n	ff04 <__aeabi_fsub+0xd0>
   10000:	2601      	movs	r6, #1
   10002:	1b9b      	subs	r3, r3, r6
   10004:	e789      	b.n	ff1a <__aeabi_fsub+0xe6>
   10006:	2c00      	cmp	r4, #0
   10008:	d01c      	beq.n	10044 <__aeabi_fsub+0x210>
   1000a:	28ff      	cmp	r0, #255	; 0xff
   1000c:	d021      	beq.n	10052 <__aeabi_fsub+0x21e>
   1000e:	2480      	movs	r4, #128	; 0x80
   10010:	04e4      	lsls	r4, r4, #19
   10012:	4252      	negs	r2, r2
   10014:	4323      	orrs	r3, r4
   10016:	2a1b      	cmp	r2, #27
   10018:	dd00      	ble.n	1001c <__aeabi_fsub+0x1e8>
   1001a:	e096      	b.n	1014a <__aeabi_fsub+0x316>
   1001c:	001c      	movs	r4, r3
   1001e:	2520      	movs	r5, #32
   10020:	40d4      	lsrs	r4, r2
   10022:	1aaa      	subs	r2, r5, r2
   10024:	4093      	lsls	r3, r2
   10026:	1e5a      	subs	r2, r3, #1
   10028:	4193      	sbcs	r3, r2
   1002a:	4323      	orrs	r3, r4
   1002c:	1af3      	subs	r3, r6, r3
   1002e:	0004      	movs	r4, r0
   10030:	000d      	movs	r5, r1
   10032:	e72d      	b.n	fe90 <__aeabi_fsub+0x5c>
   10034:	2f00      	cmp	r7, #0
   10036:	d000      	beq.n	1003a <__aeabi_fsub+0x206>
   10038:	e72e      	b.n	fe98 <__aeabi_fsub+0x64>
   1003a:	2200      	movs	r2, #0
   1003c:	2400      	movs	r4, #0
   1003e:	e7a9      	b.n	ff94 <__aeabi_fsub+0x160>
   10040:	000c      	movs	r4, r1
   10042:	e73d      	b.n	fec0 <__aeabi_fsub+0x8c>
   10044:	2b00      	cmp	r3, #0
   10046:	d058      	beq.n	100fa <__aeabi_fsub+0x2c6>
   10048:	43d2      	mvns	r2, r2
   1004a:	2a00      	cmp	r2, #0
   1004c:	d0ee      	beq.n	1002c <__aeabi_fsub+0x1f8>
   1004e:	28ff      	cmp	r0, #255	; 0xff
   10050:	d1e1      	bne.n	10016 <__aeabi_fsub+0x1e2>
   10052:	0033      	movs	r3, r6
   10054:	24ff      	movs	r4, #255	; 0xff
   10056:	000d      	movs	r5, r1
   10058:	e732      	b.n	fec0 <__aeabi_fsub+0x8c>
   1005a:	29ff      	cmp	r1, #255	; 0xff
   1005c:	d010      	beq.n	10080 <__aeabi_fsub+0x24c>
   1005e:	0001      	movs	r1, r0
   10060:	e778      	b.n	ff54 <__aeabi_fsub+0x120>
   10062:	2b00      	cmp	r3, #0
   10064:	d06e      	beq.n	10144 <__aeabi_fsub+0x310>
   10066:	24ff      	movs	r4, #255	; 0xff
   10068:	2e00      	cmp	r6, #0
   1006a:	d100      	bne.n	1006e <__aeabi_fsub+0x23a>
   1006c:	e728      	b.n	fec0 <__aeabi_fsub+0x8c>
   1006e:	2280      	movs	r2, #128	; 0x80
   10070:	4651      	mov	r1, sl
   10072:	03d2      	lsls	r2, r2, #15
   10074:	4211      	tst	r1, r2
   10076:	d003      	beq.n	10080 <__aeabi_fsub+0x24c>
   10078:	4661      	mov	r1, ip
   1007a:	4211      	tst	r1, r2
   1007c:	d100      	bne.n	10080 <__aeabi_fsub+0x24c>
   1007e:	0033      	movs	r3, r6
   10080:	24ff      	movs	r4, #255	; 0xff
   10082:	e71d      	b.n	fec0 <__aeabi_fsub+0x8c>
   10084:	24ff      	movs	r4, #255	; 0xff
   10086:	2300      	movs	r3, #0
   10088:	e72c      	b.n	fee4 <__aeabi_fsub+0xb0>
   1008a:	2c00      	cmp	r4, #0
   1008c:	d1e9      	bne.n	10062 <__aeabi_fsub+0x22e>
   1008e:	2b00      	cmp	r3, #0
   10090:	d063      	beq.n	1015a <__aeabi_fsub+0x326>
   10092:	2e00      	cmp	r6, #0
   10094:	d100      	bne.n	10098 <__aeabi_fsub+0x264>
   10096:	e713      	b.n	fec0 <__aeabi_fsub+0x8c>
   10098:	199b      	adds	r3, r3, r6
   1009a:	015a      	lsls	r2, r3, #5
   1009c:	d400      	bmi.n	100a0 <__aeabi_fsub+0x26c>
   1009e:	e73e      	b.n	ff1e <__aeabi_fsub+0xea>
   100a0:	4a31      	ldr	r2, [pc, #196]	; (10168 <__aeabi_fsub+0x334>)
   100a2:	000c      	movs	r4, r1
   100a4:	4013      	ands	r3, r2
   100a6:	e70b      	b.n	fec0 <__aeabi_fsub+0x8c>
   100a8:	2c00      	cmp	r4, #0
   100aa:	d11e      	bne.n	100ea <__aeabi_fsub+0x2b6>
   100ac:	2b00      	cmp	r3, #0
   100ae:	d12f      	bne.n	10110 <__aeabi_fsub+0x2dc>
   100b0:	2e00      	cmp	r6, #0
   100b2:	d04f      	beq.n	10154 <__aeabi_fsub+0x320>
   100b4:	0033      	movs	r3, r6
   100b6:	000d      	movs	r5, r1
   100b8:	e702      	b.n	fec0 <__aeabi_fsub+0x8c>
   100ba:	2601      	movs	r6, #1
   100bc:	e755      	b.n	ff6a <__aeabi_fsub+0x136>
   100be:	2c00      	cmp	r4, #0
   100c0:	d11f      	bne.n	10102 <__aeabi_fsub+0x2ce>
   100c2:	2b00      	cmp	r3, #0
   100c4:	d043      	beq.n	1014e <__aeabi_fsub+0x31a>
   100c6:	43c9      	mvns	r1, r1
   100c8:	2900      	cmp	r1, #0
   100ca:	d00b      	beq.n	100e4 <__aeabi_fsub+0x2b0>
   100cc:	28ff      	cmp	r0, #255	; 0xff
   100ce:	d039      	beq.n	10144 <__aeabi_fsub+0x310>
   100d0:	291b      	cmp	r1, #27
   100d2:	dc44      	bgt.n	1015e <__aeabi_fsub+0x32a>
   100d4:	001c      	movs	r4, r3
   100d6:	2720      	movs	r7, #32
   100d8:	40cc      	lsrs	r4, r1
   100da:	1a79      	subs	r1, r7, r1
   100dc:	408b      	lsls	r3, r1
   100de:	1e59      	subs	r1, r3, #1
   100e0:	418b      	sbcs	r3, r1
   100e2:	4323      	orrs	r3, r4
   100e4:	199b      	adds	r3, r3, r6
   100e6:	0004      	movs	r4, r0
   100e8:	e740      	b.n	ff6c <__aeabi_fsub+0x138>
   100ea:	2b00      	cmp	r3, #0
   100ec:	d11a      	bne.n	10124 <__aeabi_fsub+0x2f0>
   100ee:	2e00      	cmp	r6, #0
   100f0:	d124      	bne.n	1013c <__aeabi_fsub+0x308>
   100f2:	2780      	movs	r7, #128	; 0x80
   100f4:	2200      	movs	r2, #0
   100f6:	03ff      	lsls	r7, r7, #15
   100f8:	e71b      	b.n	ff32 <__aeabi_fsub+0xfe>
   100fa:	0033      	movs	r3, r6
   100fc:	0004      	movs	r4, r0
   100fe:	000d      	movs	r5, r1
   10100:	e6de      	b.n	fec0 <__aeabi_fsub+0x8c>
   10102:	28ff      	cmp	r0, #255	; 0xff
   10104:	d01e      	beq.n	10144 <__aeabi_fsub+0x310>
   10106:	2480      	movs	r4, #128	; 0x80
   10108:	04e4      	lsls	r4, r4, #19
   1010a:	4249      	negs	r1, r1
   1010c:	4323      	orrs	r3, r4
   1010e:	e7df      	b.n	100d0 <__aeabi_fsub+0x29c>
   10110:	2e00      	cmp	r6, #0
   10112:	d100      	bne.n	10116 <__aeabi_fsub+0x2e2>
   10114:	e6d4      	b.n	fec0 <__aeabi_fsub+0x8c>
   10116:	1b9f      	subs	r7, r3, r6
   10118:	017a      	lsls	r2, r7, #5
   1011a:	d400      	bmi.n	1011e <__aeabi_fsub+0x2ea>
   1011c:	e737      	b.n	ff8e <__aeabi_fsub+0x15a>
   1011e:	1af3      	subs	r3, r6, r3
   10120:	000d      	movs	r5, r1
   10122:	e6cd      	b.n	fec0 <__aeabi_fsub+0x8c>
   10124:	24ff      	movs	r4, #255	; 0xff
   10126:	2e00      	cmp	r6, #0
   10128:	d100      	bne.n	1012c <__aeabi_fsub+0x2f8>
   1012a:	e6c9      	b.n	fec0 <__aeabi_fsub+0x8c>
   1012c:	2280      	movs	r2, #128	; 0x80
   1012e:	4650      	mov	r0, sl
   10130:	03d2      	lsls	r2, r2, #15
   10132:	4210      	tst	r0, r2
   10134:	d0a4      	beq.n	10080 <__aeabi_fsub+0x24c>
   10136:	4660      	mov	r0, ip
   10138:	4210      	tst	r0, r2
   1013a:	d1a1      	bne.n	10080 <__aeabi_fsub+0x24c>
   1013c:	0033      	movs	r3, r6
   1013e:	000d      	movs	r5, r1
   10140:	24ff      	movs	r4, #255	; 0xff
   10142:	e6bd      	b.n	fec0 <__aeabi_fsub+0x8c>
   10144:	0033      	movs	r3, r6
   10146:	24ff      	movs	r4, #255	; 0xff
   10148:	e6ba      	b.n	fec0 <__aeabi_fsub+0x8c>
   1014a:	2301      	movs	r3, #1
   1014c:	e76e      	b.n	1002c <__aeabi_fsub+0x1f8>
   1014e:	0033      	movs	r3, r6
   10150:	0004      	movs	r4, r0
   10152:	e6b5      	b.n	fec0 <__aeabi_fsub+0x8c>
   10154:	2700      	movs	r7, #0
   10156:	2200      	movs	r2, #0
   10158:	e71c      	b.n	ff94 <__aeabi_fsub+0x160>
   1015a:	0033      	movs	r3, r6
   1015c:	e6b0      	b.n	fec0 <__aeabi_fsub+0x8c>
   1015e:	2301      	movs	r3, #1
   10160:	e7c0      	b.n	100e4 <__aeabi_fsub+0x2b0>
   10162:	46c0      	nop			; (mov r8, r8)
   10164:	7dffffff 	.word	0x7dffffff
   10168:	fbffffff 	.word	0xfbffffff

0001016c <__aeabi_f2iz>:
   1016c:	0241      	lsls	r1, r0, #9
   1016e:	0043      	lsls	r3, r0, #1
   10170:	0fc2      	lsrs	r2, r0, #31
   10172:	0a49      	lsrs	r1, r1, #9
   10174:	0e1b      	lsrs	r3, r3, #24
   10176:	2000      	movs	r0, #0
   10178:	2b7e      	cmp	r3, #126	; 0x7e
   1017a:	dd0d      	ble.n	10198 <__aeabi_f2iz+0x2c>
   1017c:	2b9d      	cmp	r3, #157	; 0x9d
   1017e:	dc0c      	bgt.n	1019a <__aeabi_f2iz+0x2e>
   10180:	2080      	movs	r0, #128	; 0x80
   10182:	0400      	lsls	r0, r0, #16
   10184:	4301      	orrs	r1, r0
   10186:	2b95      	cmp	r3, #149	; 0x95
   10188:	dc0a      	bgt.n	101a0 <__aeabi_f2iz+0x34>
   1018a:	2096      	movs	r0, #150	; 0x96
   1018c:	1ac3      	subs	r3, r0, r3
   1018e:	40d9      	lsrs	r1, r3
   10190:	4248      	negs	r0, r1
   10192:	2a00      	cmp	r2, #0
   10194:	d100      	bne.n	10198 <__aeabi_f2iz+0x2c>
   10196:	0008      	movs	r0, r1
   10198:	4770      	bx	lr
   1019a:	4b03      	ldr	r3, [pc, #12]	; (101a8 <__aeabi_f2iz+0x3c>)
   1019c:	18d0      	adds	r0, r2, r3
   1019e:	e7fb      	b.n	10198 <__aeabi_f2iz+0x2c>
   101a0:	3b96      	subs	r3, #150	; 0x96
   101a2:	4099      	lsls	r1, r3
   101a4:	e7f4      	b.n	10190 <__aeabi_f2iz+0x24>
   101a6:	46c0      	nop			; (mov r8, r8)
   101a8:	7fffffff 	.word	0x7fffffff

000101ac <__aeabi_i2f>:
   101ac:	b570      	push	{r4, r5, r6, lr}
   101ae:	2800      	cmp	r0, #0
   101b0:	d030      	beq.n	10214 <__aeabi_i2f+0x68>
   101b2:	17c3      	asrs	r3, r0, #31
   101b4:	18c4      	adds	r4, r0, r3
   101b6:	405c      	eors	r4, r3
   101b8:	0fc5      	lsrs	r5, r0, #31
   101ba:	0020      	movs	r0, r4
   101bc:	f000 feac 	bl	10f18 <__clzsi2>
   101c0:	239e      	movs	r3, #158	; 0x9e
   101c2:	1a1b      	subs	r3, r3, r0
   101c4:	2b96      	cmp	r3, #150	; 0x96
   101c6:	dc0d      	bgt.n	101e4 <__aeabi_i2f+0x38>
   101c8:	2296      	movs	r2, #150	; 0x96
   101ca:	1ad2      	subs	r2, r2, r3
   101cc:	4094      	lsls	r4, r2
   101ce:	002a      	movs	r2, r5
   101d0:	0264      	lsls	r4, r4, #9
   101d2:	0a64      	lsrs	r4, r4, #9
   101d4:	b2db      	uxtb	r3, r3
   101d6:	0264      	lsls	r4, r4, #9
   101d8:	05db      	lsls	r3, r3, #23
   101da:	0a60      	lsrs	r0, r4, #9
   101dc:	07d2      	lsls	r2, r2, #31
   101de:	4318      	orrs	r0, r3
   101e0:	4310      	orrs	r0, r2
   101e2:	bd70      	pop	{r4, r5, r6, pc}
   101e4:	2b99      	cmp	r3, #153	; 0x99
   101e6:	dc19      	bgt.n	1021c <__aeabi_i2f+0x70>
   101e8:	2299      	movs	r2, #153	; 0x99
   101ea:	1ad2      	subs	r2, r2, r3
   101ec:	2a00      	cmp	r2, #0
   101ee:	dd29      	ble.n	10244 <__aeabi_i2f+0x98>
   101f0:	4094      	lsls	r4, r2
   101f2:	0022      	movs	r2, r4
   101f4:	4c14      	ldr	r4, [pc, #80]	; (10248 <__aeabi_i2f+0x9c>)
   101f6:	4014      	ands	r4, r2
   101f8:	0751      	lsls	r1, r2, #29
   101fa:	d004      	beq.n	10206 <__aeabi_i2f+0x5a>
   101fc:	210f      	movs	r1, #15
   101fe:	400a      	ands	r2, r1
   10200:	2a04      	cmp	r2, #4
   10202:	d000      	beq.n	10206 <__aeabi_i2f+0x5a>
   10204:	3404      	adds	r4, #4
   10206:	0162      	lsls	r2, r4, #5
   10208:	d413      	bmi.n	10232 <__aeabi_i2f+0x86>
   1020a:	01a4      	lsls	r4, r4, #6
   1020c:	0a64      	lsrs	r4, r4, #9
   1020e:	b2db      	uxtb	r3, r3
   10210:	002a      	movs	r2, r5
   10212:	e7e0      	b.n	101d6 <__aeabi_i2f+0x2a>
   10214:	2200      	movs	r2, #0
   10216:	2300      	movs	r3, #0
   10218:	2400      	movs	r4, #0
   1021a:	e7dc      	b.n	101d6 <__aeabi_i2f+0x2a>
   1021c:	2205      	movs	r2, #5
   1021e:	0021      	movs	r1, r4
   10220:	1a12      	subs	r2, r2, r0
   10222:	40d1      	lsrs	r1, r2
   10224:	22b9      	movs	r2, #185	; 0xb9
   10226:	1ad2      	subs	r2, r2, r3
   10228:	4094      	lsls	r4, r2
   1022a:	1e62      	subs	r2, r4, #1
   1022c:	4194      	sbcs	r4, r2
   1022e:	430c      	orrs	r4, r1
   10230:	e7da      	b.n	101e8 <__aeabi_i2f+0x3c>
   10232:	4b05      	ldr	r3, [pc, #20]	; (10248 <__aeabi_i2f+0x9c>)
   10234:	002a      	movs	r2, r5
   10236:	401c      	ands	r4, r3
   10238:	239f      	movs	r3, #159	; 0x9f
   1023a:	01a4      	lsls	r4, r4, #6
   1023c:	1a1b      	subs	r3, r3, r0
   1023e:	0a64      	lsrs	r4, r4, #9
   10240:	b2db      	uxtb	r3, r3
   10242:	e7c8      	b.n	101d6 <__aeabi_i2f+0x2a>
   10244:	0022      	movs	r2, r4
   10246:	e7d5      	b.n	101f4 <__aeabi_i2f+0x48>
   10248:	fbffffff 	.word	0xfbffffff

0001024c <__aeabi_ui2f>:
   1024c:	b510      	push	{r4, lr}
   1024e:	1e04      	subs	r4, r0, #0
   10250:	d027      	beq.n	102a2 <__aeabi_ui2f+0x56>
   10252:	f000 fe61 	bl	10f18 <__clzsi2>
   10256:	239e      	movs	r3, #158	; 0x9e
   10258:	1a1b      	subs	r3, r3, r0
   1025a:	2b96      	cmp	r3, #150	; 0x96
   1025c:	dc0a      	bgt.n	10274 <__aeabi_ui2f+0x28>
   1025e:	2296      	movs	r2, #150	; 0x96
   10260:	1ad2      	subs	r2, r2, r3
   10262:	4094      	lsls	r4, r2
   10264:	0264      	lsls	r4, r4, #9
   10266:	0a64      	lsrs	r4, r4, #9
   10268:	b2db      	uxtb	r3, r3
   1026a:	0264      	lsls	r4, r4, #9
   1026c:	05db      	lsls	r3, r3, #23
   1026e:	0a60      	lsrs	r0, r4, #9
   10270:	4318      	orrs	r0, r3
   10272:	bd10      	pop	{r4, pc}
   10274:	2b99      	cmp	r3, #153	; 0x99
   10276:	dc17      	bgt.n	102a8 <__aeabi_ui2f+0x5c>
   10278:	2299      	movs	r2, #153	; 0x99
   1027a:	1ad2      	subs	r2, r2, r3
   1027c:	2a00      	cmp	r2, #0
   1027e:	dd27      	ble.n	102d0 <__aeabi_ui2f+0x84>
   10280:	4094      	lsls	r4, r2
   10282:	0022      	movs	r2, r4
   10284:	4c13      	ldr	r4, [pc, #76]	; (102d4 <__aeabi_ui2f+0x88>)
   10286:	4014      	ands	r4, r2
   10288:	0751      	lsls	r1, r2, #29
   1028a:	d004      	beq.n	10296 <__aeabi_ui2f+0x4a>
   1028c:	210f      	movs	r1, #15
   1028e:	400a      	ands	r2, r1
   10290:	2a04      	cmp	r2, #4
   10292:	d000      	beq.n	10296 <__aeabi_ui2f+0x4a>
   10294:	3404      	adds	r4, #4
   10296:	0162      	lsls	r2, r4, #5
   10298:	d412      	bmi.n	102c0 <__aeabi_ui2f+0x74>
   1029a:	01a4      	lsls	r4, r4, #6
   1029c:	0a64      	lsrs	r4, r4, #9
   1029e:	b2db      	uxtb	r3, r3
   102a0:	e7e3      	b.n	1026a <__aeabi_ui2f+0x1e>
   102a2:	2300      	movs	r3, #0
   102a4:	2400      	movs	r4, #0
   102a6:	e7e0      	b.n	1026a <__aeabi_ui2f+0x1e>
   102a8:	22b9      	movs	r2, #185	; 0xb9
   102aa:	0021      	movs	r1, r4
   102ac:	1ad2      	subs	r2, r2, r3
   102ae:	4091      	lsls	r1, r2
   102b0:	000a      	movs	r2, r1
   102b2:	1e51      	subs	r1, r2, #1
   102b4:	418a      	sbcs	r2, r1
   102b6:	2105      	movs	r1, #5
   102b8:	1a09      	subs	r1, r1, r0
   102ba:	40cc      	lsrs	r4, r1
   102bc:	4314      	orrs	r4, r2
   102be:	e7db      	b.n	10278 <__aeabi_ui2f+0x2c>
   102c0:	4b04      	ldr	r3, [pc, #16]	; (102d4 <__aeabi_ui2f+0x88>)
   102c2:	401c      	ands	r4, r3
   102c4:	239f      	movs	r3, #159	; 0x9f
   102c6:	01a4      	lsls	r4, r4, #6
   102c8:	1a1b      	subs	r3, r3, r0
   102ca:	0a64      	lsrs	r4, r4, #9
   102cc:	b2db      	uxtb	r3, r3
   102ce:	e7cc      	b.n	1026a <__aeabi_ui2f+0x1e>
   102d0:	0022      	movs	r2, r4
   102d2:	e7d7      	b.n	10284 <__aeabi_ui2f+0x38>
   102d4:	fbffffff 	.word	0xfbffffff

000102d8 <__aeabi_dmul>:
   102d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   102da:	4657      	mov	r7, sl
   102dc:	4645      	mov	r5, r8
   102de:	46de      	mov	lr, fp
   102e0:	464e      	mov	r6, r9
   102e2:	b5e0      	push	{r5, r6, r7, lr}
   102e4:	030c      	lsls	r4, r1, #12
   102e6:	4698      	mov	r8, r3
   102e8:	004e      	lsls	r6, r1, #1
   102ea:	0b23      	lsrs	r3, r4, #12
   102ec:	b087      	sub	sp, #28
   102ee:	0007      	movs	r7, r0
   102f0:	4692      	mov	sl, r2
   102f2:	469b      	mov	fp, r3
   102f4:	0d76      	lsrs	r6, r6, #21
   102f6:	0fcd      	lsrs	r5, r1, #31
   102f8:	2e00      	cmp	r6, #0
   102fa:	d06b      	beq.n	103d4 <__aeabi_dmul+0xfc>
   102fc:	4b6d      	ldr	r3, [pc, #436]	; (104b4 <__aeabi_dmul+0x1dc>)
   102fe:	429e      	cmp	r6, r3
   10300:	d035      	beq.n	1036e <__aeabi_dmul+0x96>
   10302:	2480      	movs	r4, #128	; 0x80
   10304:	465b      	mov	r3, fp
   10306:	0f42      	lsrs	r2, r0, #29
   10308:	0424      	lsls	r4, r4, #16
   1030a:	00db      	lsls	r3, r3, #3
   1030c:	4314      	orrs	r4, r2
   1030e:	431c      	orrs	r4, r3
   10310:	00c3      	lsls	r3, r0, #3
   10312:	4699      	mov	r9, r3
   10314:	4b68      	ldr	r3, [pc, #416]	; (104b8 <__aeabi_dmul+0x1e0>)
   10316:	46a3      	mov	fp, r4
   10318:	469c      	mov	ip, r3
   1031a:	2300      	movs	r3, #0
   1031c:	2700      	movs	r7, #0
   1031e:	4466      	add	r6, ip
   10320:	9302      	str	r3, [sp, #8]
   10322:	4643      	mov	r3, r8
   10324:	031c      	lsls	r4, r3, #12
   10326:	005a      	lsls	r2, r3, #1
   10328:	0fdb      	lsrs	r3, r3, #31
   1032a:	4650      	mov	r0, sl
   1032c:	0b24      	lsrs	r4, r4, #12
   1032e:	0d52      	lsrs	r2, r2, #21
   10330:	4698      	mov	r8, r3
   10332:	d100      	bne.n	10336 <__aeabi_dmul+0x5e>
   10334:	e076      	b.n	10424 <__aeabi_dmul+0x14c>
   10336:	4b5f      	ldr	r3, [pc, #380]	; (104b4 <__aeabi_dmul+0x1dc>)
   10338:	429a      	cmp	r2, r3
   1033a:	d06d      	beq.n	10418 <__aeabi_dmul+0x140>
   1033c:	2380      	movs	r3, #128	; 0x80
   1033e:	0f41      	lsrs	r1, r0, #29
   10340:	041b      	lsls	r3, r3, #16
   10342:	430b      	orrs	r3, r1
   10344:	495c      	ldr	r1, [pc, #368]	; (104b8 <__aeabi_dmul+0x1e0>)
   10346:	00e4      	lsls	r4, r4, #3
   10348:	468c      	mov	ip, r1
   1034a:	431c      	orrs	r4, r3
   1034c:	00c3      	lsls	r3, r0, #3
   1034e:	2000      	movs	r0, #0
   10350:	4462      	add	r2, ip
   10352:	4641      	mov	r1, r8
   10354:	18b6      	adds	r6, r6, r2
   10356:	4069      	eors	r1, r5
   10358:	1c72      	adds	r2, r6, #1
   1035a:	9101      	str	r1, [sp, #4]
   1035c:	4694      	mov	ip, r2
   1035e:	4307      	orrs	r7, r0
   10360:	2f0f      	cmp	r7, #15
   10362:	d900      	bls.n	10366 <__aeabi_dmul+0x8e>
   10364:	e0b0      	b.n	104c8 <__aeabi_dmul+0x1f0>
   10366:	4a55      	ldr	r2, [pc, #340]	; (104bc <__aeabi_dmul+0x1e4>)
   10368:	00bf      	lsls	r7, r7, #2
   1036a:	59d2      	ldr	r2, [r2, r7]
   1036c:	4697      	mov	pc, r2
   1036e:	465b      	mov	r3, fp
   10370:	4303      	orrs	r3, r0
   10372:	4699      	mov	r9, r3
   10374:	d000      	beq.n	10378 <__aeabi_dmul+0xa0>
   10376:	e087      	b.n	10488 <__aeabi_dmul+0x1b0>
   10378:	2300      	movs	r3, #0
   1037a:	469b      	mov	fp, r3
   1037c:	3302      	adds	r3, #2
   1037e:	2708      	movs	r7, #8
   10380:	9302      	str	r3, [sp, #8]
   10382:	e7ce      	b.n	10322 <__aeabi_dmul+0x4a>
   10384:	4642      	mov	r2, r8
   10386:	9201      	str	r2, [sp, #4]
   10388:	2802      	cmp	r0, #2
   1038a:	d067      	beq.n	1045c <__aeabi_dmul+0x184>
   1038c:	2803      	cmp	r0, #3
   1038e:	d100      	bne.n	10392 <__aeabi_dmul+0xba>
   10390:	e20e      	b.n	107b0 <__aeabi_dmul+0x4d8>
   10392:	2801      	cmp	r0, #1
   10394:	d000      	beq.n	10398 <__aeabi_dmul+0xc0>
   10396:	e162      	b.n	1065e <__aeabi_dmul+0x386>
   10398:	2300      	movs	r3, #0
   1039a:	2400      	movs	r4, #0
   1039c:	2200      	movs	r2, #0
   1039e:	4699      	mov	r9, r3
   103a0:	9901      	ldr	r1, [sp, #4]
   103a2:	4001      	ands	r1, r0
   103a4:	b2cd      	uxtb	r5, r1
   103a6:	2100      	movs	r1, #0
   103a8:	0312      	lsls	r2, r2, #12
   103aa:	0d0b      	lsrs	r3, r1, #20
   103ac:	0b12      	lsrs	r2, r2, #12
   103ae:	051b      	lsls	r3, r3, #20
   103b0:	4313      	orrs	r3, r2
   103b2:	4a43      	ldr	r2, [pc, #268]	; (104c0 <__aeabi_dmul+0x1e8>)
   103b4:	0524      	lsls	r4, r4, #20
   103b6:	4013      	ands	r3, r2
   103b8:	431c      	orrs	r4, r3
   103ba:	0064      	lsls	r4, r4, #1
   103bc:	07ed      	lsls	r5, r5, #31
   103be:	0864      	lsrs	r4, r4, #1
   103c0:	432c      	orrs	r4, r5
   103c2:	4648      	mov	r0, r9
   103c4:	0021      	movs	r1, r4
   103c6:	b007      	add	sp, #28
   103c8:	bc3c      	pop	{r2, r3, r4, r5}
   103ca:	4690      	mov	r8, r2
   103cc:	4699      	mov	r9, r3
   103ce:	46a2      	mov	sl, r4
   103d0:	46ab      	mov	fp, r5
   103d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   103d4:	4303      	orrs	r3, r0
   103d6:	4699      	mov	r9, r3
   103d8:	d04f      	beq.n	1047a <__aeabi_dmul+0x1a2>
   103da:	465b      	mov	r3, fp
   103dc:	2b00      	cmp	r3, #0
   103de:	d100      	bne.n	103e2 <__aeabi_dmul+0x10a>
   103e0:	e189      	b.n	106f6 <__aeabi_dmul+0x41e>
   103e2:	4658      	mov	r0, fp
   103e4:	f000 fd98 	bl	10f18 <__clzsi2>
   103e8:	0003      	movs	r3, r0
   103ea:	3b0b      	subs	r3, #11
   103ec:	2b1c      	cmp	r3, #28
   103ee:	dd00      	ble.n	103f2 <__aeabi_dmul+0x11a>
   103f0:	e17a      	b.n	106e8 <__aeabi_dmul+0x410>
   103f2:	221d      	movs	r2, #29
   103f4:	1ad3      	subs	r3, r2, r3
   103f6:	003a      	movs	r2, r7
   103f8:	0001      	movs	r1, r0
   103fa:	465c      	mov	r4, fp
   103fc:	40da      	lsrs	r2, r3
   103fe:	3908      	subs	r1, #8
   10400:	408c      	lsls	r4, r1
   10402:	0013      	movs	r3, r2
   10404:	408f      	lsls	r7, r1
   10406:	4323      	orrs	r3, r4
   10408:	469b      	mov	fp, r3
   1040a:	46b9      	mov	r9, r7
   1040c:	2300      	movs	r3, #0
   1040e:	4e2d      	ldr	r6, [pc, #180]	; (104c4 <__aeabi_dmul+0x1ec>)
   10410:	2700      	movs	r7, #0
   10412:	1a36      	subs	r6, r6, r0
   10414:	9302      	str	r3, [sp, #8]
   10416:	e784      	b.n	10322 <__aeabi_dmul+0x4a>
   10418:	4653      	mov	r3, sl
   1041a:	4323      	orrs	r3, r4
   1041c:	d12a      	bne.n	10474 <__aeabi_dmul+0x19c>
   1041e:	2400      	movs	r4, #0
   10420:	2002      	movs	r0, #2
   10422:	e796      	b.n	10352 <__aeabi_dmul+0x7a>
   10424:	4653      	mov	r3, sl
   10426:	4323      	orrs	r3, r4
   10428:	d020      	beq.n	1046c <__aeabi_dmul+0x194>
   1042a:	2c00      	cmp	r4, #0
   1042c:	d100      	bne.n	10430 <__aeabi_dmul+0x158>
   1042e:	e157      	b.n	106e0 <__aeabi_dmul+0x408>
   10430:	0020      	movs	r0, r4
   10432:	f000 fd71 	bl	10f18 <__clzsi2>
   10436:	0003      	movs	r3, r0
   10438:	3b0b      	subs	r3, #11
   1043a:	2b1c      	cmp	r3, #28
   1043c:	dd00      	ble.n	10440 <__aeabi_dmul+0x168>
   1043e:	e149      	b.n	106d4 <__aeabi_dmul+0x3fc>
   10440:	211d      	movs	r1, #29
   10442:	1acb      	subs	r3, r1, r3
   10444:	4651      	mov	r1, sl
   10446:	0002      	movs	r2, r0
   10448:	40d9      	lsrs	r1, r3
   1044a:	4653      	mov	r3, sl
   1044c:	3a08      	subs	r2, #8
   1044e:	4094      	lsls	r4, r2
   10450:	4093      	lsls	r3, r2
   10452:	430c      	orrs	r4, r1
   10454:	4a1b      	ldr	r2, [pc, #108]	; (104c4 <__aeabi_dmul+0x1ec>)
   10456:	1a12      	subs	r2, r2, r0
   10458:	2000      	movs	r0, #0
   1045a:	e77a      	b.n	10352 <__aeabi_dmul+0x7a>
   1045c:	2501      	movs	r5, #1
   1045e:	9b01      	ldr	r3, [sp, #4]
   10460:	4c14      	ldr	r4, [pc, #80]	; (104b4 <__aeabi_dmul+0x1dc>)
   10462:	401d      	ands	r5, r3
   10464:	2300      	movs	r3, #0
   10466:	2200      	movs	r2, #0
   10468:	4699      	mov	r9, r3
   1046a:	e79c      	b.n	103a6 <__aeabi_dmul+0xce>
   1046c:	2400      	movs	r4, #0
   1046e:	2200      	movs	r2, #0
   10470:	2001      	movs	r0, #1
   10472:	e76e      	b.n	10352 <__aeabi_dmul+0x7a>
   10474:	4653      	mov	r3, sl
   10476:	2003      	movs	r0, #3
   10478:	e76b      	b.n	10352 <__aeabi_dmul+0x7a>
   1047a:	2300      	movs	r3, #0
   1047c:	469b      	mov	fp, r3
   1047e:	3301      	adds	r3, #1
   10480:	2704      	movs	r7, #4
   10482:	2600      	movs	r6, #0
   10484:	9302      	str	r3, [sp, #8]
   10486:	e74c      	b.n	10322 <__aeabi_dmul+0x4a>
   10488:	2303      	movs	r3, #3
   1048a:	4681      	mov	r9, r0
   1048c:	270c      	movs	r7, #12
   1048e:	9302      	str	r3, [sp, #8]
   10490:	e747      	b.n	10322 <__aeabi_dmul+0x4a>
   10492:	2280      	movs	r2, #128	; 0x80
   10494:	2300      	movs	r3, #0
   10496:	2500      	movs	r5, #0
   10498:	0312      	lsls	r2, r2, #12
   1049a:	4699      	mov	r9, r3
   1049c:	4c05      	ldr	r4, [pc, #20]	; (104b4 <__aeabi_dmul+0x1dc>)
   1049e:	e782      	b.n	103a6 <__aeabi_dmul+0xce>
   104a0:	465c      	mov	r4, fp
   104a2:	464b      	mov	r3, r9
   104a4:	9802      	ldr	r0, [sp, #8]
   104a6:	e76f      	b.n	10388 <__aeabi_dmul+0xb0>
   104a8:	465c      	mov	r4, fp
   104aa:	464b      	mov	r3, r9
   104ac:	9501      	str	r5, [sp, #4]
   104ae:	9802      	ldr	r0, [sp, #8]
   104b0:	e76a      	b.n	10388 <__aeabi_dmul+0xb0>
   104b2:	46c0      	nop			; (mov r8, r8)
   104b4:	000007ff 	.word	0x000007ff
   104b8:	fffffc01 	.word	0xfffffc01
   104bc:	000130ec 	.word	0x000130ec
   104c0:	800fffff 	.word	0x800fffff
   104c4:	fffffc0d 	.word	0xfffffc0d
   104c8:	464a      	mov	r2, r9
   104ca:	4649      	mov	r1, r9
   104cc:	0c17      	lsrs	r7, r2, #16
   104ce:	0c1a      	lsrs	r2, r3, #16
   104d0:	041b      	lsls	r3, r3, #16
   104d2:	0c1b      	lsrs	r3, r3, #16
   104d4:	0408      	lsls	r0, r1, #16
   104d6:	0019      	movs	r1, r3
   104d8:	0c00      	lsrs	r0, r0, #16
   104da:	4341      	muls	r1, r0
   104dc:	0015      	movs	r5, r2
   104de:	4688      	mov	r8, r1
   104e0:	0019      	movs	r1, r3
   104e2:	437d      	muls	r5, r7
   104e4:	4379      	muls	r1, r7
   104e6:	9503      	str	r5, [sp, #12]
   104e8:	4689      	mov	r9, r1
   104ea:	0029      	movs	r1, r5
   104ec:	0015      	movs	r5, r2
   104ee:	4345      	muls	r5, r0
   104f0:	444d      	add	r5, r9
   104f2:	9502      	str	r5, [sp, #8]
   104f4:	4645      	mov	r5, r8
   104f6:	0c2d      	lsrs	r5, r5, #16
   104f8:	46aa      	mov	sl, r5
   104fa:	9d02      	ldr	r5, [sp, #8]
   104fc:	4455      	add	r5, sl
   104fe:	45a9      	cmp	r9, r5
   10500:	d906      	bls.n	10510 <__aeabi_dmul+0x238>
   10502:	468a      	mov	sl, r1
   10504:	2180      	movs	r1, #128	; 0x80
   10506:	0249      	lsls	r1, r1, #9
   10508:	4689      	mov	r9, r1
   1050a:	44ca      	add	sl, r9
   1050c:	4651      	mov	r1, sl
   1050e:	9103      	str	r1, [sp, #12]
   10510:	0c29      	lsrs	r1, r5, #16
   10512:	9104      	str	r1, [sp, #16]
   10514:	4641      	mov	r1, r8
   10516:	0409      	lsls	r1, r1, #16
   10518:	042d      	lsls	r5, r5, #16
   1051a:	0c09      	lsrs	r1, r1, #16
   1051c:	4688      	mov	r8, r1
   1051e:	0029      	movs	r1, r5
   10520:	0c25      	lsrs	r5, r4, #16
   10522:	0424      	lsls	r4, r4, #16
   10524:	4441      	add	r1, r8
   10526:	0c24      	lsrs	r4, r4, #16
   10528:	9105      	str	r1, [sp, #20]
   1052a:	0021      	movs	r1, r4
   1052c:	4341      	muls	r1, r0
   1052e:	4688      	mov	r8, r1
   10530:	0021      	movs	r1, r4
   10532:	4379      	muls	r1, r7
   10534:	468a      	mov	sl, r1
   10536:	4368      	muls	r0, r5
   10538:	4641      	mov	r1, r8
   1053a:	4450      	add	r0, sl
   1053c:	4681      	mov	r9, r0
   1053e:	0c08      	lsrs	r0, r1, #16
   10540:	4448      	add	r0, r9
   10542:	436f      	muls	r7, r5
   10544:	4582      	cmp	sl, r0
   10546:	d903      	bls.n	10550 <__aeabi_dmul+0x278>
   10548:	2180      	movs	r1, #128	; 0x80
   1054a:	0249      	lsls	r1, r1, #9
   1054c:	4689      	mov	r9, r1
   1054e:	444f      	add	r7, r9
   10550:	0c01      	lsrs	r1, r0, #16
   10552:	4689      	mov	r9, r1
   10554:	0039      	movs	r1, r7
   10556:	4449      	add	r1, r9
   10558:	9102      	str	r1, [sp, #8]
   1055a:	4641      	mov	r1, r8
   1055c:	040f      	lsls	r7, r1, #16
   1055e:	9904      	ldr	r1, [sp, #16]
   10560:	0c3f      	lsrs	r7, r7, #16
   10562:	4688      	mov	r8, r1
   10564:	0400      	lsls	r0, r0, #16
   10566:	19c0      	adds	r0, r0, r7
   10568:	4480      	add	r8, r0
   1056a:	4641      	mov	r1, r8
   1056c:	9104      	str	r1, [sp, #16]
   1056e:	4659      	mov	r1, fp
   10570:	0c0f      	lsrs	r7, r1, #16
   10572:	0409      	lsls	r1, r1, #16
   10574:	0c09      	lsrs	r1, r1, #16
   10576:	4688      	mov	r8, r1
   10578:	4359      	muls	r1, r3
   1057a:	468a      	mov	sl, r1
   1057c:	0039      	movs	r1, r7
   1057e:	4351      	muls	r1, r2
   10580:	4689      	mov	r9, r1
   10582:	4641      	mov	r1, r8
   10584:	434a      	muls	r2, r1
   10586:	4651      	mov	r1, sl
   10588:	0c09      	lsrs	r1, r1, #16
   1058a:	468b      	mov	fp, r1
   1058c:	437b      	muls	r3, r7
   1058e:	18d2      	adds	r2, r2, r3
   10590:	445a      	add	r2, fp
   10592:	4293      	cmp	r3, r2
   10594:	d903      	bls.n	1059e <__aeabi_dmul+0x2c6>
   10596:	2380      	movs	r3, #128	; 0x80
   10598:	025b      	lsls	r3, r3, #9
   1059a:	469b      	mov	fp, r3
   1059c:	44d9      	add	r9, fp
   1059e:	4651      	mov	r1, sl
   105a0:	0409      	lsls	r1, r1, #16
   105a2:	0c09      	lsrs	r1, r1, #16
   105a4:	468a      	mov	sl, r1
   105a6:	4641      	mov	r1, r8
   105a8:	4361      	muls	r1, r4
   105aa:	437c      	muls	r4, r7
   105ac:	0c13      	lsrs	r3, r2, #16
   105ae:	0412      	lsls	r2, r2, #16
   105b0:	444b      	add	r3, r9
   105b2:	4452      	add	r2, sl
   105b4:	46a1      	mov	r9, r4
   105b6:	468a      	mov	sl, r1
   105b8:	003c      	movs	r4, r7
   105ba:	4641      	mov	r1, r8
   105bc:	436c      	muls	r4, r5
   105be:	434d      	muls	r5, r1
   105c0:	4651      	mov	r1, sl
   105c2:	444d      	add	r5, r9
   105c4:	0c0f      	lsrs	r7, r1, #16
   105c6:	197d      	adds	r5, r7, r5
   105c8:	45a9      	cmp	r9, r5
   105ca:	d903      	bls.n	105d4 <__aeabi_dmul+0x2fc>
   105cc:	2180      	movs	r1, #128	; 0x80
   105ce:	0249      	lsls	r1, r1, #9
   105d0:	4688      	mov	r8, r1
   105d2:	4444      	add	r4, r8
   105d4:	9f04      	ldr	r7, [sp, #16]
   105d6:	9903      	ldr	r1, [sp, #12]
   105d8:	46b8      	mov	r8, r7
   105da:	4441      	add	r1, r8
   105dc:	468b      	mov	fp, r1
   105de:	4583      	cmp	fp, r0
   105e0:	4180      	sbcs	r0, r0
   105e2:	4241      	negs	r1, r0
   105e4:	4688      	mov	r8, r1
   105e6:	4651      	mov	r1, sl
   105e8:	0408      	lsls	r0, r1, #16
   105ea:	042f      	lsls	r7, r5, #16
   105ec:	0c00      	lsrs	r0, r0, #16
   105ee:	183f      	adds	r7, r7, r0
   105f0:	4658      	mov	r0, fp
   105f2:	9902      	ldr	r1, [sp, #8]
   105f4:	1810      	adds	r0, r2, r0
   105f6:	4689      	mov	r9, r1
   105f8:	4290      	cmp	r0, r2
   105fa:	4192      	sbcs	r2, r2
   105fc:	444f      	add	r7, r9
   105fe:	46ba      	mov	sl, r7
   10600:	4252      	negs	r2, r2
   10602:	4699      	mov	r9, r3
   10604:	4693      	mov	fp, r2
   10606:	44c2      	add	sl, r8
   10608:	44d1      	add	r9, sl
   1060a:	44cb      	add	fp, r9
   1060c:	428f      	cmp	r7, r1
   1060e:	41bf      	sbcs	r7, r7
   10610:	45c2      	cmp	sl, r8
   10612:	4189      	sbcs	r1, r1
   10614:	4599      	cmp	r9, r3
   10616:	419b      	sbcs	r3, r3
   10618:	4593      	cmp	fp, r2
   1061a:	4192      	sbcs	r2, r2
   1061c:	427f      	negs	r7, r7
   1061e:	4249      	negs	r1, r1
   10620:	0c2d      	lsrs	r5, r5, #16
   10622:	4252      	negs	r2, r2
   10624:	430f      	orrs	r7, r1
   10626:	425b      	negs	r3, r3
   10628:	4313      	orrs	r3, r2
   1062a:	197f      	adds	r7, r7, r5
   1062c:	18ff      	adds	r7, r7, r3
   1062e:	465b      	mov	r3, fp
   10630:	193c      	adds	r4, r7, r4
   10632:	0ddb      	lsrs	r3, r3, #23
   10634:	9a05      	ldr	r2, [sp, #20]
   10636:	0264      	lsls	r4, r4, #9
   10638:	431c      	orrs	r4, r3
   1063a:	0243      	lsls	r3, r0, #9
   1063c:	4313      	orrs	r3, r2
   1063e:	1e5d      	subs	r5, r3, #1
   10640:	41ab      	sbcs	r3, r5
   10642:	465a      	mov	r2, fp
   10644:	0dc0      	lsrs	r0, r0, #23
   10646:	4303      	orrs	r3, r0
   10648:	0252      	lsls	r2, r2, #9
   1064a:	4313      	orrs	r3, r2
   1064c:	01e2      	lsls	r2, r4, #7
   1064e:	d556      	bpl.n	106fe <__aeabi_dmul+0x426>
   10650:	2001      	movs	r0, #1
   10652:	085a      	lsrs	r2, r3, #1
   10654:	4003      	ands	r3, r0
   10656:	4313      	orrs	r3, r2
   10658:	07e2      	lsls	r2, r4, #31
   1065a:	4313      	orrs	r3, r2
   1065c:	0864      	lsrs	r4, r4, #1
   1065e:	485a      	ldr	r0, [pc, #360]	; (107c8 <__aeabi_dmul+0x4f0>)
   10660:	4460      	add	r0, ip
   10662:	2800      	cmp	r0, #0
   10664:	dd4d      	ble.n	10702 <__aeabi_dmul+0x42a>
   10666:	075a      	lsls	r2, r3, #29
   10668:	d009      	beq.n	1067e <__aeabi_dmul+0x3a6>
   1066a:	220f      	movs	r2, #15
   1066c:	401a      	ands	r2, r3
   1066e:	2a04      	cmp	r2, #4
   10670:	d005      	beq.n	1067e <__aeabi_dmul+0x3a6>
   10672:	1d1a      	adds	r2, r3, #4
   10674:	429a      	cmp	r2, r3
   10676:	419b      	sbcs	r3, r3
   10678:	425b      	negs	r3, r3
   1067a:	18e4      	adds	r4, r4, r3
   1067c:	0013      	movs	r3, r2
   1067e:	01e2      	lsls	r2, r4, #7
   10680:	d504      	bpl.n	1068c <__aeabi_dmul+0x3b4>
   10682:	2080      	movs	r0, #128	; 0x80
   10684:	4a51      	ldr	r2, [pc, #324]	; (107cc <__aeabi_dmul+0x4f4>)
   10686:	00c0      	lsls	r0, r0, #3
   10688:	4014      	ands	r4, r2
   1068a:	4460      	add	r0, ip
   1068c:	4a50      	ldr	r2, [pc, #320]	; (107d0 <__aeabi_dmul+0x4f8>)
   1068e:	4290      	cmp	r0, r2
   10690:	dd00      	ble.n	10694 <__aeabi_dmul+0x3bc>
   10692:	e6e3      	b.n	1045c <__aeabi_dmul+0x184>
   10694:	2501      	movs	r5, #1
   10696:	08db      	lsrs	r3, r3, #3
   10698:	0762      	lsls	r2, r4, #29
   1069a:	431a      	orrs	r2, r3
   1069c:	0264      	lsls	r4, r4, #9
   1069e:	9b01      	ldr	r3, [sp, #4]
   106a0:	4691      	mov	r9, r2
   106a2:	0b22      	lsrs	r2, r4, #12
   106a4:	0544      	lsls	r4, r0, #21
   106a6:	0d64      	lsrs	r4, r4, #21
   106a8:	401d      	ands	r5, r3
   106aa:	e67c      	b.n	103a6 <__aeabi_dmul+0xce>
   106ac:	2280      	movs	r2, #128	; 0x80
   106ae:	4659      	mov	r1, fp
   106b0:	0312      	lsls	r2, r2, #12
   106b2:	4211      	tst	r1, r2
   106b4:	d008      	beq.n	106c8 <__aeabi_dmul+0x3f0>
   106b6:	4214      	tst	r4, r2
   106b8:	d106      	bne.n	106c8 <__aeabi_dmul+0x3f0>
   106ba:	4322      	orrs	r2, r4
   106bc:	0312      	lsls	r2, r2, #12
   106be:	0b12      	lsrs	r2, r2, #12
   106c0:	4645      	mov	r5, r8
   106c2:	4699      	mov	r9, r3
   106c4:	4c43      	ldr	r4, [pc, #268]	; (107d4 <__aeabi_dmul+0x4fc>)
   106c6:	e66e      	b.n	103a6 <__aeabi_dmul+0xce>
   106c8:	465b      	mov	r3, fp
   106ca:	431a      	orrs	r2, r3
   106cc:	0312      	lsls	r2, r2, #12
   106ce:	0b12      	lsrs	r2, r2, #12
   106d0:	4c40      	ldr	r4, [pc, #256]	; (107d4 <__aeabi_dmul+0x4fc>)
   106d2:	e668      	b.n	103a6 <__aeabi_dmul+0xce>
   106d4:	0003      	movs	r3, r0
   106d6:	4654      	mov	r4, sl
   106d8:	3b28      	subs	r3, #40	; 0x28
   106da:	409c      	lsls	r4, r3
   106dc:	2300      	movs	r3, #0
   106de:	e6b9      	b.n	10454 <__aeabi_dmul+0x17c>
   106e0:	f000 fc1a 	bl	10f18 <__clzsi2>
   106e4:	3020      	adds	r0, #32
   106e6:	e6a6      	b.n	10436 <__aeabi_dmul+0x15e>
   106e8:	0003      	movs	r3, r0
   106ea:	3b28      	subs	r3, #40	; 0x28
   106ec:	409f      	lsls	r7, r3
   106ee:	2300      	movs	r3, #0
   106f0:	46bb      	mov	fp, r7
   106f2:	4699      	mov	r9, r3
   106f4:	e68a      	b.n	1040c <__aeabi_dmul+0x134>
   106f6:	f000 fc0f 	bl	10f18 <__clzsi2>
   106fa:	3020      	adds	r0, #32
   106fc:	e674      	b.n	103e8 <__aeabi_dmul+0x110>
   106fe:	46b4      	mov	ip, r6
   10700:	e7ad      	b.n	1065e <__aeabi_dmul+0x386>
   10702:	2501      	movs	r5, #1
   10704:	1a2a      	subs	r2, r5, r0
   10706:	2a38      	cmp	r2, #56	; 0x38
   10708:	dd06      	ble.n	10718 <__aeabi_dmul+0x440>
   1070a:	9b01      	ldr	r3, [sp, #4]
   1070c:	2400      	movs	r4, #0
   1070e:	401d      	ands	r5, r3
   10710:	2300      	movs	r3, #0
   10712:	2200      	movs	r2, #0
   10714:	4699      	mov	r9, r3
   10716:	e646      	b.n	103a6 <__aeabi_dmul+0xce>
   10718:	2a1f      	cmp	r2, #31
   1071a:	dc21      	bgt.n	10760 <__aeabi_dmul+0x488>
   1071c:	2520      	movs	r5, #32
   1071e:	0020      	movs	r0, r4
   10720:	1aad      	subs	r5, r5, r2
   10722:	001e      	movs	r6, r3
   10724:	40ab      	lsls	r3, r5
   10726:	40a8      	lsls	r0, r5
   10728:	40d6      	lsrs	r6, r2
   1072a:	1e5d      	subs	r5, r3, #1
   1072c:	41ab      	sbcs	r3, r5
   1072e:	4330      	orrs	r0, r6
   10730:	4318      	orrs	r0, r3
   10732:	40d4      	lsrs	r4, r2
   10734:	0743      	lsls	r3, r0, #29
   10736:	d009      	beq.n	1074c <__aeabi_dmul+0x474>
   10738:	230f      	movs	r3, #15
   1073a:	4003      	ands	r3, r0
   1073c:	2b04      	cmp	r3, #4
   1073e:	d005      	beq.n	1074c <__aeabi_dmul+0x474>
   10740:	0003      	movs	r3, r0
   10742:	1d18      	adds	r0, r3, #4
   10744:	4298      	cmp	r0, r3
   10746:	419b      	sbcs	r3, r3
   10748:	425b      	negs	r3, r3
   1074a:	18e4      	adds	r4, r4, r3
   1074c:	0223      	lsls	r3, r4, #8
   1074e:	d521      	bpl.n	10794 <__aeabi_dmul+0x4bc>
   10750:	2501      	movs	r5, #1
   10752:	9b01      	ldr	r3, [sp, #4]
   10754:	2401      	movs	r4, #1
   10756:	401d      	ands	r5, r3
   10758:	2300      	movs	r3, #0
   1075a:	2200      	movs	r2, #0
   1075c:	4699      	mov	r9, r3
   1075e:	e622      	b.n	103a6 <__aeabi_dmul+0xce>
   10760:	251f      	movs	r5, #31
   10762:	0021      	movs	r1, r4
   10764:	426d      	negs	r5, r5
   10766:	1a28      	subs	r0, r5, r0
   10768:	40c1      	lsrs	r1, r0
   1076a:	0008      	movs	r0, r1
   1076c:	2a20      	cmp	r2, #32
   1076e:	d01d      	beq.n	107ac <__aeabi_dmul+0x4d4>
   10770:	355f      	adds	r5, #95	; 0x5f
   10772:	1aaa      	subs	r2, r5, r2
   10774:	4094      	lsls	r4, r2
   10776:	4323      	orrs	r3, r4
   10778:	1e5c      	subs	r4, r3, #1
   1077a:	41a3      	sbcs	r3, r4
   1077c:	2507      	movs	r5, #7
   1077e:	4303      	orrs	r3, r0
   10780:	401d      	ands	r5, r3
   10782:	2200      	movs	r2, #0
   10784:	2d00      	cmp	r5, #0
   10786:	d009      	beq.n	1079c <__aeabi_dmul+0x4c4>
   10788:	220f      	movs	r2, #15
   1078a:	2400      	movs	r4, #0
   1078c:	401a      	ands	r2, r3
   1078e:	0018      	movs	r0, r3
   10790:	2a04      	cmp	r2, #4
   10792:	d1d6      	bne.n	10742 <__aeabi_dmul+0x46a>
   10794:	0003      	movs	r3, r0
   10796:	0765      	lsls	r5, r4, #29
   10798:	0264      	lsls	r4, r4, #9
   1079a:	0b22      	lsrs	r2, r4, #12
   1079c:	08db      	lsrs	r3, r3, #3
   1079e:	432b      	orrs	r3, r5
   107a0:	2501      	movs	r5, #1
   107a2:	4699      	mov	r9, r3
   107a4:	9b01      	ldr	r3, [sp, #4]
   107a6:	2400      	movs	r4, #0
   107a8:	401d      	ands	r5, r3
   107aa:	e5fc      	b.n	103a6 <__aeabi_dmul+0xce>
   107ac:	2400      	movs	r4, #0
   107ae:	e7e2      	b.n	10776 <__aeabi_dmul+0x49e>
   107b0:	2280      	movs	r2, #128	; 0x80
   107b2:	2501      	movs	r5, #1
   107b4:	0312      	lsls	r2, r2, #12
   107b6:	4322      	orrs	r2, r4
   107b8:	9901      	ldr	r1, [sp, #4]
   107ba:	0312      	lsls	r2, r2, #12
   107bc:	0b12      	lsrs	r2, r2, #12
   107be:	400d      	ands	r5, r1
   107c0:	4699      	mov	r9, r3
   107c2:	4c04      	ldr	r4, [pc, #16]	; (107d4 <__aeabi_dmul+0x4fc>)
   107c4:	e5ef      	b.n	103a6 <__aeabi_dmul+0xce>
   107c6:	46c0      	nop			; (mov r8, r8)
   107c8:	000003ff 	.word	0x000003ff
   107cc:	feffffff 	.word	0xfeffffff
   107d0:	000007fe 	.word	0x000007fe
   107d4:	000007ff 	.word	0x000007ff

000107d8 <__aeabi_dsub>:
   107d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   107da:	4646      	mov	r6, r8
   107dc:	46d6      	mov	lr, sl
   107de:	464f      	mov	r7, r9
   107e0:	030c      	lsls	r4, r1, #12
   107e2:	b5c0      	push	{r6, r7, lr}
   107e4:	0fcd      	lsrs	r5, r1, #31
   107e6:	004e      	lsls	r6, r1, #1
   107e8:	0a61      	lsrs	r1, r4, #9
   107ea:	0f44      	lsrs	r4, r0, #29
   107ec:	430c      	orrs	r4, r1
   107ee:	00c1      	lsls	r1, r0, #3
   107f0:	0058      	lsls	r0, r3, #1
   107f2:	0d40      	lsrs	r0, r0, #21
   107f4:	4684      	mov	ip, r0
   107f6:	468a      	mov	sl, r1
   107f8:	000f      	movs	r7, r1
   107fa:	0319      	lsls	r1, r3, #12
   107fc:	0f50      	lsrs	r0, r2, #29
   107fe:	0a49      	lsrs	r1, r1, #9
   10800:	4301      	orrs	r1, r0
   10802:	48c6      	ldr	r0, [pc, #792]	; (10b1c <__aeabi_dsub+0x344>)
   10804:	0d76      	lsrs	r6, r6, #21
   10806:	46a8      	mov	r8, r5
   10808:	0fdb      	lsrs	r3, r3, #31
   1080a:	00d2      	lsls	r2, r2, #3
   1080c:	4584      	cmp	ip, r0
   1080e:	d100      	bne.n	10812 <__aeabi_dsub+0x3a>
   10810:	e0d8      	b.n	109c4 <__aeabi_dsub+0x1ec>
   10812:	2001      	movs	r0, #1
   10814:	4043      	eors	r3, r0
   10816:	42ab      	cmp	r3, r5
   10818:	d100      	bne.n	1081c <__aeabi_dsub+0x44>
   1081a:	e0a6      	b.n	1096a <__aeabi_dsub+0x192>
   1081c:	4660      	mov	r0, ip
   1081e:	1a35      	subs	r5, r6, r0
   10820:	2d00      	cmp	r5, #0
   10822:	dc00      	bgt.n	10826 <__aeabi_dsub+0x4e>
   10824:	e105      	b.n	10a32 <__aeabi_dsub+0x25a>
   10826:	2800      	cmp	r0, #0
   10828:	d110      	bne.n	1084c <__aeabi_dsub+0x74>
   1082a:	000b      	movs	r3, r1
   1082c:	4313      	orrs	r3, r2
   1082e:	d100      	bne.n	10832 <__aeabi_dsub+0x5a>
   10830:	e0d7      	b.n	109e2 <__aeabi_dsub+0x20a>
   10832:	1e6b      	subs	r3, r5, #1
   10834:	2b00      	cmp	r3, #0
   10836:	d000      	beq.n	1083a <__aeabi_dsub+0x62>
   10838:	e14b      	b.n	10ad2 <__aeabi_dsub+0x2fa>
   1083a:	4653      	mov	r3, sl
   1083c:	1a9f      	subs	r7, r3, r2
   1083e:	45ba      	cmp	sl, r7
   10840:	4180      	sbcs	r0, r0
   10842:	1a64      	subs	r4, r4, r1
   10844:	4240      	negs	r0, r0
   10846:	1a24      	subs	r4, r4, r0
   10848:	2601      	movs	r6, #1
   1084a:	e01e      	b.n	1088a <__aeabi_dsub+0xb2>
   1084c:	4bb3      	ldr	r3, [pc, #716]	; (10b1c <__aeabi_dsub+0x344>)
   1084e:	429e      	cmp	r6, r3
   10850:	d048      	beq.n	108e4 <__aeabi_dsub+0x10c>
   10852:	2380      	movs	r3, #128	; 0x80
   10854:	041b      	lsls	r3, r3, #16
   10856:	4319      	orrs	r1, r3
   10858:	2d38      	cmp	r5, #56	; 0x38
   1085a:	dd00      	ble.n	1085e <__aeabi_dsub+0x86>
   1085c:	e119      	b.n	10a92 <__aeabi_dsub+0x2ba>
   1085e:	2d1f      	cmp	r5, #31
   10860:	dd00      	ble.n	10864 <__aeabi_dsub+0x8c>
   10862:	e14c      	b.n	10afe <__aeabi_dsub+0x326>
   10864:	2320      	movs	r3, #32
   10866:	000f      	movs	r7, r1
   10868:	1b5b      	subs	r3, r3, r5
   1086a:	0010      	movs	r0, r2
   1086c:	409a      	lsls	r2, r3
   1086e:	409f      	lsls	r7, r3
   10870:	40e8      	lsrs	r0, r5
   10872:	1e53      	subs	r3, r2, #1
   10874:	419a      	sbcs	r2, r3
   10876:	40e9      	lsrs	r1, r5
   10878:	4307      	orrs	r7, r0
   1087a:	4317      	orrs	r7, r2
   1087c:	4653      	mov	r3, sl
   1087e:	1bdf      	subs	r7, r3, r7
   10880:	1a61      	subs	r1, r4, r1
   10882:	45ba      	cmp	sl, r7
   10884:	41a4      	sbcs	r4, r4
   10886:	4264      	negs	r4, r4
   10888:	1b0c      	subs	r4, r1, r4
   1088a:	0223      	lsls	r3, r4, #8
   1088c:	d400      	bmi.n	10890 <__aeabi_dsub+0xb8>
   1088e:	e0c5      	b.n	10a1c <__aeabi_dsub+0x244>
   10890:	0264      	lsls	r4, r4, #9
   10892:	0a65      	lsrs	r5, r4, #9
   10894:	2d00      	cmp	r5, #0
   10896:	d100      	bne.n	1089a <__aeabi_dsub+0xc2>
   10898:	e0f6      	b.n	10a88 <__aeabi_dsub+0x2b0>
   1089a:	0028      	movs	r0, r5
   1089c:	f000 fb3c 	bl	10f18 <__clzsi2>
   108a0:	0003      	movs	r3, r0
   108a2:	3b08      	subs	r3, #8
   108a4:	2b1f      	cmp	r3, #31
   108a6:	dd00      	ble.n	108aa <__aeabi_dsub+0xd2>
   108a8:	e0e9      	b.n	10a7e <__aeabi_dsub+0x2a6>
   108aa:	2220      	movs	r2, #32
   108ac:	003c      	movs	r4, r7
   108ae:	1ad2      	subs	r2, r2, r3
   108b0:	409d      	lsls	r5, r3
   108b2:	40d4      	lsrs	r4, r2
   108b4:	409f      	lsls	r7, r3
   108b6:	4325      	orrs	r5, r4
   108b8:	429e      	cmp	r6, r3
   108ba:	dd00      	ble.n	108be <__aeabi_dsub+0xe6>
   108bc:	e0db      	b.n	10a76 <__aeabi_dsub+0x29e>
   108be:	1b9e      	subs	r6, r3, r6
   108c0:	1c73      	adds	r3, r6, #1
   108c2:	2b1f      	cmp	r3, #31
   108c4:	dd00      	ble.n	108c8 <__aeabi_dsub+0xf0>
   108c6:	e10a      	b.n	10ade <__aeabi_dsub+0x306>
   108c8:	2220      	movs	r2, #32
   108ca:	0038      	movs	r0, r7
   108cc:	1ad2      	subs	r2, r2, r3
   108ce:	0029      	movs	r1, r5
   108d0:	4097      	lsls	r7, r2
   108d2:	002c      	movs	r4, r5
   108d4:	4091      	lsls	r1, r2
   108d6:	40d8      	lsrs	r0, r3
   108d8:	1e7a      	subs	r2, r7, #1
   108da:	4197      	sbcs	r7, r2
   108dc:	40dc      	lsrs	r4, r3
   108de:	2600      	movs	r6, #0
   108e0:	4301      	orrs	r1, r0
   108e2:	430f      	orrs	r7, r1
   108e4:	077b      	lsls	r3, r7, #29
   108e6:	d009      	beq.n	108fc <__aeabi_dsub+0x124>
   108e8:	230f      	movs	r3, #15
   108ea:	403b      	ands	r3, r7
   108ec:	2b04      	cmp	r3, #4
   108ee:	d005      	beq.n	108fc <__aeabi_dsub+0x124>
   108f0:	1d3b      	adds	r3, r7, #4
   108f2:	42bb      	cmp	r3, r7
   108f4:	41bf      	sbcs	r7, r7
   108f6:	427f      	negs	r7, r7
   108f8:	19e4      	adds	r4, r4, r7
   108fa:	001f      	movs	r7, r3
   108fc:	0223      	lsls	r3, r4, #8
   108fe:	d525      	bpl.n	1094c <__aeabi_dsub+0x174>
   10900:	4b86      	ldr	r3, [pc, #536]	; (10b1c <__aeabi_dsub+0x344>)
   10902:	3601      	adds	r6, #1
   10904:	429e      	cmp	r6, r3
   10906:	d100      	bne.n	1090a <__aeabi_dsub+0x132>
   10908:	e0af      	b.n	10a6a <__aeabi_dsub+0x292>
   1090a:	4b85      	ldr	r3, [pc, #532]	; (10b20 <__aeabi_dsub+0x348>)
   1090c:	2501      	movs	r5, #1
   1090e:	401c      	ands	r4, r3
   10910:	4643      	mov	r3, r8
   10912:	0762      	lsls	r2, r4, #29
   10914:	08ff      	lsrs	r7, r7, #3
   10916:	0264      	lsls	r4, r4, #9
   10918:	0576      	lsls	r6, r6, #21
   1091a:	4317      	orrs	r7, r2
   1091c:	0b24      	lsrs	r4, r4, #12
   1091e:	0d76      	lsrs	r6, r6, #21
   10920:	401d      	ands	r5, r3
   10922:	2100      	movs	r1, #0
   10924:	0324      	lsls	r4, r4, #12
   10926:	0b23      	lsrs	r3, r4, #12
   10928:	0d0c      	lsrs	r4, r1, #20
   1092a:	4a7e      	ldr	r2, [pc, #504]	; (10b24 <__aeabi_dsub+0x34c>)
   1092c:	0524      	lsls	r4, r4, #20
   1092e:	431c      	orrs	r4, r3
   10930:	4014      	ands	r4, r2
   10932:	0533      	lsls	r3, r6, #20
   10934:	4323      	orrs	r3, r4
   10936:	005b      	lsls	r3, r3, #1
   10938:	07ed      	lsls	r5, r5, #31
   1093a:	085b      	lsrs	r3, r3, #1
   1093c:	432b      	orrs	r3, r5
   1093e:	0038      	movs	r0, r7
   10940:	0019      	movs	r1, r3
   10942:	bc1c      	pop	{r2, r3, r4}
   10944:	4690      	mov	r8, r2
   10946:	4699      	mov	r9, r3
   10948:	46a2      	mov	sl, r4
   1094a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1094c:	2501      	movs	r5, #1
   1094e:	4643      	mov	r3, r8
   10950:	0762      	lsls	r2, r4, #29
   10952:	08ff      	lsrs	r7, r7, #3
   10954:	4317      	orrs	r7, r2
   10956:	08e4      	lsrs	r4, r4, #3
   10958:	401d      	ands	r5, r3
   1095a:	4b70      	ldr	r3, [pc, #448]	; (10b1c <__aeabi_dsub+0x344>)
   1095c:	429e      	cmp	r6, r3
   1095e:	d036      	beq.n	109ce <__aeabi_dsub+0x1f6>
   10960:	0324      	lsls	r4, r4, #12
   10962:	0576      	lsls	r6, r6, #21
   10964:	0b24      	lsrs	r4, r4, #12
   10966:	0d76      	lsrs	r6, r6, #21
   10968:	e7db      	b.n	10922 <__aeabi_dsub+0x14a>
   1096a:	4663      	mov	r3, ip
   1096c:	1af3      	subs	r3, r6, r3
   1096e:	2b00      	cmp	r3, #0
   10970:	dc00      	bgt.n	10974 <__aeabi_dsub+0x19c>
   10972:	e094      	b.n	10a9e <__aeabi_dsub+0x2c6>
   10974:	4660      	mov	r0, ip
   10976:	2800      	cmp	r0, #0
   10978:	d035      	beq.n	109e6 <__aeabi_dsub+0x20e>
   1097a:	4868      	ldr	r0, [pc, #416]	; (10b1c <__aeabi_dsub+0x344>)
   1097c:	4286      	cmp	r6, r0
   1097e:	d0b1      	beq.n	108e4 <__aeabi_dsub+0x10c>
   10980:	2780      	movs	r7, #128	; 0x80
   10982:	043f      	lsls	r7, r7, #16
   10984:	4339      	orrs	r1, r7
   10986:	2b38      	cmp	r3, #56	; 0x38
   10988:	dc00      	bgt.n	1098c <__aeabi_dsub+0x1b4>
   1098a:	e0fd      	b.n	10b88 <__aeabi_dsub+0x3b0>
   1098c:	430a      	orrs	r2, r1
   1098e:	0017      	movs	r7, r2
   10990:	2100      	movs	r1, #0
   10992:	1e7a      	subs	r2, r7, #1
   10994:	4197      	sbcs	r7, r2
   10996:	4457      	add	r7, sl
   10998:	4557      	cmp	r7, sl
   1099a:	4180      	sbcs	r0, r0
   1099c:	1909      	adds	r1, r1, r4
   1099e:	4244      	negs	r4, r0
   109a0:	190c      	adds	r4, r1, r4
   109a2:	0223      	lsls	r3, r4, #8
   109a4:	d53a      	bpl.n	10a1c <__aeabi_dsub+0x244>
   109a6:	4b5d      	ldr	r3, [pc, #372]	; (10b1c <__aeabi_dsub+0x344>)
   109a8:	3601      	adds	r6, #1
   109aa:	429e      	cmp	r6, r3
   109ac:	d100      	bne.n	109b0 <__aeabi_dsub+0x1d8>
   109ae:	e14b      	b.n	10c48 <__aeabi_dsub+0x470>
   109b0:	2201      	movs	r2, #1
   109b2:	4b5b      	ldr	r3, [pc, #364]	; (10b20 <__aeabi_dsub+0x348>)
   109b4:	401c      	ands	r4, r3
   109b6:	087b      	lsrs	r3, r7, #1
   109b8:	4017      	ands	r7, r2
   109ba:	431f      	orrs	r7, r3
   109bc:	07e2      	lsls	r2, r4, #31
   109be:	4317      	orrs	r7, r2
   109c0:	0864      	lsrs	r4, r4, #1
   109c2:	e78f      	b.n	108e4 <__aeabi_dsub+0x10c>
   109c4:	0008      	movs	r0, r1
   109c6:	4310      	orrs	r0, r2
   109c8:	d000      	beq.n	109cc <__aeabi_dsub+0x1f4>
   109ca:	e724      	b.n	10816 <__aeabi_dsub+0x3e>
   109cc:	e721      	b.n	10812 <__aeabi_dsub+0x3a>
   109ce:	0023      	movs	r3, r4
   109d0:	433b      	orrs	r3, r7
   109d2:	d100      	bne.n	109d6 <__aeabi_dsub+0x1fe>
   109d4:	e1b9      	b.n	10d4a <__aeabi_dsub+0x572>
   109d6:	2280      	movs	r2, #128	; 0x80
   109d8:	0312      	lsls	r2, r2, #12
   109da:	4314      	orrs	r4, r2
   109dc:	0324      	lsls	r4, r4, #12
   109de:	0b24      	lsrs	r4, r4, #12
   109e0:	e79f      	b.n	10922 <__aeabi_dsub+0x14a>
   109e2:	002e      	movs	r6, r5
   109e4:	e77e      	b.n	108e4 <__aeabi_dsub+0x10c>
   109e6:	0008      	movs	r0, r1
   109e8:	4310      	orrs	r0, r2
   109ea:	d100      	bne.n	109ee <__aeabi_dsub+0x216>
   109ec:	e0ca      	b.n	10b84 <__aeabi_dsub+0x3ac>
   109ee:	1e58      	subs	r0, r3, #1
   109f0:	4684      	mov	ip, r0
   109f2:	2800      	cmp	r0, #0
   109f4:	d000      	beq.n	109f8 <__aeabi_dsub+0x220>
   109f6:	e0e7      	b.n	10bc8 <__aeabi_dsub+0x3f0>
   109f8:	4452      	add	r2, sl
   109fa:	4552      	cmp	r2, sl
   109fc:	4180      	sbcs	r0, r0
   109fe:	1864      	adds	r4, r4, r1
   10a00:	4240      	negs	r0, r0
   10a02:	1824      	adds	r4, r4, r0
   10a04:	0017      	movs	r7, r2
   10a06:	2601      	movs	r6, #1
   10a08:	0223      	lsls	r3, r4, #8
   10a0a:	d507      	bpl.n	10a1c <__aeabi_dsub+0x244>
   10a0c:	2602      	movs	r6, #2
   10a0e:	e7cf      	b.n	109b0 <__aeabi_dsub+0x1d8>
   10a10:	4664      	mov	r4, ip
   10a12:	432c      	orrs	r4, r5
   10a14:	d100      	bne.n	10a18 <__aeabi_dsub+0x240>
   10a16:	e1b3      	b.n	10d80 <__aeabi_dsub+0x5a8>
   10a18:	002c      	movs	r4, r5
   10a1a:	4667      	mov	r7, ip
   10a1c:	077b      	lsls	r3, r7, #29
   10a1e:	d000      	beq.n	10a22 <__aeabi_dsub+0x24a>
   10a20:	e762      	b.n	108e8 <__aeabi_dsub+0x110>
   10a22:	0763      	lsls	r3, r4, #29
   10a24:	08ff      	lsrs	r7, r7, #3
   10a26:	431f      	orrs	r7, r3
   10a28:	2501      	movs	r5, #1
   10a2a:	4643      	mov	r3, r8
   10a2c:	08e4      	lsrs	r4, r4, #3
   10a2e:	401d      	ands	r5, r3
   10a30:	e793      	b.n	1095a <__aeabi_dsub+0x182>
   10a32:	2d00      	cmp	r5, #0
   10a34:	d178      	bne.n	10b28 <__aeabi_dsub+0x350>
   10a36:	1c75      	adds	r5, r6, #1
   10a38:	056d      	lsls	r5, r5, #21
   10a3a:	0d6d      	lsrs	r5, r5, #21
   10a3c:	2d01      	cmp	r5, #1
   10a3e:	dc00      	bgt.n	10a42 <__aeabi_dsub+0x26a>
   10a40:	e0f2      	b.n	10c28 <__aeabi_dsub+0x450>
   10a42:	4650      	mov	r0, sl
   10a44:	1a80      	subs	r0, r0, r2
   10a46:	4582      	cmp	sl, r0
   10a48:	41bf      	sbcs	r7, r7
   10a4a:	1a65      	subs	r5, r4, r1
   10a4c:	427f      	negs	r7, r7
   10a4e:	1bed      	subs	r5, r5, r7
   10a50:	4684      	mov	ip, r0
   10a52:	0228      	lsls	r0, r5, #8
   10a54:	d400      	bmi.n	10a58 <__aeabi_dsub+0x280>
   10a56:	e08c      	b.n	10b72 <__aeabi_dsub+0x39a>
   10a58:	4650      	mov	r0, sl
   10a5a:	1a17      	subs	r7, r2, r0
   10a5c:	42ba      	cmp	r2, r7
   10a5e:	4192      	sbcs	r2, r2
   10a60:	1b0c      	subs	r4, r1, r4
   10a62:	4255      	negs	r5, r2
   10a64:	1b65      	subs	r5, r4, r5
   10a66:	4698      	mov	r8, r3
   10a68:	e714      	b.n	10894 <__aeabi_dsub+0xbc>
   10a6a:	2501      	movs	r5, #1
   10a6c:	4643      	mov	r3, r8
   10a6e:	2400      	movs	r4, #0
   10a70:	401d      	ands	r5, r3
   10a72:	2700      	movs	r7, #0
   10a74:	e755      	b.n	10922 <__aeabi_dsub+0x14a>
   10a76:	4c2a      	ldr	r4, [pc, #168]	; (10b20 <__aeabi_dsub+0x348>)
   10a78:	1af6      	subs	r6, r6, r3
   10a7a:	402c      	ands	r4, r5
   10a7c:	e732      	b.n	108e4 <__aeabi_dsub+0x10c>
   10a7e:	003d      	movs	r5, r7
   10a80:	3828      	subs	r0, #40	; 0x28
   10a82:	4085      	lsls	r5, r0
   10a84:	2700      	movs	r7, #0
   10a86:	e717      	b.n	108b8 <__aeabi_dsub+0xe0>
   10a88:	0038      	movs	r0, r7
   10a8a:	f000 fa45 	bl	10f18 <__clzsi2>
   10a8e:	3020      	adds	r0, #32
   10a90:	e706      	b.n	108a0 <__aeabi_dsub+0xc8>
   10a92:	430a      	orrs	r2, r1
   10a94:	0017      	movs	r7, r2
   10a96:	2100      	movs	r1, #0
   10a98:	1e7a      	subs	r2, r7, #1
   10a9a:	4197      	sbcs	r7, r2
   10a9c:	e6ee      	b.n	1087c <__aeabi_dsub+0xa4>
   10a9e:	2b00      	cmp	r3, #0
   10aa0:	d000      	beq.n	10aa4 <__aeabi_dsub+0x2cc>
   10aa2:	e0e5      	b.n	10c70 <__aeabi_dsub+0x498>
   10aa4:	1c73      	adds	r3, r6, #1
   10aa6:	469c      	mov	ip, r3
   10aa8:	055b      	lsls	r3, r3, #21
   10aaa:	0d5b      	lsrs	r3, r3, #21
   10aac:	2b01      	cmp	r3, #1
   10aae:	dc00      	bgt.n	10ab2 <__aeabi_dsub+0x2da>
   10ab0:	e09f      	b.n	10bf2 <__aeabi_dsub+0x41a>
   10ab2:	4b1a      	ldr	r3, [pc, #104]	; (10b1c <__aeabi_dsub+0x344>)
   10ab4:	459c      	cmp	ip, r3
   10ab6:	d100      	bne.n	10aba <__aeabi_dsub+0x2e2>
   10ab8:	e0c5      	b.n	10c46 <__aeabi_dsub+0x46e>
   10aba:	4452      	add	r2, sl
   10abc:	4552      	cmp	r2, sl
   10abe:	4180      	sbcs	r0, r0
   10ac0:	1864      	adds	r4, r4, r1
   10ac2:	4240      	negs	r0, r0
   10ac4:	1824      	adds	r4, r4, r0
   10ac6:	07e7      	lsls	r7, r4, #31
   10ac8:	0852      	lsrs	r2, r2, #1
   10aca:	4317      	orrs	r7, r2
   10acc:	0864      	lsrs	r4, r4, #1
   10ace:	4666      	mov	r6, ip
   10ad0:	e708      	b.n	108e4 <__aeabi_dsub+0x10c>
   10ad2:	4812      	ldr	r0, [pc, #72]	; (10b1c <__aeabi_dsub+0x344>)
   10ad4:	4285      	cmp	r5, r0
   10ad6:	d100      	bne.n	10ada <__aeabi_dsub+0x302>
   10ad8:	e085      	b.n	10be6 <__aeabi_dsub+0x40e>
   10ada:	001d      	movs	r5, r3
   10adc:	e6bc      	b.n	10858 <__aeabi_dsub+0x80>
   10ade:	0029      	movs	r1, r5
   10ae0:	3e1f      	subs	r6, #31
   10ae2:	40f1      	lsrs	r1, r6
   10ae4:	2b20      	cmp	r3, #32
   10ae6:	d100      	bne.n	10aea <__aeabi_dsub+0x312>
   10ae8:	e07f      	b.n	10bea <__aeabi_dsub+0x412>
   10aea:	2240      	movs	r2, #64	; 0x40
   10aec:	1ad3      	subs	r3, r2, r3
   10aee:	409d      	lsls	r5, r3
   10af0:	432f      	orrs	r7, r5
   10af2:	1e7d      	subs	r5, r7, #1
   10af4:	41af      	sbcs	r7, r5
   10af6:	2400      	movs	r4, #0
   10af8:	430f      	orrs	r7, r1
   10afa:	2600      	movs	r6, #0
   10afc:	e78e      	b.n	10a1c <__aeabi_dsub+0x244>
   10afe:	002b      	movs	r3, r5
   10b00:	000f      	movs	r7, r1
   10b02:	3b20      	subs	r3, #32
   10b04:	40df      	lsrs	r7, r3
   10b06:	2d20      	cmp	r5, #32
   10b08:	d071      	beq.n	10bee <__aeabi_dsub+0x416>
   10b0a:	2340      	movs	r3, #64	; 0x40
   10b0c:	1b5d      	subs	r5, r3, r5
   10b0e:	40a9      	lsls	r1, r5
   10b10:	430a      	orrs	r2, r1
   10b12:	1e51      	subs	r1, r2, #1
   10b14:	418a      	sbcs	r2, r1
   10b16:	2100      	movs	r1, #0
   10b18:	4317      	orrs	r7, r2
   10b1a:	e6af      	b.n	1087c <__aeabi_dsub+0xa4>
   10b1c:	000007ff 	.word	0x000007ff
   10b20:	ff7fffff 	.word	0xff7fffff
   10b24:	800fffff 	.word	0x800fffff
   10b28:	2e00      	cmp	r6, #0
   10b2a:	d03e      	beq.n	10baa <__aeabi_dsub+0x3d2>
   10b2c:	4eb3      	ldr	r6, [pc, #716]	; (10dfc <__aeabi_dsub+0x624>)
   10b2e:	45b4      	cmp	ip, r6
   10b30:	d045      	beq.n	10bbe <__aeabi_dsub+0x3e6>
   10b32:	2680      	movs	r6, #128	; 0x80
   10b34:	0436      	lsls	r6, r6, #16
   10b36:	426d      	negs	r5, r5
   10b38:	4334      	orrs	r4, r6
   10b3a:	2d38      	cmp	r5, #56	; 0x38
   10b3c:	dd00      	ble.n	10b40 <__aeabi_dsub+0x368>
   10b3e:	e0a8      	b.n	10c92 <__aeabi_dsub+0x4ba>
   10b40:	2d1f      	cmp	r5, #31
   10b42:	dd00      	ble.n	10b46 <__aeabi_dsub+0x36e>
   10b44:	e11f      	b.n	10d86 <__aeabi_dsub+0x5ae>
   10b46:	2620      	movs	r6, #32
   10b48:	0027      	movs	r7, r4
   10b4a:	4650      	mov	r0, sl
   10b4c:	1b76      	subs	r6, r6, r5
   10b4e:	40b7      	lsls	r7, r6
   10b50:	40e8      	lsrs	r0, r5
   10b52:	4307      	orrs	r7, r0
   10b54:	4650      	mov	r0, sl
   10b56:	40b0      	lsls	r0, r6
   10b58:	1e46      	subs	r6, r0, #1
   10b5a:	41b0      	sbcs	r0, r6
   10b5c:	40ec      	lsrs	r4, r5
   10b5e:	4338      	orrs	r0, r7
   10b60:	1a17      	subs	r7, r2, r0
   10b62:	42ba      	cmp	r2, r7
   10b64:	4192      	sbcs	r2, r2
   10b66:	1b0c      	subs	r4, r1, r4
   10b68:	4252      	negs	r2, r2
   10b6a:	1aa4      	subs	r4, r4, r2
   10b6c:	4666      	mov	r6, ip
   10b6e:	4698      	mov	r8, r3
   10b70:	e68b      	b.n	1088a <__aeabi_dsub+0xb2>
   10b72:	4664      	mov	r4, ip
   10b74:	4667      	mov	r7, ip
   10b76:	432c      	orrs	r4, r5
   10b78:	d000      	beq.n	10b7c <__aeabi_dsub+0x3a4>
   10b7a:	e68b      	b.n	10894 <__aeabi_dsub+0xbc>
   10b7c:	2500      	movs	r5, #0
   10b7e:	2600      	movs	r6, #0
   10b80:	2700      	movs	r7, #0
   10b82:	e6ea      	b.n	1095a <__aeabi_dsub+0x182>
   10b84:	001e      	movs	r6, r3
   10b86:	e6ad      	b.n	108e4 <__aeabi_dsub+0x10c>
   10b88:	2b1f      	cmp	r3, #31
   10b8a:	dc60      	bgt.n	10c4e <__aeabi_dsub+0x476>
   10b8c:	2720      	movs	r7, #32
   10b8e:	1af8      	subs	r0, r7, r3
   10b90:	000f      	movs	r7, r1
   10b92:	4684      	mov	ip, r0
   10b94:	4087      	lsls	r7, r0
   10b96:	0010      	movs	r0, r2
   10b98:	40d8      	lsrs	r0, r3
   10b9a:	4307      	orrs	r7, r0
   10b9c:	4660      	mov	r0, ip
   10b9e:	4082      	lsls	r2, r0
   10ba0:	1e50      	subs	r0, r2, #1
   10ba2:	4182      	sbcs	r2, r0
   10ba4:	40d9      	lsrs	r1, r3
   10ba6:	4317      	orrs	r7, r2
   10ba8:	e6f5      	b.n	10996 <__aeabi_dsub+0x1be>
   10baa:	0026      	movs	r6, r4
   10bac:	4650      	mov	r0, sl
   10bae:	4306      	orrs	r6, r0
   10bb0:	d005      	beq.n	10bbe <__aeabi_dsub+0x3e6>
   10bb2:	43ed      	mvns	r5, r5
   10bb4:	2d00      	cmp	r5, #0
   10bb6:	d0d3      	beq.n	10b60 <__aeabi_dsub+0x388>
   10bb8:	4e90      	ldr	r6, [pc, #576]	; (10dfc <__aeabi_dsub+0x624>)
   10bba:	45b4      	cmp	ip, r6
   10bbc:	d1bd      	bne.n	10b3a <__aeabi_dsub+0x362>
   10bbe:	000c      	movs	r4, r1
   10bc0:	0017      	movs	r7, r2
   10bc2:	4666      	mov	r6, ip
   10bc4:	4698      	mov	r8, r3
   10bc6:	e68d      	b.n	108e4 <__aeabi_dsub+0x10c>
   10bc8:	488c      	ldr	r0, [pc, #560]	; (10dfc <__aeabi_dsub+0x624>)
   10bca:	4283      	cmp	r3, r0
   10bcc:	d00b      	beq.n	10be6 <__aeabi_dsub+0x40e>
   10bce:	4663      	mov	r3, ip
   10bd0:	e6d9      	b.n	10986 <__aeabi_dsub+0x1ae>
   10bd2:	2d00      	cmp	r5, #0
   10bd4:	d000      	beq.n	10bd8 <__aeabi_dsub+0x400>
   10bd6:	e096      	b.n	10d06 <__aeabi_dsub+0x52e>
   10bd8:	0008      	movs	r0, r1
   10bda:	4310      	orrs	r0, r2
   10bdc:	d100      	bne.n	10be0 <__aeabi_dsub+0x408>
   10bde:	e0e2      	b.n	10da6 <__aeabi_dsub+0x5ce>
   10be0:	000c      	movs	r4, r1
   10be2:	0017      	movs	r7, r2
   10be4:	4698      	mov	r8, r3
   10be6:	4e85      	ldr	r6, [pc, #532]	; (10dfc <__aeabi_dsub+0x624>)
   10be8:	e67c      	b.n	108e4 <__aeabi_dsub+0x10c>
   10bea:	2500      	movs	r5, #0
   10bec:	e780      	b.n	10af0 <__aeabi_dsub+0x318>
   10bee:	2100      	movs	r1, #0
   10bf0:	e78e      	b.n	10b10 <__aeabi_dsub+0x338>
   10bf2:	0023      	movs	r3, r4
   10bf4:	4650      	mov	r0, sl
   10bf6:	4303      	orrs	r3, r0
   10bf8:	2e00      	cmp	r6, #0
   10bfa:	d000      	beq.n	10bfe <__aeabi_dsub+0x426>
   10bfc:	e0a8      	b.n	10d50 <__aeabi_dsub+0x578>
   10bfe:	2b00      	cmp	r3, #0
   10c00:	d100      	bne.n	10c04 <__aeabi_dsub+0x42c>
   10c02:	e0de      	b.n	10dc2 <__aeabi_dsub+0x5ea>
   10c04:	000b      	movs	r3, r1
   10c06:	4313      	orrs	r3, r2
   10c08:	d100      	bne.n	10c0c <__aeabi_dsub+0x434>
   10c0a:	e66b      	b.n	108e4 <__aeabi_dsub+0x10c>
   10c0c:	4452      	add	r2, sl
   10c0e:	4552      	cmp	r2, sl
   10c10:	4180      	sbcs	r0, r0
   10c12:	1864      	adds	r4, r4, r1
   10c14:	4240      	negs	r0, r0
   10c16:	1824      	adds	r4, r4, r0
   10c18:	0017      	movs	r7, r2
   10c1a:	0223      	lsls	r3, r4, #8
   10c1c:	d400      	bmi.n	10c20 <__aeabi_dsub+0x448>
   10c1e:	e6fd      	b.n	10a1c <__aeabi_dsub+0x244>
   10c20:	4b77      	ldr	r3, [pc, #476]	; (10e00 <__aeabi_dsub+0x628>)
   10c22:	4666      	mov	r6, ip
   10c24:	401c      	ands	r4, r3
   10c26:	e65d      	b.n	108e4 <__aeabi_dsub+0x10c>
   10c28:	0025      	movs	r5, r4
   10c2a:	4650      	mov	r0, sl
   10c2c:	4305      	orrs	r5, r0
   10c2e:	2e00      	cmp	r6, #0
   10c30:	d1cf      	bne.n	10bd2 <__aeabi_dsub+0x3fa>
   10c32:	2d00      	cmp	r5, #0
   10c34:	d14f      	bne.n	10cd6 <__aeabi_dsub+0x4fe>
   10c36:	000c      	movs	r4, r1
   10c38:	4314      	orrs	r4, r2
   10c3a:	d100      	bne.n	10c3e <__aeabi_dsub+0x466>
   10c3c:	e0a0      	b.n	10d80 <__aeabi_dsub+0x5a8>
   10c3e:	000c      	movs	r4, r1
   10c40:	0017      	movs	r7, r2
   10c42:	4698      	mov	r8, r3
   10c44:	e64e      	b.n	108e4 <__aeabi_dsub+0x10c>
   10c46:	4666      	mov	r6, ip
   10c48:	2400      	movs	r4, #0
   10c4a:	2700      	movs	r7, #0
   10c4c:	e685      	b.n	1095a <__aeabi_dsub+0x182>
   10c4e:	001f      	movs	r7, r3
   10c50:	0008      	movs	r0, r1
   10c52:	3f20      	subs	r7, #32
   10c54:	40f8      	lsrs	r0, r7
   10c56:	0007      	movs	r7, r0
   10c58:	2b20      	cmp	r3, #32
   10c5a:	d100      	bne.n	10c5e <__aeabi_dsub+0x486>
   10c5c:	e08e      	b.n	10d7c <__aeabi_dsub+0x5a4>
   10c5e:	2040      	movs	r0, #64	; 0x40
   10c60:	1ac3      	subs	r3, r0, r3
   10c62:	4099      	lsls	r1, r3
   10c64:	430a      	orrs	r2, r1
   10c66:	1e51      	subs	r1, r2, #1
   10c68:	418a      	sbcs	r2, r1
   10c6a:	2100      	movs	r1, #0
   10c6c:	4317      	orrs	r7, r2
   10c6e:	e692      	b.n	10996 <__aeabi_dsub+0x1be>
   10c70:	2e00      	cmp	r6, #0
   10c72:	d114      	bne.n	10c9e <__aeabi_dsub+0x4c6>
   10c74:	0026      	movs	r6, r4
   10c76:	4650      	mov	r0, sl
   10c78:	4306      	orrs	r6, r0
   10c7a:	d062      	beq.n	10d42 <__aeabi_dsub+0x56a>
   10c7c:	43db      	mvns	r3, r3
   10c7e:	2b00      	cmp	r3, #0
   10c80:	d15c      	bne.n	10d3c <__aeabi_dsub+0x564>
   10c82:	1887      	adds	r7, r0, r2
   10c84:	4297      	cmp	r7, r2
   10c86:	4192      	sbcs	r2, r2
   10c88:	1864      	adds	r4, r4, r1
   10c8a:	4252      	negs	r2, r2
   10c8c:	18a4      	adds	r4, r4, r2
   10c8e:	4666      	mov	r6, ip
   10c90:	e687      	b.n	109a2 <__aeabi_dsub+0x1ca>
   10c92:	4650      	mov	r0, sl
   10c94:	4320      	orrs	r0, r4
   10c96:	1e44      	subs	r4, r0, #1
   10c98:	41a0      	sbcs	r0, r4
   10c9a:	2400      	movs	r4, #0
   10c9c:	e760      	b.n	10b60 <__aeabi_dsub+0x388>
   10c9e:	4e57      	ldr	r6, [pc, #348]	; (10dfc <__aeabi_dsub+0x624>)
   10ca0:	45b4      	cmp	ip, r6
   10ca2:	d04e      	beq.n	10d42 <__aeabi_dsub+0x56a>
   10ca4:	2680      	movs	r6, #128	; 0x80
   10ca6:	0436      	lsls	r6, r6, #16
   10ca8:	425b      	negs	r3, r3
   10caa:	4334      	orrs	r4, r6
   10cac:	2b38      	cmp	r3, #56	; 0x38
   10cae:	dd00      	ble.n	10cb2 <__aeabi_dsub+0x4da>
   10cb0:	e07f      	b.n	10db2 <__aeabi_dsub+0x5da>
   10cb2:	2b1f      	cmp	r3, #31
   10cb4:	dd00      	ble.n	10cb8 <__aeabi_dsub+0x4e0>
   10cb6:	e08b      	b.n	10dd0 <__aeabi_dsub+0x5f8>
   10cb8:	2620      	movs	r6, #32
   10cba:	0027      	movs	r7, r4
   10cbc:	4650      	mov	r0, sl
   10cbe:	1af6      	subs	r6, r6, r3
   10cc0:	40b7      	lsls	r7, r6
   10cc2:	40d8      	lsrs	r0, r3
   10cc4:	4307      	orrs	r7, r0
   10cc6:	4650      	mov	r0, sl
   10cc8:	40b0      	lsls	r0, r6
   10cca:	1e46      	subs	r6, r0, #1
   10ccc:	41b0      	sbcs	r0, r6
   10cce:	4307      	orrs	r7, r0
   10cd0:	40dc      	lsrs	r4, r3
   10cd2:	18bf      	adds	r7, r7, r2
   10cd4:	e7d6      	b.n	10c84 <__aeabi_dsub+0x4ac>
   10cd6:	000d      	movs	r5, r1
   10cd8:	4315      	orrs	r5, r2
   10cda:	d100      	bne.n	10cde <__aeabi_dsub+0x506>
   10cdc:	e602      	b.n	108e4 <__aeabi_dsub+0x10c>
   10cde:	4650      	mov	r0, sl
   10ce0:	1a80      	subs	r0, r0, r2
   10ce2:	4582      	cmp	sl, r0
   10ce4:	41bf      	sbcs	r7, r7
   10ce6:	1a65      	subs	r5, r4, r1
   10ce8:	427f      	negs	r7, r7
   10cea:	1bed      	subs	r5, r5, r7
   10cec:	4684      	mov	ip, r0
   10cee:	0228      	lsls	r0, r5, #8
   10cf0:	d400      	bmi.n	10cf4 <__aeabi_dsub+0x51c>
   10cf2:	e68d      	b.n	10a10 <__aeabi_dsub+0x238>
   10cf4:	4650      	mov	r0, sl
   10cf6:	1a17      	subs	r7, r2, r0
   10cf8:	42ba      	cmp	r2, r7
   10cfa:	4192      	sbcs	r2, r2
   10cfc:	1b0c      	subs	r4, r1, r4
   10cfe:	4252      	negs	r2, r2
   10d00:	1aa4      	subs	r4, r4, r2
   10d02:	4698      	mov	r8, r3
   10d04:	e5ee      	b.n	108e4 <__aeabi_dsub+0x10c>
   10d06:	000d      	movs	r5, r1
   10d08:	4315      	orrs	r5, r2
   10d0a:	d100      	bne.n	10d0e <__aeabi_dsub+0x536>
   10d0c:	e76b      	b.n	10be6 <__aeabi_dsub+0x40e>
   10d0e:	4650      	mov	r0, sl
   10d10:	0767      	lsls	r7, r4, #29
   10d12:	08c0      	lsrs	r0, r0, #3
   10d14:	4307      	orrs	r7, r0
   10d16:	2080      	movs	r0, #128	; 0x80
   10d18:	08e4      	lsrs	r4, r4, #3
   10d1a:	0300      	lsls	r0, r0, #12
   10d1c:	4204      	tst	r4, r0
   10d1e:	d007      	beq.n	10d30 <__aeabi_dsub+0x558>
   10d20:	08cd      	lsrs	r5, r1, #3
   10d22:	4205      	tst	r5, r0
   10d24:	d104      	bne.n	10d30 <__aeabi_dsub+0x558>
   10d26:	002c      	movs	r4, r5
   10d28:	4698      	mov	r8, r3
   10d2a:	08d7      	lsrs	r7, r2, #3
   10d2c:	0749      	lsls	r1, r1, #29
   10d2e:	430f      	orrs	r7, r1
   10d30:	0f7b      	lsrs	r3, r7, #29
   10d32:	00e4      	lsls	r4, r4, #3
   10d34:	431c      	orrs	r4, r3
   10d36:	00ff      	lsls	r7, r7, #3
   10d38:	4e30      	ldr	r6, [pc, #192]	; (10dfc <__aeabi_dsub+0x624>)
   10d3a:	e5d3      	b.n	108e4 <__aeabi_dsub+0x10c>
   10d3c:	4e2f      	ldr	r6, [pc, #188]	; (10dfc <__aeabi_dsub+0x624>)
   10d3e:	45b4      	cmp	ip, r6
   10d40:	d1b4      	bne.n	10cac <__aeabi_dsub+0x4d4>
   10d42:	000c      	movs	r4, r1
   10d44:	0017      	movs	r7, r2
   10d46:	4666      	mov	r6, ip
   10d48:	e5cc      	b.n	108e4 <__aeabi_dsub+0x10c>
   10d4a:	2700      	movs	r7, #0
   10d4c:	2400      	movs	r4, #0
   10d4e:	e5e8      	b.n	10922 <__aeabi_dsub+0x14a>
   10d50:	2b00      	cmp	r3, #0
   10d52:	d039      	beq.n	10dc8 <__aeabi_dsub+0x5f0>
   10d54:	000b      	movs	r3, r1
   10d56:	4313      	orrs	r3, r2
   10d58:	d100      	bne.n	10d5c <__aeabi_dsub+0x584>
   10d5a:	e744      	b.n	10be6 <__aeabi_dsub+0x40e>
   10d5c:	08c0      	lsrs	r0, r0, #3
   10d5e:	0767      	lsls	r7, r4, #29
   10d60:	4307      	orrs	r7, r0
   10d62:	2080      	movs	r0, #128	; 0x80
   10d64:	08e4      	lsrs	r4, r4, #3
   10d66:	0300      	lsls	r0, r0, #12
   10d68:	4204      	tst	r4, r0
   10d6a:	d0e1      	beq.n	10d30 <__aeabi_dsub+0x558>
   10d6c:	08cb      	lsrs	r3, r1, #3
   10d6e:	4203      	tst	r3, r0
   10d70:	d1de      	bne.n	10d30 <__aeabi_dsub+0x558>
   10d72:	08d7      	lsrs	r7, r2, #3
   10d74:	0749      	lsls	r1, r1, #29
   10d76:	430f      	orrs	r7, r1
   10d78:	001c      	movs	r4, r3
   10d7a:	e7d9      	b.n	10d30 <__aeabi_dsub+0x558>
   10d7c:	2100      	movs	r1, #0
   10d7e:	e771      	b.n	10c64 <__aeabi_dsub+0x48c>
   10d80:	2500      	movs	r5, #0
   10d82:	2700      	movs	r7, #0
   10d84:	e5e9      	b.n	1095a <__aeabi_dsub+0x182>
   10d86:	002e      	movs	r6, r5
   10d88:	0027      	movs	r7, r4
   10d8a:	3e20      	subs	r6, #32
   10d8c:	40f7      	lsrs	r7, r6
   10d8e:	2d20      	cmp	r5, #32
   10d90:	d02f      	beq.n	10df2 <__aeabi_dsub+0x61a>
   10d92:	2640      	movs	r6, #64	; 0x40
   10d94:	1b75      	subs	r5, r6, r5
   10d96:	40ac      	lsls	r4, r5
   10d98:	4650      	mov	r0, sl
   10d9a:	4320      	orrs	r0, r4
   10d9c:	1e44      	subs	r4, r0, #1
   10d9e:	41a0      	sbcs	r0, r4
   10da0:	2400      	movs	r4, #0
   10da2:	4338      	orrs	r0, r7
   10da4:	e6dc      	b.n	10b60 <__aeabi_dsub+0x388>
   10da6:	2480      	movs	r4, #128	; 0x80
   10da8:	2500      	movs	r5, #0
   10daa:	0324      	lsls	r4, r4, #12
   10dac:	4e13      	ldr	r6, [pc, #76]	; (10dfc <__aeabi_dsub+0x624>)
   10dae:	2700      	movs	r7, #0
   10db0:	e5d3      	b.n	1095a <__aeabi_dsub+0x182>
   10db2:	4650      	mov	r0, sl
   10db4:	4320      	orrs	r0, r4
   10db6:	0007      	movs	r7, r0
   10db8:	1e78      	subs	r0, r7, #1
   10dba:	4187      	sbcs	r7, r0
   10dbc:	2400      	movs	r4, #0
   10dbe:	18bf      	adds	r7, r7, r2
   10dc0:	e760      	b.n	10c84 <__aeabi_dsub+0x4ac>
   10dc2:	000c      	movs	r4, r1
   10dc4:	0017      	movs	r7, r2
   10dc6:	e58d      	b.n	108e4 <__aeabi_dsub+0x10c>
   10dc8:	000c      	movs	r4, r1
   10dca:	0017      	movs	r7, r2
   10dcc:	4e0b      	ldr	r6, [pc, #44]	; (10dfc <__aeabi_dsub+0x624>)
   10dce:	e589      	b.n	108e4 <__aeabi_dsub+0x10c>
   10dd0:	001e      	movs	r6, r3
   10dd2:	0027      	movs	r7, r4
   10dd4:	3e20      	subs	r6, #32
   10dd6:	40f7      	lsrs	r7, r6
   10dd8:	2b20      	cmp	r3, #32
   10dda:	d00c      	beq.n	10df6 <__aeabi_dsub+0x61e>
   10ddc:	2640      	movs	r6, #64	; 0x40
   10dde:	1af3      	subs	r3, r6, r3
   10de0:	409c      	lsls	r4, r3
   10de2:	4650      	mov	r0, sl
   10de4:	4320      	orrs	r0, r4
   10de6:	1e44      	subs	r4, r0, #1
   10de8:	41a0      	sbcs	r0, r4
   10dea:	4307      	orrs	r7, r0
   10dec:	2400      	movs	r4, #0
   10dee:	18bf      	adds	r7, r7, r2
   10df0:	e748      	b.n	10c84 <__aeabi_dsub+0x4ac>
   10df2:	2400      	movs	r4, #0
   10df4:	e7d0      	b.n	10d98 <__aeabi_dsub+0x5c0>
   10df6:	2400      	movs	r4, #0
   10df8:	e7f3      	b.n	10de2 <__aeabi_dsub+0x60a>
   10dfa:	46c0      	nop			; (mov r8, r8)
   10dfc:	000007ff 	.word	0x000007ff
   10e00:	ff7fffff 	.word	0xff7fffff

00010e04 <__aeabi_ui2d>:
   10e04:	b510      	push	{r4, lr}
   10e06:	1e04      	subs	r4, r0, #0
   10e08:	d028      	beq.n	10e5c <__aeabi_ui2d+0x58>
   10e0a:	f000 f885 	bl	10f18 <__clzsi2>
   10e0e:	4b15      	ldr	r3, [pc, #84]	; (10e64 <__aeabi_ui2d+0x60>)
   10e10:	4a15      	ldr	r2, [pc, #84]	; (10e68 <__aeabi_ui2d+0x64>)
   10e12:	1a1b      	subs	r3, r3, r0
   10e14:	1ad2      	subs	r2, r2, r3
   10e16:	2a1f      	cmp	r2, #31
   10e18:	dd15      	ble.n	10e46 <__aeabi_ui2d+0x42>
   10e1a:	4a14      	ldr	r2, [pc, #80]	; (10e6c <__aeabi_ui2d+0x68>)
   10e1c:	1ad2      	subs	r2, r2, r3
   10e1e:	4094      	lsls	r4, r2
   10e20:	2200      	movs	r2, #0
   10e22:	0324      	lsls	r4, r4, #12
   10e24:	055b      	lsls	r3, r3, #21
   10e26:	0b24      	lsrs	r4, r4, #12
   10e28:	0d5b      	lsrs	r3, r3, #21
   10e2a:	2100      	movs	r1, #0
   10e2c:	0010      	movs	r0, r2
   10e2e:	0324      	lsls	r4, r4, #12
   10e30:	0d0a      	lsrs	r2, r1, #20
   10e32:	0b24      	lsrs	r4, r4, #12
   10e34:	0512      	lsls	r2, r2, #20
   10e36:	4322      	orrs	r2, r4
   10e38:	4c0d      	ldr	r4, [pc, #52]	; (10e70 <__aeabi_ui2d+0x6c>)
   10e3a:	051b      	lsls	r3, r3, #20
   10e3c:	4022      	ands	r2, r4
   10e3e:	4313      	orrs	r3, r2
   10e40:	005b      	lsls	r3, r3, #1
   10e42:	0859      	lsrs	r1, r3, #1
   10e44:	bd10      	pop	{r4, pc}
   10e46:	0021      	movs	r1, r4
   10e48:	4091      	lsls	r1, r2
   10e4a:	000a      	movs	r2, r1
   10e4c:	210b      	movs	r1, #11
   10e4e:	1a08      	subs	r0, r1, r0
   10e50:	40c4      	lsrs	r4, r0
   10e52:	055b      	lsls	r3, r3, #21
   10e54:	0324      	lsls	r4, r4, #12
   10e56:	0b24      	lsrs	r4, r4, #12
   10e58:	0d5b      	lsrs	r3, r3, #21
   10e5a:	e7e6      	b.n	10e2a <__aeabi_ui2d+0x26>
   10e5c:	2300      	movs	r3, #0
   10e5e:	2400      	movs	r4, #0
   10e60:	2200      	movs	r2, #0
   10e62:	e7e2      	b.n	10e2a <__aeabi_ui2d+0x26>
   10e64:	0000041e 	.word	0x0000041e
   10e68:	00000433 	.word	0x00000433
   10e6c:	00000413 	.word	0x00000413
   10e70:	800fffff 	.word	0x800fffff

00010e74 <__aeabi_f2d>:
   10e74:	0041      	lsls	r1, r0, #1
   10e76:	0e09      	lsrs	r1, r1, #24
   10e78:	1c4b      	adds	r3, r1, #1
   10e7a:	b570      	push	{r4, r5, r6, lr}
   10e7c:	b2db      	uxtb	r3, r3
   10e7e:	0246      	lsls	r6, r0, #9
   10e80:	0a75      	lsrs	r5, r6, #9
   10e82:	0fc4      	lsrs	r4, r0, #31
   10e84:	2b01      	cmp	r3, #1
   10e86:	dd14      	ble.n	10eb2 <__aeabi_f2d+0x3e>
   10e88:	23e0      	movs	r3, #224	; 0xe0
   10e8a:	009b      	lsls	r3, r3, #2
   10e8c:	076d      	lsls	r5, r5, #29
   10e8e:	0b36      	lsrs	r6, r6, #12
   10e90:	18cb      	adds	r3, r1, r3
   10e92:	2100      	movs	r1, #0
   10e94:	0d0a      	lsrs	r2, r1, #20
   10e96:	0028      	movs	r0, r5
   10e98:	0512      	lsls	r2, r2, #20
   10e9a:	4d1c      	ldr	r5, [pc, #112]	; (10f0c <__aeabi_f2d+0x98>)
   10e9c:	4332      	orrs	r2, r6
   10e9e:	055b      	lsls	r3, r3, #21
   10ea0:	402a      	ands	r2, r5
   10ea2:	085b      	lsrs	r3, r3, #1
   10ea4:	4313      	orrs	r3, r2
   10ea6:	005b      	lsls	r3, r3, #1
   10ea8:	07e4      	lsls	r4, r4, #31
   10eaa:	085b      	lsrs	r3, r3, #1
   10eac:	4323      	orrs	r3, r4
   10eae:	0019      	movs	r1, r3
   10eb0:	bd70      	pop	{r4, r5, r6, pc}
   10eb2:	2900      	cmp	r1, #0
   10eb4:	d114      	bne.n	10ee0 <__aeabi_f2d+0x6c>
   10eb6:	2d00      	cmp	r5, #0
   10eb8:	d01e      	beq.n	10ef8 <__aeabi_f2d+0x84>
   10eba:	0028      	movs	r0, r5
   10ebc:	f000 f82c 	bl	10f18 <__clzsi2>
   10ec0:	280a      	cmp	r0, #10
   10ec2:	dc1c      	bgt.n	10efe <__aeabi_f2d+0x8a>
   10ec4:	230b      	movs	r3, #11
   10ec6:	002a      	movs	r2, r5
   10ec8:	1a1b      	subs	r3, r3, r0
   10eca:	40da      	lsrs	r2, r3
   10ecc:	0003      	movs	r3, r0
   10ece:	3315      	adds	r3, #21
   10ed0:	409d      	lsls	r5, r3
   10ed2:	4b0f      	ldr	r3, [pc, #60]	; (10f10 <__aeabi_f2d+0x9c>)
   10ed4:	0312      	lsls	r2, r2, #12
   10ed6:	1a1b      	subs	r3, r3, r0
   10ed8:	055b      	lsls	r3, r3, #21
   10eda:	0b16      	lsrs	r6, r2, #12
   10edc:	0d5b      	lsrs	r3, r3, #21
   10ede:	e7d8      	b.n	10e92 <__aeabi_f2d+0x1e>
   10ee0:	2d00      	cmp	r5, #0
   10ee2:	d006      	beq.n	10ef2 <__aeabi_f2d+0x7e>
   10ee4:	0b32      	lsrs	r2, r6, #12
   10ee6:	2680      	movs	r6, #128	; 0x80
   10ee8:	0336      	lsls	r6, r6, #12
   10eea:	076d      	lsls	r5, r5, #29
   10eec:	4316      	orrs	r6, r2
   10eee:	4b09      	ldr	r3, [pc, #36]	; (10f14 <__aeabi_f2d+0xa0>)
   10ef0:	e7cf      	b.n	10e92 <__aeabi_f2d+0x1e>
   10ef2:	4b08      	ldr	r3, [pc, #32]	; (10f14 <__aeabi_f2d+0xa0>)
   10ef4:	2600      	movs	r6, #0
   10ef6:	e7cc      	b.n	10e92 <__aeabi_f2d+0x1e>
   10ef8:	2300      	movs	r3, #0
   10efa:	2600      	movs	r6, #0
   10efc:	e7c9      	b.n	10e92 <__aeabi_f2d+0x1e>
   10efe:	0003      	movs	r3, r0
   10f00:	002a      	movs	r2, r5
   10f02:	3b0b      	subs	r3, #11
   10f04:	409a      	lsls	r2, r3
   10f06:	2500      	movs	r5, #0
   10f08:	e7e3      	b.n	10ed2 <__aeabi_f2d+0x5e>
   10f0a:	46c0      	nop			; (mov r8, r8)
   10f0c:	800fffff 	.word	0x800fffff
   10f10:	00000389 	.word	0x00000389
   10f14:	000007ff 	.word	0x000007ff

00010f18 <__clzsi2>:
   10f18:	211c      	movs	r1, #28
   10f1a:	2301      	movs	r3, #1
   10f1c:	041b      	lsls	r3, r3, #16
   10f1e:	4298      	cmp	r0, r3
   10f20:	d301      	bcc.n	10f26 <__clzsi2+0xe>
   10f22:	0c00      	lsrs	r0, r0, #16
   10f24:	3910      	subs	r1, #16
   10f26:	0a1b      	lsrs	r3, r3, #8
   10f28:	4298      	cmp	r0, r3
   10f2a:	d301      	bcc.n	10f30 <__clzsi2+0x18>
   10f2c:	0a00      	lsrs	r0, r0, #8
   10f2e:	3908      	subs	r1, #8
   10f30:	091b      	lsrs	r3, r3, #4
   10f32:	4298      	cmp	r0, r3
   10f34:	d301      	bcc.n	10f3a <__clzsi2+0x22>
   10f36:	0900      	lsrs	r0, r0, #4
   10f38:	3904      	subs	r1, #4
   10f3a:	a202      	add	r2, pc, #8	; (adr r2, 10f44 <__clzsi2+0x2c>)
   10f3c:	5c10      	ldrb	r0, [r2, r0]
   10f3e:	1840      	adds	r0, r0, r1
   10f40:	4770      	bx	lr
   10f42:	46c0      	nop			; (mov r8, r8)
   10f44:	02020304 	.word	0x02020304
   10f48:	01010101 	.word	0x01010101
	...

00010f54 <__clzdi2>:
   10f54:	b510      	push	{r4, lr}
   10f56:	2900      	cmp	r1, #0
   10f58:	d103      	bne.n	10f62 <__clzdi2+0xe>
   10f5a:	f7ff ffdd 	bl	10f18 <__clzsi2>
   10f5e:	3020      	adds	r0, #32
   10f60:	e002      	b.n	10f68 <__clzdi2+0x14>
   10f62:	1c08      	adds	r0, r1, #0
   10f64:	f7ff ffd8 	bl	10f18 <__clzsi2>
   10f68:	bd10      	pop	{r4, pc}
   10f6a:	46c0      	nop			; (mov r8, r8)

00010f6c <__aeabi_d2uiz>:
   10f6c:	b570      	push	{r4, r5, r6, lr}
   10f6e:	2200      	movs	r2, #0
   10f70:	4b0c      	ldr	r3, [pc, #48]	; (10fa4 <__aeabi_d2uiz+0x38>)
   10f72:	0004      	movs	r4, r0
   10f74:	000d      	movs	r5, r1
   10f76:	f000 f87f 	bl	11078 <__aeabi_dcmpge>
   10f7a:	2800      	cmp	r0, #0
   10f7c:	d104      	bne.n	10f88 <__aeabi_d2uiz+0x1c>
   10f7e:	0020      	movs	r0, r4
   10f80:	0029      	movs	r1, r5
   10f82:	f000 f811 	bl	10fa8 <__aeabi_d2iz>
   10f86:	bd70      	pop	{r4, r5, r6, pc}
   10f88:	4b06      	ldr	r3, [pc, #24]	; (10fa4 <__aeabi_d2uiz+0x38>)
   10f8a:	2200      	movs	r2, #0
   10f8c:	0020      	movs	r0, r4
   10f8e:	0029      	movs	r1, r5
   10f90:	f7ff fc22 	bl	107d8 <__aeabi_dsub>
   10f94:	f000 f808 	bl	10fa8 <__aeabi_d2iz>
   10f98:	2380      	movs	r3, #128	; 0x80
   10f9a:	061b      	lsls	r3, r3, #24
   10f9c:	469c      	mov	ip, r3
   10f9e:	4460      	add	r0, ip
   10fa0:	e7f1      	b.n	10f86 <__aeabi_d2uiz+0x1a>
   10fa2:	46c0      	nop			; (mov r8, r8)
   10fa4:	41e00000 	.word	0x41e00000

00010fa8 <__aeabi_d2iz>:
   10fa8:	b530      	push	{r4, r5, lr}
   10faa:	4d13      	ldr	r5, [pc, #76]	; (10ff8 <__aeabi_d2iz+0x50>)
   10fac:	030a      	lsls	r2, r1, #12
   10fae:	004b      	lsls	r3, r1, #1
   10fb0:	0b12      	lsrs	r2, r2, #12
   10fb2:	0d5b      	lsrs	r3, r3, #21
   10fb4:	0fc9      	lsrs	r1, r1, #31
   10fb6:	2400      	movs	r4, #0
   10fb8:	42ab      	cmp	r3, r5
   10fba:	dd10      	ble.n	10fde <__aeabi_d2iz+0x36>
   10fbc:	4c0f      	ldr	r4, [pc, #60]	; (10ffc <__aeabi_d2iz+0x54>)
   10fbe:	42a3      	cmp	r3, r4
   10fc0:	dc0f      	bgt.n	10fe2 <__aeabi_d2iz+0x3a>
   10fc2:	2480      	movs	r4, #128	; 0x80
   10fc4:	4d0e      	ldr	r5, [pc, #56]	; (11000 <__aeabi_d2iz+0x58>)
   10fc6:	0364      	lsls	r4, r4, #13
   10fc8:	4322      	orrs	r2, r4
   10fca:	1aed      	subs	r5, r5, r3
   10fcc:	2d1f      	cmp	r5, #31
   10fce:	dd0b      	ble.n	10fe8 <__aeabi_d2iz+0x40>
   10fd0:	480c      	ldr	r0, [pc, #48]	; (11004 <__aeabi_d2iz+0x5c>)
   10fd2:	1ac3      	subs	r3, r0, r3
   10fd4:	40da      	lsrs	r2, r3
   10fd6:	4254      	negs	r4, r2
   10fd8:	2900      	cmp	r1, #0
   10fda:	d100      	bne.n	10fde <__aeabi_d2iz+0x36>
   10fdc:	0014      	movs	r4, r2
   10fde:	0020      	movs	r0, r4
   10fe0:	bd30      	pop	{r4, r5, pc}
   10fe2:	4b09      	ldr	r3, [pc, #36]	; (11008 <__aeabi_d2iz+0x60>)
   10fe4:	18cc      	adds	r4, r1, r3
   10fe6:	e7fa      	b.n	10fde <__aeabi_d2iz+0x36>
   10fe8:	4c08      	ldr	r4, [pc, #32]	; (1100c <__aeabi_d2iz+0x64>)
   10fea:	40e8      	lsrs	r0, r5
   10fec:	46a4      	mov	ip, r4
   10fee:	4463      	add	r3, ip
   10ff0:	409a      	lsls	r2, r3
   10ff2:	4302      	orrs	r2, r0
   10ff4:	e7ef      	b.n	10fd6 <__aeabi_d2iz+0x2e>
   10ff6:	46c0      	nop			; (mov r8, r8)
   10ff8:	000003fe 	.word	0x000003fe
   10ffc:	0000041d 	.word	0x0000041d
   11000:	00000433 	.word	0x00000433
   11004:	00000413 	.word	0x00000413
   11008:	7fffffff 	.word	0x7fffffff
   1100c:	fffffbed 	.word	0xfffffbed

00011010 <__aeabi_cdrcmple>:
   11010:	4684      	mov	ip, r0
   11012:	1c10      	adds	r0, r2, #0
   11014:	4662      	mov	r2, ip
   11016:	468c      	mov	ip, r1
   11018:	1c19      	adds	r1, r3, #0
   1101a:	4663      	mov	r3, ip
   1101c:	e000      	b.n	11020 <__aeabi_cdcmpeq>
   1101e:	46c0      	nop			; (mov r8, r8)

00011020 <__aeabi_cdcmpeq>:
   11020:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   11022:	f000 f8d1 	bl	111c8 <__ledf2>
   11026:	2800      	cmp	r0, #0
   11028:	d401      	bmi.n	1102e <__aeabi_cdcmpeq+0xe>
   1102a:	2100      	movs	r1, #0
   1102c:	42c8      	cmn	r0, r1
   1102e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00011030 <__aeabi_dcmpeq>:
   11030:	b510      	push	{r4, lr}
   11032:	f000 f82b 	bl	1108c <__eqdf2>
   11036:	4240      	negs	r0, r0
   11038:	3001      	adds	r0, #1
   1103a:	bd10      	pop	{r4, pc}

0001103c <__aeabi_dcmplt>:
   1103c:	b510      	push	{r4, lr}
   1103e:	f000 f8c3 	bl	111c8 <__ledf2>
   11042:	2800      	cmp	r0, #0
   11044:	db01      	blt.n	1104a <__aeabi_dcmplt+0xe>
   11046:	2000      	movs	r0, #0
   11048:	bd10      	pop	{r4, pc}
   1104a:	2001      	movs	r0, #1
   1104c:	bd10      	pop	{r4, pc}
   1104e:	46c0      	nop			; (mov r8, r8)

00011050 <__aeabi_dcmple>:
   11050:	b510      	push	{r4, lr}
   11052:	f000 f8b9 	bl	111c8 <__ledf2>
   11056:	2800      	cmp	r0, #0
   11058:	dd01      	ble.n	1105e <__aeabi_dcmple+0xe>
   1105a:	2000      	movs	r0, #0
   1105c:	bd10      	pop	{r4, pc}
   1105e:	2001      	movs	r0, #1
   11060:	bd10      	pop	{r4, pc}
   11062:	46c0      	nop			; (mov r8, r8)

00011064 <__aeabi_dcmpgt>:
   11064:	b510      	push	{r4, lr}
   11066:	f000 f84b 	bl	11100 <__gedf2>
   1106a:	2800      	cmp	r0, #0
   1106c:	dc01      	bgt.n	11072 <__aeabi_dcmpgt+0xe>
   1106e:	2000      	movs	r0, #0
   11070:	bd10      	pop	{r4, pc}
   11072:	2001      	movs	r0, #1
   11074:	bd10      	pop	{r4, pc}
   11076:	46c0      	nop			; (mov r8, r8)

00011078 <__aeabi_dcmpge>:
   11078:	b510      	push	{r4, lr}
   1107a:	f000 f841 	bl	11100 <__gedf2>
   1107e:	2800      	cmp	r0, #0
   11080:	da01      	bge.n	11086 <__aeabi_dcmpge+0xe>
   11082:	2000      	movs	r0, #0
   11084:	bd10      	pop	{r4, pc}
   11086:	2001      	movs	r0, #1
   11088:	bd10      	pop	{r4, pc}
   1108a:	46c0      	nop			; (mov r8, r8)

0001108c <__eqdf2>:
   1108c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1108e:	464f      	mov	r7, r9
   11090:	4646      	mov	r6, r8
   11092:	46d6      	mov	lr, sl
   11094:	005c      	lsls	r4, r3, #1
   11096:	b5c0      	push	{r6, r7, lr}
   11098:	031f      	lsls	r7, r3, #12
   1109a:	0fdb      	lsrs	r3, r3, #31
   1109c:	469a      	mov	sl, r3
   1109e:	4b17      	ldr	r3, [pc, #92]	; (110fc <__eqdf2+0x70>)
   110a0:	030e      	lsls	r6, r1, #12
   110a2:	004d      	lsls	r5, r1, #1
   110a4:	4684      	mov	ip, r0
   110a6:	4680      	mov	r8, r0
   110a8:	0b36      	lsrs	r6, r6, #12
   110aa:	0d6d      	lsrs	r5, r5, #21
   110ac:	0fc9      	lsrs	r1, r1, #31
   110ae:	4691      	mov	r9, r2
   110b0:	0b3f      	lsrs	r7, r7, #12
   110b2:	0d64      	lsrs	r4, r4, #21
   110b4:	2001      	movs	r0, #1
   110b6:	429d      	cmp	r5, r3
   110b8:	d008      	beq.n	110cc <__eqdf2+0x40>
   110ba:	429c      	cmp	r4, r3
   110bc:	d001      	beq.n	110c2 <__eqdf2+0x36>
   110be:	42a5      	cmp	r5, r4
   110c0:	d00b      	beq.n	110da <__eqdf2+0x4e>
   110c2:	bc1c      	pop	{r2, r3, r4}
   110c4:	4690      	mov	r8, r2
   110c6:	4699      	mov	r9, r3
   110c8:	46a2      	mov	sl, r4
   110ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   110cc:	4663      	mov	r3, ip
   110ce:	4333      	orrs	r3, r6
   110d0:	d1f7      	bne.n	110c2 <__eqdf2+0x36>
   110d2:	42ac      	cmp	r4, r5
   110d4:	d1f5      	bne.n	110c2 <__eqdf2+0x36>
   110d6:	433a      	orrs	r2, r7
   110d8:	d1f3      	bne.n	110c2 <__eqdf2+0x36>
   110da:	2001      	movs	r0, #1
   110dc:	42be      	cmp	r6, r7
   110de:	d1f0      	bne.n	110c2 <__eqdf2+0x36>
   110e0:	45c8      	cmp	r8, r9
   110e2:	d1ee      	bne.n	110c2 <__eqdf2+0x36>
   110e4:	4551      	cmp	r1, sl
   110e6:	d007      	beq.n	110f8 <__eqdf2+0x6c>
   110e8:	2d00      	cmp	r5, #0
   110ea:	d1ea      	bne.n	110c2 <__eqdf2+0x36>
   110ec:	4663      	mov	r3, ip
   110ee:	431e      	orrs	r6, r3
   110f0:	0030      	movs	r0, r6
   110f2:	1e46      	subs	r6, r0, #1
   110f4:	41b0      	sbcs	r0, r6
   110f6:	e7e4      	b.n	110c2 <__eqdf2+0x36>
   110f8:	2000      	movs	r0, #0
   110fa:	e7e2      	b.n	110c2 <__eqdf2+0x36>
   110fc:	000007ff 	.word	0x000007ff

00011100 <__gedf2>:
   11100:	b5f0      	push	{r4, r5, r6, r7, lr}
   11102:	4645      	mov	r5, r8
   11104:	46de      	mov	lr, fp
   11106:	4657      	mov	r7, sl
   11108:	464e      	mov	r6, r9
   1110a:	b5e0      	push	{r5, r6, r7, lr}
   1110c:	031f      	lsls	r7, r3, #12
   1110e:	0b3d      	lsrs	r5, r7, #12
   11110:	4f2c      	ldr	r7, [pc, #176]	; (111c4 <__gedf2+0xc4>)
   11112:	030e      	lsls	r6, r1, #12
   11114:	004c      	lsls	r4, r1, #1
   11116:	46ab      	mov	fp, r5
   11118:	005d      	lsls	r5, r3, #1
   1111a:	4684      	mov	ip, r0
   1111c:	0b36      	lsrs	r6, r6, #12
   1111e:	0d64      	lsrs	r4, r4, #21
   11120:	0fc9      	lsrs	r1, r1, #31
   11122:	4690      	mov	r8, r2
   11124:	0d6d      	lsrs	r5, r5, #21
   11126:	0fdb      	lsrs	r3, r3, #31
   11128:	42bc      	cmp	r4, r7
   1112a:	d02a      	beq.n	11182 <__gedf2+0x82>
   1112c:	4f25      	ldr	r7, [pc, #148]	; (111c4 <__gedf2+0xc4>)
   1112e:	42bd      	cmp	r5, r7
   11130:	d02d      	beq.n	1118e <__gedf2+0x8e>
   11132:	2c00      	cmp	r4, #0
   11134:	d10f      	bne.n	11156 <__gedf2+0x56>
   11136:	4330      	orrs	r0, r6
   11138:	0007      	movs	r7, r0
   1113a:	4681      	mov	r9, r0
   1113c:	4278      	negs	r0, r7
   1113e:	4178      	adcs	r0, r7
   11140:	b2c0      	uxtb	r0, r0
   11142:	2d00      	cmp	r5, #0
   11144:	d117      	bne.n	11176 <__gedf2+0x76>
   11146:	465f      	mov	r7, fp
   11148:	433a      	orrs	r2, r7
   1114a:	d114      	bne.n	11176 <__gedf2+0x76>
   1114c:	464b      	mov	r3, r9
   1114e:	2000      	movs	r0, #0
   11150:	2b00      	cmp	r3, #0
   11152:	d00a      	beq.n	1116a <__gedf2+0x6a>
   11154:	e006      	b.n	11164 <__gedf2+0x64>
   11156:	2d00      	cmp	r5, #0
   11158:	d102      	bne.n	11160 <__gedf2+0x60>
   1115a:	4658      	mov	r0, fp
   1115c:	4302      	orrs	r2, r0
   1115e:	d001      	beq.n	11164 <__gedf2+0x64>
   11160:	4299      	cmp	r1, r3
   11162:	d018      	beq.n	11196 <__gedf2+0x96>
   11164:	4248      	negs	r0, r1
   11166:	2101      	movs	r1, #1
   11168:	4308      	orrs	r0, r1
   1116a:	bc3c      	pop	{r2, r3, r4, r5}
   1116c:	4690      	mov	r8, r2
   1116e:	4699      	mov	r9, r3
   11170:	46a2      	mov	sl, r4
   11172:	46ab      	mov	fp, r5
   11174:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11176:	2800      	cmp	r0, #0
   11178:	d0f2      	beq.n	11160 <__gedf2+0x60>
   1117a:	2001      	movs	r0, #1
   1117c:	3b01      	subs	r3, #1
   1117e:	4318      	orrs	r0, r3
   11180:	e7f3      	b.n	1116a <__gedf2+0x6a>
   11182:	0037      	movs	r7, r6
   11184:	4307      	orrs	r7, r0
   11186:	d0d1      	beq.n	1112c <__gedf2+0x2c>
   11188:	2002      	movs	r0, #2
   1118a:	4240      	negs	r0, r0
   1118c:	e7ed      	b.n	1116a <__gedf2+0x6a>
   1118e:	465f      	mov	r7, fp
   11190:	4317      	orrs	r7, r2
   11192:	d0ce      	beq.n	11132 <__gedf2+0x32>
   11194:	e7f8      	b.n	11188 <__gedf2+0x88>
   11196:	42ac      	cmp	r4, r5
   11198:	dce4      	bgt.n	11164 <__gedf2+0x64>
   1119a:	da03      	bge.n	111a4 <__gedf2+0xa4>
   1119c:	1e48      	subs	r0, r1, #1
   1119e:	2101      	movs	r1, #1
   111a0:	4308      	orrs	r0, r1
   111a2:	e7e2      	b.n	1116a <__gedf2+0x6a>
   111a4:	455e      	cmp	r6, fp
   111a6:	d8dd      	bhi.n	11164 <__gedf2+0x64>
   111a8:	d006      	beq.n	111b8 <__gedf2+0xb8>
   111aa:	2000      	movs	r0, #0
   111ac:	455e      	cmp	r6, fp
   111ae:	d2dc      	bcs.n	1116a <__gedf2+0x6a>
   111b0:	2301      	movs	r3, #1
   111b2:	1e48      	subs	r0, r1, #1
   111b4:	4318      	orrs	r0, r3
   111b6:	e7d8      	b.n	1116a <__gedf2+0x6a>
   111b8:	45c4      	cmp	ip, r8
   111ba:	d8d3      	bhi.n	11164 <__gedf2+0x64>
   111bc:	2000      	movs	r0, #0
   111be:	45c4      	cmp	ip, r8
   111c0:	d3f6      	bcc.n	111b0 <__gedf2+0xb0>
   111c2:	e7d2      	b.n	1116a <__gedf2+0x6a>
   111c4:	000007ff 	.word	0x000007ff

000111c8 <__ledf2>:
   111c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   111ca:	464e      	mov	r6, r9
   111cc:	4645      	mov	r5, r8
   111ce:	46de      	mov	lr, fp
   111d0:	4657      	mov	r7, sl
   111d2:	005c      	lsls	r4, r3, #1
   111d4:	b5e0      	push	{r5, r6, r7, lr}
   111d6:	031f      	lsls	r7, r3, #12
   111d8:	0fdb      	lsrs	r3, r3, #31
   111da:	4699      	mov	r9, r3
   111dc:	4b2a      	ldr	r3, [pc, #168]	; (11288 <__ledf2+0xc0>)
   111de:	030e      	lsls	r6, r1, #12
   111e0:	004d      	lsls	r5, r1, #1
   111e2:	0fc9      	lsrs	r1, r1, #31
   111e4:	4684      	mov	ip, r0
   111e6:	0b36      	lsrs	r6, r6, #12
   111e8:	0d6d      	lsrs	r5, r5, #21
   111ea:	468b      	mov	fp, r1
   111ec:	4690      	mov	r8, r2
   111ee:	0b3f      	lsrs	r7, r7, #12
   111f0:	0d64      	lsrs	r4, r4, #21
   111f2:	429d      	cmp	r5, r3
   111f4:	d020      	beq.n	11238 <__ledf2+0x70>
   111f6:	4b24      	ldr	r3, [pc, #144]	; (11288 <__ledf2+0xc0>)
   111f8:	429c      	cmp	r4, r3
   111fa:	d022      	beq.n	11242 <__ledf2+0x7a>
   111fc:	2d00      	cmp	r5, #0
   111fe:	d112      	bne.n	11226 <__ledf2+0x5e>
   11200:	4330      	orrs	r0, r6
   11202:	4243      	negs	r3, r0
   11204:	4143      	adcs	r3, r0
   11206:	b2db      	uxtb	r3, r3
   11208:	2c00      	cmp	r4, #0
   1120a:	d01f      	beq.n	1124c <__ledf2+0x84>
   1120c:	2b00      	cmp	r3, #0
   1120e:	d00c      	beq.n	1122a <__ledf2+0x62>
   11210:	464b      	mov	r3, r9
   11212:	2001      	movs	r0, #1
   11214:	3b01      	subs	r3, #1
   11216:	4303      	orrs	r3, r0
   11218:	0018      	movs	r0, r3
   1121a:	bc3c      	pop	{r2, r3, r4, r5}
   1121c:	4690      	mov	r8, r2
   1121e:	4699      	mov	r9, r3
   11220:	46a2      	mov	sl, r4
   11222:	46ab      	mov	fp, r5
   11224:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11226:	2c00      	cmp	r4, #0
   11228:	d016      	beq.n	11258 <__ledf2+0x90>
   1122a:	45cb      	cmp	fp, r9
   1122c:	d017      	beq.n	1125e <__ledf2+0x96>
   1122e:	465b      	mov	r3, fp
   11230:	4259      	negs	r1, r3
   11232:	2301      	movs	r3, #1
   11234:	430b      	orrs	r3, r1
   11236:	e7ef      	b.n	11218 <__ledf2+0x50>
   11238:	0031      	movs	r1, r6
   1123a:	2302      	movs	r3, #2
   1123c:	4301      	orrs	r1, r0
   1123e:	d1eb      	bne.n	11218 <__ledf2+0x50>
   11240:	e7d9      	b.n	111f6 <__ledf2+0x2e>
   11242:	0039      	movs	r1, r7
   11244:	2302      	movs	r3, #2
   11246:	4311      	orrs	r1, r2
   11248:	d1e6      	bne.n	11218 <__ledf2+0x50>
   1124a:	e7d7      	b.n	111fc <__ledf2+0x34>
   1124c:	433a      	orrs	r2, r7
   1124e:	d1dd      	bne.n	1120c <__ledf2+0x44>
   11250:	2300      	movs	r3, #0
   11252:	2800      	cmp	r0, #0
   11254:	d0e0      	beq.n	11218 <__ledf2+0x50>
   11256:	e7ea      	b.n	1122e <__ledf2+0x66>
   11258:	433a      	orrs	r2, r7
   1125a:	d1e6      	bne.n	1122a <__ledf2+0x62>
   1125c:	e7e7      	b.n	1122e <__ledf2+0x66>
   1125e:	42a5      	cmp	r5, r4
   11260:	dce5      	bgt.n	1122e <__ledf2+0x66>
   11262:	db05      	blt.n	11270 <__ledf2+0xa8>
   11264:	42be      	cmp	r6, r7
   11266:	d8e2      	bhi.n	1122e <__ledf2+0x66>
   11268:	d007      	beq.n	1127a <__ledf2+0xb2>
   1126a:	2300      	movs	r3, #0
   1126c:	42be      	cmp	r6, r7
   1126e:	d2d3      	bcs.n	11218 <__ledf2+0x50>
   11270:	4659      	mov	r1, fp
   11272:	2301      	movs	r3, #1
   11274:	3901      	subs	r1, #1
   11276:	430b      	orrs	r3, r1
   11278:	e7ce      	b.n	11218 <__ledf2+0x50>
   1127a:	45c4      	cmp	ip, r8
   1127c:	d8d7      	bhi.n	1122e <__ledf2+0x66>
   1127e:	2300      	movs	r3, #0
   11280:	45c4      	cmp	ip, r8
   11282:	d3f5      	bcc.n	11270 <__ledf2+0xa8>
   11284:	e7c8      	b.n	11218 <__ledf2+0x50>
   11286:	46c0      	nop			; (mov r8, r8)
   11288:	000007ff 	.word	0x000007ff

0001128c <__libc_init_array>:
   1128c:	b570      	push	{r4, r5, r6, lr}
   1128e:	2600      	movs	r6, #0
   11290:	4d0c      	ldr	r5, [pc, #48]	; (112c4 <__libc_init_array+0x38>)
   11292:	4c0d      	ldr	r4, [pc, #52]	; (112c8 <__libc_init_array+0x3c>)
   11294:	1b64      	subs	r4, r4, r5
   11296:	10a4      	asrs	r4, r4, #2
   11298:	42a6      	cmp	r6, r4
   1129a:	d109      	bne.n	112b0 <__libc_init_array+0x24>
   1129c:	2600      	movs	r6, #0
   1129e:	f001 ff91 	bl	131c4 <_init>
   112a2:	4d0a      	ldr	r5, [pc, #40]	; (112cc <__libc_init_array+0x40>)
   112a4:	4c0a      	ldr	r4, [pc, #40]	; (112d0 <__libc_init_array+0x44>)
   112a6:	1b64      	subs	r4, r4, r5
   112a8:	10a4      	asrs	r4, r4, #2
   112aa:	42a6      	cmp	r6, r4
   112ac:	d105      	bne.n	112ba <__libc_init_array+0x2e>
   112ae:	bd70      	pop	{r4, r5, r6, pc}
   112b0:	00b3      	lsls	r3, r6, #2
   112b2:	58eb      	ldr	r3, [r5, r3]
   112b4:	4798      	blx	r3
   112b6:	3601      	adds	r6, #1
   112b8:	e7ee      	b.n	11298 <__libc_init_array+0xc>
   112ba:	00b3      	lsls	r3, r6, #2
   112bc:	58eb      	ldr	r3, [r5, r3]
   112be:	4798      	blx	r3
   112c0:	3601      	adds	r6, #1
   112c2:	e7f2      	b.n	112aa <__libc_init_array+0x1e>
   112c4:	000131d0 	.word	0x000131d0
   112c8:	000131d0 	.word	0x000131d0
   112cc:	000131d0 	.word	0x000131d0
   112d0:	000131d4 	.word	0x000131d4

000112d4 <memcpy>:
   112d4:	2300      	movs	r3, #0
   112d6:	b510      	push	{r4, lr}
   112d8:	429a      	cmp	r2, r3
   112da:	d100      	bne.n	112de <memcpy+0xa>
   112dc:	bd10      	pop	{r4, pc}
   112de:	5ccc      	ldrb	r4, [r1, r3]
   112e0:	54c4      	strb	r4, [r0, r3]
   112e2:	3301      	adds	r3, #1
   112e4:	e7f8      	b.n	112d8 <memcpy+0x4>

000112e6 <memset>:
   112e6:	0003      	movs	r3, r0
   112e8:	1882      	adds	r2, r0, r2
   112ea:	4293      	cmp	r3, r2
   112ec:	d100      	bne.n	112f0 <memset+0xa>
   112ee:	4770      	bx	lr
   112f0:	7019      	strb	r1, [r3, #0]
   112f2:	3301      	adds	r3, #1
   112f4:	e7f9      	b.n	112ea <memset+0x4>
	...

000112f8 <iprintf>:
   112f8:	b40f      	push	{r0, r1, r2, r3}
   112fa:	4b0b      	ldr	r3, [pc, #44]	; (11328 <iprintf+0x30>)
   112fc:	b513      	push	{r0, r1, r4, lr}
   112fe:	681c      	ldr	r4, [r3, #0]
   11300:	2c00      	cmp	r4, #0
   11302:	d005      	beq.n	11310 <iprintf+0x18>
   11304:	69a3      	ldr	r3, [r4, #24]
   11306:	2b00      	cmp	r3, #0
   11308:	d102      	bne.n	11310 <iprintf+0x18>
   1130a:	0020      	movs	r0, r4
   1130c:	f000 fb5c 	bl	119c8 <__sinit>
   11310:	ab05      	add	r3, sp, #20
   11312:	9a04      	ldr	r2, [sp, #16]
   11314:	68a1      	ldr	r1, [r4, #8]
   11316:	0020      	movs	r0, r4
   11318:	9301      	str	r3, [sp, #4]
   1131a:	f000 fd31 	bl	11d80 <_vfiprintf_r>
   1131e:	bc16      	pop	{r1, r2, r4}
   11320:	bc08      	pop	{r3}
   11322:	b004      	add	sp, #16
   11324:	4718      	bx	r3
   11326:	46c0      	nop			; (mov r8, r8)
   11328:	2000000c 	.word	0x2000000c

0001132c <_puts_r>:
   1132c:	b570      	push	{r4, r5, r6, lr}
   1132e:	0005      	movs	r5, r0
   11330:	000e      	movs	r6, r1
   11332:	2800      	cmp	r0, #0
   11334:	d004      	beq.n	11340 <_puts_r+0x14>
   11336:	6983      	ldr	r3, [r0, #24]
   11338:	2b00      	cmp	r3, #0
   1133a:	d101      	bne.n	11340 <_puts_r+0x14>
   1133c:	f000 fb44 	bl	119c8 <__sinit>
   11340:	69ab      	ldr	r3, [r5, #24]
   11342:	68ac      	ldr	r4, [r5, #8]
   11344:	2b00      	cmp	r3, #0
   11346:	d102      	bne.n	1134e <_puts_r+0x22>
   11348:	0028      	movs	r0, r5
   1134a:	f000 fb3d 	bl	119c8 <__sinit>
   1134e:	4b24      	ldr	r3, [pc, #144]	; (113e0 <_puts_r+0xb4>)
   11350:	429c      	cmp	r4, r3
   11352:	d10f      	bne.n	11374 <_puts_r+0x48>
   11354:	686c      	ldr	r4, [r5, #4]
   11356:	89a3      	ldrh	r3, [r4, #12]
   11358:	071b      	lsls	r3, r3, #28
   1135a:	d502      	bpl.n	11362 <_puts_r+0x36>
   1135c:	6923      	ldr	r3, [r4, #16]
   1135e:	2b00      	cmp	r3, #0
   11360:	d120      	bne.n	113a4 <_puts_r+0x78>
   11362:	0021      	movs	r1, r4
   11364:	0028      	movs	r0, r5
   11366:	f000 f9c1 	bl	116ec <__swsetup_r>
   1136a:	2800      	cmp	r0, #0
   1136c:	d01a      	beq.n	113a4 <_puts_r+0x78>
   1136e:	2001      	movs	r0, #1
   11370:	4240      	negs	r0, r0
   11372:	bd70      	pop	{r4, r5, r6, pc}
   11374:	4b1b      	ldr	r3, [pc, #108]	; (113e4 <_puts_r+0xb8>)
   11376:	429c      	cmp	r4, r3
   11378:	d101      	bne.n	1137e <_puts_r+0x52>
   1137a:	68ac      	ldr	r4, [r5, #8]
   1137c:	e7eb      	b.n	11356 <_puts_r+0x2a>
   1137e:	4b1a      	ldr	r3, [pc, #104]	; (113e8 <_puts_r+0xbc>)
   11380:	429c      	cmp	r4, r3
   11382:	d1e8      	bne.n	11356 <_puts_r+0x2a>
   11384:	68ec      	ldr	r4, [r5, #12]
   11386:	e7e6      	b.n	11356 <_puts_r+0x2a>
   11388:	3b01      	subs	r3, #1
   1138a:	3601      	adds	r6, #1
   1138c:	60a3      	str	r3, [r4, #8]
   1138e:	2b00      	cmp	r3, #0
   11390:	da04      	bge.n	1139c <_puts_r+0x70>
   11392:	69a2      	ldr	r2, [r4, #24]
   11394:	4293      	cmp	r3, r2
   11396:	db16      	blt.n	113c6 <_puts_r+0x9a>
   11398:	290a      	cmp	r1, #10
   1139a:	d014      	beq.n	113c6 <_puts_r+0x9a>
   1139c:	6823      	ldr	r3, [r4, #0]
   1139e:	1c5a      	adds	r2, r3, #1
   113a0:	6022      	str	r2, [r4, #0]
   113a2:	7019      	strb	r1, [r3, #0]
   113a4:	7831      	ldrb	r1, [r6, #0]
   113a6:	68a3      	ldr	r3, [r4, #8]
   113a8:	2900      	cmp	r1, #0
   113aa:	d1ed      	bne.n	11388 <_puts_r+0x5c>
   113ac:	3b01      	subs	r3, #1
   113ae:	60a3      	str	r3, [r4, #8]
   113b0:	2b00      	cmp	r3, #0
   113b2:	da0f      	bge.n	113d4 <_puts_r+0xa8>
   113b4:	0022      	movs	r2, r4
   113b6:	310a      	adds	r1, #10
   113b8:	0028      	movs	r0, r5
   113ba:	f000 f941 	bl	11640 <__swbuf_r>
   113be:	1c43      	adds	r3, r0, #1
   113c0:	d0d5      	beq.n	1136e <_puts_r+0x42>
   113c2:	200a      	movs	r0, #10
   113c4:	e7d5      	b.n	11372 <_puts_r+0x46>
   113c6:	0022      	movs	r2, r4
   113c8:	0028      	movs	r0, r5
   113ca:	f000 f939 	bl	11640 <__swbuf_r>
   113ce:	1c43      	adds	r3, r0, #1
   113d0:	d1e8      	bne.n	113a4 <_puts_r+0x78>
   113d2:	e7cc      	b.n	1136e <_puts_r+0x42>
   113d4:	200a      	movs	r0, #10
   113d6:	6823      	ldr	r3, [r4, #0]
   113d8:	1c5a      	adds	r2, r3, #1
   113da:	6022      	str	r2, [r4, #0]
   113dc:	7018      	strb	r0, [r3, #0]
   113de:	e7c8      	b.n	11372 <_puts_r+0x46>
   113e0:	00013150 	.word	0x00013150
   113e4:	00013170 	.word	0x00013170
   113e8:	00013130 	.word	0x00013130

000113ec <puts>:
   113ec:	b510      	push	{r4, lr}
   113ee:	4b03      	ldr	r3, [pc, #12]	; (113fc <puts+0x10>)
   113f0:	0001      	movs	r1, r0
   113f2:	6818      	ldr	r0, [r3, #0]
   113f4:	f7ff ff9a 	bl	1132c <_puts_r>
   113f8:	bd10      	pop	{r4, pc}
   113fa:	46c0      	nop			; (mov r8, r8)
   113fc:	2000000c 	.word	0x2000000c

00011400 <srand>:
   11400:	4b10      	ldr	r3, [pc, #64]	; (11444 <srand+0x44>)
   11402:	b570      	push	{r4, r5, r6, lr}
   11404:	681c      	ldr	r4, [r3, #0]
   11406:	0005      	movs	r5, r0
   11408:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1140a:	2b00      	cmp	r3, #0
   1140c:	d115      	bne.n	1143a <srand+0x3a>
   1140e:	2018      	movs	r0, #24
   11410:	f000 fbdc 	bl	11bcc <malloc>
   11414:	4b0c      	ldr	r3, [pc, #48]	; (11448 <srand+0x48>)
   11416:	63a0      	str	r0, [r4, #56]	; 0x38
   11418:	8003      	strh	r3, [r0, #0]
   1141a:	4b0c      	ldr	r3, [pc, #48]	; (1144c <srand+0x4c>)
   1141c:	2201      	movs	r2, #1
   1141e:	8043      	strh	r3, [r0, #2]
   11420:	4b0b      	ldr	r3, [pc, #44]	; (11450 <srand+0x50>)
   11422:	8083      	strh	r3, [r0, #4]
   11424:	4b0b      	ldr	r3, [pc, #44]	; (11454 <srand+0x54>)
   11426:	80c3      	strh	r3, [r0, #6]
   11428:	4b0b      	ldr	r3, [pc, #44]	; (11458 <srand+0x58>)
   1142a:	8103      	strh	r3, [r0, #8]
   1142c:	2305      	movs	r3, #5
   1142e:	8143      	strh	r3, [r0, #10]
   11430:	3306      	adds	r3, #6
   11432:	8183      	strh	r3, [r0, #12]
   11434:	2300      	movs	r3, #0
   11436:	6102      	str	r2, [r0, #16]
   11438:	6143      	str	r3, [r0, #20]
   1143a:	2200      	movs	r2, #0
   1143c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1143e:	611d      	str	r5, [r3, #16]
   11440:	615a      	str	r2, [r3, #20]
   11442:	bd70      	pop	{r4, r5, r6, pc}
   11444:	2000000c 	.word	0x2000000c
   11448:	0000330e 	.word	0x0000330e
   1144c:	ffffabcd 	.word	0xffffabcd
   11450:	00001234 	.word	0x00001234
   11454:	ffffe66d 	.word	0xffffe66d
   11458:	ffffdeec 	.word	0xffffdeec

0001145c <rand>:
   1145c:	4b15      	ldr	r3, [pc, #84]	; (114b4 <rand+0x58>)
   1145e:	b510      	push	{r4, lr}
   11460:	681c      	ldr	r4, [r3, #0]
   11462:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   11464:	2b00      	cmp	r3, #0
   11466:	d115      	bne.n	11494 <rand+0x38>
   11468:	2018      	movs	r0, #24
   1146a:	f000 fbaf 	bl	11bcc <malloc>
   1146e:	4b12      	ldr	r3, [pc, #72]	; (114b8 <rand+0x5c>)
   11470:	63a0      	str	r0, [r4, #56]	; 0x38
   11472:	8003      	strh	r3, [r0, #0]
   11474:	4b11      	ldr	r3, [pc, #68]	; (114bc <rand+0x60>)
   11476:	2201      	movs	r2, #1
   11478:	8043      	strh	r3, [r0, #2]
   1147a:	4b11      	ldr	r3, [pc, #68]	; (114c0 <rand+0x64>)
   1147c:	8083      	strh	r3, [r0, #4]
   1147e:	4b11      	ldr	r3, [pc, #68]	; (114c4 <rand+0x68>)
   11480:	80c3      	strh	r3, [r0, #6]
   11482:	4b11      	ldr	r3, [pc, #68]	; (114c8 <rand+0x6c>)
   11484:	8103      	strh	r3, [r0, #8]
   11486:	2305      	movs	r3, #5
   11488:	8143      	strh	r3, [r0, #10]
   1148a:	3306      	adds	r3, #6
   1148c:	8183      	strh	r3, [r0, #12]
   1148e:	2300      	movs	r3, #0
   11490:	6102      	str	r2, [r0, #16]
   11492:	6143      	str	r3, [r0, #20]
   11494:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   11496:	4a0d      	ldr	r2, [pc, #52]	; (114cc <rand+0x70>)
   11498:	6920      	ldr	r0, [r4, #16]
   1149a:	6961      	ldr	r1, [r4, #20]
   1149c:	4b0c      	ldr	r3, [pc, #48]	; (114d0 <rand+0x74>)
   1149e:	f7fd ff05 	bl	f2ac <__aeabi_lmul>
   114a2:	2201      	movs	r2, #1
   114a4:	2300      	movs	r3, #0
   114a6:	1880      	adds	r0, r0, r2
   114a8:	4159      	adcs	r1, r3
   114aa:	6120      	str	r0, [r4, #16]
   114ac:	6161      	str	r1, [r4, #20]
   114ae:	0048      	lsls	r0, r1, #1
   114b0:	0840      	lsrs	r0, r0, #1
   114b2:	bd10      	pop	{r4, pc}
   114b4:	2000000c 	.word	0x2000000c
   114b8:	0000330e 	.word	0x0000330e
   114bc:	ffffabcd 	.word	0xffffabcd
   114c0:	00001234 	.word	0x00001234
   114c4:	ffffe66d 	.word	0xffffe66d
   114c8:	ffffdeec 	.word	0xffffdeec
   114cc:	4c957f2d 	.word	0x4c957f2d
   114d0:	5851f42d 	.word	0x5851f42d

000114d4 <setbuf>:
   114d4:	424a      	negs	r2, r1
   114d6:	414a      	adcs	r2, r1
   114d8:	2380      	movs	r3, #128	; 0x80
   114da:	b510      	push	{r4, lr}
   114dc:	0052      	lsls	r2, r2, #1
   114de:	00db      	lsls	r3, r3, #3
   114e0:	f000 f802 	bl	114e8 <setvbuf>
   114e4:	bd10      	pop	{r4, pc}
	...

000114e8 <setvbuf>:
   114e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   114ea:	001d      	movs	r5, r3
   114ec:	4b4f      	ldr	r3, [pc, #316]	; (1162c <setvbuf+0x144>)
   114ee:	b085      	sub	sp, #20
   114f0:	681e      	ldr	r6, [r3, #0]
   114f2:	0004      	movs	r4, r0
   114f4:	000f      	movs	r7, r1
   114f6:	9200      	str	r2, [sp, #0]
   114f8:	2e00      	cmp	r6, #0
   114fa:	d005      	beq.n	11508 <setvbuf+0x20>
   114fc:	69b3      	ldr	r3, [r6, #24]
   114fe:	2b00      	cmp	r3, #0
   11500:	d102      	bne.n	11508 <setvbuf+0x20>
   11502:	0030      	movs	r0, r6
   11504:	f000 fa60 	bl	119c8 <__sinit>
   11508:	4b49      	ldr	r3, [pc, #292]	; (11630 <setvbuf+0x148>)
   1150a:	429c      	cmp	r4, r3
   1150c:	d150      	bne.n	115b0 <setvbuf+0xc8>
   1150e:	6874      	ldr	r4, [r6, #4]
   11510:	9b00      	ldr	r3, [sp, #0]
   11512:	2b02      	cmp	r3, #2
   11514:	d005      	beq.n	11522 <setvbuf+0x3a>
   11516:	2b01      	cmp	r3, #1
   11518:	d900      	bls.n	1151c <setvbuf+0x34>
   1151a:	e084      	b.n	11626 <setvbuf+0x13e>
   1151c:	2d00      	cmp	r5, #0
   1151e:	da00      	bge.n	11522 <setvbuf+0x3a>
   11520:	e081      	b.n	11626 <setvbuf+0x13e>
   11522:	0021      	movs	r1, r4
   11524:	0030      	movs	r0, r6
   11526:	f000 f9e1 	bl	118ec <_fflush_r>
   1152a:	6b61      	ldr	r1, [r4, #52]	; 0x34
   1152c:	2900      	cmp	r1, #0
   1152e:	d008      	beq.n	11542 <setvbuf+0x5a>
   11530:	0023      	movs	r3, r4
   11532:	3344      	adds	r3, #68	; 0x44
   11534:	4299      	cmp	r1, r3
   11536:	d002      	beq.n	1153e <setvbuf+0x56>
   11538:	0030      	movs	r0, r6
   1153a:	f000 fb51 	bl	11be0 <_free_r>
   1153e:	2300      	movs	r3, #0
   11540:	6363      	str	r3, [r4, #52]	; 0x34
   11542:	2300      	movs	r3, #0
   11544:	61a3      	str	r3, [r4, #24]
   11546:	6063      	str	r3, [r4, #4]
   11548:	89a3      	ldrh	r3, [r4, #12]
   1154a:	061b      	lsls	r3, r3, #24
   1154c:	d503      	bpl.n	11556 <setvbuf+0x6e>
   1154e:	6921      	ldr	r1, [r4, #16]
   11550:	0030      	movs	r0, r6
   11552:	f000 fb45 	bl	11be0 <_free_r>
   11556:	89a3      	ldrh	r3, [r4, #12]
   11558:	4a36      	ldr	r2, [pc, #216]	; (11634 <setvbuf+0x14c>)
   1155a:	4013      	ands	r3, r2
   1155c:	81a3      	strh	r3, [r4, #12]
   1155e:	9b00      	ldr	r3, [sp, #0]
   11560:	2b02      	cmp	r3, #2
   11562:	d05a      	beq.n	1161a <setvbuf+0x132>
   11564:	ab03      	add	r3, sp, #12
   11566:	aa02      	add	r2, sp, #8
   11568:	0021      	movs	r1, r4
   1156a:	0030      	movs	r0, r6
   1156c:	f000 fac2 	bl	11af4 <__swhatbuf_r>
   11570:	89a3      	ldrh	r3, [r4, #12]
   11572:	4318      	orrs	r0, r3
   11574:	81a0      	strh	r0, [r4, #12]
   11576:	2d00      	cmp	r5, #0
   11578:	d124      	bne.n	115c4 <setvbuf+0xdc>
   1157a:	9d02      	ldr	r5, [sp, #8]
   1157c:	0028      	movs	r0, r5
   1157e:	f000 fb25 	bl	11bcc <malloc>
   11582:	9501      	str	r5, [sp, #4]
   11584:	1e07      	subs	r7, r0, #0
   11586:	d142      	bne.n	1160e <setvbuf+0x126>
   11588:	9b02      	ldr	r3, [sp, #8]
   1158a:	9301      	str	r3, [sp, #4]
   1158c:	42ab      	cmp	r3, r5
   1158e:	d139      	bne.n	11604 <setvbuf+0x11c>
   11590:	2001      	movs	r0, #1
   11592:	4240      	negs	r0, r0
   11594:	2302      	movs	r3, #2
   11596:	89a2      	ldrh	r2, [r4, #12]
   11598:	4313      	orrs	r3, r2
   1159a:	81a3      	strh	r3, [r4, #12]
   1159c:	2300      	movs	r3, #0
   1159e:	60a3      	str	r3, [r4, #8]
   115a0:	0023      	movs	r3, r4
   115a2:	3347      	adds	r3, #71	; 0x47
   115a4:	6023      	str	r3, [r4, #0]
   115a6:	6123      	str	r3, [r4, #16]
   115a8:	2301      	movs	r3, #1
   115aa:	6163      	str	r3, [r4, #20]
   115ac:	b005      	add	sp, #20
   115ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   115b0:	4b21      	ldr	r3, [pc, #132]	; (11638 <setvbuf+0x150>)
   115b2:	429c      	cmp	r4, r3
   115b4:	d101      	bne.n	115ba <setvbuf+0xd2>
   115b6:	68b4      	ldr	r4, [r6, #8]
   115b8:	e7aa      	b.n	11510 <setvbuf+0x28>
   115ba:	4b20      	ldr	r3, [pc, #128]	; (1163c <setvbuf+0x154>)
   115bc:	429c      	cmp	r4, r3
   115be:	d1a7      	bne.n	11510 <setvbuf+0x28>
   115c0:	68f4      	ldr	r4, [r6, #12]
   115c2:	e7a5      	b.n	11510 <setvbuf+0x28>
   115c4:	2f00      	cmp	r7, #0
   115c6:	d0d9      	beq.n	1157c <setvbuf+0x94>
   115c8:	69b3      	ldr	r3, [r6, #24]
   115ca:	2b00      	cmp	r3, #0
   115cc:	d102      	bne.n	115d4 <setvbuf+0xec>
   115ce:	0030      	movs	r0, r6
   115d0:	f000 f9fa 	bl	119c8 <__sinit>
   115d4:	9b00      	ldr	r3, [sp, #0]
   115d6:	2b01      	cmp	r3, #1
   115d8:	d103      	bne.n	115e2 <setvbuf+0xfa>
   115da:	89a3      	ldrh	r3, [r4, #12]
   115dc:	9a00      	ldr	r2, [sp, #0]
   115de:	431a      	orrs	r2, r3
   115e0:	81a2      	strh	r2, [r4, #12]
   115e2:	2008      	movs	r0, #8
   115e4:	89a3      	ldrh	r3, [r4, #12]
   115e6:	6027      	str	r7, [r4, #0]
   115e8:	6127      	str	r7, [r4, #16]
   115ea:	6165      	str	r5, [r4, #20]
   115ec:	4018      	ands	r0, r3
   115ee:	d018      	beq.n	11622 <setvbuf+0x13a>
   115f0:	2001      	movs	r0, #1
   115f2:	4018      	ands	r0, r3
   115f4:	2300      	movs	r3, #0
   115f6:	4298      	cmp	r0, r3
   115f8:	d011      	beq.n	1161e <setvbuf+0x136>
   115fa:	426d      	negs	r5, r5
   115fc:	60a3      	str	r3, [r4, #8]
   115fe:	61a5      	str	r5, [r4, #24]
   11600:	0018      	movs	r0, r3
   11602:	e7d3      	b.n	115ac <setvbuf+0xc4>
   11604:	9801      	ldr	r0, [sp, #4]
   11606:	f000 fae1 	bl	11bcc <malloc>
   1160a:	1e07      	subs	r7, r0, #0
   1160c:	d0c0      	beq.n	11590 <setvbuf+0xa8>
   1160e:	2380      	movs	r3, #128	; 0x80
   11610:	89a2      	ldrh	r2, [r4, #12]
   11612:	9d01      	ldr	r5, [sp, #4]
   11614:	4313      	orrs	r3, r2
   11616:	81a3      	strh	r3, [r4, #12]
   11618:	e7d6      	b.n	115c8 <setvbuf+0xe0>
   1161a:	2000      	movs	r0, #0
   1161c:	e7ba      	b.n	11594 <setvbuf+0xac>
   1161e:	60a5      	str	r5, [r4, #8]
   11620:	e7c4      	b.n	115ac <setvbuf+0xc4>
   11622:	60a0      	str	r0, [r4, #8]
   11624:	e7c2      	b.n	115ac <setvbuf+0xc4>
   11626:	2001      	movs	r0, #1
   11628:	4240      	negs	r0, r0
   1162a:	e7bf      	b.n	115ac <setvbuf+0xc4>
   1162c:	2000000c 	.word	0x2000000c
   11630:	00013150 	.word	0x00013150
   11634:	fffff35c 	.word	0xfffff35c
   11638:	00013170 	.word	0x00013170
   1163c:	00013130 	.word	0x00013130

00011640 <__swbuf_r>:
   11640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11642:	0005      	movs	r5, r0
   11644:	000e      	movs	r6, r1
   11646:	0014      	movs	r4, r2
   11648:	2800      	cmp	r0, #0
   1164a:	d004      	beq.n	11656 <__swbuf_r+0x16>
   1164c:	6983      	ldr	r3, [r0, #24]
   1164e:	2b00      	cmp	r3, #0
   11650:	d101      	bne.n	11656 <__swbuf_r+0x16>
   11652:	f000 f9b9 	bl	119c8 <__sinit>
   11656:	4b22      	ldr	r3, [pc, #136]	; (116e0 <__swbuf_r+0xa0>)
   11658:	429c      	cmp	r4, r3
   1165a:	d12d      	bne.n	116b8 <__swbuf_r+0x78>
   1165c:	686c      	ldr	r4, [r5, #4]
   1165e:	69a3      	ldr	r3, [r4, #24]
   11660:	60a3      	str	r3, [r4, #8]
   11662:	89a3      	ldrh	r3, [r4, #12]
   11664:	071b      	lsls	r3, r3, #28
   11666:	d531      	bpl.n	116cc <__swbuf_r+0x8c>
   11668:	6923      	ldr	r3, [r4, #16]
   1166a:	2b00      	cmp	r3, #0
   1166c:	d02e      	beq.n	116cc <__swbuf_r+0x8c>
   1166e:	6823      	ldr	r3, [r4, #0]
   11670:	6922      	ldr	r2, [r4, #16]
   11672:	b2f7      	uxtb	r7, r6
   11674:	1a98      	subs	r0, r3, r2
   11676:	6963      	ldr	r3, [r4, #20]
   11678:	b2f6      	uxtb	r6, r6
   1167a:	4298      	cmp	r0, r3
   1167c:	db05      	blt.n	1168a <__swbuf_r+0x4a>
   1167e:	0021      	movs	r1, r4
   11680:	0028      	movs	r0, r5
   11682:	f000 f933 	bl	118ec <_fflush_r>
   11686:	2800      	cmp	r0, #0
   11688:	d126      	bne.n	116d8 <__swbuf_r+0x98>
   1168a:	68a3      	ldr	r3, [r4, #8]
   1168c:	3001      	adds	r0, #1
   1168e:	3b01      	subs	r3, #1
   11690:	60a3      	str	r3, [r4, #8]
   11692:	6823      	ldr	r3, [r4, #0]
   11694:	1c5a      	adds	r2, r3, #1
   11696:	6022      	str	r2, [r4, #0]
   11698:	701f      	strb	r7, [r3, #0]
   1169a:	6963      	ldr	r3, [r4, #20]
   1169c:	4298      	cmp	r0, r3
   1169e:	d004      	beq.n	116aa <__swbuf_r+0x6a>
   116a0:	89a3      	ldrh	r3, [r4, #12]
   116a2:	07db      	lsls	r3, r3, #31
   116a4:	d51a      	bpl.n	116dc <__swbuf_r+0x9c>
   116a6:	2e0a      	cmp	r6, #10
   116a8:	d118      	bne.n	116dc <__swbuf_r+0x9c>
   116aa:	0021      	movs	r1, r4
   116ac:	0028      	movs	r0, r5
   116ae:	f000 f91d 	bl	118ec <_fflush_r>
   116b2:	2800      	cmp	r0, #0
   116b4:	d012      	beq.n	116dc <__swbuf_r+0x9c>
   116b6:	e00f      	b.n	116d8 <__swbuf_r+0x98>
   116b8:	4b0a      	ldr	r3, [pc, #40]	; (116e4 <__swbuf_r+0xa4>)
   116ba:	429c      	cmp	r4, r3
   116bc:	d101      	bne.n	116c2 <__swbuf_r+0x82>
   116be:	68ac      	ldr	r4, [r5, #8]
   116c0:	e7cd      	b.n	1165e <__swbuf_r+0x1e>
   116c2:	4b09      	ldr	r3, [pc, #36]	; (116e8 <__swbuf_r+0xa8>)
   116c4:	429c      	cmp	r4, r3
   116c6:	d1ca      	bne.n	1165e <__swbuf_r+0x1e>
   116c8:	68ec      	ldr	r4, [r5, #12]
   116ca:	e7c8      	b.n	1165e <__swbuf_r+0x1e>
   116cc:	0021      	movs	r1, r4
   116ce:	0028      	movs	r0, r5
   116d0:	f000 f80c 	bl	116ec <__swsetup_r>
   116d4:	2800      	cmp	r0, #0
   116d6:	d0ca      	beq.n	1166e <__swbuf_r+0x2e>
   116d8:	2601      	movs	r6, #1
   116da:	4276      	negs	r6, r6
   116dc:	0030      	movs	r0, r6
   116de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   116e0:	00013150 	.word	0x00013150
   116e4:	00013170 	.word	0x00013170
   116e8:	00013130 	.word	0x00013130

000116ec <__swsetup_r>:
   116ec:	4b36      	ldr	r3, [pc, #216]	; (117c8 <__swsetup_r+0xdc>)
   116ee:	b570      	push	{r4, r5, r6, lr}
   116f0:	681d      	ldr	r5, [r3, #0]
   116f2:	0006      	movs	r6, r0
   116f4:	000c      	movs	r4, r1
   116f6:	2d00      	cmp	r5, #0
   116f8:	d005      	beq.n	11706 <__swsetup_r+0x1a>
   116fa:	69ab      	ldr	r3, [r5, #24]
   116fc:	2b00      	cmp	r3, #0
   116fe:	d102      	bne.n	11706 <__swsetup_r+0x1a>
   11700:	0028      	movs	r0, r5
   11702:	f000 f961 	bl	119c8 <__sinit>
   11706:	4b31      	ldr	r3, [pc, #196]	; (117cc <__swsetup_r+0xe0>)
   11708:	429c      	cmp	r4, r3
   1170a:	d10f      	bne.n	1172c <__swsetup_r+0x40>
   1170c:	686c      	ldr	r4, [r5, #4]
   1170e:	230c      	movs	r3, #12
   11710:	5ee2      	ldrsh	r2, [r4, r3]
   11712:	b293      	uxth	r3, r2
   11714:	0719      	lsls	r1, r3, #28
   11716:	d42d      	bmi.n	11774 <__swsetup_r+0x88>
   11718:	06d9      	lsls	r1, r3, #27
   1171a:	d411      	bmi.n	11740 <__swsetup_r+0x54>
   1171c:	2309      	movs	r3, #9
   1171e:	2001      	movs	r0, #1
   11720:	6033      	str	r3, [r6, #0]
   11722:	3337      	adds	r3, #55	; 0x37
   11724:	4313      	orrs	r3, r2
   11726:	81a3      	strh	r3, [r4, #12]
   11728:	4240      	negs	r0, r0
   1172a:	bd70      	pop	{r4, r5, r6, pc}
   1172c:	4b28      	ldr	r3, [pc, #160]	; (117d0 <__swsetup_r+0xe4>)
   1172e:	429c      	cmp	r4, r3
   11730:	d101      	bne.n	11736 <__swsetup_r+0x4a>
   11732:	68ac      	ldr	r4, [r5, #8]
   11734:	e7eb      	b.n	1170e <__swsetup_r+0x22>
   11736:	4b27      	ldr	r3, [pc, #156]	; (117d4 <__swsetup_r+0xe8>)
   11738:	429c      	cmp	r4, r3
   1173a:	d1e8      	bne.n	1170e <__swsetup_r+0x22>
   1173c:	68ec      	ldr	r4, [r5, #12]
   1173e:	e7e6      	b.n	1170e <__swsetup_r+0x22>
   11740:	075b      	lsls	r3, r3, #29
   11742:	d513      	bpl.n	1176c <__swsetup_r+0x80>
   11744:	6b61      	ldr	r1, [r4, #52]	; 0x34
   11746:	2900      	cmp	r1, #0
   11748:	d008      	beq.n	1175c <__swsetup_r+0x70>
   1174a:	0023      	movs	r3, r4
   1174c:	3344      	adds	r3, #68	; 0x44
   1174e:	4299      	cmp	r1, r3
   11750:	d002      	beq.n	11758 <__swsetup_r+0x6c>
   11752:	0030      	movs	r0, r6
   11754:	f000 fa44 	bl	11be0 <_free_r>
   11758:	2300      	movs	r3, #0
   1175a:	6363      	str	r3, [r4, #52]	; 0x34
   1175c:	2224      	movs	r2, #36	; 0x24
   1175e:	89a3      	ldrh	r3, [r4, #12]
   11760:	4393      	bics	r3, r2
   11762:	81a3      	strh	r3, [r4, #12]
   11764:	2300      	movs	r3, #0
   11766:	6063      	str	r3, [r4, #4]
   11768:	6923      	ldr	r3, [r4, #16]
   1176a:	6023      	str	r3, [r4, #0]
   1176c:	2308      	movs	r3, #8
   1176e:	89a2      	ldrh	r2, [r4, #12]
   11770:	4313      	orrs	r3, r2
   11772:	81a3      	strh	r3, [r4, #12]
   11774:	6923      	ldr	r3, [r4, #16]
   11776:	2b00      	cmp	r3, #0
   11778:	d10b      	bne.n	11792 <__swsetup_r+0xa6>
   1177a:	21a0      	movs	r1, #160	; 0xa0
   1177c:	2280      	movs	r2, #128	; 0x80
   1177e:	89a3      	ldrh	r3, [r4, #12]
   11780:	0089      	lsls	r1, r1, #2
   11782:	0092      	lsls	r2, r2, #2
   11784:	400b      	ands	r3, r1
   11786:	4293      	cmp	r3, r2
   11788:	d003      	beq.n	11792 <__swsetup_r+0xa6>
   1178a:	0021      	movs	r1, r4
   1178c:	0030      	movs	r0, r6
   1178e:	f000 f9d9 	bl	11b44 <__smakebuf_r>
   11792:	2301      	movs	r3, #1
   11794:	89a2      	ldrh	r2, [r4, #12]
   11796:	4013      	ands	r3, r2
   11798:	d011      	beq.n	117be <__swsetup_r+0xd2>
   1179a:	2300      	movs	r3, #0
   1179c:	60a3      	str	r3, [r4, #8]
   1179e:	6963      	ldr	r3, [r4, #20]
   117a0:	425b      	negs	r3, r3
   117a2:	61a3      	str	r3, [r4, #24]
   117a4:	2000      	movs	r0, #0
   117a6:	6923      	ldr	r3, [r4, #16]
   117a8:	4283      	cmp	r3, r0
   117aa:	d1be      	bne.n	1172a <__swsetup_r+0x3e>
   117ac:	230c      	movs	r3, #12
   117ae:	5ee2      	ldrsh	r2, [r4, r3]
   117b0:	0613      	lsls	r3, r2, #24
   117b2:	d5ba      	bpl.n	1172a <__swsetup_r+0x3e>
   117b4:	2340      	movs	r3, #64	; 0x40
   117b6:	4313      	orrs	r3, r2
   117b8:	81a3      	strh	r3, [r4, #12]
   117ba:	3801      	subs	r0, #1
   117bc:	e7b5      	b.n	1172a <__swsetup_r+0x3e>
   117be:	0792      	lsls	r2, r2, #30
   117c0:	d400      	bmi.n	117c4 <__swsetup_r+0xd8>
   117c2:	6963      	ldr	r3, [r4, #20]
   117c4:	60a3      	str	r3, [r4, #8]
   117c6:	e7ed      	b.n	117a4 <__swsetup_r+0xb8>
   117c8:	2000000c 	.word	0x2000000c
   117cc:	00013150 	.word	0x00013150
   117d0:	00013170 	.word	0x00013170
   117d4:	00013130 	.word	0x00013130

000117d8 <__sflush_r>:
   117d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   117da:	898a      	ldrh	r2, [r1, #12]
   117dc:	0005      	movs	r5, r0
   117de:	000c      	movs	r4, r1
   117e0:	0713      	lsls	r3, r2, #28
   117e2:	d460      	bmi.n	118a6 <__sflush_r+0xce>
   117e4:	684b      	ldr	r3, [r1, #4]
   117e6:	2b00      	cmp	r3, #0
   117e8:	dc04      	bgt.n	117f4 <__sflush_r+0x1c>
   117ea:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   117ec:	2b00      	cmp	r3, #0
   117ee:	dc01      	bgt.n	117f4 <__sflush_r+0x1c>
   117f0:	2000      	movs	r0, #0
   117f2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   117f4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   117f6:	2f00      	cmp	r7, #0
   117f8:	d0fa      	beq.n	117f0 <__sflush_r+0x18>
   117fa:	2300      	movs	r3, #0
   117fc:	682e      	ldr	r6, [r5, #0]
   117fe:	602b      	str	r3, [r5, #0]
   11800:	2380      	movs	r3, #128	; 0x80
   11802:	015b      	lsls	r3, r3, #5
   11804:	401a      	ands	r2, r3
   11806:	d034      	beq.n	11872 <__sflush_r+0x9a>
   11808:	6d60      	ldr	r0, [r4, #84]	; 0x54
   1180a:	89a3      	ldrh	r3, [r4, #12]
   1180c:	075b      	lsls	r3, r3, #29
   1180e:	d506      	bpl.n	1181e <__sflush_r+0x46>
   11810:	6863      	ldr	r3, [r4, #4]
   11812:	1ac0      	subs	r0, r0, r3
   11814:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11816:	2b00      	cmp	r3, #0
   11818:	d001      	beq.n	1181e <__sflush_r+0x46>
   1181a:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1181c:	1ac0      	subs	r0, r0, r3
   1181e:	0002      	movs	r2, r0
   11820:	6a21      	ldr	r1, [r4, #32]
   11822:	2300      	movs	r3, #0
   11824:	0028      	movs	r0, r5
   11826:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   11828:	47b8      	blx	r7
   1182a:	89a1      	ldrh	r1, [r4, #12]
   1182c:	1c43      	adds	r3, r0, #1
   1182e:	d106      	bne.n	1183e <__sflush_r+0x66>
   11830:	682b      	ldr	r3, [r5, #0]
   11832:	2b1d      	cmp	r3, #29
   11834:	d831      	bhi.n	1189a <__sflush_r+0xc2>
   11836:	4a2c      	ldr	r2, [pc, #176]	; (118e8 <__sflush_r+0x110>)
   11838:	40da      	lsrs	r2, r3
   1183a:	07d3      	lsls	r3, r2, #31
   1183c:	d52d      	bpl.n	1189a <__sflush_r+0xc2>
   1183e:	2300      	movs	r3, #0
   11840:	6063      	str	r3, [r4, #4]
   11842:	6923      	ldr	r3, [r4, #16]
   11844:	6023      	str	r3, [r4, #0]
   11846:	04cb      	lsls	r3, r1, #19
   11848:	d505      	bpl.n	11856 <__sflush_r+0x7e>
   1184a:	1c43      	adds	r3, r0, #1
   1184c:	d102      	bne.n	11854 <__sflush_r+0x7c>
   1184e:	682b      	ldr	r3, [r5, #0]
   11850:	2b00      	cmp	r3, #0
   11852:	d100      	bne.n	11856 <__sflush_r+0x7e>
   11854:	6560      	str	r0, [r4, #84]	; 0x54
   11856:	6b61      	ldr	r1, [r4, #52]	; 0x34
   11858:	602e      	str	r6, [r5, #0]
   1185a:	2900      	cmp	r1, #0
   1185c:	d0c8      	beq.n	117f0 <__sflush_r+0x18>
   1185e:	0023      	movs	r3, r4
   11860:	3344      	adds	r3, #68	; 0x44
   11862:	4299      	cmp	r1, r3
   11864:	d002      	beq.n	1186c <__sflush_r+0x94>
   11866:	0028      	movs	r0, r5
   11868:	f000 f9ba 	bl	11be0 <_free_r>
   1186c:	2000      	movs	r0, #0
   1186e:	6360      	str	r0, [r4, #52]	; 0x34
   11870:	e7bf      	b.n	117f2 <__sflush_r+0x1a>
   11872:	2301      	movs	r3, #1
   11874:	6a21      	ldr	r1, [r4, #32]
   11876:	0028      	movs	r0, r5
   11878:	47b8      	blx	r7
   1187a:	1c43      	adds	r3, r0, #1
   1187c:	d1c5      	bne.n	1180a <__sflush_r+0x32>
   1187e:	682b      	ldr	r3, [r5, #0]
   11880:	2b00      	cmp	r3, #0
   11882:	d0c2      	beq.n	1180a <__sflush_r+0x32>
   11884:	2b1d      	cmp	r3, #29
   11886:	d001      	beq.n	1188c <__sflush_r+0xb4>
   11888:	2b16      	cmp	r3, #22
   1188a:	d101      	bne.n	11890 <__sflush_r+0xb8>
   1188c:	602e      	str	r6, [r5, #0]
   1188e:	e7af      	b.n	117f0 <__sflush_r+0x18>
   11890:	2340      	movs	r3, #64	; 0x40
   11892:	89a2      	ldrh	r2, [r4, #12]
   11894:	4313      	orrs	r3, r2
   11896:	81a3      	strh	r3, [r4, #12]
   11898:	e7ab      	b.n	117f2 <__sflush_r+0x1a>
   1189a:	2340      	movs	r3, #64	; 0x40
   1189c:	430b      	orrs	r3, r1
   1189e:	2001      	movs	r0, #1
   118a0:	81a3      	strh	r3, [r4, #12]
   118a2:	4240      	negs	r0, r0
   118a4:	e7a5      	b.n	117f2 <__sflush_r+0x1a>
   118a6:	690f      	ldr	r7, [r1, #16]
   118a8:	2f00      	cmp	r7, #0
   118aa:	d0a1      	beq.n	117f0 <__sflush_r+0x18>
   118ac:	680b      	ldr	r3, [r1, #0]
   118ae:	600f      	str	r7, [r1, #0]
   118b0:	1bdb      	subs	r3, r3, r7
   118b2:	9301      	str	r3, [sp, #4]
   118b4:	2300      	movs	r3, #0
   118b6:	0792      	lsls	r2, r2, #30
   118b8:	d100      	bne.n	118bc <__sflush_r+0xe4>
   118ba:	694b      	ldr	r3, [r1, #20]
   118bc:	60a3      	str	r3, [r4, #8]
   118be:	9b01      	ldr	r3, [sp, #4]
   118c0:	2b00      	cmp	r3, #0
   118c2:	dc00      	bgt.n	118c6 <__sflush_r+0xee>
   118c4:	e794      	b.n	117f0 <__sflush_r+0x18>
   118c6:	9b01      	ldr	r3, [sp, #4]
   118c8:	003a      	movs	r2, r7
   118ca:	6a21      	ldr	r1, [r4, #32]
   118cc:	0028      	movs	r0, r5
   118ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   118d0:	47b0      	blx	r6
   118d2:	2800      	cmp	r0, #0
   118d4:	dc03      	bgt.n	118de <__sflush_r+0x106>
   118d6:	2340      	movs	r3, #64	; 0x40
   118d8:	89a2      	ldrh	r2, [r4, #12]
   118da:	4313      	orrs	r3, r2
   118dc:	e7df      	b.n	1189e <__sflush_r+0xc6>
   118de:	9b01      	ldr	r3, [sp, #4]
   118e0:	183f      	adds	r7, r7, r0
   118e2:	1a1b      	subs	r3, r3, r0
   118e4:	9301      	str	r3, [sp, #4]
   118e6:	e7ea      	b.n	118be <__sflush_r+0xe6>
   118e8:	20400001 	.word	0x20400001

000118ec <_fflush_r>:
   118ec:	690b      	ldr	r3, [r1, #16]
   118ee:	b570      	push	{r4, r5, r6, lr}
   118f0:	0005      	movs	r5, r0
   118f2:	000c      	movs	r4, r1
   118f4:	2b00      	cmp	r3, #0
   118f6:	d101      	bne.n	118fc <_fflush_r+0x10>
   118f8:	2000      	movs	r0, #0
   118fa:	bd70      	pop	{r4, r5, r6, pc}
   118fc:	2800      	cmp	r0, #0
   118fe:	d004      	beq.n	1190a <_fflush_r+0x1e>
   11900:	6983      	ldr	r3, [r0, #24]
   11902:	2b00      	cmp	r3, #0
   11904:	d101      	bne.n	1190a <_fflush_r+0x1e>
   11906:	f000 f85f 	bl	119c8 <__sinit>
   1190a:	4b0b      	ldr	r3, [pc, #44]	; (11938 <_fflush_r+0x4c>)
   1190c:	429c      	cmp	r4, r3
   1190e:	d109      	bne.n	11924 <_fflush_r+0x38>
   11910:	686c      	ldr	r4, [r5, #4]
   11912:	220c      	movs	r2, #12
   11914:	5ea3      	ldrsh	r3, [r4, r2]
   11916:	2b00      	cmp	r3, #0
   11918:	d0ee      	beq.n	118f8 <_fflush_r+0xc>
   1191a:	0021      	movs	r1, r4
   1191c:	0028      	movs	r0, r5
   1191e:	f7ff ff5b 	bl	117d8 <__sflush_r>
   11922:	e7ea      	b.n	118fa <_fflush_r+0xe>
   11924:	4b05      	ldr	r3, [pc, #20]	; (1193c <_fflush_r+0x50>)
   11926:	429c      	cmp	r4, r3
   11928:	d101      	bne.n	1192e <_fflush_r+0x42>
   1192a:	68ac      	ldr	r4, [r5, #8]
   1192c:	e7f1      	b.n	11912 <_fflush_r+0x26>
   1192e:	4b04      	ldr	r3, [pc, #16]	; (11940 <_fflush_r+0x54>)
   11930:	429c      	cmp	r4, r3
   11932:	d1ee      	bne.n	11912 <_fflush_r+0x26>
   11934:	68ec      	ldr	r4, [r5, #12]
   11936:	e7ec      	b.n	11912 <_fflush_r+0x26>
   11938:	00013150 	.word	0x00013150
   1193c:	00013170 	.word	0x00013170
   11940:	00013130 	.word	0x00013130

00011944 <_cleanup_r>:
   11944:	b510      	push	{r4, lr}
   11946:	4902      	ldr	r1, [pc, #8]	; (11950 <_cleanup_r+0xc>)
   11948:	f000 f8b2 	bl	11ab0 <_fwalk_reent>
   1194c:	bd10      	pop	{r4, pc}
   1194e:	46c0      	nop			; (mov r8, r8)
   11950:	000118ed 	.word	0x000118ed

00011954 <std.isra.0>:
   11954:	2300      	movs	r3, #0
   11956:	b510      	push	{r4, lr}
   11958:	0004      	movs	r4, r0
   1195a:	6003      	str	r3, [r0, #0]
   1195c:	6043      	str	r3, [r0, #4]
   1195e:	6083      	str	r3, [r0, #8]
   11960:	8181      	strh	r1, [r0, #12]
   11962:	6643      	str	r3, [r0, #100]	; 0x64
   11964:	81c2      	strh	r2, [r0, #14]
   11966:	6103      	str	r3, [r0, #16]
   11968:	6143      	str	r3, [r0, #20]
   1196a:	6183      	str	r3, [r0, #24]
   1196c:	0019      	movs	r1, r3
   1196e:	2208      	movs	r2, #8
   11970:	305c      	adds	r0, #92	; 0x5c
   11972:	f7ff fcb8 	bl	112e6 <memset>
   11976:	4b05      	ldr	r3, [pc, #20]	; (1198c <std.isra.0+0x38>)
   11978:	6224      	str	r4, [r4, #32]
   1197a:	6263      	str	r3, [r4, #36]	; 0x24
   1197c:	4b04      	ldr	r3, [pc, #16]	; (11990 <std.isra.0+0x3c>)
   1197e:	62a3      	str	r3, [r4, #40]	; 0x28
   11980:	4b04      	ldr	r3, [pc, #16]	; (11994 <std.isra.0+0x40>)
   11982:	62e3      	str	r3, [r4, #44]	; 0x2c
   11984:	4b04      	ldr	r3, [pc, #16]	; (11998 <std.isra.0+0x44>)
   11986:	6323      	str	r3, [r4, #48]	; 0x30
   11988:	bd10      	pop	{r4, pc}
   1198a:	46c0      	nop			; (mov r8, r8)
   1198c:	000122ed 	.word	0x000122ed
   11990:	00012315 	.word	0x00012315
   11994:	0001234d 	.word	0x0001234d
   11998:	00012379 	.word	0x00012379

0001199c <__sfmoreglue>:
   1199c:	b570      	push	{r4, r5, r6, lr}
   1199e:	2568      	movs	r5, #104	; 0x68
   119a0:	1e4a      	subs	r2, r1, #1
   119a2:	4355      	muls	r5, r2
   119a4:	000e      	movs	r6, r1
   119a6:	0029      	movs	r1, r5
   119a8:	3174      	adds	r1, #116	; 0x74
   119aa:	f000 f963 	bl	11c74 <_malloc_r>
   119ae:	1e04      	subs	r4, r0, #0
   119b0:	d008      	beq.n	119c4 <__sfmoreglue+0x28>
   119b2:	2100      	movs	r1, #0
   119b4:	002a      	movs	r2, r5
   119b6:	6001      	str	r1, [r0, #0]
   119b8:	6046      	str	r6, [r0, #4]
   119ba:	300c      	adds	r0, #12
   119bc:	60a0      	str	r0, [r4, #8]
   119be:	3268      	adds	r2, #104	; 0x68
   119c0:	f7ff fc91 	bl	112e6 <memset>
   119c4:	0020      	movs	r0, r4
   119c6:	bd70      	pop	{r4, r5, r6, pc}

000119c8 <__sinit>:
   119c8:	6983      	ldr	r3, [r0, #24]
   119ca:	b513      	push	{r0, r1, r4, lr}
   119cc:	0004      	movs	r4, r0
   119ce:	2b00      	cmp	r3, #0
   119d0:	d128      	bne.n	11a24 <__sinit+0x5c>
   119d2:	6483      	str	r3, [r0, #72]	; 0x48
   119d4:	64c3      	str	r3, [r0, #76]	; 0x4c
   119d6:	6503      	str	r3, [r0, #80]	; 0x50
   119d8:	4b13      	ldr	r3, [pc, #76]	; (11a28 <__sinit+0x60>)
   119da:	4a14      	ldr	r2, [pc, #80]	; (11a2c <__sinit+0x64>)
   119dc:	681b      	ldr	r3, [r3, #0]
   119de:	6282      	str	r2, [r0, #40]	; 0x28
   119e0:	9301      	str	r3, [sp, #4]
   119e2:	4298      	cmp	r0, r3
   119e4:	d101      	bne.n	119ea <__sinit+0x22>
   119e6:	2301      	movs	r3, #1
   119e8:	6183      	str	r3, [r0, #24]
   119ea:	0020      	movs	r0, r4
   119ec:	f000 f820 	bl	11a30 <__sfp>
   119f0:	6060      	str	r0, [r4, #4]
   119f2:	0020      	movs	r0, r4
   119f4:	f000 f81c 	bl	11a30 <__sfp>
   119f8:	60a0      	str	r0, [r4, #8]
   119fa:	0020      	movs	r0, r4
   119fc:	f000 f818 	bl	11a30 <__sfp>
   11a00:	2200      	movs	r2, #0
   11a02:	60e0      	str	r0, [r4, #12]
   11a04:	2104      	movs	r1, #4
   11a06:	6860      	ldr	r0, [r4, #4]
   11a08:	f7ff ffa4 	bl	11954 <std.isra.0>
   11a0c:	2201      	movs	r2, #1
   11a0e:	2109      	movs	r1, #9
   11a10:	68a0      	ldr	r0, [r4, #8]
   11a12:	f7ff ff9f 	bl	11954 <std.isra.0>
   11a16:	2202      	movs	r2, #2
   11a18:	2112      	movs	r1, #18
   11a1a:	68e0      	ldr	r0, [r4, #12]
   11a1c:	f7ff ff9a 	bl	11954 <std.isra.0>
   11a20:	2301      	movs	r3, #1
   11a22:	61a3      	str	r3, [r4, #24]
   11a24:	bd13      	pop	{r0, r1, r4, pc}
   11a26:	46c0      	nop			; (mov r8, r8)
   11a28:	0001312c 	.word	0x0001312c
   11a2c:	00011945 	.word	0x00011945

00011a30 <__sfp>:
   11a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11a32:	4b1e      	ldr	r3, [pc, #120]	; (11aac <__sfp+0x7c>)
   11a34:	0007      	movs	r7, r0
   11a36:	681e      	ldr	r6, [r3, #0]
   11a38:	69b3      	ldr	r3, [r6, #24]
   11a3a:	2b00      	cmp	r3, #0
   11a3c:	d102      	bne.n	11a44 <__sfp+0x14>
   11a3e:	0030      	movs	r0, r6
   11a40:	f7ff ffc2 	bl	119c8 <__sinit>
   11a44:	3648      	adds	r6, #72	; 0x48
   11a46:	68b4      	ldr	r4, [r6, #8]
   11a48:	6873      	ldr	r3, [r6, #4]
   11a4a:	3b01      	subs	r3, #1
   11a4c:	d504      	bpl.n	11a58 <__sfp+0x28>
   11a4e:	6833      	ldr	r3, [r6, #0]
   11a50:	2b00      	cmp	r3, #0
   11a52:	d007      	beq.n	11a64 <__sfp+0x34>
   11a54:	6836      	ldr	r6, [r6, #0]
   11a56:	e7f6      	b.n	11a46 <__sfp+0x16>
   11a58:	220c      	movs	r2, #12
   11a5a:	5ea5      	ldrsh	r5, [r4, r2]
   11a5c:	2d00      	cmp	r5, #0
   11a5e:	d00d      	beq.n	11a7c <__sfp+0x4c>
   11a60:	3468      	adds	r4, #104	; 0x68
   11a62:	e7f2      	b.n	11a4a <__sfp+0x1a>
   11a64:	2104      	movs	r1, #4
   11a66:	0038      	movs	r0, r7
   11a68:	f7ff ff98 	bl	1199c <__sfmoreglue>
   11a6c:	6030      	str	r0, [r6, #0]
   11a6e:	2800      	cmp	r0, #0
   11a70:	d1f0      	bne.n	11a54 <__sfp+0x24>
   11a72:	230c      	movs	r3, #12
   11a74:	0004      	movs	r4, r0
   11a76:	603b      	str	r3, [r7, #0]
   11a78:	0020      	movs	r0, r4
   11a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11a7c:	2301      	movs	r3, #1
   11a7e:	0020      	movs	r0, r4
   11a80:	425b      	negs	r3, r3
   11a82:	81e3      	strh	r3, [r4, #14]
   11a84:	3302      	adds	r3, #2
   11a86:	81a3      	strh	r3, [r4, #12]
   11a88:	6665      	str	r5, [r4, #100]	; 0x64
   11a8a:	6025      	str	r5, [r4, #0]
   11a8c:	60a5      	str	r5, [r4, #8]
   11a8e:	6065      	str	r5, [r4, #4]
   11a90:	6125      	str	r5, [r4, #16]
   11a92:	6165      	str	r5, [r4, #20]
   11a94:	61a5      	str	r5, [r4, #24]
   11a96:	2208      	movs	r2, #8
   11a98:	0029      	movs	r1, r5
   11a9a:	305c      	adds	r0, #92	; 0x5c
   11a9c:	f7ff fc23 	bl	112e6 <memset>
   11aa0:	6365      	str	r5, [r4, #52]	; 0x34
   11aa2:	63a5      	str	r5, [r4, #56]	; 0x38
   11aa4:	64a5      	str	r5, [r4, #72]	; 0x48
   11aa6:	64e5      	str	r5, [r4, #76]	; 0x4c
   11aa8:	e7e6      	b.n	11a78 <__sfp+0x48>
   11aaa:	46c0      	nop			; (mov r8, r8)
   11aac:	0001312c 	.word	0x0001312c

00011ab0 <_fwalk_reent>:
   11ab0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11ab2:	0004      	movs	r4, r0
   11ab4:	0007      	movs	r7, r0
   11ab6:	2600      	movs	r6, #0
   11ab8:	9101      	str	r1, [sp, #4]
   11aba:	3448      	adds	r4, #72	; 0x48
   11abc:	2c00      	cmp	r4, #0
   11abe:	d101      	bne.n	11ac4 <_fwalk_reent+0x14>
   11ac0:	0030      	movs	r0, r6
   11ac2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   11ac4:	6863      	ldr	r3, [r4, #4]
   11ac6:	68a5      	ldr	r5, [r4, #8]
   11ac8:	9300      	str	r3, [sp, #0]
   11aca:	9b00      	ldr	r3, [sp, #0]
   11acc:	3b01      	subs	r3, #1
   11ace:	9300      	str	r3, [sp, #0]
   11ad0:	d501      	bpl.n	11ad6 <_fwalk_reent+0x26>
   11ad2:	6824      	ldr	r4, [r4, #0]
   11ad4:	e7f2      	b.n	11abc <_fwalk_reent+0xc>
   11ad6:	89ab      	ldrh	r3, [r5, #12]
   11ad8:	2b01      	cmp	r3, #1
   11ada:	d908      	bls.n	11aee <_fwalk_reent+0x3e>
   11adc:	220e      	movs	r2, #14
   11ade:	5eab      	ldrsh	r3, [r5, r2]
   11ae0:	3301      	adds	r3, #1
   11ae2:	d004      	beq.n	11aee <_fwalk_reent+0x3e>
   11ae4:	0029      	movs	r1, r5
   11ae6:	0038      	movs	r0, r7
   11ae8:	9b01      	ldr	r3, [sp, #4]
   11aea:	4798      	blx	r3
   11aec:	4306      	orrs	r6, r0
   11aee:	3568      	adds	r5, #104	; 0x68
   11af0:	e7eb      	b.n	11aca <_fwalk_reent+0x1a>
	...

00011af4 <__swhatbuf_r>:
   11af4:	b570      	push	{r4, r5, r6, lr}
   11af6:	000e      	movs	r6, r1
   11af8:	001d      	movs	r5, r3
   11afa:	230e      	movs	r3, #14
   11afc:	5ec9      	ldrsh	r1, [r1, r3]
   11afe:	b090      	sub	sp, #64	; 0x40
   11b00:	0014      	movs	r4, r2
   11b02:	2900      	cmp	r1, #0
   11b04:	da07      	bge.n	11b16 <__swhatbuf_r+0x22>
   11b06:	2300      	movs	r3, #0
   11b08:	602b      	str	r3, [r5, #0]
   11b0a:	89b3      	ldrh	r3, [r6, #12]
   11b0c:	061b      	lsls	r3, r3, #24
   11b0e:	d411      	bmi.n	11b34 <__swhatbuf_r+0x40>
   11b10:	2380      	movs	r3, #128	; 0x80
   11b12:	00db      	lsls	r3, r3, #3
   11b14:	e00f      	b.n	11b36 <__swhatbuf_r+0x42>
   11b16:	aa01      	add	r2, sp, #4
   11b18:	f000 fc5a 	bl	123d0 <_fstat_r>
   11b1c:	2800      	cmp	r0, #0
   11b1e:	dbf2      	blt.n	11b06 <__swhatbuf_r+0x12>
   11b20:	22f0      	movs	r2, #240	; 0xf0
   11b22:	9b02      	ldr	r3, [sp, #8]
   11b24:	0212      	lsls	r2, r2, #8
   11b26:	4013      	ands	r3, r2
   11b28:	4a05      	ldr	r2, [pc, #20]	; (11b40 <__swhatbuf_r+0x4c>)
   11b2a:	189b      	adds	r3, r3, r2
   11b2c:	425a      	negs	r2, r3
   11b2e:	4153      	adcs	r3, r2
   11b30:	602b      	str	r3, [r5, #0]
   11b32:	e7ed      	b.n	11b10 <__swhatbuf_r+0x1c>
   11b34:	2340      	movs	r3, #64	; 0x40
   11b36:	2000      	movs	r0, #0
   11b38:	6023      	str	r3, [r4, #0]
   11b3a:	b010      	add	sp, #64	; 0x40
   11b3c:	bd70      	pop	{r4, r5, r6, pc}
   11b3e:	46c0      	nop			; (mov r8, r8)
   11b40:	ffffe000 	.word	0xffffe000

00011b44 <__smakebuf_r>:
   11b44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11b46:	2602      	movs	r6, #2
   11b48:	898b      	ldrh	r3, [r1, #12]
   11b4a:	0005      	movs	r5, r0
   11b4c:	000c      	movs	r4, r1
   11b4e:	4233      	tst	r3, r6
   11b50:	d006      	beq.n	11b60 <__smakebuf_r+0x1c>
   11b52:	0023      	movs	r3, r4
   11b54:	3347      	adds	r3, #71	; 0x47
   11b56:	6023      	str	r3, [r4, #0]
   11b58:	6123      	str	r3, [r4, #16]
   11b5a:	2301      	movs	r3, #1
   11b5c:	6163      	str	r3, [r4, #20]
   11b5e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   11b60:	ab01      	add	r3, sp, #4
   11b62:	466a      	mov	r2, sp
   11b64:	f7ff ffc6 	bl	11af4 <__swhatbuf_r>
   11b68:	9900      	ldr	r1, [sp, #0]
   11b6a:	0007      	movs	r7, r0
   11b6c:	0028      	movs	r0, r5
   11b6e:	f000 f881 	bl	11c74 <_malloc_r>
   11b72:	2800      	cmp	r0, #0
   11b74:	d108      	bne.n	11b88 <__smakebuf_r+0x44>
   11b76:	220c      	movs	r2, #12
   11b78:	5ea3      	ldrsh	r3, [r4, r2]
   11b7a:	059a      	lsls	r2, r3, #22
   11b7c:	d4ef      	bmi.n	11b5e <__smakebuf_r+0x1a>
   11b7e:	2203      	movs	r2, #3
   11b80:	4393      	bics	r3, r2
   11b82:	431e      	orrs	r6, r3
   11b84:	81a6      	strh	r6, [r4, #12]
   11b86:	e7e4      	b.n	11b52 <__smakebuf_r+0xe>
   11b88:	4b0f      	ldr	r3, [pc, #60]	; (11bc8 <__smakebuf_r+0x84>)
   11b8a:	62ab      	str	r3, [r5, #40]	; 0x28
   11b8c:	2380      	movs	r3, #128	; 0x80
   11b8e:	89a2      	ldrh	r2, [r4, #12]
   11b90:	6020      	str	r0, [r4, #0]
   11b92:	4313      	orrs	r3, r2
   11b94:	81a3      	strh	r3, [r4, #12]
   11b96:	9b00      	ldr	r3, [sp, #0]
   11b98:	6120      	str	r0, [r4, #16]
   11b9a:	6163      	str	r3, [r4, #20]
   11b9c:	9b01      	ldr	r3, [sp, #4]
   11b9e:	2b00      	cmp	r3, #0
   11ba0:	d00d      	beq.n	11bbe <__smakebuf_r+0x7a>
   11ba2:	230e      	movs	r3, #14
   11ba4:	5ee1      	ldrsh	r1, [r4, r3]
   11ba6:	0028      	movs	r0, r5
   11ba8:	f000 fc24 	bl	123f4 <_isatty_r>
   11bac:	2800      	cmp	r0, #0
   11bae:	d006      	beq.n	11bbe <__smakebuf_r+0x7a>
   11bb0:	2203      	movs	r2, #3
   11bb2:	89a3      	ldrh	r3, [r4, #12]
   11bb4:	4393      	bics	r3, r2
   11bb6:	001a      	movs	r2, r3
   11bb8:	2301      	movs	r3, #1
   11bba:	4313      	orrs	r3, r2
   11bbc:	81a3      	strh	r3, [r4, #12]
   11bbe:	89a0      	ldrh	r0, [r4, #12]
   11bc0:	4338      	orrs	r0, r7
   11bc2:	81a0      	strh	r0, [r4, #12]
   11bc4:	e7cb      	b.n	11b5e <__smakebuf_r+0x1a>
   11bc6:	46c0      	nop			; (mov r8, r8)
   11bc8:	00011945 	.word	0x00011945

00011bcc <malloc>:
   11bcc:	b510      	push	{r4, lr}
   11bce:	4b03      	ldr	r3, [pc, #12]	; (11bdc <malloc+0x10>)
   11bd0:	0001      	movs	r1, r0
   11bd2:	6818      	ldr	r0, [r3, #0]
   11bd4:	f000 f84e 	bl	11c74 <_malloc_r>
   11bd8:	bd10      	pop	{r4, pc}
   11bda:	46c0      	nop			; (mov r8, r8)
   11bdc:	2000000c 	.word	0x2000000c

00011be0 <_free_r>:
   11be0:	b570      	push	{r4, r5, r6, lr}
   11be2:	0005      	movs	r5, r0
   11be4:	2900      	cmp	r1, #0
   11be6:	d010      	beq.n	11c0a <_free_r+0x2a>
   11be8:	1f0c      	subs	r4, r1, #4
   11bea:	6823      	ldr	r3, [r4, #0]
   11bec:	2b00      	cmp	r3, #0
   11bee:	da00      	bge.n	11bf2 <_free_r+0x12>
   11bf0:	18e4      	adds	r4, r4, r3
   11bf2:	0028      	movs	r0, r5
   11bf4:	f000 fc2f 	bl	12456 <__malloc_lock>
   11bf8:	4a1d      	ldr	r2, [pc, #116]	; (11c70 <_free_r+0x90>)
   11bfa:	6813      	ldr	r3, [r2, #0]
   11bfc:	2b00      	cmp	r3, #0
   11bfe:	d105      	bne.n	11c0c <_free_r+0x2c>
   11c00:	6063      	str	r3, [r4, #4]
   11c02:	6014      	str	r4, [r2, #0]
   11c04:	0028      	movs	r0, r5
   11c06:	f000 fc27 	bl	12458 <__malloc_unlock>
   11c0a:	bd70      	pop	{r4, r5, r6, pc}
   11c0c:	42a3      	cmp	r3, r4
   11c0e:	d909      	bls.n	11c24 <_free_r+0x44>
   11c10:	6821      	ldr	r1, [r4, #0]
   11c12:	1860      	adds	r0, r4, r1
   11c14:	4283      	cmp	r3, r0
   11c16:	d1f3      	bne.n	11c00 <_free_r+0x20>
   11c18:	6818      	ldr	r0, [r3, #0]
   11c1a:	685b      	ldr	r3, [r3, #4]
   11c1c:	1841      	adds	r1, r0, r1
   11c1e:	6021      	str	r1, [r4, #0]
   11c20:	e7ee      	b.n	11c00 <_free_r+0x20>
   11c22:	0013      	movs	r3, r2
   11c24:	685a      	ldr	r2, [r3, #4]
   11c26:	2a00      	cmp	r2, #0
   11c28:	d001      	beq.n	11c2e <_free_r+0x4e>
   11c2a:	42a2      	cmp	r2, r4
   11c2c:	d9f9      	bls.n	11c22 <_free_r+0x42>
   11c2e:	6819      	ldr	r1, [r3, #0]
   11c30:	1858      	adds	r0, r3, r1
   11c32:	42a0      	cmp	r0, r4
   11c34:	d10b      	bne.n	11c4e <_free_r+0x6e>
   11c36:	6820      	ldr	r0, [r4, #0]
   11c38:	1809      	adds	r1, r1, r0
   11c3a:	1858      	adds	r0, r3, r1
   11c3c:	6019      	str	r1, [r3, #0]
   11c3e:	4282      	cmp	r2, r0
   11c40:	d1e0      	bne.n	11c04 <_free_r+0x24>
   11c42:	6810      	ldr	r0, [r2, #0]
   11c44:	6852      	ldr	r2, [r2, #4]
   11c46:	1841      	adds	r1, r0, r1
   11c48:	6019      	str	r1, [r3, #0]
   11c4a:	605a      	str	r2, [r3, #4]
   11c4c:	e7da      	b.n	11c04 <_free_r+0x24>
   11c4e:	42a0      	cmp	r0, r4
   11c50:	d902      	bls.n	11c58 <_free_r+0x78>
   11c52:	230c      	movs	r3, #12
   11c54:	602b      	str	r3, [r5, #0]
   11c56:	e7d5      	b.n	11c04 <_free_r+0x24>
   11c58:	6821      	ldr	r1, [r4, #0]
   11c5a:	1860      	adds	r0, r4, r1
   11c5c:	4282      	cmp	r2, r0
   11c5e:	d103      	bne.n	11c68 <_free_r+0x88>
   11c60:	6810      	ldr	r0, [r2, #0]
   11c62:	6852      	ldr	r2, [r2, #4]
   11c64:	1841      	adds	r1, r0, r1
   11c66:	6021      	str	r1, [r4, #0]
   11c68:	6062      	str	r2, [r4, #4]
   11c6a:	605c      	str	r4, [r3, #4]
   11c6c:	e7ca      	b.n	11c04 <_free_r+0x24>
   11c6e:	46c0      	nop			; (mov r8, r8)
   11c70:	200005a8 	.word	0x200005a8

00011c74 <_malloc_r>:
   11c74:	2303      	movs	r3, #3
   11c76:	b570      	push	{r4, r5, r6, lr}
   11c78:	1ccd      	adds	r5, r1, #3
   11c7a:	439d      	bics	r5, r3
   11c7c:	3508      	adds	r5, #8
   11c7e:	0006      	movs	r6, r0
   11c80:	2d0c      	cmp	r5, #12
   11c82:	d21e      	bcs.n	11cc2 <_malloc_r+0x4e>
   11c84:	250c      	movs	r5, #12
   11c86:	42a9      	cmp	r1, r5
   11c88:	d81d      	bhi.n	11cc6 <_malloc_r+0x52>
   11c8a:	0030      	movs	r0, r6
   11c8c:	f000 fbe3 	bl	12456 <__malloc_lock>
   11c90:	4a25      	ldr	r2, [pc, #148]	; (11d28 <_malloc_r+0xb4>)
   11c92:	6814      	ldr	r4, [r2, #0]
   11c94:	0021      	movs	r1, r4
   11c96:	2900      	cmp	r1, #0
   11c98:	d119      	bne.n	11cce <_malloc_r+0x5a>
   11c9a:	4c24      	ldr	r4, [pc, #144]	; (11d2c <_malloc_r+0xb8>)
   11c9c:	6823      	ldr	r3, [r4, #0]
   11c9e:	2b00      	cmp	r3, #0
   11ca0:	d103      	bne.n	11caa <_malloc_r+0x36>
   11ca2:	0030      	movs	r0, r6
   11ca4:	f000 fb10 	bl	122c8 <_sbrk_r>
   11ca8:	6020      	str	r0, [r4, #0]
   11caa:	0029      	movs	r1, r5
   11cac:	0030      	movs	r0, r6
   11cae:	f000 fb0b 	bl	122c8 <_sbrk_r>
   11cb2:	1c43      	adds	r3, r0, #1
   11cb4:	d12c      	bne.n	11d10 <_malloc_r+0x9c>
   11cb6:	230c      	movs	r3, #12
   11cb8:	0030      	movs	r0, r6
   11cba:	6033      	str	r3, [r6, #0]
   11cbc:	f000 fbcc 	bl	12458 <__malloc_unlock>
   11cc0:	e003      	b.n	11cca <_malloc_r+0x56>
   11cc2:	2d00      	cmp	r5, #0
   11cc4:	dadf      	bge.n	11c86 <_malloc_r+0x12>
   11cc6:	230c      	movs	r3, #12
   11cc8:	6033      	str	r3, [r6, #0]
   11cca:	2000      	movs	r0, #0
   11ccc:	bd70      	pop	{r4, r5, r6, pc}
   11cce:	680b      	ldr	r3, [r1, #0]
   11cd0:	1b5b      	subs	r3, r3, r5
   11cd2:	d41a      	bmi.n	11d0a <_malloc_r+0x96>
   11cd4:	2b0b      	cmp	r3, #11
   11cd6:	d903      	bls.n	11ce0 <_malloc_r+0x6c>
   11cd8:	600b      	str	r3, [r1, #0]
   11cda:	18cc      	adds	r4, r1, r3
   11cdc:	6025      	str	r5, [r4, #0]
   11cde:	e003      	b.n	11ce8 <_malloc_r+0x74>
   11ce0:	428c      	cmp	r4, r1
   11ce2:	d10e      	bne.n	11d02 <_malloc_r+0x8e>
   11ce4:	6863      	ldr	r3, [r4, #4]
   11ce6:	6013      	str	r3, [r2, #0]
   11ce8:	0030      	movs	r0, r6
   11cea:	f000 fbb5 	bl	12458 <__malloc_unlock>
   11cee:	0020      	movs	r0, r4
   11cf0:	2207      	movs	r2, #7
   11cf2:	300b      	adds	r0, #11
   11cf4:	1d23      	adds	r3, r4, #4
   11cf6:	4390      	bics	r0, r2
   11cf8:	1ac3      	subs	r3, r0, r3
   11cfa:	d0e7      	beq.n	11ccc <_malloc_r+0x58>
   11cfc:	425a      	negs	r2, r3
   11cfe:	50e2      	str	r2, [r4, r3]
   11d00:	e7e4      	b.n	11ccc <_malloc_r+0x58>
   11d02:	684b      	ldr	r3, [r1, #4]
   11d04:	6063      	str	r3, [r4, #4]
   11d06:	000c      	movs	r4, r1
   11d08:	e7ee      	b.n	11ce8 <_malloc_r+0x74>
   11d0a:	000c      	movs	r4, r1
   11d0c:	6849      	ldr	r1, [r1, #4]
   11d0e:	e7c2      	b.n	11c96 <_malloc_r+0x22>
   11d10:	2303      	movs	r3, #3
   11d12:	1cc4      	adds	r4, r0, #3
   11d14:	439c      	bics	r4, r3
   11d16:	42a0      	cmp	r0, r4
   11d18:	d0e0      	beq.n	11cdc <_malloc_r+0x68>
   11d1a:	1a21      	subs	r1, r4, r0
   11d1c:	0030      	movs	r0, r6
   11d1e:	f000 fad3 	bl	122c8 <_sbrk_r>
   11d22:	1c43      	adds	r3, r0, #1
   11d24:	d1da      	bne.n	11cdc <_malloc_r+0x68>
   11d26:	e7c6      	b.n	11cb6 <_malloc_r+0x42>
   11d28:	200005a8 	.word	0x200005a8
   11d2c:	200005ac 	.word	0x200005ac

00011d30 <__sfputc_r>:
   11d30:	6893      	ldr	r3, [r2, #8]
   11d32:	b510      	push	{r4, lr}
   11d34:	3b01      	subs	r3, #1
   11d36:	6093      	str	r3, [r2, #8]
   11d38:	2b00      	cmp	r3, #0
   11d3a:	da05      	bge.n	11d48 <__sfputc_r+0x18>
   11d3c:	6994      	ldr	r4, [r2, #24]
   11d3e:	42a3      	cmp	r3, r4
   11d40:	db08      	blt.n	11d54 <__sfputc_r+0x24>
   11d42:	b2cb      	uxtb	r3, r1
   11d44:	2b0a      	cmp	r3, #10
   11d46:	d005      	beq.n	11d54 <__sfputc_r+0x24>
   11d48:	6813      	ldr	r3, [r2, #0]
   11d4a:	1c58      	adds	r0, r3, #1
   11d4c:	6010      	str	r0, [r2, #0]
   11d4e:	7019      	strb	r1, [r3, #0]
   11d50:	b2c8      	uxtb	r0, r1
   11d52:	bd10      	pop	{r4, pc}
   11d54:	f7ff fc74 	bl	11640 <__swbuf_r>
   11d58:	e7fb      	b.n	11d52 <__sfputc_r+0x22>

00011d5a <__sfputs_r>:
   11d5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11d5c:	0006      	movs	r6, r0
   11d5e:	000f      	movs	r7, r1
   11d60:	0014      	movs	r4, r2
   11d62:	18d5      	adds	r5, r2, r3
   11d64:	42ac      	cmp	r4, r5
   11d66:	d101      	bne.n	11d6c <__sfputs_r+0x12>
   11d68:	2000      	movs	r0, #0
   11d6a:	e007      	b.n	11d7c <__sfputs_r+0x22>
   11d6c:	7821      	ldrb	r1, [r4, #0]
   11d6e:	003a      	movs	r2, r7
   11d70:	0030      	movs	r0, r6
   11d72:	f7ff ffdd 	bl	11d30 <__sfputc_r>
   11d76:	3401      	adds	r4, #1
   11d78:	1c43      	adds	r3, r0, #1
   11d7a:	d1f3      	bne.n	11d64 <__sfputs_r+0xa>
   11d7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00011d80 <_vfiprintf_r>:
   11d80:	b5f0      	push	{r4, r5, r6, r7, lr}
   11d82:	b09f      	sub	sp, #124	; 0x7c
   11d84:	0006      	movs	r6, r0
   11d86:	000f      	movs	r7, r1
   11d88:	0014      	movs	r4, r2
   11d8a:	9305      	str	r3, [sp, #20]
   11d8c:	2800      	cmp	r0, #0
   11d8e:	d004      	beq.n	11d9a <_vfiprintf_r+0x1a>
   11d90:	6983      	ldr	r3, [r0, #24]
   11d92:	2b00      	cmp	r3, #0
   11d94:	d101      	bne.n	11d9a <_vfiprintf_r+0x1a>
   11d96:	f7ff fe17 	bl	119c8 <__sinit>
   11d9a:	4b7f      	ldr	r3, [pc, #508]	; (11f98 <_vfiprintf_r+0x218>)
   11d9c:	429f      	cmp	r7, r3
   11d9e:	d15c      	bne.n	11e5a <_vfiprintf_r+0xda>
   11da0:	6877      	ldr	r7, [r6, #4]
   11da2:	89bb      	ldrh	r3, [r7, #12]
   11da4:	071b      	lsls	r3, r3, #28
   11da6:	d562      	bpl.n	11e6e <_vfiprintf_r+0xee>
   11da8:	693b      	ldr	r3, [r7, #16]
   11daa:	2b00      	cmp	r3, #0
   11dac:	d05f      	beq.n	11e6e <_vfiprintf_r+0xee>
   11dae:	2300      	movs	r3, #0
   11db0:	ad06      	add	r5, sp, #24
   11db2:	616b      	str	r3, [r5, #20]
   11db4:	3320      	adds	r3, #32
   11db6:	766b      	strb	r3, [r5, #25]
   11db8:	3310      	adds	r3, #16
   11dba:	76ab      	strb	r3, [r5, #26]
   11dbc:	9402      	str	r4, [sp, #8]
   11dbe:	9c02      	ldr	r4, [sp, #8]
   11dc0:	7823      	ldrb	r3, [r4, #0]
   11dc2:	2b00      	cmp	r3, #0
   11dc4:	d15d      	bne.n	11e82 <_vfiprintf_r+0x102>
   11dc6:	9b02      	ldr	r3, [sp, #8]
   11dc8:	1ae3      	subs	r3, r4, r3
   11dca:	9304      	str	r3, [sp, #16]
   11dcc:	d00d      	beq.n	11dea <_vfiprintf_r+0x6a>
   11dce:	9b04      	ldr	r3, [sp, #16]
   11dd0:	9a02      	ldr	r2, [sp, #8]
   11dd2:	0039      	movs	r1, r7
   11dd4:	0030      	movs	r0, r6
   11dd6:	f7ff ffc0 	bl	11d5a <__sfputs_r>
   11dda:	1c43      	adds	r3, r0, #1
   11ddc:	d100      	bne.n	11de0 <_vfiprintf_r+0x60>
   11dde:	e0cc      	b.n	11f7a <_vfiprintf_r+0x1fa>
   11de0:	696a      	ldr	r2, [r5, #20]
   11de2:	9b04      	ldr	r3, [sp, #16]
   11de4:	4694      	mov	ip, r2
   11de6:	4463      	add	r3, ip
   11de8:	616b      	str	r3, [r5, #20]
   11dea:	7823      	ldrb	r3, [r4, #0]
   11dec:	2b00      	cmp	r3, #0
   11dee:	d100      	bne.n	11df2 <_vfiprintf_r+0x72>
   11df0:	e0c3      	b.n	11f7a <_vfiprintf_r+0x1fa>
   11df2:	2201      	movs	r2, #1
   11df4:	2300      	movs	r3, #0
   11df6:	4252      	negs	r2, r2
   11df8:	606a      	str	r2, [r5, #4]
   11dfa:	a902      	add	r1, sp, #8
   11dfc:	3254      	adds	r2, #84	; 0x54
   11dfe:	1852      	adds	r2, r2, r1
   11e00:	3401      	adds	r4, #1
   11e02:	602b      	str	r3, [r5, #0]
   11e04:	60eb      	str	r3, [r5, #12]
   11e06:	60ab      	str	r3, [r5, #8]
   11e08:	7013      	strb	r3, [r2, #0]
   11e0a:	65ab      	str	r3, [r5, #88]	; 0x58
   11e0c:	7821      	ldrb	r1, [r4, #0]
   11e0e:	2205      	movs	r2, #5
   11e10:	4862      	ldr	r0, [pc, #392]	; (11f9c <_vfiprintf_r+0x21c>)
   11e12:	f000 fb15 	bl	12440 <memchr>
   11e16:	1c63      	adds	r3, r4, #1
   11e18:	469c      	mov	ip, r3
   11e1a:	2800      	cmp	r0, #0
   11e1c:	d135      	bne.n	11e8a <_vfiprintf_r+0x10a>
   11e1e:	6829      	ldr	r1, [r5, #0]
   11e20:	06cb      	lsls	r3, r1, #27
   11e22:	d504      	bpl.n	11e2e <_vfiprintf_r+0xae>
   11e24:	2353      	movs	r3, #83	; 0x53
   11e26:	aa02      	add	r2, sp, #8
   11e28:	3020      	adds	r0, #32
   11e2a:	189b      	adds	r3, r3, r2
   11e2c:	7018      	strb	r0, [r3, #0]
   11e2e:	070b      	lsls	r3, r1, #28
   11e30:	d504      	bpl.n	11e3c <_vfiprintf_r+0xbc>
   11e32:	2353      	movs	r3, #83	; 0x53
   11e34:	202b      	movs	r0, #43	; 0x2b
   11e36:	aa02      	add	r2, sp, #8
   11e38:	189b      	adds	r3, r3, r2
   11e3a:	7018      	strb	r0, [r3, #0]
   11e3c:	7823      	ldrb	r3, [r4, #0]
   11e3e:	2b2a      	cmp	r3, #42	; 0x2a
   11e40:	d02c      	beq.n	11e9c <_vfiprintf_r+0x11c>
   11e42:	2000      	movs	r0, #0
   11e44:	210a      	movs	r1, #10
   11e46:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11e48:	7822      	ldrb	r2, [r4, #0]
   11e4a:	3a30      	subs	r2, #48	; 0x30
   11e4c:	2a09      	cmp	r2, #9
   11e4e:	d800      	bhi.n	11e52 <_vfiprintf_r+0xd2>
   11e50:	e06b      	b.n	11f2a <_vfiprintf_r+0x1aa>
   11e52:	2800      	cmp	r0, #0
   11e54:	d02a      	beq.n	11eac <_vfiprintf_r+0x12c>
   11e56:	9309      	str	r3, [sp, #36]	; 0x24
   11e58:	e028      	b.n	11eac <_vfiprintf_r+0x12c>
   11e5a:	4b51      	ldr	r3, [pc, #324]	; (11fa0 <_vfiprintf_r+0x220>)
   11e5c:	429f      	cmp	r7, r3
   11e5e:	d101      	bne.n	11e64 <_vfiprintf_r+0xe4>
   11e60:	68b7      	ldr	r7, [r6, #8]
   11e62:	e79e      	b.n	11da2 <_vfiprintf_r+0x22>
   11e64:	4b4f      	ldr	r3, [pc, #316]	; (11fa4 <_vfiprintf_r+0x224>)
   11e66:	429f      	cmp	r7, r3
   11e68:	d19b      	bne.n	11da2 <_vfiprintf_r+0x22>
   11e6a:	68f7      	ldr	r7, [r6, #12]
   11e6c:	e799      	b.n	11da2 <_vfiprintf_r+0x22>
   11e6e:	0039      	movs	r1, r7
   11e70:	0030      	movs	r0, r6
   11e72:	f7ff fc3b 	bl	116ec <__swsetup_r>
   11e76:	2800      	cmp	r0, #0
   11e78:	d099      	beq.n	11dae <_vfiprintf_r+0x2e>
   11e7a:	2001      	movs	r0, #1
   11e7c:	4240      	negs	r0, r0
   11e7e:	b01f      	add	sp, #124	; 0x7c
   11e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11e82:	2b25      	cmp	r3, #37	; 0x25
   11e84:	d09f      	beq.n	11dc6 <_vfiprintf_r+0x46>
   11e86:	3401      	adds	r4, #1
   11e88:	e79a      	b.n	11dc0 <_vfiprintf_r+0x40>
   11e8a:	4b44      	ldr	r3, [pc, #272]	; (11f9c <_vfiprintf_r+0x21c>)
   11e8c:	6829      	ldr	r1, [r5, #0]
   11e8e:	1ac0      	subs	r0, r0, r3
   11e90:	2301      	movs	r3, #1
   11e92:	4083      	lsls	r3, r0
   11e94:	430b      	orrs	r3, r1
   11e96:	602b      	str	r3, [r5, #0]
   11e98:	4664      	mov	r4, ip
   11e9a:	e7b7      	b.n	11e0c <_vfiprintf_r+0x8c>
   11e9c:	9b05      	ldr	r3, [sp, #20]
   11e9e:	1d18      	adds	r0, r3, #4
   11ea0:	681b      	ldr	r3, [r3, #0]
   11ea2:	9005      	str	r0, [sp, #20]
   11ea4:	2b00      	cmp	r3, #0
   11ea6:	db3a      	blt.n	11f1e <_vfiprintf_r+0x19e>
   11ea8:	9309      	str	r3, [sp, #36]	; 0x24
   11eaa:	4664      	mov	r4, ip
   11eac:	7823      	ldrb	r3, [r4, #0]
   11eae:	2b2e      	cmp	r3, #46	; 0x2e
   11eb0:	d10b      	bne.n	11eca <_vfiprintf_r+0x14a>
   11eb2:	7863      	ldrb	r3, [r4, #1]
   11eb4:	1c62      	adds	r2, r4, #1
   11eb6:	2b2a      	cmp	r3, #42	; 0x2a
   11eb8:	d13f      	bne.n	11f3a <_vfiprintf_r+0x1ba>
   11eba:	9b05      	ldr	r3, [sp, #20]
   11ebc:	3402      	adds	r4, #2
   11ebe:	1d1a      	adds	r2, r3, #4
   11ec0:	681b      	ldr	r3, [r3, #0]
   11ec2:	9205      	str	r2, [sp, #20]
   11ec4:	2b00      	cmp	r3, #0
   11ec6:	db35      	blt.n	11f34 <_vfiprintf_r+0x1b4>
   11ec8:	9307      	str	r3, [sp, #28]
   11eca:	7821      	ldrb	r1, [r4, #0]
   11ecc:	2203      	movs	r2, #3
   11ece:	4836      	ldr	r0, [pc, #216]	; (11fa8 <_vfiprintf_r+0x228>)
   11ed0:	f000 fab6 	bl	12440 <memchr>
   11ed4:	2800      	cmp	r0, #0
   11ed6:	d007      	beq.n	11ee8 <_vfiprintf_r+0x168>
   11ed8:	4b33      	ldr	r3, [pc, #204]	; (11fa8 <_vfiprintf_r+0x228>)
   11eda:	682a      	ldr	r2, [r5, #0]
   11edc:	1ac0      	subs	r0, r0, r3
   11ede:	2340      	movs	r3, #64	; 0x40
   11ee0:	4083      	lsls	r3, r0
   11ee2:	4313      	orrs	r3, r2
   11ee4:	602b      	str	r3, [r5, #0]
   11ee6:	3401      	adds	r4, #1
   11ee8:	7821      	ldrb	r1, [r4, #0]
   11eea:	1c63      	adds	r3, r4, #1
   11eec:	2206      	movs	r2, #6
   11eee:	482f      	ldr	r0, [pc, #188]	; (11fac <_vfiprintf_r+0x22c>)
   11ef0:	9302      	str	r3, [sp, #8]
   11ef2:	7629      	strb	r1, [r5, #24]
   11ef4:	f000 faa4 	bl	12440 <memchr>
   11ef8:	2800      	cmp	r0, #0
   11efa:	d044      	beq.n	11f86 <_vfiprintf_r+0x206>
   11efc:	4b2c      	ldr	r3, [pc, #176]	; (11fb0 <_vfiprintf_r+0x230>)
   11efe:	2b00      	cmp	r3, #0
   11f00:	d12f      	bne.n	11f62 <_vfiprintf_r+0x1e2>
   11f02:	6829      	ldr	r1, [r5, #0]
   11f04:	9b05      	ldr	r3, [sp, #20]
   11f06:	2207      	movs	r2, #7
   11f08:	05c9      	lsls	r1, r1, #23
   11f0a:	d528      	bpl.n	11f5e <_vfiprintf_r+0x1de>
   11f0c:	189b      	adds	r3, r3, r2
   11f0e:	4393      	bics	r3, r2
   11f10:	3308      	adds	r3, #8
   11f12:	9305      	str	r3, [sp, #20]
   11f14:	696b      	ldr	r3, [r5, #20]
   11f16:	9a03      	ldr	r2, [sp, #12]
   11f18:	189b      	adds	r3, r3, r2
   11f1a:	616b      	str	r3, [r5, #20]
   11f1c:	e74f      	b.n	11dbe <_vfiprintf_r+0x3e>
   11f1e:	425b      	negs	r3, r3
   11f20:	60eb      	str	r3, [r5, #12]
   11f22:	2302      	movs	r3, #2
   11f24:	430b      	orrs	r3, r1
   11f26:	602b      	str	r3, [r5, #0]
   11f28:	e7bf      	b.n	11eaa <_vfiprintf_r+0x12a>
   11f2a:	434b      	muls	r3, r1
   11f2c:	3401      	adds	r4, #1
   11f2e:	189b      	adds	r3, r3, r2
   11f30:	2001      	movs	r0, #1
   11f32:	e789      	b.n	11e48 <_vfiprintf_r+0xc8>
   11f34:	2301      	movs	r3, #1
   11f36:	425b      	negs	r3, r3
   11f38:	e7c6      	b.n	11ec8 <_vfiprintf_r+0x148>
   11f3a:	2300      	movs	r3, #0
   11f3c:	0014      	movs	r4, r2
   11f3e:	200a      	movs	r0, #10
   11f40:	001a      	movs	r2, r3
   11f42:	606b      	str	r3, [r5, #4]
   11f44:	7821      	ldrb	r1, [r4, #0]
   11f46:	3930      	subs	r1, #48	; 0x30
   11f48:	2909      	cmp	r1, #9
   11f4a:	d903      	bls.n	11f54 <_vfiprintf_r+0x1d4>
   11f4c:	2b00      	cmp	r3, #0
   11f4e:	d0bc      	beq.n	11eca <_vfiprintf_r+0x14a>
   11f50:	9207      	str	r2, [sp, #28]
   11f52:	e7ba      	b.n	11eca <_vfiprintf_r+0x14a>
   11f54:	4342      	muls	r2, r0
   11f56:	3401      	adds	r4, #1
   11f58:	1852      	adds	r2, r2, r1
   11f5a:	2301      	movs	r3, #1
   11f5c:	e7f2      	b.n	11f44 <_vfiprintf_r+0x1c4>
   11f5e:	3307      	adds	r3, #7
   11f60:	e7d5      	b.n	11f0e <_vfiprintf_r+0x18e>
   11f62:	ab05      	add	r3, sp, #20
   11f64:	9300      	str	r3, [sp, #0]
   11f66:	003a      	movs	r2, r7
   11f68:	4b12      	ldr	r3, [pc, #72]	; (11fb4 <_vfiprintf_r+0x234>)
   11f6a:	0029      	movs	r1, r5
   11f6c:	0030      	movs	r0, r6
   11f6e:	e000      	b.n	11f72 <_vfiprintf_r+0x1f2>
   11f70:	bf00      	nop
   11f72:	9003      	str	r0, [sp, #12]
   11f74:	9b03      	ldr	r3, [sp, #12]
   11f76:	3301      	adds	r3, #1
   11f78:	d1cc      	bne.n	11f14 <_vfiprintf_r+0x194>
   11f7a:	89bb      	ldrh	r3, [r7, #12]
   11f7c:	065b      	lsls	r3, r3, #25
   11f7e:	d500      	bpl.n	11f82 <_vfiprintf_r+0x202>
   11f80:	e77b      	b.n	11e7a <_vfiprintf_r+0xfa>
   11f82:	980b      	ldr	r0, [sp, #44]	; 0x2c
   11f84:	e77b      	b.n	11e7e <_vfiprintf_r+0xfe>
   11f86:	ab05      	add	r3, sp, #20
   11f88:	9300      	str	r3, [sp, #0]
   11f8a:	003a      	movs	r2, r7
   11f8c:	4b09      	ldr	r3, [pc, #36]	; (11fb4 <_vfiprintf_r+0x234>)
   11f8e:	0029      	movs	r1, r5
   11f90:	0030      	movs	r0, r6
   11f92:	f000 f87f 	bl	12094 <_printf_i>
   11f96:	e7ec      	b.n	11f72 <_vfiprintf_r+0x1f2>
   11f98:	00013150 	.word	0x00013150
   11f9c:	00013190 	.word	0x00013190
   11fa0:	00013170 	.word	0x00013170
   11fa4:	00013130 	.word	0x00013130
   11fa8:	00013196 	.word	0x00013196
   11fac:	0001319a 	.word	0x0001319a
   11fb0:	00000000 	.word	0x00000000
   11fb4:	00011d5b 	.word	0x00011d5b

00011fb8 <_printf_common>:
   11fb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11fba:	0015      	movs	r5, r2
   11fbc:	9301      	str	r3, [sp, #4]
   11fbe:	688a      	ldr	r2, [r1, #8]
   11fc0:	690b      	ldr	r3, [r1, #16]
   11fc2:	9000      	str	r0, [sp, #0]
   11fc4:	000c      	movs	r4, r1
   11fc6:	4293      	cmp	r3, r2
   11fc8:	da00      	bge.n	11fcc <_printf_common+0x14>
   11fca:	0013      	movs	r3, r2
   11fcc:	0022      	movs	r2, r4
   11fce:	602b      	str	r3, [r5, #0]
   11fd0:	3243      	adds	r2, #67	; 0x43
   11fd2:	7812      	ldrb	r2, [r2, #0]
   11fd4:	2a00      	cmp	r2, #0
   11fd6:	d001      	beq.n	11fdc <_printf_common+0x24>
   11fd8:	3301      	adds	r3, #1
   11fda:	602b      	str	r3, [r5, #0]
   11fdc:	6823      	ldr	r3, [r4, #0]
   11fde:	069b      	lsls	r3, r3, #26
   11fe0:	d502      	bpl.n	11fe8 <_printf_common+0x30>
   11fe2:	682b      	ldr	r3, [r5, #0]
   11fe4:	3302      	adds	r3, #2
   11fe6:	602b      	str	r3, [r5, #0]
   11fe8:	2706      	movs	r7, #6
   11fea:	6823      	ldr	r3, [r4, #0]
   11fec:	401f      	ands	r7, r3
   11fee:	d027      	beq.n	12040 <_printf_common+0x88>
   11ff0:	0023      	movs	r3, r4
   11ff2:	3343      	adds	r3, #67	; 0x43
   11ff4:	781b      	ldrb	r3, [r3, #0]
   11ff6:	1e5a      	subs	r2, r3, #1
   11ff8:	4193      	sbcs	r3, r2
   11ffa:	6822      	ldr	r2, [r4, #0]
   11ffc:	0692      	lsls	r2, r2, #26
   11ffe:	d430      	bmi.n	12062 <_printf_common+0xaa>
   12000:	0022      	movs	r2, r4
   12002:	9901      	ldr	r1, [sp, #4]
   12004:	3243      	adds	r2, #67	; 0x43
   12006:	9800      	ldr	r0, [sp, #0]
   12008:	9e08      	ldr	r6, [sp, #32]
   1200a:	47b0      	blx	r6
   1200c:	1c43      	adds	r3, r0, #1
   1200e:	d025      	beq.n	1205c <_printf_common+0xa4>
   12010:	2306      	movs	r3, #6
   12012:	6820      	ldr	r0, [r4, #0]
   12014:	682a      	ldr	r2, [r5, #0]
   12016:	68e1      	ldr	r1, [r4, #12]
   12018:	4003      	ands	r3, r0
   1201a:	2500      	movs	r5, #0
   1201c:	2b04      	cmp	r3, #4
   1201e:	d103      	bne.n	12028 <_printf_common+0x70>
   12020:	1a8d      	subs	r5, r1, r2
   12022:	43eb      	mvns	r3, r5
   12024:	17db      	asrs	r3, r3, #31
   12026:	401d      	ands	r5, r3
   12028:	68a3      	ldr	r3, [r4, #8]
   1202a:	6922      	ldr	r2, [r4, #16]
   1202c:	4293      	cmp	r3, r2
   1202e:	dd01      	ble.n	12034 <_printf_common+0x7c>
   12030:	1a9b      	subs	r3, r3, r2
   12032:	18ed      	adds	r5, r5, r3
   12034:	2700      	movs	r7, #0
   12036:	42bd      	cmp	r5, r7
   12038:	d120      	bne.n	1207c <_printf_common+0xc4>
   1203a:	2000      	movs	r0, #0
   1203c:	e010      	b.n	12060 <_printf_common+0xa8>
   1203e:	3701      	adds	r7, #1
   12040:	68e3      	ldr	r3, [r4, #12]
   12042:	682a      	ldr	r2, [r5, #0]
   12044:	1a9b      	subs	r3, r3, r2
   12046:	429f      	cmp	r7, r3
   12048:	dad2      	bge.n	11ff0 <_printf_common+0x38>
   1204a:	0022      	movs	r2, r4
   1204c:	2301      	movs	r3, #1
   1204e:	3219      	adds	r2, #25
   12050:	9901      	ldr	r1, [sp, #4]
   12052:	9800      	ldr	r0, [sp, #0]
   12054:	9e08      	ldr	r6, [sp, #32]
   12056:	47b0      	blx	r6
   12058:	1c43      	adds	r3, r0, #1
   1205a:	d1f0      	bne.n	1203e <_printf_common+0x86>
   1205c:	2001      	movs	r0, #1
   1205e:	4240      	negs	r0, r0
   12060:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   12062:	2030      	movs	r0, #48	; 0x30
   12064:	18e1      	adds	r1, r4, r3
   12066:	3143      	adds	r1, #67	; 0x43
   12068:	7008      	strb	r0, [r1, #0]
   1206a:	0021      	movs	r1, r4
   1206c:	1c5a      	adds	r2, r3, #1
   1206e:	3145      	adds	r1, #69	; 0x45
   12070:	7809      	ldrb	r1, [r1, #0]
   12072:	18a2      	adds	r2, r4, r2
   12074:	3243      	adds	r2, #67	; 0x43
   12076:	3302      	adds	r3, #2
   12078:	7011      	strb	r1, [r2, #0]
   1207a:	e7c1      	b.n	12000 <_printf_common+0x48>
   1207c:	0022      	movs	r2, r4
   1207e:	2301      	movs	r3, #1
   12080:	321a      	adds	r2, #26
   12082:	9901      	ldr	r1, [sp, #4]
   12084:	9800      	ldr	r0, [sp, #0]
   12086:	9e08      	ldr	r6, [sp, #32]
   12088:	47b0      	blx	r6
   1208a:	1c43      	adds	r3, r0, #1
   1208c:	d0e6      	beq.n	1205c <_printf_common+0xa4>
   1208e:	3701      	adds	r7, #1
   12090:	e7d1      	b.n	12036 <_printf_common+0x7e>
	...

00012094 <_printf_i>:
   12094:	b5f0      	push	{r4, r5, r6, r7, lr}
   12096:	b08b      	sub	sp, #44	; 0x2c
   12098:	9206      	str	r2, [sp, #24]
   1209a:	000a      	movs	r2, r1
   1209c:	3243      	adds	r2, #67	; 0x43
   1209e:	9307      	str	r3, [sp, #28]
   120a0:	9005      	str	r0, [sp, #20]
   120a2:	9204      	str	r2, [sp, #16]
   120a4:	7e0a      	ldrb	r2, [r1, #24]
   120a6:	000c      	movs	r4, r1
   120a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   120aa:	2a6e      	cmp	r2, #110	; 0x6e
   120ac:	d100      	bne.n	120b0 <_printf_i+0x1c>
   120ae:	e08f      	b.n	121d0 <_printf_i+0x13c>
   120b0:	d817      	bhi.n	120e2 <_printf_i+0x4e>
   120b2:	2a63      	cmp	r2, #99	; 0x63
   120b4:	d02c      	beq.n	12110 <_printf_i+0x7c>
   120b6:	d808      	bhi.n	120ca <_printf_i+0x36>
   120b8:	2a00      	cmp	r2, #0
   120ba:	d100      	bne.n	120be <_printf_i+0x2a>
   120bc:	e099      	b.n	121f2 <_printf_i+0x15e>
   120be:	2a58      	cmp	r2, #88	; 0x58
   120c0:	d054      	beq.n	1216c <_printf_i+0xd8>
   120c2:	0026      	movs	r6, r4
   120c4:	3642      	adds	r6, #66	; 0x42
   120c6:	7032      	strb	r2, [r6, #0]
   120c8:	e029      	b.n	1211e <_printf_i+0x8a>
   120ca:	2a64      	cmp	r2, #100	; 0x64
   120cc:	d001      	beq.n	120d2 <_printf_i+0x3e>
   120ce:	2a69      	cmp	r2, #105	; 0x69
   120d0:	d1f7      	bne.n	120c2 <_printf_i+0x2e>
   120d2:	6821      	ldr	r1, [r4, #0]
   120d4:	681a      	ldr	r2, [r3, #0]
   120d6:	0608      	lsls	r0, r1, #24
   120d8:	d523      	bpl.n	12122 <_printf_i+0x8e>
   120da:	1d11      	adds	r1, r2, #4
   120dc:	6019      	str	r1, [r3, #0]
   120de:	6815      	ldr	r5, [r2, #0]
   120e0:	e025      	b.n	1212e <_printf_i+0x9a>
   120e2:	2a73      	cmp	r2, #115	; 0x73
   120e4:	d100      	bne.n	120e8 <_printf_i+0x54>
   120e6:	e088      	b.n	121fa <_printf_i+0x166>
   120e8:	d808      	bhi.n	120fc <_printf_i+0x68>
   120ea:	2a6f      	cmp	r2, #111	; 0x6f
   120ec:	d029      	beq.n	12142 <_printf_i+0xae>
   120ee:	2a70      	cmp	r2, #112	; 0x70
   120f0:	d1e7      	bne.n	120c2 <_printf_i+0x2e>
   120f2:	2220      	movs	r2, #32
   120f4:	6809      	ldr	r1, [r1, #0]
   120f6:	430a      	orrs	r2, r1
   120f8:	6022      	str	r2, [r4, #0]
   120fa:	e003      	b.n	12104 <_printf_i+0x70>
   120fc:	2a75      	cmp	r2, #117	; 0x75
   120fe:	d020      	beq.n	12142 <_printf_i+0xae>
   12100:	2a78      	cmp	r2, #120	; 0x78
   12102:	d1de      	bne.n	120c2 <_printf_i+0x2e>
   12104:	0022      	movs	r2, r4
   12106:	2178      	movs	r1, #120	; 0x78
   12108:	3245      	adds	r2, #69	; 0x45
   1210a:	7011      	strb	r1, [r2, #0]
   1210c:	4a6c      	ldr	r2, [pc, #432]	; (122c0 <_printf_i+0x22c>)
   1210e:	e030      	b.n	12172 <_printf_i+0xde>
   12110:	000e      	movs	r6, r1
   12112:	681a      	ldr	r2, [r3, #0]
   12114:	3642      	adds	r6, #66	; 0x42
   12116:	1d11      	adds	r1, r2, #4
   12118:	6019      	str	r1, [r3, #0]
   1211a:	6813      	ldr	r3, [r2, #0]
   1211c:	7033      	strb	r3, [r6, #0]
   1211e:	2301      	movs	r3, #1
   12120:	e079      	b.n	12216 <_printf_i+0x182>
   12122:	0649      	lsls	r1, r1, #25
   12124:	d5d9      	bpl.n	120da <_printf_i+0x46>
   12126:	1d11      	adds	r1, r2, #4
   12128:	6019      	str	r1, [r3, #0]
   1212a:	2300      	movs	r3, #0
   1212c:	5ed5      	ldrsh	r5, [r2, r3]
   1212e:	2d00      	cmp	r5, #0
   12130:	da03      	bge.n	1213a <_printf_i+0xa6>
   12132:	232d      	movs	r3, #45	; 0x2d
   12134:	9a04      	ldr	r2, [sp, #16]
   12136:	426d      	negs	r5, r5
   12138:	7013      	strb	r3, [r2, #0]
   1213a:	4b62      	ldr	r3, [pc, #392]	; (122c4 <_printf_i+0x230>)
   1213c:	270a      	movs	r7, #10
   1213e:	9303      	str	r3, [sp, #12]
   12140:	e02f      	b.n	121a2 <_printf_i+0x10e>
   12142:	6820      	ldr	r0, [r4, #0]
   12144:	6819      	ldr	r1, [r3, #0]
   12146:	0605      	lsls	r5, r0, #24
   12148:	d503      	bpl.n	12152 <_printf_i+0xbe>
   1214a:	1d08      	adds	r0, r1, #4
   1214c:	6018      	str	r0, [r3, #0]
   1214e:	680d      	ldr	r5, [r1, #0]
   12150:	e005      	b.n	1215e <_printf_i+0xca>
   12152:	0640      	lsls	r0, r0, #25
   12154:	d5f9      	bpl.n	1214a <_printf_i+0xb6>
   12156:	680d      	ldr	r5, [r1, #0]
   12158:	1d08      	adds	r0, r1, #4
   1215a:	6018      	str	r0, [r3, #0]
   1215c:	b2ad      	uxth	r5, r5
   1215e:	4b59      	ldr	r3, [pc, #356]	; (122c4 <_printf_i+0x230>)
   12160:	2708      	movs	r7, #8
   12162:	9303      	str	r3, [sp, #12]
   12164:	2a6f      	cmp	r2, #111	; 0x6f
   12166:	d018      	beq.n	1219a <_printf_i+0x106>
   12168:	270a      	movs	r7, #10
   1216a:	e016      	b.n	1219a <_printf_i+0x106>
   1216c:	3145      	adds	r1, #69	; 0x45
   1216e:	700a      	strb	r2, [r1, #0]
   12170:	4a54      	ldr	r2, [pc, #336]	; (122c4 <_printf_i+0x230>)
   12172:	9203      	str	r2, [sp, #12]
   12174:	681a      	ldr	r2, [r3, #0]
   12176:	6821      	ldr	r1, [r4, #0]
   12178:	1d10      	adds	r0, r2, #4
   1217a:	6018      	str	r0, [r3, #0]
   1217c:	6815      	ldr	r5, [r2, #0]
   1217e:	0608      	lsls	r0, r1, #24
   12180:	d522      	bpl.n	121c8 <_printf_i+0x134>
   12182:	07cb      	lsls	r3, r1, #31
   12184:	d502      	bpl.n	1218c <_printf_i+0xf8>
   12186:	2320      	movs	r3, #32
   12188:	4319      	orrs	r1, r3
   1218a:	6021      	str	r1, [r4, #0]
   1218c:	2710      	movs	r7, #16
   1218e:	2d00      	cmp	r5, #0
   12190:	d103      	bne.n	1219a <_printf_i+0x106>
   12192:	2320      	movs	r3, #32
   12194:	6822      	ldr	r2, [r4, #0]
   12196:	439a      	bics	r2, r3
   12198:	6022      	str	r2, [r4, #0]
   1219a:	0023      	movs	r3, r4
   1219c:	2200      	movs	r2, #0
   1219e:	3343      	adds	r3, #67	; 0x43
   121a0:	701a      	strb	r2, [r3, #0]
   121a2:	6863      	ldr	r3, [r4, #4]
   121a4:	60a3      	str	r3, [r4, #8]
   121a6:	2b00      	cmp	r3, #0
   121a8:	db5c      	blt.n	12264 <_printf_i+0x1d0>
   121aa:	2204      	movs	r2, #4
   121ac:	6821      	ldr	r1, [r4, #0]
   121ae:	4391      	bics	r1, r2
   121b0:	6021      	str	r1, [r4, #0]
   121b2:	2d00      	cmp	r5, #0
   121b4:	d158      	bne.n	12268 <_printf_i+0x1d4>
   121b6:	9e04      	ldr	r6, [sp, #16]
   121b8:	2b00      	cmp	r3, #0
   121ba:	d064      	beq.n	12286 <_printf_i+0x1f2>
   121bc:	0026      	movs	r6, r4
   121be:	9b03      	ldr	r3, [sp, #12]
   121c0:	3642      	adds	r6, #66	; 0x42
   121c2:	781b      	ldrb	r3, [r3, #0]
   121c4:	7033      	strb	r3, [r6, #0]
   121c6:	e05e      	b.n	12286 <_printf_i+0x1f2>
   121c8:	0648      	lsls	r0, r1, #25
   121ca:	d5da      	bpl.n	12182 <_printf_i+0xee>
   121cc:	b2ad      	uxth	r5, r5
   121ce:	e7d8      	b.n	12182 <_printf_i+0xee>
   121d0:	6809      	ldr	r1, [r1, #0]
   121d2:	681a      	ldr	r2, [r3, #0]
   121d4:	0608      	lsls	r0, r1, #24
   121d6:	d505      	bpl.n	121e4 <_printf_i+0x150>
   121d8:	1d11      	adds	r1, r2, #4
   121da:	6019      	str	r1, [r3, #0]
   121dc:	6813      	ldr	r3, [r2, #0]
   121de:	6962      	ldr	r2, [r4, #20]
   121e0:	601a      	str	r2, [r3, #0]
   121e2:	e006      	b.n	121f2 <_printf_i+0x15e>
   121e4:	0649      	lsls	r1, r1, #25
   121e6:	d5f7      	bpl.n	121d8 <_printf_i+0x144>
   121e8:	1d11      	adds	r1, r2, #4
   121ea:	6019      	str	r1, [r3, #0]
   121ec:	6813      	ldr	r3, [r2, #0]
   121ee:	8aa2      	ldrh	r2, [r4, #20]
   121f0:	801a      	strh	r2, [r3, #0]
   121f2:	2300      	movs	r3, #0
   121f4:	9e04      	ldr	r6, [sp, #16]
   121f6:	6123      	str	r3, [r4, #16]
   121f8:	e054      	b.n	122a4 <_printf_i+0x210>
   121fa:	681a      	ldr	r2, [r3, #0]
   121fc:	1d11      	adds	r1, r2, #4
   121fe:	6019      	str	r1, [r3, #0]
   12200:	6816      	ldr	r6, [r2, #0]
   12202:	2100      	movs	r1, #0
   12204:	6862      	ldr	r2, [r4, #4]
   12206:	0030      	movs	r0, r6
   12208:	f000 f91a 	bl	12440 <memchr>
   1220c:	2800      	cmp	r0, #0
   1220e:	d001      	beq.n	12214 <_printf_i+0x180>
   12210:	1b80      	subs	r0, r0, r6
   12212:	6060      	str	r0, [r4, #4]
   12214:	6863      	ldr	r3, [r4, #4]
   12216:	6123      	str	r3, [r4, #16]
   12218:	2300      	movs	r3, #0
   1221a:	9a04      	ldr	r2, [sp, #16]
   1221c:	7013      	strb	r3, [r2, #0]
   1221e:	e041      	b.n	122a4 <_printf_i+0x210>
   12220:	6923      	ldr	r3, [r4, #16]
   12222:	0032      	movs	r2, r6
   12224:	9906      	ldr	r1, [sp, #24]
   12226:	9805      	ldr	r0, [sp, #20]
   12228:	9d07      	ldr	r5, [sp, #28]
   1222a:	47a8      	blx	r5
   1222c:	1c43      	adds	r3, r0, #1
   1222e:	d043      	beq.n	122b8 <_printf_i+0x224>
   12230:	6823      	ldr	r3, [r4, #0]
   12232:	2500      	movs	r5, #0
   12234:	079b      	lsls	r3, r3, #30
   12236:	d40f      	bmi.n	12258 <_printf_i+0x1c4>
   12238:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1223a:	68e0      	ldr	r0, [r4, #12]
   1223c:	4298      	cmp	r0, r3
   1223e:	da3d      	bge.n	122bc <_printf_i+0x228>
   12240:	0018      	movs	r0, r3
   12242:	e03b      	b.n	122bc <_printf_i+0x228>
   12244:	0022      	movs	r2, r4
   12246:	2301      	movs	r3, #1
   12248:	3219      	adds	r2, #25
   1224a:	9906      	ldr	r1, [sp, #24]
   1224c:	9805      	ldr	r0, [sp, #20]
   1224e:	9e07      	ldr	r6, [sp, #28]
   12250:	47b0      	blx	r6
   12252:	1c43      	adds	r3, r0, #1
   12254:	d030      	beq.n	122b8 <_printf_i+0x224>
   12256:	3501      	adds	r5, #1
   12258:	68e3      	ldr	r3, [r4, #12]
   1225a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1225c:	1a9b      	subs	r3, r3, r2
   1225e:	429d      	cmp	r5, r3
   12260:	dbf0      	blt.n	12244 <_printf_i+0x1b0>
   12262:	e7e9      	b.n	12238 <_printf_i+0x1a4>
   12264:	2d00      	cmp	r5, #0
   12266:	d0a9      	beq.n	121bc <_printf_i+0x128>
   12268:	9e04      	ldr	r6, [sp, #16]
   1226a:	0028      	movs	r0, r5
   1226c:	0039      	movs	r1, r7
   1226e:	f7fc fed3 	bl	f018 <__aeabi_uidivmod>
   12272:	9b03      	ldr	r3, [sp, #12]
   12274:	3e01      	subs	r6, #1
   12276:	5c5b      	ldrb	r3, [r3, r1]
   12278:	0028      	movs	r0, r5
   1227a:	7033      	strb	r3, [r6, #0]
   1227c:	0039      	movs	r1, r7
   1227e:	f7fc fe45 	bl	ef0c <__udivsi3>
   12282:	1e05      	subs	r5, r0, #0
   12284:	d1f1      	bne.n	1226a <_printf_i+0x1d6>
   12286:	2f08      	cmp	r7, #8
   12288:	d109      	bne.n	1229e <_printf_i+0x20a>
   1228a:	6823      	ldr	r3, [r4, #0]
   1228c:	07db      	lsls	r3, r3, #31
   1228e:	d506      	bpl.n	1229e <_printf_i+0x20a>
   12290:	6863      	ldr	r3, [r4, #4]
   12292:	6922      	ldr	r2, [r4, #16]
   12294:	4293      	cmp	r3, r2
   12296:	dc02      	bgt.n	1229e <_printf_i+0x20a>
   12298:	2330      	movs	r3, #48	; 0x30
   1229a:	3e01      	subs	r6, #1
   1229c:	7033      	strb	r3, [r6, #0]
   1229e:	9b04      	ldr	r3, [sp, #16]
   122a0:	1b9b      	subs	r3, r3, r6
   122a2:	6123      	str	r3, [r4, #16]
   122a4:	9b07      	ldr	r3, [sp, #28]
   122a6:	aa09      	add	r2, sp, #36	; 0x24
   122a8:	9300      	str	r3, [sp, #0]
   122aa:	0021      	movs	r1, r4
   122ac:	9b06      	ldr	r3, [sp, #24]
   122ae:	9805      	ldr	r0, [sp, #20]
   122b0:	f7ff fe82 	bl	11fb8 <_printf_common>
   122b4:	1c43      	adds	r3, r0, #1
   122b6:	d1b3      	bne.n	12220 <_printf_i+0x18c>
   122b8:	2001      	movs	r0, #1
   122ba:	4240      	negs	r0, r0
   122bc:	b00b      	add	sp, #44	; 0x2c
   122be:	bdf0      	pop	{r4, r5, r6, r7, pc}
   122c0:	000131b2 	.word	0x000131b2
   122c4:	000131a1 	.word	0x000131a1

000122c8 <_sbrk_r>:
   122c8:	2300      	movs	r3, #0
   122ca:	b570      	push	{r4, r5, r6, lr}
   122cc:	4c06      	ldr	r4, [pc, #24]	; (122e8 <_sbrk_r+0x20>)
   122ce:	0005      	movs	r5, r0
   122d0:	0008      	movs	r0, r1
   122d2:	6023      	str	r3, [r4, #0]
   122d4:	f7f6 fcaa 	bl	8c2c <_sbrk>
   122d8:	1c43      	adds	r3, r0, #1
   122da:	d103      	bne.n	122e4 <_sbrk_r+0x1c>
   122dc:	6823      	ldr	r3, [r4, #0]
   122de:	2b00      	cmp	r3, #0
   122e0:	d000      	beq.n	122e4 <_sbrk_r+0x1c>
   122e2:	602b      	str	r3, [r5, #0]
   122e4:	bd70      	pop	{r4, r5, r6, pc}
   122e6:	46c0      	nop			; (mov r8, r8)
   122e8:	2000126c 	.word	0x2000126c

000122ec <__sread>:
   122ec:	b570      	push	{r4, r5, r6, lr}
   122ee:	000c      	movs	r4, r1
   122f0:	250e      	movs	r5, #14
   122f2:	5f49      	ldrsh	r1, [r1, r5]
   122f4:	f000 f8b2 	bl	1245c <_read_r>
   122f8:	2800      	cmp	r0, #0
   122fa:	db03      	blt.n	12304 <__sread+0x18>
   122fc:	6d63      	ldr	r3, [r4, #84]	; 0x54
   122fe:	181b      	adds	r3, r3, r0
   12300:	6563      	str	r3, [r4, #84]	; 0x54
   12302:	bd70      	pop	{r4, r5, r6, pc}
   12304:	89a3      	ldrh	r3, [r4, #12]
   12306:	4a02      	ldr	r2, [pc, #8]	; (12310 <__sread+0x24>)
   12308:	4013      	ands	r3, r2
   1230a:	81a3      	strh	r3, [r4, #12]
   1230c:	e7f9      	b.n	12302 <__sread+0x16>
   1230e:	46c0      	nop			; (mov r8, r8)
   12310:	ffffefff 	.word	0xffffefff

00012314 <__swrite>:
   12314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12316:	001f      	movs	r7, r3
   12318:	898b      	ldrh	r3, [r1, #12]
   1231a:	0005      	movs	r5, r0
   1231c:	000c      	movs	r4, r1
   1231e:	0016      	movs	r6, r2
   12320:	05db      	lsls	r3, r3, #23
   12322:	d505      	bpl.n	12330 <__swrite+0x1c>
   12324:	230e      	movs	r3, #14
   12326:	5ec9      	ldrsh	r1, [r1, r3]
   12328:	2200      	movs	r2, #0
   1232a:	2302      	movs	r3, #2
   1232c:	f000 f874 	bl	12418 <_lseek_r>
   12330:	89a3      	ldrh	r3, [r4, #12]
   12332:	4a05      	ldr	r2, [pc, #20]	; (12348 <__swrite+0x34>)
   12334:	0028      	movs	r0, r5
   12336:	4013      	ands	r3, r2
   12338:	81a3      	strh	r3, [r4, #12]
   1233a:	0032      	movs	r2, r6
   1233c:	230e      	movs	r3, #14
   1233e:	5ee1      	ldrsh	r1, [r4, r3]
   12340:	003b      	movs	r3, r7
   12342:	f000 f81f 	bl	12384 <_write_r>
   12346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12348:	ffffefff 	.word	0xffffefff

0001234c <__sseek>:
   1234c:	b570      	push	{r4, r5, r6, lr}
   1234e:	000c      	movs	r4, r1
   12350:	250e      	movs	r5, #14
   12352:	5f49      	ldrsh	r1, [r1, r5]
   12354:	f000 f860 	bl	12418 <_lseek_r>
   12358:	89a3      	ldrh	r3, [r4, #12]
   1235a:	1c42      	adds	r2, r0, #1
   1235c:	d103      	bne.n	12366 <__sseek+0x1a>
   1235e:	4a05      	ldr	r2, [pc, #20]	; (12374 <__sseek+0x28>)
   12360:	4013      	ands	r3, r2
   12362:	81a3      	strh	r3, [r4, #12]
   12364:	bd70      	pop	{r4, r5, r6, pc}
   12366:	2280      	movs	r2, #128	; 0x80
   12368:	0152      	lsls	r2, r2, #5
   1236a:	4313      	orrs	r3, r2
   1236c:	81a3      	strh	r3, [r4, #12]
   1236e:	6560      	str	r0, [r4, #84]	; 0x54
   12370:	e7f8      	b.n	12364 <__sseek+0x18>
   12372:	46c0      	nop			; (mov r8, r8)
   12374:	ffffefff 	.word	0xffffefff

00012378 <__sclose>:
   12378:	b510      	push	{r4, lr}
   1237a:	230e      	movs	r3, #14
   1237c:	5ec9      	ldrsh	r1, [r1, r3]
   1237e:	f000 f815 	bl	123ac <_close_r>
   12382:	bd10      	pop	{r4, pc}

00012384 <_write_r>:
   12384:	b570      	push	{r4, r5, r6, lr}
   12386:	0005      	movs	r5, r0
   12388:	0008      	movs	r0, r1
   1238a:	0011      	movs	r1, r2
   1238c:	2200      	movs	r2, #0
   1238e:	4c06      	ldr	r4, [pc, #24]	; (123a8 <_write_r+0x24>)
   12390:	6022      	str	r2, [r4, #0]
   12392:	001a      	movs	r2, r3
   12394:	f7ee fca6 	bl	ce4 <_write>
   12398:	1c43      	adds	r3, r0, #1
   1239a:	d103      	bne.n	123a4 <_write_r+0x20>
   1239c:	6823      	ldr	r3, [r4, #0]
   1239e:	2b00      	cmp	r3, #0
   123a0:	d000      	beq.n	123a4 <_write_r+0x20>
   123a2:	602b      	str	r3, [r5, #0]
   123a4:	bd70      	pop	{r4, r5, r6, pc}
   123a6:	46c0      	nop			; (mov r8, r8)
   123a8:	2000126c 	.word	0x2000126c

000123ac <_close_r>:
   123ac:	2300      	movs	r3, #0
   123ae:	b570      	push	{r4, r5, r6, lr}
   123b0:	4c06      	ldr	r4, [pc, #24]	; (123cc <_close_r+0x20>)
   123b2:	0005      	movs	r5, r0
   123b4:	0008      	movs	r0, r1
   123b6:	6023      	str	r3, [r4, #0]
   123b8:	f7f6 fc4a 	bl	8c50 <_close>
   123bc:	1c43      	adds	r3, r0, #1
   123be:	d103      	bne.n	123c8 <_close_r+0x1c>
   123c0:	6823      	ldr	r3, [r4, #0]
   123c2:	2b00      	cmp	r3, #0
   123c4:	d000      	beq.n	123c8 <_close_r+0x1c>
   123c6:	602b      	str	r3, [r5, #0]
   123c8:	bd70      	pop	{r4, r5, r6, pc}
   123ca:	46c0      	nop			; (mov r8, r8)
   123cc:	2000126c 	.word	0x2000126c

000123d0 <_fstat_r>:
   123d0:	2300      	movs	r3, #0
   123d2:	b570      	push	{r4, r5, r6, lr}
   123d4:	4c06      	ldr	r4, [pc, #24]	; (123f0 <_fstat_r+0x20>)
   123d6:	0005      	movs	r5, r0
   123d8:	0008      	movs	r0, r1
   123da:	0011      	movs	r1, r2
   123dc:	6023      	str	r3, [r4, #0]
   123de:	f7f6 fc3a 	bl	8c56 <_fstat>
   123e2:	1c43      	adds	r3, r0, #1
   123e4:	d103      	bne.n	123ee <_fstat_r+0x1e>
   123e6:	6823      	ldr	r3, [r4, #0]
   123e8:	2b00      	cmp	r3, #0
   123ea:	d000      	beq.n	123ee <_fstat_r+0x1e>
   123ec:	602b      	str	r3, [r5, #0]
   123ee:	bd70      	pop	{r4, r5, r6, pc}
   123f0:	2000126c 	.word	0x2000126c

000123f4 <_isatty_r>:
   123f4:	2300      	movs	r3, #0
   123f6:	b570      	push	{r4, r5, r6, lr}
   123f8:	4c06      	ldr	r4, [pc, #24]	; (12414 <_isatty_r+0x20>)
   123fa:	0005      	movs	r5, r0
   123fc:	0008      	movs	r0, r1
   123fe:	6023      	str	r3, [r4, #0]
   12400:	f7f6 fc2e 	bl	8c60 <_isatty>
   12404:	1c43      	adds	r3, r0, #1
   12406:	d103      	bne.n	12410 <_isatty_r+0x1c>
   12408:	6823      	ldr	r3, [r4, #0]
   1240a:	2b00      	cmp	r3, #0
   1240c:	d000      	beq.n	12410 <_isatty_r+0x1c>
   1240e:	602b      	str	r3, [r5, #0]
   12410:	bd70      	pop	{r4, r5, r6, pc}
   12412:	46c0      	nop			; (mov r8, r8)
   12414:	2000126c 	.word	0x2000126c

00012418 <_lseek_r>:
   12418:	b570      	push	{r4, r5, r6, lr}
   1241a:	0005      	movs	r5, r0
   1241c:	0008      	movs	r0, r1
   1241e:	0011      	movs	r1, r2
   12420:	2200      	movs	r2, #0
   12422:	4c06      	ldr	r4, [pc, #24]	; (1243c <_lseek_r+0x24>)
   12424:	6022      	str	r2, [r4, #0]
   12426:	001a      	movs	r2, r3
   12428:	f7f6 fc1c 	bl	8c64 <_lseek>
   1242c:	1c43      	adds	r3, r0, #1
   1242e:	d103      	bne.n	12438 <_lseek_r+0x20>
   12430:	6823      	ldr	r3, [r4, #0]
   12432:	2b00      	cmp	r3, #0
   12434:	d000      	beq.n	12438 <_lseek_r+0x20>
   12436:	602b      	str	r3, [r5, #0]
   12438:	bd70      	pop	{r4, r5, r6, pc}
   1243a:	46c0      	nop			; (mov r8, r8)
   1243c:	2000126c 	.word	0x2000126c

00012440 <memchr>:
   12440:	b2c9      	uxtb	r1, r1
   12442:	1882      	adds	r2, r0, r2
   12444:	4290      	cmp	r0, r2
   12446:	d101      	bne.n	1244c <memchr+0xc>
   12448:	2000      	movs	r0, #0
   1244a:	4770      	bx	lr
   1244c:	7803      	ldrb	r3, [r0, #0]
   1244e:	428b      	cmp	r3, r1
   12450:	d0fb      	beq.n	1244a <memchr+0xa>
   12452:	3001      	adds	r0, #1
   12454:	e7f6      	b.n	12444 <memchr+0x4>

00012456 <__malloc_lock>:
   12456:	4770      	bx	lr

00012458 <__malloc_unlock>:
   12458:	4770      	bx	lr
	...

0001245c <_read_r>:
   1245c:	b570      	push	{r4, r5, r6, lr}
   1245e:	0005      	movs	r5, r0
   12460:	0008      	movs	r0, r1
   12462:	0011      	movs	r1, r2
   12464:	2200      	movs	r2, #0
   12466:	4c06      	ldr	r4, [pc, #24]	; (12480 <_read_r+0x24>)
   12468:	6022      	str	r2, [r4, #0]
   1246a:	001a      	movs	r2, r3
   1246c:	f7ee fc18 	bl	ca0 <_read>
   12470:	1c43      	adds	r3, r0, #1
   12472:	d103      	bne.n	1247c <_read_r+0x20>
   12474:	6823      	ldr	r3, [r4, #0]
   12476:	2b00      	cmp	r3, #0
   12478:	d000      	beq.n	1247c <_read_r+0x20>
   1247a:	602b      	str	r3, [r5, #0]
   1247c:	bd70      	pop	{r4, r5, r6, pc}
   1247e:	46c0      	nop			; (mov r8, r8)
   12480:	2000126c 	.word	0x2000126c
   12484:	42000000 	.word	0x42000000
   12488:	42000400 	.word	0x42000400
   1248c:	42000800 	.word	0x42000800
   12490:	42000c00 	.word	0x42000c00
   12494:	42001000 	.word	0x42001000
   12498:	43000400 	.word	0x43000400
   1249c:	000009da 	.word	0x000009da
   124a0:	00000ad0 	.word	0x00000ad0
   124a4:	00000ada 	.word	0x00000ada
   124a8:	00000ae4 	.word	0x00000ae4
   124ac:	00000aee 	.word	0x00000aee
   124b0:	00000b20 	.word	0x00000b20
   124b4:	00000b2a 	.word	0x00000b2a
   124b8:	00000b34 	.word	0x00000b34
   124bc:	00000b3e 	.word	0x00000b3e
   124c0:	00000b48 	.word	0x00000b48
   124c4:	42002000 	.word	0x42002000
   124c8:	42002400 	.word	0x42002400
   124cc:	42002800 	.word	0x42002800
   124d0:	42002c00 	.word	0x42002c00
   124d4:	43000800 	.word	0x43000800
   124d8:	00000002 	.word	0x00000002
   124dc:	00000100 	.word	0x00000100
   124e0:	00000002 	.word	0x00000002
   124e4:	00000200 	.word	0x00000200
   124e8:	00000002 	.word	0x00000002
   124ec:	00000400 	.word	0x00000400
   124f0:	00000002 	.word	0x00000002
   124f4:	00000800 	.word	0x00000800
   124f8:	00000003 	.word	0x00000003
   124fc:	00000004 	.word	0x00000004
   12500:	0000009c 	.word	0x0000009c

00012504 <tc_interrupt_vectors.13444>:
   12504:	14131211 00000015                       ........

0001250c <taskHandlers>:
   1250c:	00001be5 0000de65 0000d45d 00002215     ....e...]...."..
   1251c:	00008e0d                                ....

00012520 <AdvChannels923>:
   12520:	3706ea00 3706ea00 ff100100 3709f740     ...7...7....@..7
   12530:	3709f740 ff100100                       @..7....

00012538 <DefaultChannels923>:
   12538:	50015001                                .P.P

0001253c <DefaultDrParamsAS>:
   1253c:	00330008 01070cdf 0033000a 01070bce     ..3.......3.....
   1254c:	0b33000e 01070ac6 3573001a 010709c2     ..3.......s5....
   1255c:	7df20031 010708be f2f20053 010707bc     1..}....S.......
   1256c:	f2f2003c 010807f1 f2f20008 000a00fe     <...............

0001257c <SubBandDutyCycle923>:
   1257c:	00000064                                d...

00012580 <SubBandParams923>:
   12580:	35c36d80 37502800 00000000              .m.5.(P7....

0001258c <pds_reg_as_item_list>:
   1258c:	20000bb4 00200004 20000bd4 25c00104     ... .. .... ...%
   1259c:	20000b6e ea010204                       n.. ....

000125a4 <DefaultChannels915AU>:
   125a4:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   125b4:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   125c4:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   125d4:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   125e4:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   125f4:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   12604:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   12614:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   12624:	66016601 66016601 66016601 66016601     .f.f.f.f.f.f.f.f

00012634 <DefaultDrParamsAU>:
   12634:	00330008 01070cdf 0033000b 01070bce     ..3.......3.....
   12644:	00330012 01070ac6 0073001c 010709c2     ..3.......s.....
   12654:	00f2003d 010708be 00f20053 010707bc     =.......S.......
   12664:	00f2003d 010908be 00000000 010a0000     =...............
   12674:	00350007 01090c0c 00810005 01090b06     ..5.............
   12684:	00f20007 01090a01 00f2000c 010909fe     ................
   12694:	00f20016 010908fc 00f2002a 010907fc     ........*.......

000126a4 <pds_reg_au_item_list>:
   126a4:	20000c87 00010008 20000be4 06900108     ... ....... ....

000126b4 <AdvChannels433>:
   126b4:	19d1b9d8 19d1b9d8 ff0c0101 19d4c718     ................
   126c4:	19d4c718 ff0c0101 19d7d458 19d7d458     ........X...X...
   126d4:	ff0c0101                                ....

000126d8 <AdvChannels868>:
   126d8:	33be27a0 33be27a0 ff100101 33c134e0     .'.3.'.3.....4.3
   126e8:	33c134e0 ff100101 33c44220 33c44220     .4.3.... B.3 B.3
   126f8:	ff100101                                ....

000126fc <DefaultChannels433>:
   126fc:	50015001 00005001                       .P.P.P..

00012704 <DefaultChannels868>:
   12704:	50015001 00005001                       .P.P.P..

0001270c <DefaultDrparamsEU>:
   1270c:	00330008 01070cdf 0033000b 01070bd3     ..3.......3.....
   1271c:	00330017 01070acc 0073001c 010709c2     ..3.......s.....
   1272c:	00f2003d 010708be 00f20053 010707bc     =.......S.......
   1273c:	00f2003c 010807f1 00f20064 000a00ce     <.......d.......

0001274c <SubBandDutyCycle868>:
   1274c:	006403e8 03e80064 0064000a              ..d.d.....d.

00012758 <SubBandParams433>:
   12758:	19cf0e40 19ea8580 00000000              @...........

00012764 <SubBandParams868>:
   12764:	337055c0 338eda40 00000000 338eda41     .Up3@..3....A..3
   12774:	33bca100 00000000 33bca101 33c5c8c0     ...3.......3...3
   12784:	00000000 33c74f60 33cef080 00000000     ....`O.3...3....
   12794:	33d1fdc0 33d5ce50 00000000 33d691a0     ...3P..3.......3
   127a4:	33db2580 00000000                       .%.3....

000127ac <pds_reg_eu868_fid1_item_list>:
   127ac:	20000bb4 00200003 20000cde 250c0103     ... .. .... ...%

000127bc <pds_reg_eu868_fid2_item_list>:
   127bc:	20000bd4 00c0000b                       ... ....

000127c4 <AdvChannels865>:
   127c4:	338fce64 338fce64 ff1e0100 3394fe84     d..3d..3.......3
   127d4:	3394fe84 ff1e0100 339de1e8 339de1e8     ...3.......3...3
   127e4:	ff1e0100                                ....

000127e8 <DefaultChannels865>:
   127e8:	50015001 00005001                       .P.P.P..

000127f0 <DefaultDrParamsIN>:
   127f0:	00330008 01070cdf 0033000a 01070bce     ..3.......3.....
   12800:	0033000e 01070ac6 0073001a 010709c2     ..3.......s.....
   12810:	00f20031 010708be 00f20053 010707bc     1.......S.......
   12820:	00000000 010a0000 00f20008 000a00fe     ................

00012830 <pds_reg_ind_item_list>:
   12830:	20000bb4 00200006 20000bd4 25c00106     ... .. .... ...%

00012840 <AdvChannels923JP>:
   12840:	3706ea00 3706ea00 ff100100 3709f740     ...7...7....@..7
   12850:	3709f740 ff100100                       @..7....

00012858 <DefaultChannels923JP>:
   12858:	50015001                                .P.P

0001285c <DefaultDrParamsJP>:
   1285c:	00330008 01070cdf 0033000a 01070bce     ..3.......3.....
   1286c:	0b33000e 01070ac6 3573001a 010709c2     ..3.......s5....
   1287c:	7df20031 010708be f2f20053 010707bc     1..}....S.......
   1288c:	f2f2003c 010807f1 f2f20008 000a00fe     <...............

0001289c <SubBandDutyCycleJP923>:
   1289c:	00000064                                d...

000128a0 <SubBandParamsJP923>:
   128a0:	36d61600 37502800 00000000              ...6.(P7....

000128ac <pds_reg_jpn_fid1_item_list>:
   128ac:	20000bb4 00200007 20000bd4 25c00107     ... .. .... ...%

000128bc <AdvChannels920KR>:
   128bc:	36f62120 36f62120 ff0e0100 36f92e60      !.6 !.6....`..6
   128cc:	36f92e60 ff0e0100 36fc3ba0 36fc3ba0     `..6.....;.6.;.6
   128dc:	ff0e0100                                ....

000128e0 <DefaultChannels920KR>:
   128e0:	50015001 00005001                       .P.P.P..

000128e8 <DefaultDrParamsKR>:
   128e8:	00330008 01070cdf 0033000a 01070bce     ..3.......3.....
   128f8:	0033000e 01070ac6 0073001a 010709c2     ..3.......s.....
   12908:	00f20031 010708be 00f20053 010707bc     1.......S.......

00012918 <pds_reg_kr_fid1_item_list>:
   12918:	20000bb4 00200005 20000bd4 25c00105     ... .. .... ...%

00012928 <DefaultChannels915>:
   12928:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   12938:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   12948:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   12958:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   12968:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   12978:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   12988:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   12998:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   129a8:	44014401 44014401 44014401 44014401     .D.D.D.D.D.D.D.D

000129b8 <DefaultDrParamsNA>:
   129b8:	000b0012 01070ac6 00350005 01070906     ..........5.....
   129c8:	007d0007 01070801 00f2000c 010707fe     ..}.............
   129d8:	00f20016 010908fc 00000000 010a0000     ................
   129e8:	00000000 010a0000 00000000 010a0000     ................
   129f8:	00350010 01090cbf 00810007 01090b06     ..5.............
   12a08:	00f20007 01090a01 00f2000c 010909fe     ................
   12a18:	00f20016 010908fc 00f2002a 010907fc     ........*.......

00012a28 <pds_reg_na_item_list>:
   12a28:	20000c87 00010002 20000be4 06900102     ... ....... ....
   12a38:	0000432c 0000432c 0000432c 0000432c     ,C..,C..,C..,C..
   12a48:	00004392 000043f8 000043aa 00004392     .C...C...C...C..
   12a58:	000083c2 000083c2 0000839e 000083c2     ................
   12a68:	0000839e 00008384 00008384 000083c2     ................
   12a78:	000083c2 000083c2 000083c2 000083c2     ................
   12a88:	000083c2 000083c2 000083c2 000083c2     ................
   12a98:	000083c2 000083c2 000083c2 000083c2     ................
   12aa8:	000083c2 000083c2 000083c2 000083c2     ................
   12ab8:	000083c2 000083c2 0000839e 000083c2     ................
   12ac8:	0000839e 000083c2 000083c2 000083c2     ................
   12ad8:	000083c2 000083c2 000083c2 000083c2     ................
   12ae8:	000083c2 000083c2 000083c2 000083c2     ................
   12af8:	000083c2 000083c2 000083c2 000083c2     ................
   12b08:	000083c2 000083c2 000083c2 000083c2     ................
   12b18:	000083c2 000083c2 000083c2 000083c2     ................
   12b28:	000083c2 000083c2 000083c2 000083c2     ................
   12b38:	000083c2 000083c2 000083c2 000083c2     ................
   12b48:	000083c2 000083c2 000083c2 000083c2     ................
   12b58:	0000839e 0000839e 000083a6 000083a6     ................
   12b68:	000083a6 000083a6 000086d6 000086d2     ................
   12b78:	000086d2 00008738 00008738 000086ec     ....8...8.......
   12b88:	000086dc 000086f2 00008726 00009018     ........&.......
   12b98:	0000907c 00009084 0000908c 00009094     |...............
   12ba8:	0000909c 000090a4 000090ac 000090bc     ................
   12bb8:	000090bc 000090b4 74747542 70206e6f     ........Button p
   12bc8:	73736572 25206465 69742064 0d73656d     ressed %d times.
   12bd8:	0000000a 50203e3e 6f6c7961 72206461     ....>> Payload r
   12be8:	69656365 3a646576 00000020 49535352     eceived: ...RSSI
   12bf8:	6c615620 203a6575 0a0d6425 00000000      Value: %d......
   12c08:	20524e53 756c6156 25203a65 00000064     SNR Value: %d...
   12c18:	2a2a0a0d 2a2a2a2a 2a2a2a2a 2a2a2a2a     ..**************
   12c28:	2a2a2a2a 00000d2a 41520d0a 5f4f4944     *****.....RADIO_
   12c38:	445f4f4e 20415441 00000d0a 41520d0a     NO_DATA ......RA
   12c48:	5f4f4944 41544144 5a49535f 0d0a2045     DIO_DATA_SIZE ..
   12c58:	00000000 41520d0a 5f4f4944 41564e49     ......RADIO_INVA
   12c68:	5f44494c 20514552 00000d0a 41520d0a     LID_REQ ......RA
   12c78:	5f4f4944 59535542 000d0a20 41520d0a     DIO_BUSY .....RA
   12c88:	5f4f4944 5f54554f 525f464f 45474e41     DIO_OUT_OF_RANGE
   12c98:	000d0a20 41520d0a 5f4f4944 55534e55      .....RADIO_UNSU
   12ca8:	524f5050 5f444554 52545441 000d0a20     PPORTED_ATTR ...
   12cb8:	41520d0a 5f4f4944 4e414843 5f4c454e     ..RADIO_CHANNEL_
   12cc8:	59535542 000d0a20 4e490d0a 494c4156     BUSY .....INVALI
   12cd8:	41505f44 454d4152 20524554 00000d0a     D_PARAMETER ....
   12ce8:	4e4b4e55 204e574f 4f525245 64252052     UNKNOWN ERROR %d
   12cf8:	00000a0d 6e617254 73696d73 6e6f6973     ....Transmission
   12d08:	63757320 73736563 0000000d 41520a0d      success......RA
   12d18:	5f4f4944 445f4f4e 0d415441 00000000     DIO_NO_DATA.....
   12d28:	41520a0d 5f4f4944 59535542 0000000d     ..RADIO_BUSY....
   12d38:	2043414d 73756150 6c252065 000a0d64     MAC Pause %ld...
   12d48:	666e6f43 72756769 20676e69 69646152     Configuring Radi
   12d58:	754f206f 74757074 776f5020 25207265     o Output Power %
   12d68:	000a0d64 666e6f43 72756769 20676e69     d...Configuring 
   12d78:	69646152 4653206f 0d642520 0000000a     Radio SF %d.....
   12d88:	666e6f43 72756769 20676e69 69646152     Configuring Radi
   12d98:	6157206f 20686374 20676f44 656d6954     o Watch Dog Time
   12da8:	2074756f 0d646c25 0000000a 00007830     out %ld.....0x..
   12db8:	78323025 00000000 2d2d0a0d 53544120     %02x......-- ATS
   12dc8:	33524d41 6f4c2034 50206152 53205032     AMR34 LoRa P2P S
   12dd8:	6c706d69 70412065 63696c70 6f697461     imple Applicatio
   12de8:	2d2d206e 0000000d 7250202d 20737365     n --....- Press 
   12df8:	20305753 74747562 74206e6f 7274206f     SW0 button to tr
   12e08:	6d736e61 63207469 746e756f 76207265     ansmit counter v
   12e18:	65756c61 64255b20 000a0d5d 7954202d     alue [%d]...- Ty
   12e28:	61206570 6320796e 61726168 72657463     pe any character
   12e38:	206f7420 6e617274 74696d73 65766f20      to transmit ove
   12e48:	6f4c2072 52206152 6f696461 0000000d     r LoRa Radio....
   12e58:	69646152 6e69206f 63655220 65766965     Radio in Receive
   12e68:	646f6d20 00000d65 69646152 7845206f      mode...Radio Ex
   12e78:	52207469 69656365 6d206576 0d65646f     it Receive mode.
   12e88:	00000000 6172545b 696d736e 70552074     ....[Transmit Up
   12e98:	6b6e696c 0000205d 69646152 7254206f     link] ..Radio Tr
   12ea8:	6d736e61 53207469 65636375 0d207373     ansmit Success .
   12eb8:	00000000 69646152 7562206f 0d207973     ....Radio busy .
	...

00012ec9 <FskSyncWordBuff>:
   12ec9:	01c194c1                                         ...

00012ecc <macEndDevCmdReplyLen>:
   12ecc:	02010201 01010203 0c0a0802                       .........

00012ed5 <maxEIRPTable>:
   12ed5:	0d0c0a08 1412100e 1b1a1815 24211e1d     ..............!$
   12ee5:	da000000                                         ...

00012ee8 <pds_mac_fid1_item_list>:
   12ee8:	20000fda 00010000 20000fd8 06010100     ... ....... ....
   12ef8:	20000f6c 0c040200 20000fdb 15010300     l.. ....... ....
   12f08:	20000fdc 1b040400 2000102c 24040500     ... ....,.. ...$
   12f18:	20001008 2d040600 2000101c 36100700     ... ...-... ...6
   12f28:	2000100c 4b100800 20000ff6 60040900     ... ...K... ...`
   12f38:	20000fc5 69010b00 20000f74 6f020a00     ... ...it.. ...o
   12f48:	20000fac 76020c00 20000fae 7d020d00     ... ...v... ...}
   12f58:	20000fb0 84020e00 20000fb2 8b020f00     ... ....... ....
   12f68:	20000fb4 92021000 20000fb6 99021100     ... ....... ....
   12f78:	20000fb8 a0011200 20000fb9 a6011300     ... ....... ....
   12f88:	20000fbe b2011500 20000fbd ac011400     ... ....... ....
   12f98:	20000f64 b8041600                       d.. ....

00012fa0 <pds_mac_fid2_item_list>:
   12fa0:	20000f5a 00050001 20000fd2 0a010101     Z.. ....... ....
   12fb0:	20000f10 10010201 20000f11 16040301     ... ....... ....
   12fc0:	20000f15 1f100401 20000f25 34100501     ... ....%.. ...4
   12fd0:	20000f35 49100601 20000f45 5e080701     5.. ...IE.. ...^
   12fe0:	20000f4d 6b080801 20000fba 78020901     M.. ...k... ...x
   12ff0:	20000f68 7f040a01 20000f60 88040b01     h.. ....`.. ....
   13000:	20000fc3 91010c01                       ... ....

00013008 <lorawanHandlers>:
   13008:	0000d341 0000d255 0000d3e5 000000fd     A...U...........

00013018 <radioTaskHandlers>:
   13018:	0000e985 0000ea85 0000e5a9 0000e105     ................
   13028:	0000ed7d 0000f9a0 0000f970 0000f982     }.......p.......
   13038:	0000f8c4 0000f982 0000f966 0000f982     ........f.......
   13048:	0000f8c4 0000f970 0000f970 0000f966     ....p...p...f...
   13058:	0000f8c4 0000f8cc 0000f8cc 0000f8cc     ................
   13068:	0000f988 0000f970 0000f970 0000f944     ....p...p...D...
   13078:	0000fa28 0000f944 0000f966 0000f944     (...D...f...D...
   13088:	0000fa28 0000f970 0000f970 0000f966     (...p...p...f...
   13098:	0000fa28 0000f8cc 0000f8cc 0000f8cc     (...............
   130a8:	0000fa32 0000fd20 0000fc70 0000fc70     2... ...p...p...
   130b8:	0000fc6e 0000fd12 0000fd12 0000fd08     n...............
   130c8:	0000fc6e 0000fd12 0000fd08 0000fd12     n...............
   130d8:	0000fc6e 0000fd18 0000fd18 0000fd18     n...............
   130e8:	0000fda8 000104c8 00010388 00010388     ................
   130f8:	00010384 000104a0 000104a0 00010492     ................
   13108:	00010384 000104a0 00010492 000104a0     ................
   13118:	00010384 000104a8 000104a8 000104a8     ................
   13128:	000106ac                                ....

0001312c <_global_impure_ptr>:
   1312c:	20000010                                ... 

00013130 <__sf_fake_stderr>:
	...

00013150 <__sf_fake_stdin>:
	...

00013170 <__sf_fake_stdout>:
	...
   13190:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
   131a0:	32313000 36353433 41393837 45444342     .0123456789ABCDE
   131b0:	31300046 35343332 39383736 64636261     F.0123456789abcd
   131c0:	00006665                                ef..

000131c4 <_init>:
   131c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   131c6:	46c0      	nop			; (mov r8, r8)
   131c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   131ca:	bc08      	pop	{r3}
   131cc:	469e      	mov	lr, r3
   131ce:	4770      	bx	lr

000131d0 <__init_array_start>:
   131d0:	000000dd 	.word	0x000000dd

000131d4 <_fini>:
   131d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   131d6:	46c0      	nop			; (mov r8, r8)
   131d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   131da:	bc08      	pop	{r3}
   131dc:	469e      	mov	lr, r3
   131de:	4770      	bx	lr

000131e0 <__fini_array_start>:
   131e0:	000000b5 	.word	0x000000b5
